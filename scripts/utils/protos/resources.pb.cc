// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deepvariant/protos/resources.proto

#include "deepvariant/protos/resources.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace learning {
namespace genomics {
namespace deepvariant {
class ResourceMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceMetrics> _instance;
} _ResourceMetrics_default_instance_;
}  // namespace deepvariant
}  // namespace genomics
}  // namespace learning
static void InitDefaultsscc_info_ResourceMetrics_deepvariant_2fprotos_2fresources_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_ResourceMetrics_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::ResourceMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::ResourceMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceMetrics_deepvariant_2fprotos_2fresources_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResourceMetrics_deepvariant_2fprotos_2fresources_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_deepvariant_2fprotos_2fresources_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_deepvariant_2fprotos_2fresources_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_deepvariant_2fprotos_2fresources_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_deepvariant_2fprotos_2fresources_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::ResourceMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::ResourceMetrics, host_name_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::ResourceMetrics, physical_core_count_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::ResourceMetrics, cpu_frequency_mhz_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::ResourceMetrics, total_memory_mb_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::ResourceMetrics, wall_time_seconds_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::ResourceMetrics, cpu_user_time_seconds_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::ResourceMetrics, cpu_system_time_seconds_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::ResourceMetrics, memory_peak_rss_mb_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::ResourceMetrics, read_bytes_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::ResourceMetrics, write_bytes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::learning::genomics::deepvariant::ResourceMetrics)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_ResourceMetrics_default_instance_),
};

const char descriptor_table_protodef_deepvariant_2fprotos_2fresources_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"deepvariant/protos/resources.proto\022\035le"
  "arning.genomics.deepvariant\"\225\002\n\017Resource"
  "Metrics\022\021\n\thost_name\030\001 \001(\t\022\033\n\023physical_c"
  "ore_count\030\002 \001(\005\022\031\n\021cpu_frequency_mhz\030\003 \001"
  "(\001\022\027\n\017total_memory_mb\030\004 \001(\005\022\031\n\021wall_time"
  "_seconds\030\005 \001(\001\022\035\n\025cpu_user_time_seconds\030"
  "\006 \001(\001\022\037\n\027cpu_system_time_seconds\030\007 \001(\001\022\032"
  "\n\022memory_peak_rss_mb\030\010 \001(\005\022\022\n\nread_bytes"
  "\030\t \001(\003\022\023\n\013write_bytes\030\n \001(\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_deepvariant_2fprotos_2fresources_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_deepvariant_2fprotos_2fresources_2eproto_sccs[1] = {
  &scc_info_ResourceMetrics_deepvariant_2fprotos_2fresources_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_deepvariant_2fprotos_2fresources_2eproto_once;
static bool descriptor_table_deepvariant_2fprotos_2fresources_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_deepvariant_2fprotos_2fresources_2eproto = {
  &descriptor_table_deepvariant_2fprotos_2fresources_2eproto_initialized, descriptor_table_protodef_deepvariant_2fprotos_2fresources_2eproto, "deepvariant/protos/resources.proto", 355,
  &descriptor_table_deepvariant_2fprotos_2fresources_2eproto_once, descriptor_table_deepvariant_2fprotos_2fresources_2eproto_sccs, descriptor_table_deepvariant_2fprotos_2fresources_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_deepvariant_2fprotos_2fresources_2eproto::offsets,
  file_level_metadata_deepvariant_2fprotos_2fresources_2eproto, 1, file_level_enum_descriptors_deepvariant_2fprotos_2fresources_2eproto, file_level_service_descriptors_deepvariant_2fprotos_2fresources_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_deepvariant_2fprotos_2fresources_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_deepvariant_2fprotos_2fresources_2eproto), true);
namespace learning {
namespace genomics {
namespace deepvariant {

// ===================================================================

void ResourceMetrics::InitAsDefaultInstance() {
}
class ResourceMetrics::_Internal {
 public:
};

ResourceMetrics::ResourceMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.ResourceMetrics)
}
ResourceMetrics::ResourceMetrics(const ResourceMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.host_name().empty()) {
    host_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  ::memcpy(&cpu_frequency_mhz_, &from.cpu_frequency_mhz_,
    static_cast<size_t>(reinterpret_cast<char*>(&memory_peak_rss_mb_) -
    reinterpret_cast<char*>(&cpu_frequency_mhz_)) + sizeof(memory_peak_rss_mb_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.ResourceMetrics)
}

void ResourceMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResourceMetrics_deepvariant_2fprotos_2fresources_2eproto.base);
  host_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cpu_frequency_mhz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_peak_rss_mb_) -
      reinterpret_cast<char*>(&cpu_frequency_mhz_)) + sizeof(memory_peak_rss_mb_));
}

ResourceMetrics::~ResourceMetrics() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.ResourceMetrics)
  SharedDtor();
}

void ResourceMetrics::SharedDtor() {
  host_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceMetrics& ResourceMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceMetrics_deepvariant_2fprotos_2fresources_2eproto.base);
  return *internal_default_instance();
}


void ResourceMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.ResourceMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cpu_frequency_mhz_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memory_peak_rss_mb_) -
      reinterpret_cast<char*>(&cpu_frequency_mhz_)) + sizeof(memory_peak_rss_mb_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResourceMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string host_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_host_name(), ptr, ctx, "learning.genomics.deepvariant.ResourceMetrics.host_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 physical_core_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          physical_core_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double cpu_frequency_mhz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          cpu_frequency_mhz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 total_memory_mb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          total_memory_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double wall_time_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          wall_time_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cpu_user_time_seconds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          cpu_user_time_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cpu_system_time_seconds = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          cpu_system_time_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 memory_peak_rss_mb = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          memory_peak_rss_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 read_bytes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          read_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 write_bytes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          write_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResourceMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.ResourceMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->host_name().data(), static_cast<int>(this->host_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.ResourceMetrics.host_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 physical_core_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &physical_core_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cpu_frequency_mhz = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_frequency_mhz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_memory_mb = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_memory_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wall_time_seconds = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wall_time_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cpu_user_time_seconds = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_user_time_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cpu_system_time_seconds = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_system_time_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 memory_peak_rss_mb = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &memory_peak_rss_mb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 read_bytes = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &read_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 write_bytes = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &write_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.ResourceMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.ResourceMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResourceMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.ResourceMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host_name = 1;
  if (this->host_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), static_cast<int>(this->host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.ResourceMetrics.host_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host_name(), output);
  }

  // int32 physical_core_count = 2;
  if (this->physical_core_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->physical_core_count(), output);
  }

  // double cpu_frequency_mhz = 3;
  if (!(this->cpu_frequency_mhz() <= 0 && this->cpu_frequency_mhz() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->cpu_frequency_mhz(), output);
  }

  // int32 total_memory_mb = 4;
  if (this->total_memory_mb() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->total_memory_mb(), output);
  }

  // double wall_time_seconds = 5;
  if (!(this->wall_time_seconds() <= 0 && this->wall_time_seconds() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->wall_time_seconds(), output);
  }

  // double cpu_user_time_seconds = 6;
  if (!(this->cpu_user_time_seconds() <= 0 && this->cpu_user_time_seconds() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->cpu_user_time_seconds(), output);
  }

  // double cpu_system_time_seconds = 7;
  if (!(this->cpu_system_time_seconds() <= 0 && this->cpu_system_time_seconds() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->cpu_system_time_seconds(), output);
  }

  // int32 memory_peak_rss_mb = 8;
  if (this->memory_peak_rss_mb() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->memory_peak_rss_mb(), output);
  }

  // int64 read_bytes = 9;
  if (this->read_bytes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->read_bytes(), output);
  }

  // int64 write_bytes = 10;
  if (this->write_bytes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->write_bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.ResourceMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.ResourceMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string host_name = 1;
  if (this->host_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), static_cast<int>(this->host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.ResourceMetrics.host_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->host_name(), target);
  }

  // int32 physical_core_count = 2;
  if (this->physical_core_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->physical_core_count(), target);
  }

  // double cpu_frequency_mhz = 3;
  if (!(this->cpu_frequency_mhz() <= 0 && this->cpu_frequency_mhz() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->cpu_frequency_mhz(), target);
  }

  // int32 total_memory_mb = 4;
  if (this->total_memory_mb() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->total_memory_mb(), target);
  }

  // double wall_time_seconds = 5;
  if (!(this->wall_time_seconds() <= 0 && this->wall_time_seconds() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->wall_time_seconds(), target);
  }

  // double cpu_user_time_seconds = 6;
  if (!(this->cpu_user_time_seconds() <= 0 && this->cpu_user_time_seconds() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->cpu_user_time_seconds(), target);
  }

  // double cpu_system_time_seconds = 7;
  if (!(this->cpu_system_time_seconds() <= 0 && this->cpu_system_time_seconds() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->cpu_system_time_seconds(), target);
  }

  // int32 memory_peak_rss_mb = 8;
  if (this->memory_peak_rss_mb() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->memory_peak_rss_mb(), target);
  }

  // int64 read_bytes = 9;
  if (this->read_bytes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->read_bytes(), target);
  }

  // int64 write_bytes = 10;
  if (this->write_bytes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->write_bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.ResourceMetrics)
  return target;
}

size_t ResourceMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.ResourceMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host_name = 1;
  if (this->host_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->host_name());
  }

  // double cpu_frequency_mhz = 3;
  if (!(this->cpu_frequency_mhz() <= 0 && this->cpu_frequency_mhz() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 physical_core_count = 2;
  if (this->physical_core_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->physical_core_count());
  }

  // int32 total_memory_mb = 4;
  if (this->total_memory_mb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->total_memory_mb());
  }

  // double wall_time_seconds = 5;
  if (!(this->wall_time_seconds() <= 0 && this->wall_time_seconds() >= 0)) {
    total_size += 1 + 8;
  }

  // double cpu_user_time_seconds = 6;
  if (!(this->cpu_user_time_seconds() <= 0 && this->cpu_user_time_seconds() >= 0)) {
    total_size += 1 + 8;
  }

  // double cpu_system_time_seconds = 7;
  if (!(this->cpu_system_time_seconds() <= 0 && this->cpu_system_time_seconds() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 read_bytes = 9;
  if (this->read_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->read_bytes());
  }

  // int64 write_bytes = 10;
  if (this->write_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->write_bytes());
  }

  // int32 memory_peak_rss_mb = 8;
  if (this->memory_peak_rss_mb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->memory_peak_rss_mb());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.ResourceMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.ResourceMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.ResourceMetrics)
    MergeFrom(*source);
  }
}

void ResourceMetrics::MergeFrom(const ResourceMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.ResourceMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host_name().size() > 0) {

    host_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  if (!(from.cpu_frequency_mhz() <= 0 && from.cpu_frequency_mhz() >= 0)) {
    set_cpu_frequency_mhz(from.cpu_frequency_mhz());
  }
  if (from.physical_core_count() != 0) {
    set_physical_core_count(from.physical_core_count());
  }
  if (from.total_memory_mb() != 0) {
    set_total_memory_mb(from.total_memory_mb());
  }
  if (!(from.wall_time_seconds() <= 0 && from.wall_time_seconds() >= 0)) {
    set_wall_time_seconds(from.wall_time_seconds());
  }
  if (!(from.cpu_user_time_seconds() <= 0 && from.cpu_user_time_seconds() >= 0)) {
    set_cpu_user_time_seconds(from.cpu_user_time_seconds());
  }
  if (!(from.cpu_system_time_seconds() <= 0 && from.cpu_system_time_seconds() >= 0)) {
    set_cpu_system_time_seconds(from.cpu_system_time_seconds());
  }
  if (from.read_bytes() != 0) {
    set_read_bytes(from.read_bytes());
  }
  if (from.write_bytes() != 0) {
    set_write_bytes(from.write_bytes());
  }
  if (from.memory_peak_rss_mb() != 0) {
    set_memory_peak_rss_mb(from.memory_peak_rss_mb());
  }
}

void ResourceMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.ResourceMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceMetrics::CopyFrom(const ResourceMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.ResourceMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceMetrics::IsInitialized() const {
  return true;
}

void ResourceMetrics::InternalSwap(ResourceMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  host_name_.Swap(&other->host_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cpu_frequency_mhz_, other->cpu_frequency_mhz_);
  swap(physical_core_count_, other->physical_core_count_);
  swap(total_memory_mb_, other->total_memory_mb_);
  swap(wall_time_seconds_, other->wall_time_seconds_);
  swap(cpu_user_time_seconds_, other->cpu_user_time_seconds_);
  swap(cpu_system_time_seconds_, other->cpu_system_time_seconds_);
  swap(read_bytes_, other->read_bytes_);
  swap(write_bytes_, other->write_bytes_);
  swap(memory_peak_rss_mb_, other->memory_peak_rss_mb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace deepvariant
}  // namespace genomics
}  // namespace learning
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::ResourceMetrics* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::ResourceMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::ResourceMetrics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
