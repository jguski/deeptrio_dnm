// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deepvariant/protos/deepvariant.proto

#include "deepvariant/protos/deepvariant.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Allele_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlleleCount_Alleles_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlleleCount_ReadAllelesEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlleleCount_SampleAllelesEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlleleCounterOptions_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CallVariantsOutput_AltAlleleIndices_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CallVariantsOutput_DebugInfo_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeepVariantCall_AlleleFrequencyEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeepVariantCall_AlleleSupportEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeepVariantCall_AlleleSupportExtEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeepVariantCall_ReadSupport_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeepVariantCall_SupportingReads_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeepVariantCall_SupportingReadsExt_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeepVariantInputDatasets_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeepVariantInputDatasets_Dataset_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelingMetrics_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_MakeExamplesOptions_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MakeExamplesStats_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PileupImageOptions_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2frealigner_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RealignerOptions_deepvariant_2fprotos_2frealigner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fresources_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceMetrics_deepvariant_2fprotos_2fresources_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SampleOptions_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VariantCallerOptions_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VariantLabelerOptions_deepvariant_2fprotos_2fdeepvariant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2fposition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_third_5fparty_2fnucleus_2fprotos_2fposition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2freads_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadRequirements_third_5fparty_2fnucleus_2fprotos_2freads_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Variant_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto;
namespace learning {
namespace genomics {
namespace deepvariant {
class AlleleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Allele> _instance;
} _Allele_default_instance_;
class AlleleCount_ReadAllelesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlleleCount_ReadAllelesEntry_DoNotUse> _instance;
} _AlleleCount_ReadAllelesEntry_DoNotUse_default_instance_;
class AlleleCount_AllelesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlleleCount_Alleles> _instance;
} _AlleleCount_Alleles_default_instance_;
class AlleleCount_SampleAllelesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlleleCount_SampleAllelesEntry_DoNotUse> _instance;
} _AlleleCount_SampleAllelesEntry_DoNotUse_default_instance_;
class AlleleCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlleleCount> _instance;
} _AlleleCount_default_instance_;
class AlleleCountSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlleleCountSummary> _instance;
} _AlleleCountSummary_default_instance_;
class DeepVariantCall_SupportingReadsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeepVariantCall_SupportingReads> _instance;
} _DeepVariantCall_SupportingReads_default_instance_;
class DeepVariantCall_AlleleSupportEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeepVariantCall_AlleleSupportEntry_DoNotUse> _instance;
} _DeepVariantCall_AlleleSupportEntry_DoNotUse_default_instance_;
class DeepVariantCall_AlleleFrequencyEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeepVariantCall_AlleleFrequencyEntry_DoNotUse> _instance;
} _DeepVariantCall_AlleleFrequencyEntry_DoNotUse_default_instance_;
class DeepVariantCall_ReadSupportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeepVariantCall_ReadSupport> _instance;
} _DeepVariantCall_ReadSupport_default_instance_;
class DeepVariantCall_SupportingReadsExtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeepVariantCall_SupportingReadsExt> _instance;
} _DeepVariantCall_SupportingReadsExt_default_instance_;
class DeepVariantCall_AlleleSupportExtEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeepVariantCall_AlleleSupportExtEntry_DoNotUse> _instance;
} _DeepVariantCall_AlleleSupportExtEntry_DoNotUse_default_instance_;
class DeepVariantCallDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeepVariantCall> _instance;
} _DeepVariantCall_default_instance_;
class AlleleCounterOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlleleCounterOptions> _instance;
} _AlleleCounterOptions_default_instance_;
class CallVariantsOutput_AltAlleleIndicesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallVariantsOutput_AltAlleleIndices> _instance;
} _CallVariantsOutput_AltAlleleIndices_default_instance_;
class CallVariantsOutput_DebugInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallVariantsOutput_DebugInfo> _instance;
} _CallVariantsOutput_DebugInfo_default_instance_;
class CallVariantsOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CallVariantsOutput> _instance;
} _CallVariantsOutput_default_instance_;
class VariantCallerOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VariantCallerOptions> _instance;
} _VariantCallerOptions_default_instance_;
class VariantLabelerOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VariantLabelerOptions> _instance;
} _VariantLabelerOptions_default_instance_;
class PileupImageOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PileupImageOptions> _instance;
} _PileupImageOptions_default_instance_;
class SampleOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SampleOptions> _instance;
} _SampleOptions_default_instance_;
class MakeExamplesOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MakeExamplesOptions> _instance;
} _MakeExamplesOptions_default_instance_;
class DeepVariantDatasetConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeepVariantDatasetConfig> _instance;
} _DeepVariantDatasetConfig_default_instance_;
class DeepVariantInputDatasets_DatasetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeepVariantInputDatasets_Dataset> _instance;
} _DeepVariantInputDatasets_Dataset_default_instance_;
class DeepVariantInputDatasetsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeepVariantInputDatasets> _instance;
} _DeepVariantInputDatasets_default_instance_;
class DeepVariantInputDatasetsGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeepVariantInputDatasetsGroup> _instance;
} _DeepVariantInputDatasetsGroup_default_instance_;
class LabelingMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabelingMetrics> _instance;
} _LabelingMetrics_default_instance_;
class MakeExamplesStatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MakeExamplesStats> _instance;
} _MakeExamplesStats_default_instance_;
class MakeExamplesRunInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MakeExamplesRunInfo> _instance;
} _MakeExamplesRunInfo_default_instance_;
}  // namespace deepvariant
}  // namespace genomics
}  // namespace learning
static void InitDefaultsscc_info_Allele_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_Allele_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::Allele();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::Allele::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Allele_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Allele_deepvariant_2fprotos_2fdeepvariant_2eproto}, {}};

static void InitDefaultsscc_info_AlleleCount_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_AlleleCount_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::AlleleCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::AlleleCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AlleleCount_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_AlleleCount_deepvariant_2fprotos_2fdeepvariant_2eproto}, {
      &scc_info_Position_third_5fparty_2fnucleus_2fprotos_2fposition_2eproto.base,
      &scc_info_AlleleCount_ReadAllelesEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
      &scc_info_AlleleCount_SampleAllelesEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto.base,}};

static void InitDefaultsscc_info_AlleleCount_Alleles_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_AlleleCount_Alleles_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::AlleleCount_Alleles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::AlleleCount_Alleles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlleleCount_Alleles_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AlleleCount_Alleles_deepvariant_2fprotos_2fdeepvariant_2eproto}, {
      &scc_info_Allele_deepvariant_2fprotos_2fdeepvariant_2eproto.base,}};

static void InitDefaultsscc_info_AlleleCount_ReadAllelesEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_AlleleCount_ReadAllelesEntry_DoNotUse_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::AlleleCount_ReadAllelesEntry_DoNotUse();
  }
  ::learning::genomics::deepvariant::AlleleCount_ReadAllelesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlleleCount_ReadAllelesEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AlleleCount_ReadAllelesEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto}, {
      &scc_info_Allele_deepvariant_2fprotos_2fdeepvariant_2eproto.base,}};

static void InitDefaultsscc_info_AlleleCount_SampleAllelesEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_AlleleCount_SampleAllelesEntry_DoNotUse_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::AlleleCount_SampleAllelesEntry_DoNotUse();
  }
  ::learning::genomics::deepvariant::AlleleCount_SampleAllelesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlleleCount_SampleAllelesEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AlleleCount_SampleAllelesEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto}, {
      &scc_info_AlleleCount_Alleles_deepvariant_2fprotos_2fdeepvariant_2eproto.base,}};

static void InitDefaultsscc_info_AlleleCountSummary_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_AlleleCountSummary_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::AlleleCountSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::AlleleCountSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlleleCountSummary_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AlleleCountSummary_deepvariant_2fprotos_2fdeepvariant_2eproto}, {}};

static void InitDefaultsscc_info_AlleleCounterOptions_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_AlleleCounterOptions_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::AlleleCounterOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::AlleleCounterOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AlleleCounterOptions_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AlleleCounterOptions_deepvariant_2fprotos_2fdeepvariant_2eproto}, {
      &scc_info_ReadRequirements_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base,}};

static void InitDefaultsscc_info_CallVariantsOutput_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_CallVariantsOutput_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::CallVariantsOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::CallVariantsOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CallVariantsOutput_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_CallVariantsOutput_deepvariant_2fprotos_2fdeepvariant_2eproto}, {
      &scc_info_Variant_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto.base,
      &scc_info_CallVariantsOutput_AltAlleleIndices_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
      &scc_info_CallVariantsOutput_DebugInfo_deepvariant_2fprotos_2fdeepvariant_2eproto.base,}};

static void InitDefaultsscc_info_CallVariantsOutput_AltAlleleIndices_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_CallVariantsOutput_AltAlleleIndices_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CallVariantsOutput_AltAlleleIndices_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CallVariantsOutput_AltAlleleIndices_deepvariant_2fprotos_2fdeepvariant_2eproto}, {}};

static void InitDefaultsscc_info_CallVariantsOutput_DebugInfo_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_CallVariantsOutput_DebugInfo_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CallVariantsOutput_DebugInfo_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CallVariantsOutput_DebugInfo_deepvariant_2fprotos_2fdeepvariant_2eproto}, {}};

static void InitDefaultsscc_info_DeepVariantCall_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_DeepVariantCall_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::DeepVariantCall();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::DeepVariantCall::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_DeepVariantCall_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_DeepVariantCall_deepvariant_2fprotos_2fdeepvariant_2eproto}, {
      &scc_info_Variant_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto.base,
      &scc_info_DeepVariantCall_AlleleSupportEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
      &scc_info_DeepVariantCall_AlleleFrequencyEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
      &scc_info_DeepVariantCall_AlleleSupportExtEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
      &scc_info_DeepVariantCall_SupportingReadsExt_deepvariant_2fprotos_2fdeepvariant_2eproto.base,}};

static void InitDefaultsscc_info_DeepVariantCall_AlleleFrequencyEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_DeepVariantCall_AlleleFrequencyEntry_DoNotUse_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::DeepVariantCall_AlleleFrequencyEntry_DoNotUse();
  }
  ::learning::genomics::deepvariant::DeepVariantCall_AlleleFrequencyEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeepVariantCall_AlleleFrequencyEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeepVariantCall_AlleleFrequencyEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto}, {}};

static void InitDefaultsscc_info_DeepVariantCall_AlleleSupportEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_DeepVariantCall_AlleleSupportEntry_DoNotUse_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportEntry_DoNotUse();
  }
  ::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeepVariantCall_AlleleSupportEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DeepVariantCall_AlleleSupportEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto}, {
      &scc_info_DeepVariantCall_SupportingReads_deepvariant_2fprotos_2fdeepvariant_2eproto.base,}};

static void InitDefaultsscc_info_DeepVariantCall_AlleleSupportExtEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_DeepVariantCall_AlleleSupportExtEntry_DoNotUse_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportExtEntry_DoNotUse();
  }
  ::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportExtEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeepVariantCall_AlleleSupportExtEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DeepVariantCall_AlleleSupportExtEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto}, {
      &scc_info_DeepVariantCall_SupportingReadsExt_deepvariant_2fprotos_2fdeepvariant_2eproto.base,}};

static void InitDefaultsscc_info_DeepVariantCall_ReadSupport_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_DeepVariantCall_ReadSupport_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::DeepVariantCall_ReadSupport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::DeepVariantCall_ReadSupport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeepVariantCall_ReadSupport_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeepVariantCall_ReadSupport_deepvariant_2fprotos_2fdeepvariant_2eproto}, {}};

static void InitDefaultsscc_info_DeepVariantCall_SupportingReads_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_DeepVariantCall_SupportingReads_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeepVariantCall_SupportingReads_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeepVariantCall_SupportingReads_deepvariant_2fprotos_2fdeepvariant_2eproto}, {}};

static void InitDefaultsscc_info_DeepVariantCall_SupportingReadsExt_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_DeepVariantCall_SupportingReadsExt_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeepVariantCall_SupportingReadsExt_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DeepVariantCall_SupportingReadsExt_deepvariant_2fprotos_2fdeepvariant_2eproto}, {
      &scc_info_DeepVariantCall_ReadSupport_deepvariant_2fprotos_2fdeepvariant_2eproto.base,}};

static void InitDefaultsscc_info_DeepVariantDatasetConfig_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_DeepVariantDatasetConfig_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::DeepVariantDatasetConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::DeepVariantDatasetConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeepVariantDatasetConfig_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeepVariantDatasetConfig_deepvariant_2fprotos_2fdeepvariant_2eproto}, {}};

static void InitDefaultsscc_info_DeepVariantInputDatasets_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_DeepVariantInputDatasets_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::DeepVariantInputDatasets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::DeepVariantInputDatasets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeepVariantInputDatasets_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DeepVariantInputDatasets_deepvariant_2fprotos_2fdeepvariant_2eproto}, {
      &scc_info_DeepVariantInputDatasets_Dataset_deepvariant_2fprotos_2fdeepvariant_2eproto.base,}};

static void InitDefaultsscc_info_DeepVariantInputDatasets_Dataset_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_DeepVariantInputDatasets_Dataset_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeepVariantInputDatasets_Dataset_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeepVariantInputDatasets_Dataset_deepvariant_2fprotos_2fdeepvariant_2eproto}, {}};

static void InitDefaultsscc_info_DeepVariantInputDatasetsGroup_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_DeepVariantInputDatasetsGroup_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::DeepVariantInputDatasetsGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::DeepVariantInputDatasetsGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeepVariantInputDatasetsGroup_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DeepVariantInputDatasetsGroup_deepvariant_2fprotos_2fdeepvariant_2eproto}, {
      &scc_info_DeepVariantInputDatasets_deepvariant_2fprotos_2fdeepvariant_2eproto.base,}};

static void InitDefaultsscc_info_LabelingMetrics_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_LabelingMetrics_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::LabelingMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::LabelingMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabelingMetrics_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LabelingMetrics_deepvariant_2fprotos_2fdeepvariant_2eproto}, {}};

static void InitDefaultsscc_info_MakeExamplesOptions_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_MakeExamplesOptions_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::MakeExamplesOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::MakeExamplesOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_MakeExamplesOptions_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_MakeExamplesOptions_deepvariant_2fprotos_2fdeepvariant_2eproto}, {
      &scc_info_AlleleCounterOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
      &scc_info_VariantCallerOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
      &scc_info_PileupImageOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
      &scc_info_VariantLabelerOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
      &scc_info_ReadRequirements_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base,
      &scc_info_RealignerOptions_deepvariant_2fprotos_2frealigner_2eproto.base,
      &scc_info_SampleOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base,}};

static void InitDefaultsscc_info_MakeExamplesRunInfo_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_MakeExamplesRunInfo_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::MakeExamplesRunInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::MakeExamplesRunInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MakeExamplesRunInfo_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_MakeExamplesRunInfo_deepvariant_2fprotos_2fdeepvariant_2eproto}, {
      &scc_info_MakeExamplesOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
      &scc_info_LabelingMetrics_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
      &scc_info_ResourceMetrics_deepvariant_2fprotos_2fresources_2eproto.base,
      &scc_info_MakeExamplesStats_deepvariant_2fprotos_2fdeepvariant_2eproto.base,}};

static void InitDefaultsscc_info_MakeExamplesStats_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_MakeExamplesStats_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::MakeExamplesStats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::MakeExamplesStats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MakeExamplesStats_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MakeExamplesStats_deepvariant_2fprotos_2fdeepvariant_2eproto}, {}};

static void InitDefaultsscc_info_PileupImageOptions_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_PileupImageOptions_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::PileupImageOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::PileupImageOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PileupImageOptions_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PileupImageOptions_deepvariant_2fprotos_2fdeepvariant_2eproto}, {
      &scc_info_ReadRequirements_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base,}};

static void InitDefaultsscc_info_SampleOptions_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_SampleOptions_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::SampleOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::SampleOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SampleOptions_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SampleOptions_deepvariant_2fprotos_2fdeepvariant_2eproto}, {
      &scc_info_VariantCallerOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base,}};

static void InitDefaultsscc_info_VariantCallerOptions_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_VariantCallerOptions_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::VariantCallerOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::VariantCallerOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VariantCallerOptions_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VariantCallerOptions_deepvariant_2fprotos_2fdeepvariant_2eproto}, {}};

static void InitDefaultsscc_info_VariantLabelerOptions_deepvariant_2fprotos_2fdeepvariant_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_VariantLabelerOptions_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::VariantLabelerOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::VariantLabelerOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VariantLabelerOptions_deepvariant_2fprotos_2fdeepvariant_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VariantLabelerOptions_deepvariant_2fprotos_2fdeepvariant_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_deepvariant_2fprotos_2fdeepvariant_2eproto[29];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_deepvariant_2fprotos_2fdeepvariant_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_deepvariant_2fprotos_2fdeepvariant_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::Allele, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::Allele, bases_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::Allele, type_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::Allele, count_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::Allele, is_low_quality_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount_ReadAllelesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount_ReadAllelesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount_ReadAllelesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount_ReadAllelesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount_Alleles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount_Alleles, alleles_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount_SampleAllelesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount_SampleAllelesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount_SampleAllelesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount_SampleAllelesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount, position_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount, ref_base_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount, ref_supporting_read_count_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount, read_alleles_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount, ref_nonconfident_read_count_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount, sample_alleles_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCount, track_ref_reads_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCountSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCountSummary, reference_name_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCountSummary, position_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCountSummary, ref_base_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCountSummary, ref_supporting_read_count_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCountSummary, total_read_count_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCountSummary, ref_nonconfident_read_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_SupportingReads, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_SupportingReads, read_names_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_AlleleFrequencyEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_AlleleFrequencyEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_AlleleFrequencyEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_AlleleFrequencyEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_ReadSupport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_ReadSupport, read_name_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_ReadSupport, is_low_quality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt, read_infos_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportExtEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportExtEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportExtEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportExtEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall, variant_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall, allele_support_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall, allele_frequency_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall, ref_support_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall, allele_support_ext_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantCall, ref_support_ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCounterOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCounterOptions, partition_size_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCounterOptions, read_requirements_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCounterOptions, track_ref_reads_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCounterOptions, normalize_reads_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlleleCounterOptions, keep_legacy_behavior_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices, indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo, predicted_label_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo, has_insertion_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo, has_deletion_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo, is_snp_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo, true_label_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo, logits_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo, prelogits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CallVariantsOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CallVariantsOutput, variant_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CallVariantsOutput, alt_allele_indices_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CallVariantsOutput, genotype_probabilities_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CallVariantsOutput, debug_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::VariantCallerOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::VariantCallerOptions, min_count_snps_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::VariantCallerOptions, min_count_indels_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::VariantCallerOptions, min_fraction_snps_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::VariantCallerOptions, min_fraction_indels_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::VariantCallerOptions, min_fraction_multiplier_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::VariantCallerOptions, fraction_reference_sites_to_emit_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::VariantCallerOptions, random_seed_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::VariantCallerOptions, sample_name_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::VariantCallerOptions, p_error_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::VariantCallerOptions, max_gq_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::VariantCallerOptions, gq_resolution_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::VariantCallerOptions, ploidy_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::VariantCallerOptions, skip_uncalled_genotypes_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::VariantCallerOptions, track_ref_reads_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::VariantLabelerOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, height_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, width_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, reference_band_height_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, base_color_offset_a_and_g_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, base_color_offset_t_and_c_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, base_color_stride_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, reference_alpha_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, reference_base_quality_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, allele_supporting_read_alpha_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, other_allele_supporting_read_alpha_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, allele_unsupporting_read_alpha_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, reference_matching_read_alpha_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, reference_mismatching_read_alpha_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, indel_anchoring_base_char_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, positive_strand_color_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, negative_strand_color_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, base_quality_cap_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, read_overlap_buffer_bp_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, read_requirements_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, multi_allelic_mode_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, mapping_quality_cap_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, random_seed_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, num_channels_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, unused_insert_base_char_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, unused_delete_base_char_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, unused_custom_pileup_image_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, unused_sequencing_type_image_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, sequencing_type_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, alt_aligned_pileup_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, sort_by_haplotypes_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, min_non_zero_allele_frequency_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, use_allele_frequency_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, types_to_alt_align_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, add_hp_channel_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, hp_tag_for_assembly_polishing_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, channels_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::PileupImageOptions, sort_by_haplotypes_sample_hp_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::SampleOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::SampleOptions, role_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::SampleOptions, name_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::SampleOptions, reads_filenames_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::SampleOptions, downsample_fraction_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::SampleOptions, variant_caller_options_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::SampleOptions, pileup_height_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::SampleOptions, order_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::SampleOptions, proposed_variants_filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, exclude_contigs_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, calling_regions_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, random_seed_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, n_cores_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, allele_counter_options_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, deprecated_variant_caller_options_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, pic_options_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, labeler_options_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, read_requirements_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, reference_filename_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, deprecated_reads_filenames_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, deprecated_reads_filename_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, candidates_filename_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, examples_filename_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, confident_regions_filename_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, truth_variants_filename_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, deprecated_proposed_variants_filename_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, gvcf_filename_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, include_med_dp_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, model_name_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, mode_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, min_shared_contigs_basepairs_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, task_id_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, num_shards_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, realigner_enabled_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, realigner_options_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, max_reads_per_partition_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, deprecated_downsample_fraction_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, exclude_calling_regions_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, labeler_algorithm_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, run_info_filename_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, use_original_quality_scores_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, select_variant_types_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, variant_caller_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, use_allele_frequency_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, population_vcf_filenames_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, runtime_by_region_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, use_ref_for_cram_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, parse_sam_aux_fields_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, aux_fields_to_keep_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, hts_block_size_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, logging_every_n_candidates_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, customized_classes_labeler_classes_list_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, customized_classes_labeler_info_field_name_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, main_sample_index_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, bam_fname_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, sample_options_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesOptions, sample_role_to_train_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantDatasetConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantDatasetConfig, name_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantDatasetConfig, tfrecord_path_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantDatasetConfig, num_examples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset, confident_regions_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset, reads_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset, ref_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset, truth_variants_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset, regions_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset, training_random_emit_ref_sites_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset, downsample_fractions_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset, exclude_regions_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset, sample_name_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset, sequencing_type_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset, population_vcfs_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset, hp_tag_for_assembly_polishing_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset, sort_by_haplotypes_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset, parse_sam_aux_fields_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset, add_hp_channel_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset, sort_by_haplotypes_sample_hp_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets, datasets_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasets, group_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasetsGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeepVariantInputDatasetsGroup, groups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::LabelingMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::LabelingMetrics, n_truth_variant_sites_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::LabelingMetrics, n_truth_variant_alleles_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::LabelingMetrics, n_candidate_variant_sites_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::LabelingMetrics, n_candidate_variant_alleles_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::LabelingMetrics, n_non_confident_candidate_variant_sites_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::LabelingMetrics, n_true_positive_sites_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::LabelingMetrics, n_true_positive_alleles_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::LabelingMetrics, n_false_negative_sites_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::LabelingMetrics, n_false_negative_alleles_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::LabelingMetrics, n_false_positive_sites_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::LabelingMetrics, n_false_positive_alleles_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::LabelingMetrics, n_inexact_position_matches_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::LabelingMetrics, n_exact_position_matches_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::LabelingMetrics, n_exact_position_and_allele_matches_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::LabelingMetrics, n_exact_position_and_allele_and_genotype_matches_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::LabelingMetrics, n_truth_multiallelics_sites_with_missed_alleles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesStats, num_examples_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesStats, num_indels_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesStats, num_snps_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesStats, num_class_0_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesStats, num_class_1_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesStats, num_class_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesRunInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesRunInfo, options_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesRunInfo, labeling_metrics_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesRunInfo, resource_metrics_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::MakeExamplesRunInfo, stats_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::learning::genomics::deepvariant::Allele)},
  { 9, 16, sizeof(::learning::genomics::deepvariant::AlleleCount_ReadAllelesEntry_DoNotUse)},
  { 18, -1, sizeof(::learning::genomics::deepvariant::AlleleCount_Alleles)},
  { 24, 31, sizeof(::learning::genomics::deepvariant::AlleleCount_SampleAllelesEntry_DoNotUse)},
  { 33, -1, sizeof(::learning::genomics::deepvariant::AlleleCount)},
  { 45, -1, sizeof(::learning::genomics::deepvariant::AlleleCountSummary)},
  { 56, -1, sizeof(::learning::genomics::deepvariant::DeepVariantCall_SupportingReads)},
  { 62, 69, sizeof(::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportEntry_DoNotUse)},
  { 71, 78, sizeof(::learning::genomics::deepvariant::DeepVariantCall_AlleleFrequencyEntry_DoNotUse)},
  { 80, -1, sizeof(::learning::genomics::deepvariant::DeepVariantCall_ReadSupport)},
  { 87, -1, sizeof(::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt)},
  { 93, 100, sizeof(::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportExtEntry_DoNotUse)},
  { 102, -1, sizeof(::learning::genomics::deepvariant::DeepVariantCall)},
  { 113, -1, sizeof(::learning::genomics::deepvariant::AlleleCounterOptions)},
  { 123, -1, sizeof(::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices)},
  { 129, -1, sizeof(::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo)},
  { 141, -1, sizeof(::learning::genomics::deepvariant::CallVariantsOutput)},
  { 150, -1, sizeof(::learning::genomics::deepvariant::VariantCallerOptions)},
  { 169, -1, sizeof(::learning::genomics::deepvariant::VariantLabelerOptions)},
  { 174, -1, sizeof(::learning::genomics::deepvariant::PileupImageOptions)},
  { 216, -1, sizeof(::learning::genomics::deepvariant::SampleOptions)},
  { 229, -1, sizeof(::learning::genomics::deepvariant::MakeExamplesOptions)},
  { 282, -1, sizeof(::learning::genomics::deepvariant::DeepVariantDatasetConfig)},
  { 290, -1, sizeof(::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset)},
  { 311, -1, sizeof(::learning::genomics::deepvariant::DeepVariantInputDatasets)},
  { 318, -1, sizeof(::learning::genomics::deepvariant::DeepVariantInputDatasetsGroup)},
  { 324, -1, sizeof(::learning::genomics::deepvariant::LabelingMetrics)},
  { 345, -1, sizeof(::learning::genomics::deepvariant::MakeExamplesStats)},
  { 356, -1, sizeof(::learning::genomics::deepvariant::MakeExamplesRunInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_Allele_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_AlleleCount_ReadAllelesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_AlleleCount_Alleles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_AlleleCount_SampleAllelesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_AlleleCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_AlleleCountSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_DeepVariantCall_SupportingReads_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_DeepVariantCall_AlleleSupportEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_DeepVariantCall_AlleleFrequencyEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_DeepVariantCall_ReadSupport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_DeepVariantCall_SupportingReadsExt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_DeepVariantCall_AlleleSupportExtEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_DeepVariantCall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_AlleleCounterOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_CallVariantsOutput_AltAlleleIndices_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_CallVariantsOutput_DebugInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_CallVariantsOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_VariantCallerOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_VariantLabelerOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_PileupImageOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_SampleOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_MakeExamplesOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_DeepVariantDatasetConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_DeepVariantInputDatasets_Dataset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_DeepVariantInputDatasets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_DeepVariantInputDatasetsGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_LabelingMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_MakeExamplesStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_MakeExamplesRunInfo_default_instance_),
};

const char descriptor_table_protodef_deepvariant_2fprotos_2fdeepvariant_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$deepvariant/protos/deepvariant.proto\022\035"
  "learning.genomics.deepvariant\032\"deepvaria"
  "nt/protos/realigner.proto\032\"deepvariant/p"
  "rotos/resources.proto\032)third_party/nucle"
  "us/protos/position.proto\032&third_party/nu"
  "cleus/protos/reads.proto\032)third_party/nu"
  "cleus/protos/variants.proto\"w\n\006Allele\022\r\n"
  "\005bases\030\001 \001(\t\0227\n\004type\030\002 \001(\0162).learning.ge"
  "nomics.deepvariant.AlleleType\022\r\n\005count\030\003"
  " \001(\005\022\026\n\016is_low_quality\030\004 \001(\010\"\343\004\n\013AlleleC"
  "ount\022/\n\010position\030\001 \001(\0132\035.nucleus.genomic"
  "s.v1.Position\022\020\n\010ref_base\030\002 \001(\t\022!\n\031ref_s"
  "upporting_read_count\030\003 \001(\005\022Q\n\014read_allel"
  "es\030\004 \003(\0132;.learning.genomics.deepvariant"
  ".AlleleCount.ReadAllelesEntry\022#\n\033ref_non"
  "confident_read_count\030\005 \001(\005\022U\n\016sample_all"
  "eles\030\006 \003(\0132=.learning.genomics.deepvaria"
  "nt.AlleleCount.SampleAllelesEntry\022\027\n\017tra"
  "ck_ref_reads\030\007 \001(\010\032Y\n\020ReadAllelesEntry\022\013"
  "\n\003key\030\001 \001(\t\0224\n\005value\030\002 \001(\0132%.learning.ge"
  "nomics.deepvariant.Allele:\0028\001\032A\n\007Alleles"
  "\0226\n\007alleles\030\001 \003(\0132%.learning.genomics.de"
  "epvariant.Allele\032h\n\022SampleAllelesEntry\022\013"
  "\n\003key\030\001 \001(\t\022A\n\005value\030\002 \001(\01322.learning.ge"
  "nomics.deepvariant.AlleleCount.Alleles:\002"
  "8\001\"\262\001\n\022AlleleCountSummary\022\026\n\016reference_n"
  "ame\030\001 \001(\t\022\020\n\010position\030\002 \001(\003\022\020\n\010ref_base\030"
  "\003 \001(\t\022!\n\031ref_supporting_read_count\030\004 \001(\005"
  "\022\030\n\020total_read_count\030\005 \001(\005\022#\n\033ref_noncon"
  "fident_read_count\030\006 \001(\005\"\276\007\n\017DeepVariantC"
  "all\022-\n\007variant\030\001 \001(\0132\034.nucleus.genomics."
  "v1.Variant\022Y\n\016allele_support\030\002 \003(\0132A.lea"
  "rning.genomics.deepvariant.DeepVariantCa"
  "ll.AlleleSupportEntry\022]\n\020allele_frequenc"
  "y\030\003 \003(\0132C.learning.genomics.deepvariant."
  "DeepVariantCall.AlleleFrequencyEntry\022\023\n\013"
  "ref_support\030\004 \003(\t\022`\n\022allele_support_ext\030"
  "\005 \003(\0132D.learning.genomics.deepvariant.De"
  "epVariantCall.AlleleSupportExtEntry\022Z\n\017r"
  "ef_support_ext\030\006 \001(\0132A.learning.genomics"
  ".deepvariant.DeepVariantCall.SupportingR"
  "eadsExt\032%\n\017SupportingReads\022\022\n\nread_names"
  "\030\001 \003(\t\032t\n\022AlleleSupportEntry\022\013\n\003key\030\001 \001("
  "\t\022M\n\005value\030\002 \001(\0132>.learning.genomics.dee"
  "pvariant.DeepVariantCall.SupportingReads"
  ":\0028\001\0326\n\024AlleleFrequencyEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\002:\0028\001\0328\n\013ReadSupport\022\021\n\tr"
  "ead_name\030\001 \001(\t\022\026\n\016is_low_quality\030\002 \001(\010\032d"
  "\n\022SupportingReadsExt\022N\n\nread_infos\030\001 \003(\013"
  "2:.learning.genomics.deepvariant.DeepVar"
  "iantCall.ReadSupport\032z\n\025AlleleSupportExt"
  "Entry\022\013\n\003key\030\001 \001(\t\022P\n\005value\030\002 \001(\0132A.lear"
  "ning.genomics.deepvariant.DeepVariantCal"
  "l.SupportingReadsExt:\0028\001\"\300\001\n\024AlleleCount"
  "erOptions\022\026\n\016partition_size\030\001 \001(\005\022@\n\021rea"
  "d_requirements\030\002 \001(\0132%.nucleus.genomics."
  "v1.ReadRequirements\022\027\n\017track_ref_reads\030\003"
  " \001(\010\022\027\n\017normalize_reads\030\004 \001(\010\022\034\n\024keep_le"
  "gacy_behavior\030\005 \001(\010\"\324\003\n\022CallVariantsOutp"
  "ut\022-\n\007variant\030\001 \001(\0132\034.nucleus.genomics.v"
  "1.Variant\022^\n\022alt_allele_indices\030\002 \001(\0132B."
  "learning.genomics.deepvariant.CallVarian"
  "tsOutput.AltAlleleIndices\022\036\n\026genotype_pr"
  "obabilities\030\003 \003(\001\022O\n\ndebug_info\030\004 \001(\0132;."
  "learning.genomics.deepvariant.CallVarian"
  "tsOutput.DebugInfo\032#\n\020AltAlleleIndices\022\017"
  "\n\007indices\030\001 \003(\005\032\230\001\n\tDebugInfo\022\027\n\017predict"
  "ed_label\030\001 \001(\005\022\025\n\rhas_insertion\030\002 \001(\010\022\024\n"
  "\014has_deletion\030\003 \001(\010\022\016\n\006is_snp\030\004 \001(\010\022\022\n\nt"
  "rue_label\030\005 \001(\005\022\016\n\006logits\030\006 \003(\001\022\021\n\tprelo"
  "gits\030\007 \003(\001\"\367\002\n\024VariantCallerOptions\022\026\n\016m"
  "in_count_snps\030\001 \001(\005\022\030\n\020min_count_indels\030"
  "\002 \001(\005\022\031\n\021min_fraction_snps\030\003 \001(\002\022\033\n\023min_"
  "fraction_indels\030\004 \001(\002\022\037\n\027min_fraction_mu"
  "ltiplier\030\014 \001(\002\022(\n fraction_reference_sit"
  "es_to_emit\030\005 \001(\002\022\023\n\013random_seed\030\006 \001(\r\022\023\n"
  "\013sample_name\030\007 \001(\t\022\017\n\007p_error\030\010 \001(\002\022\016\n\006m"
  "ax_gq\030\t \001(\005\022\025\n\rgq_resolution\030\n \001(\005\022\016\n\006pl"
  "oidy\030\013 \001(\005\022\037\n\027skip_uncalled_genotypes\030\r "
  "\001(\010\022\027\n\017track_ref_reads\030\016 \001(\010\"\027\n\025VariantL"
  "abelerOptions\"\327\013\n\022PileupImageOptions\022\016\n\006"
  "height\030\001 \001(\005\022\r\n\005width\030\002 \001(\005\022\035\n\025reference"
  "_band_height\030\003 \001(\005\022!\n\031base_color_offset_"
  "a_and_g\030\004 \001(\005\022!\n\031base_color_offset_t_and"
  "_c\030\005 \001(\005\022\031\n\021base_color_stride\030\006 \001(\005\022\027\n\017r"
  "eference_alpha\030\007 \001(\002\022\036\n\026reference_base_q"
  "uality\030\010 \001(\005\022$\n\034allele_supporting_read_a"
  "lpha\030\t \001(\002\022*\n\"other_allele_supporting_re"
  "ad_alpha\030  \001(\002\022&\n\036allele_unsupporting_re"
  "ad_alpha\030\n \001(\002\022%\n\035reference_matching_rea"
  "d_alpha\030\013 \001(\002\022(\n reference_mismatching_r"
  "ead_alpha\030\014 \001(\002\022!\n\031indel_anchoring_base_"
  "char\030\r \001(\t\022\035\n\025positive_strand_color\030\016 \001("
  "\005\022\035\n\025negative_strand_color\030\017 \001(\005\022\030\n\020base"
  "_quality_cap\030\020 \001(\005\022\036\n\026read_overlap_buffe"
  "r_bp\030\021 \001(\005\022@\n\021read_requirements\030\022 \001(\0132%."
  "nucleus.genomics.v1.ReadRequirements\022^\n\022"
  "multi_allelic_mode\030\023 \001(\0162B.learning.geno"
  "mics.deepvariant.PileupImageOptions.Mult"
  "iAllelicMode\022\033\n\023mapping_quality_cap\030\024 \001("
  "\005\022\023\n\013random_seed\030\025 \001(\r\022\024\n\014num_channels\030\026"
  " \001(\005\022\037\n\027unused_insert_base_char\030\027 \001(\t\022\037\n"
  "\027unused_delete_base_char\030\030 \001(\t\022\"\n\032unused"
  "_custom_pileup_image\030\031 \001(\010\022$\n\034unused_seq"
  "uencing_type_image\030\032 \001(\010\022Y\n\017sequencing_t"
  "ype\030\033 \001(\0162@.learning.genomics.deepvarian"
  "t.PileupImageOptions.SequencingType\022\032\n\022a"
  "lt_aligned_pileup\030\036 \001(\t\022\032\n\022sort_by_haplo"
  "types\030\037 \001(\010\022%\n\035min_non_zero_allele_frequ"
  "ency\030! \001(\002\022\034\n\024use_allele_frequency\030\" \001(\010"
  "\022\032\n\022types_to_alt_align\030$ \001(\t\022\026\n\016add_hp_c"
  "hannel\030% \001(\010\022%\n\035hp_tag_for_assembly_poli"
  "shing\030& \001(\005\022\020\n\010channels\030\' \003(\t\022,\n sort_by"
  "_haplotypes_sample_hp_tag\030# \001(\005B\002\030\001\"R\n\020M"
  "ultiAllelicMode\022\017\n\013UNSPECIFIED\020\000\022\026\n\022ADD_"
  "HET_ALT_IMAGES\020\001\022\025\n\021NO_HET_ALT_IMAGES\020\002\""
  "F\n\016SequencingType\022\030\n\024UNSPECIFIED_SEQ_TYP"
  "E\020\000\022\007\n\003WGS\020\001\022\007\n\003WES\020\002\022\010\n\004TRIO\020\003\"\200\002\n\rSamp"
  "leOptions\022\014\n\004role\030\006 \001(\t\022\014\n\004name\030\007 \001(\t\022\027\n"
  "\017reads_filenames\030\001 \003(\t\022\033\n\023downsample_fra"
  "ction\030\002 \001(\002\022S\n\026variant_caller_options\030\003 "
  "\001(\01323.learning.genomics.deepvariant.Vari"
  "antCallerOptions\022\025\n\rpileup_height\030\004 \001(\005\022"
  "\r\n\005order\030\005 \003(\005\022\"\n\032proposed_variants_file"
  "name\030\010 \001(\t\"\311\021\n\023MakeExamplesOptions\022\027\n\017ex"
  "clude_contigs\030\001 \003(\t\022\027\n\017calling_regions\030\002"
  " \003(\t\022\023\n\013random_seed\030\003 \001(\r\022\017\n\007n_cores\030\004 \001"
  "(\005\022S\n\026allele_counter_options\030\005 \001(\01323.lea"
  "rning.genomics.deepvariant.AlleleCounter"
  "Options\022^\n!deprecated_variant_caller_opt"
  "ions\030\006 \001(\01323.learning.genomics.deepvaria"
  "nt.VariantCallerOptions\022F\n\013pic_options\030\007"
  " \001(\01321.learning.genomics.deepvariant.Pil"
  "eupImageOptions\022M\n\017labeler_options\030\010 \001(\013"
  "24.learning.genomics.deepvariant.Variant"
  "LabelerOptions\022@\n\021read_requirements\030\t \001("
  "\0132%.nucleus.genomics.v1.ReadRequirements"
  "\022\032\n\022reference_filename\030\n \001(\t\022\"\n\032deprecat"
  "ed_reads_filenames\030  \003(\t\022!\n\031deprecated_r"
  "eads_filename\030\013 \001(\t\022\033\n\023candidates_filena"
  "me\030\014 \001(\t\022\031\n\021examples_filename\030\r \001(\t\022\"\n\032c"
  "onfident_regions_filename\030\016 \001(\t\022\037\n\027truth"
  "_variants_filename\030\017 \001(\t\0221\n%deprecated_p"
  "roposed_variants_filename\030! \001(\tB\002\030\001\022\025\n\rg"
  "vcf_filename\030\020 \001(\t\022\026\n\016include_med_dp\030+ \001"
  "(\010\022\022\n\nmodel_name\030\021 \001(\t\022E\n\004mode\030\022 \001(\01627.l"
  "earning.genomics.deepvariant.MakeExample"
  "sOptions.Mode\022$\n\034min_shared_contigs_base"
  "pairs\030\023 \001(\002\022\017\n\007task_id\030\024 \001(\005\022\022\n\nnum_shar"
  "ds\030\025 \001(\005\022\031\n\021realigner_enabled\030\026 \001(\010\022J\n\021r"
  "ealigner_options\030\027 \001(\0132/.learning.genomi"
  "cs.deepvariant.RealignerOptions\022\037\n\027max_r"
  "eads_per_partition\030\030 \001(\005\022&\n\036deprecated_d"
  "ownsample_fraction\030\031 \001(\002\022\037\n\027exclude_call"
  "ing_regions\030\032 \003(\t\022^\n\021labeler_algorithm\030\033"
  " \001(\0162C.learning.genomics.deepvariant.Mak"
  "eExamplesOptions.LabelerAlgorithm\022\031\n\021run"
  "_info_filename\030\034 \001(\t\022#\n\033use_original_qua"
  "lity_scores\030\035 \001(\010\022\034\n\024select_variant_type"
  "s\030\036 \003(\t\022X\n\016variant_caller\030\037 \001(\0162@.learni"
  "ng.genomics.deepvariant.MakeExamplesOpti"
  "ons.VariantCaller\022\034\n\024use_allele_frequenc"
  "y\030\" \001(\010\022 \n\030population_vcf_filenames\030# \003("
  "\t\022\031\n\021runtime_by_region\030$ \001(\t\022\030\n\020use_ref_"
  "for_cram\030% \001(\010\022\034\n\024parse_sam_aux_fields\030&"
  " \001(\010\022\032\n\022aux_fields_to_keep\0302 \003(\t\022\026\n\016hts_"
  "block_size\030\' \001(\005\022\"\n\032logging_every_n_cand"
  "idates\030( \001(\005\022/\n\'customized_classes_label"
  "er_classes_list\030) \001(\t\0222\n*customized_clas"
  "ses_labeler_info_field_name\030* \001(\t\022\031\n\021mai"
  "n_sample_index\030, \001(\005\022\021\n\tbam_fname\030- \001(\t\022"
  "D\n\016sample_options\030. \003(\0132,.learning.genom"
  "ics.deepvariant.SampleOptions\022\034\n\024sample_"
  "role_to_train\030/ \001(\t\"2\n\004Mode\022\017\n\013UNSPECIFI"
  "ED\020\000\022\013\n\007CALLING\020\001\022\014\n\010TRAINING\020\002\"\204\001\n\020Labe"
  "lerAlgorithm\022!\n\035UNSPECIFIED_LABELER_ALGO"
  "RITHM\020\000\022\026\n\022POSITIONAL_LABELER\020\001\022\025\n\021HAPLO"
  "TYPE_LABELER\020\002\022\036\n\032CUSTOMIZED_CLASSES_LAB"
  "ELER\020\003\"^\n\rVariantCaller\022\026\n\022UNSPECIFIED_C"
  "ALLER\020\000\022\031\n\025VERY_SENSITIVE_CALLER\020\001\022\032\n\026VC"
  "F_CANDIDATE_IMPORTER\020\002\"U\n\030DeepVariantDat"
  "asetConfig\022\014\n\004name\030\001 \001(\t\022\025\n\rtfrecord_pat"
  "h\030\002 \001(\t\022\024\n\014num_examples\030\003 \001(\r\"\272\004\n\030DeepVa"
  "riantInputDatasets\022Q\n\010datasets\030\001 \003(\0132\?.l"
  "earning.genomics.deepvariant.DeepVariant"
  "InputDatasets.Dataset\022\022\n\ngroup_name\030\002 \001("
  "\t\032\266\003\n\007Dataset\022\031\n\021confident_regions\030\001 \001(\t"
  "\022\r\n\005reads\030\002 \001(\t\022\013\n\003ref\030\003 \001(\t\022\026\n\016truth_va"
  "riants\030\004 \001(\t\022\017\n\007regions\030\005 \001(\t\022&\n\036trainin"
  "g_random_emit_ref_sites\030\006 \001(\t\022\034\n\024downsam"
  "ple_fractions\030\007 \003(\t\022\027\n\017exclude_regions\030\010"
  " \001(\t\022\023\n\013sample_name\030\t \001(\t\022\027\n\017sequencing_"
  "type\030\n \001(\t\022\027\n\017population_vcfs\030\013 \001(\t\022%\n\035h"
  "p_tag_for_assembly_polishing\030\r \001(\005\022\032\n\022so"
  "rt_by_haplotypes\030\016 \001(\010\022\034\n\024parse_sam_aux_"
  "fields\030\017 \001(\010\022\026\n\016add_hp_channel\030\020 \001(\010\022,\n "
  "sort_by_haplotypes_sample_hp_tag\030\014 \001(\005B\002"
  "\030\001\"h\n\035DeepVariantInputDatasetsGroup\022G\n\006g"
  "roups\030\001 \003(\01327.learning.genomics.deepvari"
  "ant.DeepVariantInputDatasets\"\364\004\n\017Labelin"
  "gMetrics\022\035\n\025n_truth_variant_sites\030\001 \001(\005\022"
  "\037\n\027n_truth_variant_alleles\030\002 \001(\005\022!\n\031n_ca"
  "ndidate_variant_sites\030\003 \001(\005\022#\n\033n_candida"
  "te_variant_alleles\030\004 \001(\005\022/\n\'n_non_confid"
  "ent_candidate_variant_sites\030\005 \001(\005\022\035\n\025n_t"
  "rue_positive_sites\030\006 \001(\005\022\037\n\027n_true_posit"
  "ive_alleles\030\007 \001(\005\022\036\n\026n_false_negative_si"
  "tes\030\010 \001(\005\022 \n\030n_false_negative_alleles\030\t "
  "\001(\005\022\036\n\026n_false_positive_sites\030\n \001(\005\022 \n\030n"
  "_false_positive_alleles\030\013 \001(\005\022\"\n\032n_inexa"
  "ct_position_matches\030\014 \001(\005\022 \n\030n_exact_pos"
  "ition_matches\030\r \001(\005\022+\n#n_exact_position_"
  "and_allele_matches\030\016 \001(\005\0228\n0n_exact_posi"
  "tion_and_allele_and_genotype_matches\030\017 \001"
  "(\005\0227\n/n_truth_multiallelics_sites_with_m"
  "issed_alleles\030\020 \001(\005\"\216\001\n\021MakeExamplesStat"
  "s\022\024\n\014num_examples\030\001 \001(\005\022\022\n\nnum_indels\030\002 "
  "\001(\005\022\020\n\010num_snps\030\003 \001(\005\022\023\n\013num_class_0\030\004 \001"
  "(\005\022\023\n\013num_class_1\030\005 \001(\005\022\023\n\013num_class_2\030\006"
  " \001(\005\"\257\002\n\023MakeExamplesRunInfo\022C\n\007options\030"
  "\001 \001(\01322.learning.genomics.deepvariant.Ma"
  "keExamplesOptions\022H\n\020labeling_metrics\030\002 "
  "\001(\0132..learning.genomics.deepvariant.Labe"
  "lingMetrics\022H\n\020resource_metrics\030\003 \001(\0132.."
  "learning.genomics.deepvariant.ResourceMe"
  "trics\022\?\n\005stats\030\004 \001(\01320.learning.genomics"
  ".deepvariant.MakeExamplesStats*j\n\nAllele"
  "Type\022\017\n\013UNSPECIFIED\020\000\022\r\n\tREFERENCE\020\001\022\020\n\014"
  "SUBSTITUTION\020\002\022\r\n\tINSERTION\020\003\022\014\n\010DELETIO"
  "N\020\004\022\r\n\tSOFT_CLIP\020\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto_deps[5] = {
  &::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto,
  &::descriptor_table_deepvariant_2fprotos_2fresources_2eproto,
  &::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fposition_2eproto,
  &::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto,
  &::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto_sccs[29] = {
  &scc_info_Allele_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_AlleleCount_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_AlleleCount_Alleles_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_AlleleCount_ReadAllelesEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_AlleleCount_SampleAllelesEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_AlleleCountSummary_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_AlleleCounterOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_CallVariantsOutput_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_CallVariantsOutput_AltAlleleIndices_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_CallVariantsOutput_DebugInfo_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_DeepVariantCall_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_DeepVariantCall_AlleleFrequencyEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_DeepVariantCall_AlleleSupportEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_DeepVariantCall_AlleleSupportExtEntry_DoNotUse_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_DeepVariantCall_ReadSupport_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_DeepVariantCall_SupportingReads_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_DeepVariantCall_SupportingReadsExt_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_DeepVariantDatasetConfig_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_DeepVariantInputDatasets_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_DeepVariantInputDatasets_Dataset_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_DeepVariantInputDatasetsGroup_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_LabelingMetrics_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_MakeExamplesOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_MakeExamplesRunInfo_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_MakeExamplesStats_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_PileupImageOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_SampleOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_VariantCallerOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
  &scc_info_VariantLabelerOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto_once;
static bool descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto = {
  &descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto_initialized, descriptor_table_protodef_deepvariant_2fprotos_2fdeepvariant_2eproto, "deepvariant/protos/deepvariant.proto", 9186,
  &descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto_once, descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto_sccs, descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto_deps, 29, 5,
  schemas, file_default_instances, TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto::offsets,
  file_level_metadata_deepvariant_2fprotos_2fdeepvariant_2eproto, 29, file_level_enum_descriptors_deepvariant_2fprotos_2fdeepvariant_2eproto, file_level_service_descriptors_deepvariant_2fprotos_2fdeepvariant_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_deepvariant_2fprotos_2fdeepvariant_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto), true);
namespace learning {
namespace genomics {
namespace deepvariant {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PileupImageOptions_MultiAllelicMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
  return file_level_enum_descriptors_deepvariant_2fprotos_2fdeepvariant_2eproto[0];
}
bool PileupImageOptions_MultiAllelicMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PileupImageOptions_MultiAllelicMode PileupImageOptions::UNSPECIFIED;
constexpr PileupImageOptions_MultiAllelicMode PileupImageOptions::ADD_HET_ALT_IMAGES;
constexpr PileupImageOptions_MultiAllelicMode PileupImageOptions::NO_HET_ALT_IMAGES;
constexpr PileupImageOptions_MultiAllelicMode PileupImageOptions::MultiAllelicMode_MIN;
constexpr PileupImageOptions_MultiAllelicMode PileupImageOptions::MultiAllelicMode_MAX;
constexpr int PileupImageOptions::MultiAllelicMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PileupImageOptions_SequencingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
  return file_level_enum_descriptors_deepvariant_2fprotos_2fdeepvariant_2eproto[1];
}
bool PileupImageOptions_SequencingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PileupImageOptions_SequencingType PileupImageOptions::UNSPECIFIED_SEQ_TYPE;
constexpr PileupImageOptions_SequencingType PileupImageOptions::WGS;
constexpr PileupImageOptions_SequencingType PileupImageOptions::WES;
constexpr PileupImageOptions_SequencingType PileupImageOptions::TRIO;
constexpr PileupImageOptions_SequencingType PileupImageOptions::SequencingType_MIN;
constexpr PileupImageOptions_SequencingType PileupImageOptions::SequencingType_MAX;
constexpr int PileupImageOptions::SequencingType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MakeExamplesOptions_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
  return file_level_enum_descriptors_deepvariant_2fprotos_2fdeepvariant_2eproto[2];
}
bool MakeExamplesOptions_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MakeExamplesOptions_Mode MakeExamplesOptions::UNSPECIFIED;
constexpr MakeExamplesOptions_Mode MakeExamplesOptions::CALLING;
constexpr MakeExamplesOptions_Mode MakeExamplesOptions::TRAINING;
constexpr MakeExamplesOptions_Mode MakeExamplesOptions::Mode_MIN;
constexpr MakeExamplesOptions_Mode MakeExamplesOptions::Mode_MAX;
constexpr int MakeExamplesOptions::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MakeExamplesOptions_LabelerAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
  return file_level_enum_descriptors_deepvariant_2fprotos_2fdeepvariant_2eproto[3];
}
bool MakeExamplesOptions_LabelerAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MakeExamplesOptions_LabelerAlgorithm MakeExamplesOptions::UNSPECIFIED_LABELER_ALGORITHM;
constexpr MakeExamplesOptions_LabelerAlgorithm MakeExamplesOptions::POSITIONAL_LABELER;
constexpr MakeExamplesOptions_LabelerAlgorithm MakeExamplesOptions::HAPLOTYPE_LABELER;
constexpr MakeExamplesOptions_LabelerAlgorithm MakeExamplesOptions::CUSTOMIZED_CLASSES_LABELER;
constexpr MakeExamplesOptions_LabelerAlgorithm MakeExamplesOptions::LabelerAlgorithm_MIN;
constexpr MakeExamplesOptions_LabelerAlgorithm MakeExamplesOptions::LabelerAlgorithm_MAX;
constexpr int MakeExamplesOptions::LabelerAlgorithm_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MakeExamplesOptions_VariantCaller_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
  return file_level_enum_descriptors_deepvariant_2fprotos_2fdeepvariant_2eproto[4];
}
bool MakeExamplesOptions_VariantCaller_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MakeExamplesOptions_VariantCaller MakeExamplesOptions::UNSPECIFIED_CALLER;
constexpr MakeExamplesOptions_VariantCaller MakeExamplesOptions::VERY_SENSITIVE_CALLER;
constexpr MakeExamplesOptions_VariantCaller MakeExamplesOptions::VCF_CANDIDATE_IMPORTER;
constexpr MakeExamplesOptions_VariantCaller MakeExamplesOptions::VariantCaller_MIN;
constexpr MakeExamplesOptions_VariantCaller MakeExamplesOptions::VariantCaller_MAX;
constexpr int MakeExamplesOptions::VariantCaller_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlleleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
  return file_level_enum_descriptors_deepvariant_2fprotos_2fdeepvariant_2eproto[5];
}
bool AlleleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Allele::InitAsDefaultInstance() {
}
class Allele::_Internal {
 public:
};

Allele::Allele()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.Allele)
}
Allele::Allele(const Allele& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bases_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.bases().empty()) {
    bases_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bases_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_low_quality_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_low_quality_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.Allele)
}

void Allele::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Allele_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  bases_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_low_quality_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_low_quality_));
}

Allele::~Allele() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.Allele)
  SharedDtor();
}

void Allele::SharedDtor() {
  bases_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Allele::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Allele& Allele::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Allele_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void Allele::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.Allele)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bases_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_low_quality_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_low_quality_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Allele::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string bases = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_bases(), ptr, ctx, "learning.genomics.deepvariant.Allele.bases");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.AlleleType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::learning::genomics::deepvariant::AlleleType>(val));
        } else goto handle_unusual;
        continue;
      // int32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_low_quality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_low_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Allele::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.Allele)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bases = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bases()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->bases().data(), static_cast<int>(this->bases().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.Allele.bases"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.AlleleType type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::learning::genomics::deepvariant::AlleleType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_low_quality = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_low_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.Allele)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.Allele)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Allele::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.Allele)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bases = 1;
  if (this->bases().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bases().data(), static_cast<int>(this->bases().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.Allele.bases");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bases(), output);
  }

  // .learning.genomics.deepvariant.AlleleType type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // bool is_low_quality = 4;
  if (this->is_low_quality() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->is_low_quality(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.Allele)
}

::PROTOBUF_NAMESPACE_ID::uint8* Allele::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.Allele)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bases = 1;
  if (this->bases().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bases().data(), static_cast<int>(this->bases().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.Allele.bases");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->bases(), target);
  }

  // .learning.genomics.deepvariant.AlleleType type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // bool is_low_quality = 4;
  if (this->is_low_quality() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->is_low_quality(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.Allele)
  return target;
}

size_t Allele::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.Allele)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bases = 1;
  if (this->bases().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->bases());
  }

  // .learning.genomics.deepvariant.AlleleType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // bool is_low_quality = 4;
  if (this->is_low_quality() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Allele::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.Allele)
  GOOGLE_DCHECK_NE(&from, this);
  const Allele* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Allele>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.Allele)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.Allele)
    MergeFrom(*source);
  }
}

void Allele::MergeFrom(const Allele& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.Allele)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bases().size() > 0) {

    bases_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bases_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.is_low_quality() != 0) {
    set_is_low_quality(from.is_low_quality());
  }
}

void Allele::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.Allele)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Allele::CopyFrom(const Allele& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.Allele)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Allele::IsInitialized() const {
  return true;
}

void Allele::InternalSwap(Allele* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bases_.Swap(&other->bases_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(count_, other->count_);
  swap(is_low_quality_, other->is_low_quality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Allele::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AlleleCount_ReadAllelesEntry_DoNotUse::AlleleCount_ReadAllelesEntry_DoNotUse() {}
AlleleCount_ReadAllelesEntry_DoNotUse::AlleleCount_ReadAllelesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AlleleCount_ReadAllelesEntry_DoNotUse::MergeFrom(const AlleleCount_ReadAllelesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AlleleCount_ReadAllelesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AlleleCount_ReadAllelesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AlleleCount_Alleles::InitAsDefaultInstance() {
}
class AlleleCount_Alleles::_Internal {
 public:
};

AlleleCount_Alleles::AlleleCount_Alleles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.AlleleCount.Alleles)
}
AlleleCount_Alleles::AlleleCount_Alleles(const AlleleCount_Alleles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      alleles_(from.alleles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.AlleleCount.Alleles)
}

void AlleleCount_Alleles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlleleCount_Alleles_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
}

AlleleCount_Alleles::~AlleleCount_Alleles() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.AlleleCount.Alleles)
  SharedDtor();
}

void AlleleCount_Alleles::SharedDtor() {
}

void AlleleCount_Alleles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlleleCount_Alleles& AlleleCount_Alleles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlleleCount_Alleles_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void AlleleCount_Alleles::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.AlleleCount.Alleles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alleles_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlleleCount_Alleles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .learning.genomics.deepvariant.Allele alleles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_alleles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlleleCount_Alleles::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.AlleleCount.Alleles)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .learning.genomics.deepvariant.Allele alleles = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_alleles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.AlleleCount.Alleles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.AlleleCount.Alleles)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlleleCount_Alleles::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.AlleleCount.Alleles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .learning.genomics.deepvariant.Allele alleles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alleles_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->alleles(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.AlleleCount.Alleles)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlleleCount_Alleles::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.AlleleCount.Alleles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .learning.genomics.deepvariant.Allele alleles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->alleles_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->alleles(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.AlleleCount.Alleles)
  return target;
}

size_t AlleleCount_Alleles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.AlleleCount.Alleles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .learning.genomics.deepvariant.Allele alleles = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->alleles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->alleles(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlleleCount_Alleles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.AlleleCount.Alleles)
  GOOGLE_DCHECK_NE(&from, this);
  const AlleleCount_Alleles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlleleCount_Alleles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.AlleleCount.Alleles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.AlleleCount.Alleles)
    MergeFrom(*source);
  }
}

void AlleleCount_Alleles::MergeFrom(const AlleleCount_Alleles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.AlleleCount.Alleles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alleles_.MergeFrom(from.alleles_);
}

void AlleleCount_Alleles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.AlleleCount.Alleles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlleleCount_Alleles::CopyFrom(const AlleleCount_Alleles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.AlleleCount.Alleles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlleleCount_Alleles::IsInitialized() const {
  return true;
}

void AlleleCount_Alleles::InternalSwap(AlleleCount_Alleles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&alleles_)->InternalSwap(CastToBase(&other->alleles_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlleleCount_Alleles::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

AlleleCount_SampleAllelesEntry_DoNotUse::AlleleCount_SampleAllelesEntry_DoNotUse() {}
AlleleCount_SampleAllelesEntry_DoNotUse::AlleleCount_SampleAllelesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AlleleCount_SampleAllelesEntry_DoNotUse::MergeFrom(const AlleleCount_SampleAllelesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AlleleCount_SampleAllelesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void AlleleCount_SampleAllelesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void AlleleCount::InitAsDefaultInstance() {
  ::learning::genomics::deepvariant::_AlleleCount_default_instance_._instance.get_mutable()->position_ = const_cast< ::nucleus::genomics::v1::Position*>(
      ::nucleus::genomics::v1::Position::internal_default_instance());
}
class AlleleCount::_Internal {
 public:
  static const ::nucleus::genomics::v1::Position& position(const AlleleCount* msg);
};

const ::nucleus::genomics::v1::Position&
AlleleCount::_Internal::position(const AlleleCount* msg) {
  return *msg->position_;
}
void AlleleCount::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
AlleleCount::AlleleCount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.AlleleCount)
}
AlleleCount::AlleleCount(const AlleleCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  read_alleles_.MergeFrom(from.read_alleles_);
  sample_alleles_.MergeFrom(from.sample_alleles_);
  ref_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.ref_base().empty()) {
    ref_base_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ref_base_);
  }
  if (from.has_position()) {
    position_ = new ::nucleus::genomics::v1::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&ref_supporting_read_count_, &from.ref_supporting_read_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&track_ref_reads_) -
    reinterpret_cast<char*>(&ref_supporting_read_count_)) + sizeof(track_ref_reads_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.AlleleCount)
}

void AlleleCount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlleleCount_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  ref_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&track_ref_reads_) -
      reinterpret_cast<char*>(&position_)) + sizeof(track_ref_reads_));
}

AlleleCount::~AlleleCount() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.AlleleCount)
  SharedDtor();
}

void AlleleCount::SharedDtor() {
  ref_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
}

void AlleleCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlleleCount& AlleleCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlleleCount_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void AlleleCount::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.AlleleCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  read_alleles_.Clear();
  sample_alleles_.Clear();
  ref_base_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&ref_supporting_read_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&track_ref_reads_) -
      reinterpret_cast<char*>(&ref_supporting_read_count_)) + sizeof(track_ref_reads_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlleleCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nucleus.genomics.v1.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ref_base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ref_base(), ptr, ctx, "learning.genomics.deepvariant.AlleleCount.ref_base");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ref_supporting_read_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ref_supporting_read_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .learning.genomics.deepvariant.Allele> read_alleles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&read_alleles_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // int32 ref_nonconfident_read_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ref_nonconfident_read_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .learning.genomics.deepvariant.AlleleCount.Alleles> sample_alleles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&sample_alleles_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // bool track_ref_reads = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          track_ref_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlleleCount::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.AlleleCount)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nucleus.genomics.v1.Position position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ref_base = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ref_base()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ref_base().data(), static_cast<int>(this->ref_base().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.AlleleCount.ref_base"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ref_supporting_read_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_supporting_read_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .learning.genomics.deepvariant.Allele> read_alleles = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          AlleleCount_ReadAllelesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              AlleleCount_ReadAllelesEntry_DoNotUse,
              std::string, ::learning::genomics::deepvariant::Allele,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::Allele > > parser(&read_alleles_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.AlleleCount.ReadAllelesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ref_nonconfident_read_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_nonconfident_read_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .learning.genomics.deepvariant.AlleleCount.Alleles> sample_alleles = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          AlleleCount_SampleAllelesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              AlleleCount_SampleAllelesEntry_DoNotUse,
              std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles > > parser(&sample_alleles_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.AlleleCount.SampleAllelesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool track_ref_reads = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &track_ref_reads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.AlleleCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.AlleleCount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlleleCount::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.AlleleCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nucleus.genomics.v1.Position position = 1;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::position(this), output);
  }

  // string ref_base = 2;
  if (this->ref_base().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ref_base().data(), static_cast<int>(this->ref_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.AlleleCount.ref_base");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ref_base(), output);
  }

  // int32 ref_supporting_read_count = 3;
  if (this->ref_supporting_read_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->ref_supporting_read_count(), output);
  }

  // map<string, .learning.genomics.deepvariant.Allele> read_alleles = 4;
  if (!this->read_alleles().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::Allele >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "learning.genomics.deepvariant.AlleleCount.ReadAllelesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->read_alleles().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->read_alleles().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::Allele >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::Allele >::const_iterator
          it = this->read_alleles().begin();
          it != this->read_alleles().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        AlleleCount_ReadAllelesEntry_DoNotUse::Funcs::SerializeToCodedStream(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::Allele >::const_iterator
          it = this->read_alleles().begin();
          it != this->read_alleles().end(); ++it) {
        AlleleCount_ReadAllelesEntry_DoNotUse::Funcs::SerializeToCodedStream(4, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 ref_nonconfident_read_count = 5;
  if (this->ref_nonconfident_read_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->ref_nonconfident_read_count(), output);
  }

  // map<string, .learning.genomics.deepvariant.AlleleCount.Alleles> sample_alleles = 6;
  if (!this->sample_alleles().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "learning.genomics.deepvariant.AlleleCount.SampleAllelesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->sample_alleles().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->sample_alleles().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles >::const_iterator
          it = this->sample_alleles().begin();
          it != this->sample_alleles().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        AlleleCount_SampleAllelesEntry_DoNotUse::Funcs::SerializeToCodedStream(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles >::const_iterator
          it = this->sample_alleles().begin();
          it != this->sample_alleles().end(); ++it) {
        AlleleCount_SampleAllelesEntry_DoNotUse::Funcs::SerializeToCodedStream(6, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool track_ref_reads = 7;
  if (this->track_ref_reads() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->track_ref_reads(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.AlleleCount)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlleleCount::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.AlleleCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nucleus.genomics.v1.Position position = 1;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::position(this), target);
  }

  // string ref_base = 2;
  if (this->ref_base().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ref_base().data(), static_cast<int>(this->ref_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.AlleleCount.ref_base");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->ref_base(), target);
  }

  // int32 ref_supporting_read_count = 3;
  if (this->ref_supporting_read_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->ref_supporting_read_count(), target);
  }

  // map<string, .learning.genomics.deepvariant.Allele> read_alleles = 4;
  if (!this->read_alleles().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::Allele >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "learning.genomics.deepvariant.AlleleCount.ReadAllelesEntry.key");
      }
    };

    if (false &&
        this->read_alleles().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->read_alleles().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::Allele >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::Allele >::const_iterator
          it = this->read_alleles().begin();
          it != this->read_alleles().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AlleleCount_ReadAllelesEntry_DoNotUse::Funcs::SerializeToArray(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::Allele >::const_iterator
          it = this->read_alleles().begin();
          it != this->read_alleles().end(); ++it) {
        target = AlleleCount_ReadAllelesEntry_DoNotUse::Funcs::SerializeToArray(4, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 ref_nonconfident_read_count = 5;
  if (this->ref_nonconfident_read_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->ref_nonconfident_read_count(), target);
  }

  // map<string, .learning.genomics.deepvariant.AlleleCount.Alleles> sample_alleles = 6;
  if (!this->sample_alleles().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "learning.genomics.deepvariant.AlleleCount.SampleAllelesEntry.key");
      }
    };

    if (false &&
        this->sample_alleles().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->sample_alleles().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles >::const_iterator
          it = this->sample_alleles().begin();
          it != this->sample_alleles().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AlleleCount_SampleAllelesEntry_DoNotUse::Funcs::SerializeToArray(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles >::const_iterator
          it = this->sample_alleles().begin();
          it != this->sample_alleles().end(); ++it) {
        target = AlleleCount_SampleAllelesEntry_DoNotUse::Funcs::SerializeToArray(6, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool track_ref_reads = 7;
  if (this->track_ref_reads() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->track_ref_reads(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.AlleleCount)
  return target;
}

size_t AlleleCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.AlleleCount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .learning.genomics.deepvariant.Allele> read_alleles = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->read_alleles_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::Allele >::const_iterator
      it = this->read_alleles().begin();
      it != this->read_alleles().end(); ++it) {
    total_size += AlleleCount_ReadAllelesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .learning.genomics.deepvariant.AlleleCount.Alleles> sample_alleles = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->sample_alleles_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles >::const_iterator
      it = this->sample_alleles().begin();
      it != this->sample_alleles().end(); ++it) {
    total_size += AlleleCount_SampleAllelesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string ref_base = 2;
  if (this->ref_base().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ref_base());
  }

  // .nucleus.genomics.v1.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 ref_supporting_read_count = 3;
  if (this->ref_supporting_read_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ref_supporting_read_count());
  }

  // int32 ref_nonconfident_read_count = 5;
  if (this->ref_nonconfident_read_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ref_nonconfident_read_count());
  }

  // bool track_ref_reads = 7;
  if (this->track_ref_reads() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlleleCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.AlleleCount)
  GOOGLE_DCHECK_NE(&from, this);
  const AlleleCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlleleCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.AlleleCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.AlleleCount)
    MergeFrom(*source);
  }
}

void AlleleCount::MergeFrom(const AlleleCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.AlleleCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  read_alleles_.MergeFrom(from.read_alleles_);
  sample_alleles_.MergeFrom(from.sample_alleles_);
  if (from.ref_base().size() > 0) {

    ref_base_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ref_base_);
  }
  if (from.has_position()) {
    mutable_position()->::nucleus::genomics::v1::Position::MergeFrom(from.position());
  }
  if (from.ref_supporting_read_count() != 0) {
    set_ref_supporting_read_count(from.ref_supporting_read_count());
  }
  if (from.ref_nonconfident_read_count() != 0) {
    set_ref_nonconfident_read_count(from.ref_nonconfident_read_count());
  }
  if (from.track_ref_reads() != 0) {
    set_track_ref_reads(from.track_ref_reads());
  }
}

void AlleleCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.AlleleCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlleleCount::CopyFrom(const AlleleCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.AlleleCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlleleCount::IsInitialized() const {
  return true;
}

void AlleleCount::InternalSwap(AlleleCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  read_alleles_.Swap(&other->read_alleles_);
  sample_alleles_.Swap(&other->sample_alleles_);
  ref_base_.Swap(&other->ref_base_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(ref_supporting_read_count_, other->ref_supporting_read_count_);
  swap(ref_nonconfident_read_count_, other->ref_nonconfident_read_count_);
  swap(track_ref_reads_, other->track_ref_reads_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlleleCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlleleCountSummary::InitAsDefaultInstance() {
}
class AlleleCountSummary::_Internal {
 public:
};

AlleleCountSummary::AlleleCountSummary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.AlleleCountSummary)
}
AlleleCountSummary::AlleleCountSummary(const AlleleCountSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.reference_name().empty()) {
    reference_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_name_);
  }
  ref_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.ref_base().empty()) {
    ref_base_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ref_base_);
  }
  ::memcpy(&position_, &from.position_,
    static_cast<size_t>(reinterpret_cast<char*>(&ref_nonconfident_read_count_) -
    reinterpret_cast<char*>(&position_)) + sizeof(ref_nonconfident_read_count_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.AlleleCountSummary)
}

void AlleleCountSummary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlleleCountSummary_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  reference_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_base_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ref_nonconfident_read_count_) -
      reinterpret_cast<char*>(&position_)) + sizeof(ref_nonconfident_read_count_));
}

AlleleCountSummary::~AlleleCountSummary() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.AlleleCountSummary)
  SharedDtor();
}

void AlleleCountSummary::SharedDtor() {
  reference_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_base_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AlleleCountSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlleleCountSummary& AlleleCountSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlleleCountSummary_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void AlleleCountSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.AlleleCountSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_base_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ref_nonconfident_read_count_) -
      reinterpret_cast<char*>(&position_)) + sizeof(ref_nonconfident_read_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlleleCountSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reference_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_reference_name(), ptr, ctx, "learning.genomics.deepvariant.AlleleCountSummary.reference_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ref_base = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ref_base(), ptr, ctx, "learning.genomics.deepvariant.AlleleCountSummary.ref_base");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ref_supporting_read_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ref_supporting_read_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total_read_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_read_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ref_nonconfident_read_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ref_nonconfident_read_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlleleCountSummary::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.AlleleCountSummary)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string reference_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->reference_name().data(), static_cast<int>(this->reference_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.AlleleCountSummary.reference_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ref_base = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ref_base()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ref_base().data(), static_cast<int>(this->ref_base().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.AlleleCountSummary.ref_base"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ref_supporting_read_count = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_supporting_read_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_read_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_read_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ref_nonconfident_read_count = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_nonconfident_read_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.AlleleCountSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.AlleleCountSummary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlleleCountSummary::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.AlleleCountSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_name = 1;
  if (this->reference_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), static_cast<int>(this->reference_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.AlleleCountSummary.reference_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reference_name(), output);
  }

  // int64 position = 2;
  if (this->position() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->position(), output);
  }

  // string ref_base = 3;
  if (this->ref_base().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ref_base().data(), static_cast<int>(this->ref_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.AlleleCountSummary.ref_base");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ref_base(), output);
  }

  // int32 ref_supporting_read_count = 4;
  if (this->ref_supporting_read_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->ref_supporting_read_count(), output);
  }

  // int32 total_read_count = 5;
  if (this->total_read_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->total_read_count(), output);
  }

  // int32 ref_nonconfident_read_count = 6;
  if (this->ref_nonconfident_read_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->ref_nonconfident_read_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.AlleleCountSummary)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlleleCountSummary::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.AlleleCountSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_name = 1;
  if (this->reference_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reference_name().data(), static_cast<int>(this->reference_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.AlleleCountSummary.reference_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->reference_name(), target);
  }

  // int64 position = 2;
  if (this->position() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->position(), target);
  }

  // string ref_base = 3;
  if (this->ref_base().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ref_base().data(), static_cast<int>(this->ref_base().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.AlleleCountSummary.ref_base");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->ref_base(), target);
  }

  // int32 ref_supporting_read_count = 4;
  if (this->ref_supporting_read_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->ref_supporting_read_count(), target);
  }

  // int32 total_read_count = 5;
  if (this->total_read_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->total_read_count(), target);
  }

  // int32 ref_nonconfident_read_count = 6;
  if (this->ref_nonconfident_read_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->ref_nonconfident_read_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.AlleleCountSummary)
  return target;
}

size_t AlleleCountSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.AlleleCountSummary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reference_name = 1;
  if (this->reference_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->reference_name());
  }

  // string ref_base = 3;
  if (this->ref_base().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ref_base());
  }

  // int64 position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->position());
  }

  // int32 ref_supporting_read_count = 4;
  if (this->ref_supporting_read_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ref_supporting_read_count());
  }

  // int32 total_read_count = 5;
  if (this->total_read_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->total_read_count());
  }

  // int32 ref_nonconfident_read_count = 6;
  if (this->ref_nonconfident_read_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ref_nonconfident_read_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlleleCountSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.AlleleCountSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const AlleleCountSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlleleCountSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.AlleleCountSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.AlleleCountSummary)
    MergeFrom(*source);
  }
}

void AlleleCountSummary::MergeFrom(const AlleleCountSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.AlleleCountSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference_name().size() > 0) {

    reference_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_name_);
  }
  if (from.ref_base().size() > 0) {

    ref_base_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ref_base_);
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.ref_supporting_read_count() != 0) {
    set_ref_supporting_read_count(from.ref_supporting_read_count());
  }
  if (from.total_read_count() != 0) {
    set_total_read_count(from.total_read_count());
  }
  if (from.ref_nonconfident_read_count() != 0) {
    set_ref_nonconfident_read_count(from.ref_nonconfident_read_count());
  }
}

void AlleleCountSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.AlleleCountSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlleleCountSummary::CopyFrom(const AlleleCountSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.AlleleCountSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlleleCountSummary::IsInitialized() const {
  return true;
}

void AlleleCountSummary::InternalSwap(AlleleCountSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reference_name_.Swap(&other->reference_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ref_base_.Swap(&other->ref_base_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(ref_supporting_read_count_, other->ref_supporting_read_count_);
  swap(total_read_count_, other->total_read_count_);
  swap(ref_nonconfident_read_count_, other->ref_nonconfident_read_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlleleCountSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeepVariantCall_SupportingReads::InitAsDefaultInstance() {
}
class DeepVariantCall_SupportingReads::_Internal {
 public:
};

DeepVariantCall_SupportingReads::DeepVariantCall_SupportingReads()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
}
DeepVariantCall_SupportingReads::DeepVariantCall_SupportingReads(const DeepVariantCall_SupportingReads& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      read_names_(from.read_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
}

void DeepVariantCall_SupportingReads::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeepVariantCall_SupportingReads_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
}

DeepVariantCall_SupportingReads::~DeepVariantCall_SupportingReads() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
  SharedDtor();
}

void DeepVariantCall_SupportingReads::SharedDtor() {
}

void DeepVariantCall_SupportingReads::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeepVariantCall_SupportingReads& DeepVariantCall_SupportingReads::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeepVariantCall_SupportingReads_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void DeepVariantCall_SupportingReads::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  read_names_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeepVariantCall_SupportingReads::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string read_names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_read_names(), ptr, ctx, "learning.genomics.deepvariant.DeepVariantCall.SupportingReads.read_names");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeepVariantCall_SupportingReads::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string read_names = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_read_names()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->read_names(this->read_names_size() - 1).data(),
            static_cast<int>(this->read_names(this->read_names_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantCall.SupportingReads.read_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeepVariantCall_SupportingReads::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string read_names = 1;
  for (int i = 0, n = this->read_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->read_names(i).data(), static_cast<int>(this->read_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantCall.SupportingReads.read_names");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->read_names(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeepVariantCall_SupportingReads::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string read_names = 1;
  for (int i = 0, n = this->read_names_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->read_names(i).data(), static_cast<int>(this->read_names(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantCall.SupportingReads.read_names");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->read_names(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
  return target;
}

size_t DeepVariantCall_SupportingReads::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string read_names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->read_names_size());
  for (int i = 0, n = this->read_names_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->read_names(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeepVariantCall_SupportingReads::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
  GOOGLE_DCHECK_NE(&from, this);
  const DeepVariantCall_SupportingReads* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeepVariantCall_SupportingReads>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
    MergeFrom(*source);
  }
}

void DeepVariantCall_SupportingReads::MergeFrom(const DeepVariantCall_SupportingReads& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  read_names_.MergeFrom(from.read_names_);
}

void DeepVariantCall_SupportingReads::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeepVariantCall_SupportingReads::CopyFrom(const DeepVariantCall_SupportingReads& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeepVariantCall_SupportingReads::IsInitialized() const {
  return true;
}

void DeepVariantCall_SupportingReads::InternalSwap(DeepVariantCall_SupportingReads* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  read_names_.InternalSwap(CastToBase(&other->read_names_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeepVariantCall_SupportingReads::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DeepVariantCall_AlleleSupportEntry_DoNotUse::DeepVariantCall_AlleleSupportEntry_DoNotUse() {}
DeepVariantCall_AlleleSupportEntry_DoNotUse::DeepVariantCall_AlleleSupportEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DeepVariantCall_AlleleSupportEntry_DoNotUse::MergeFrom(const DeepVariantCall_AlleleSupportEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DeepVariantCall_AlleleSupportEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DeepVariantCall_AlleleSupportEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

DeepVariantCall_AlleleFrequencyEntry_DoNotUse::DeepVariantCall_AlleleFrequencyEntry_DoNotUse() {}
DeepVariantCall_AlleleFrequencyEntry_DoNotUse::DeepVariantCall_AlleleFrequencyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DeepVariantCall_AlleleFrequencyEntry_DoNotUse::MergeFrom(const DeepVariantCall_AlleleFrequencyEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DeepVariantCall_AlleleFrequencyEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DeepVariantCall_AlleleFrequencyEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void DeepVariantCall_ReadSupport::InitAsDefaultInstance() {
}
class DeepVariantCall_ReadSupport::_Internal {
 public:
};

DeepVariantCall_ReadSupport::DeepVariantCall_ReadSupport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
}
DeepVariantCall_ReadSupport::DeepVariantCall_ReadSupport(const DeepVariantCall_ReadSupport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  read_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.read_name().empty()) {
    read_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.read_name_);
  }
  is_low_quality_ = from.is_low_quality_;
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
}

void DeepVariantCall_ReadSupport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeepVariantCall_ReadSupport_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  read_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_low_quality_ = false;
}

DeepVariantCall_ReadSupport::~DeepVariantCall_ReadSupport() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
  SharedDtor();
}

void DeepVariantCall_ReadSupport::SharedDtor() {
  read_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeepVariantCall_ReadSupport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeepVariantCall_ReadSupport& DeepVariantCall_ReadSupport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeepVariantCall_ReadSupport_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void DeepVariantCall_ReadSupport::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  read_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_low_quality_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeepVariantCall_ReadSupport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string read_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_read_name(), ptr, ctx, "learning.genomics.deepvariant.DeepVariantCall.ReadSupport.read_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_low_quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_low_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeepVariantCall_ReadSupport::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string read_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_read_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->read_name().data(), static_cast<int>(this->read_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantCall.ReadSupport.read_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_low_quality = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_low_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeepVariantCall_ReadSupport::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string read_name = 1;
  if (this->read_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->read_name().data(), static_cast<int>(this->read_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantCall.ReadSupport.read_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->read_name(), output);
  }

  // bool is_low_quality = 2;
  if (this->is_low_quality() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_low_quality(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeepVariantCall_ReadSupport::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string read_name = 1;
  if (this->read_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->read_name().data(), static_cast<int>(this->read_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantCall.ReadSupport.read_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->read_name(), target);
  }

  // bool is_low_quality = 2;
  if (this->is_low_quality() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_low_quality(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
  return target;
}

size_t DeepVariantCall_ReadSupport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string read_name = 1;
  if (this->read_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->read_name());
  }

  // bool is_low_quality = 2;
  if (this->is_low_quality() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeepVariantCall_ReadSupport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
  GOOGLE_DCHECK_NE(&from, this);
  const DeepVariantCall_ReadSupport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeepVariantCall_ReadSupport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
    MergeFrom(*source);
  }
}

void DeepVariantCall_ReadSupport::MergeFrom(const DeepVariantCall_ReadSupport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.read_name().size() > 0) {

    read_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.read_name_);
  }
  if (from.is_low_quality() != 0) {
    set_is_low_quality(from.is_low_quality());
  }
}

void DeepVariantCall_ReadSupport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeepVariantCall_ReadSupport::CopyFrom(const DeepVariantCall_ReadSupport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeepVariantCall_ReadSupport::IsInitialized() const {
  return true;
}

void DeepVariantCall_ReadSupport::InternalSwap(DeepVariantCall_ReadSupport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  read_name_.Swap(&other->read_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_low_quality_, other->is_low_quality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeepVariantCall_ReadSupport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeepVariantCall_SupportingReadsExt::InitAsDefaultInstance() {
}
class DeepVariantCall_SupportingReadsExt::_Internal {
 public:
};

DeepVariantCall_SupportingReadsExt::DeepVariantCall_SupportingReadsExt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
}
DeepVariantCall_SupportingReadsExt::DeepVariantCall_SupportingReadsExt(const DeepVariantCall_SupportingReadsExt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      read_infos_(from.read_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
}

void DeepVariantCall_SupportingReadsExt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeepVariantCall_SupportingReadsExt_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
}

DeepVariantCall_SupportingReadsExt::~DeepVariantCall_SupportingReadsExt() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
  SharedDtor();
}

void DeepVariantCall_SupportingReadsExt::SharedDtor() {
}

void DeepVariantCall_SupportingReadsExt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeepVariantCall_SupportingReadsExt& DeepVariantCall_SupportingReadsExt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeepVariantCall_SupportingReadsExt_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void DeepVariantCall_SupportingReadsExt::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  read_infos_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeepVariantCall_SupportingReadsExt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .learning.genomics.deepvariant.DeepVariantCall.ReadSupport read_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_read_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeepVariantCall_SupportingReadsExt::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .learning.genomics.deepvariant.DeepVariantCall.ReadSupport read_infos = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_read_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeepVariantCall_SupportingReadsExt::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .learning.genomics.deepvariant.DeepVariantCall.ReadSupport read_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->read_infos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->read_infos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeepVariantCall_SupportingReadsExt::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .learning.genomics.deepvariant.DeepVariantCall.ReadSupport read_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->read_infos_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->read_infos(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
  return target;
}

size_t DeepVariantCall_SupportingReadsExt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .learning.genomics.deepvariant.DeepVariantCall.ReadSupport read_infos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->read_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->read_infos(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeepVariantCall_SupportingReadsExt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
  GOOGLE_DCHECK_NE(&from, this);
  const DeepVariantCall_SupportingReadsExt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeepVariantCall_SupportingReadsExt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
    MergeFrom(*source);
  }
}

void DeepVariantCall_SupportingReadsExt::MergeFrom(const DeepVariantCall_SupportingReadsExt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  read_infos_.MergeFrom(from.read_infos_);
}

void DeepVariantCall_SupportingReadsExt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeepVariantCall_SupportingReadsExt::CopyFrom(const DeepVariantCall_SupportingReadsExt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeepVariantCall_SupportingReadsExt::IsInitialized() const {
  return true;
}

void DeepVariantCall_SupportingReadsExt::InternalSwap(DeepVariantCall_SupportingReadsExt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&read_infos_)->InternalSwap(CastToBase(&other->read_infos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeepVariantCall_SupportingReadsExt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DeepVariantCall_AlleleSupportExtEntry_DoNotUse::DeepVariantCall_AlleleSupportExtEntry_DoNotUse() {}
DeepVariantCall_AlleleSupportExtEntry_DoNotUse::DeepVariantCall_AlleleSupportExtEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DeepVariantCall_AlleleSupportExtEntry_DoNotUse::MergeFrom(const DeepVariantCall_AlleleSupportExtEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DeepVariantCall_AlleleSupportExtEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DeepVariantCall_AlleleSupportExtEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void DeepVariantCall::InitAsDefaultInstance() {
  ::learning::genomics::deepvariant::_DeepVariantCall_default_instance_._instance.get_mutable()->variant_ = const_cast< ::nucleus::genomics::v1::Variant*>(
      ::nucleus::genomics::v1::Variant::internal_default_instance());
  ::learning::genomics::deepvariant::_DeepVariantCall_default_instance_._instance.get_mutable()->ref_support_ext_ = const_cast< ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt*>(
      ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt::internal_default_instance());
}
class DeepVariantCall::_Internal {
 public:
  static const ::nucleus::genomics::v1::Variant& variant(const DeepVariantCall* msg);
  static const ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt& ref_support_ext(const DeepVariantCall* msg);
};

const ::nucleus::genomics::v1::Variant&
DeepVariantCall::_Internal::variant(const DeepVariantCall* msg) {
  return *msg->variant_;
}
const ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt&
DeepVariantCall::_Internal::ref_support_ext(const DeepVariantCall* msg) {
  return *msg->ref_support_ext_;
}
void DeepVariantCall::clear_variant() {
  if (GetArenaNoVirtual() == nullptr && variant_ != nullptr) {
    delete variant_;
  }
  variant_ = nullptr;
}
DeepVariantCall::DeepVariantCall()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.DeepVariantCall)
}
DeepVariantCall::DeepVariantCall(const DeepVariantCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ref_support_(from.ref_support_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  allele_support_.MergeFrom(from.allele_support_);
  allele_frequency_.MergeFrom(from.allele_frequency_);
  allele_support_ext_.MergeFrom(from.allele_support_ext_);
  if (from.has_variant()) {
    variant_ = new ::nucleus::genomics::v1::Variant(*from.variant_);
  } else {
    variant_ = nullptr;
  }
  if (from.has_ref_support_ext()) {
    ref_support_ext_ = new ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt(*from.ref_support_ext_);
  } else {
    ref_support_ext_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.DeepVariantCall)
}

void DeepVariantCall::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeepVariantCall_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  ::memset(&variant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ref_support_ext_) -
      reinterpret_cast<char*>(&variant_)) + sizeof(ref_support_ext_));
}

DeepVariantCall::~DeepVariantCall() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.DeepVariantCall)
  SharedDtor();
}

void DeepVariantCall::SharedDtor() {
  if (this != internal_default_instance()) delete variant_;
  if (this != internal_default_instance()) delete ref_support_ext_;
}

void DeepVariantCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeepVariantCall& DeepVariantCall::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeepVariantCall_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void DeepVariantCall::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.DeepVariantCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allele_support_.Clear();
  allele_frequency_.Clear();
  ref_support_.Clear();
  allele_support_ext_.Clear();
  if (GetArenaNoVirtual() == nullptr && variant_ != nullptr) {
    delete variant_;
  }
  variant_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ref_support_ext_ != nullptr) {
    delete ref_support_ext_;
  }
  ref_support_ext_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeepVariantCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nucleus.genomics.v1.Variant variant = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_variant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .learning.genomics.deepvariant.DeepVariantCall.SupportingReads> allele_support = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&allele_support_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // map<string, float> allele_frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&allele_frequency_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated string ref_support = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_ref_support(), ptr, ctx, "learning.genomics.deepvariant.DeepVariantCall.ref_support");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // map<string, .learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt> allele_support_ext = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&allele_support_ext_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt ref_support_ext = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_ref_support_ext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeepVariantCall::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.DeepVariantCall)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nucleus.genomics.v1.Variant variant = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_variant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .learning.genomics.deepvariant.DeepVariantCall.SupportingReads> allele_support = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DeepVariantCall_AlleleSupportEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              DeepVariantCall_AlleleSupportEntry_DoNotUse,
              std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads > > parser(&allele_support_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantCall.AlleleSupportEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> allele_frequency = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DeepVariantCall_AlleleFrequencyEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              DeepVariantCall_AlleleFrequencyEntry_DoNotUse,
              std::string, float,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, float > > parser(&allele_frequency_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantCall.AlleleFrequencyEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string ref_support = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_ref_support()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ref_support(this->ref_support_size() - 1).data(),
            static_cast<int>(this->ref_support(this->ref_support_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantCall.ref_support"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt> allele_support_ext = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DeepVariantCall_AlleleSupportExtEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              DeepVariantCall_AlleleSupportExtEntry_DoNotUse,
              std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt > > parser(&allele_support_ext_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantCall.AlleleSupportExtEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt ref_support_ext = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ref_support_ext()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.DeepVariantCall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.DeepVariantCall)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeepVariantCall::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.DeepVariantCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nucleus.genomics.v1.Variant variant = 1;
  if (this->has_variant()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::variant(this), output);
  }

  // map<string, .learning.genomics.deepvariant.DeepVariantCall.SupportingReads> allele_support = 2;
  if (!this->allele_support().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "learning.genomics.deepvariant.DeepVariantCall.AlleleSupportEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->allele_support().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->allele_support().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads >::const_iterator
          it = this->allele_support().begin();
          it != this->allele_support().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        DeepVariantCall_AlleleSupportEntry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads >::const_iterator
          it = this->allele_support().begin();
          it != this->allele_support().end(); ++it) {
        DeepVariantCall_AlleleSupportEntry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, float> allele_frequency = 3;
  if (!this->allele_frequency().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "learning.genomics.deepvariant.DeepVariantCall.AlleleFrequencyEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->allele_frequency().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->allele_frequency().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->allele_frequency().begin();
          it != this->allele_frequency().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        DeepVariantCall_AlleleFrequencyEntry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->allele_frequency().begin();
          it != this->allele_frequency().end(); ++it) {
        DeepVariantCall_AlleleFrequencyEntry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string ref_support = 4;
  for (int i = 0, n = this->ref_support_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ref_support(i).data(), static_cast<int>(this->ref_support(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantCall.ref_support");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->ref_support(i), output);
  }

  // map<string, .learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt> allele_support_ext = 5;
  if (!this->allele_support_ext().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "learning.genomics.deepvariant.DeepVariantCall.AlleleSupportExtEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->allele_support_ext().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->allele_support_ext().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt >::const_iterator
          it = this->allele_support_ext().begin();
          it != this->allele_support_ext().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        DeepVariantCall_AlleleSupportExtEntry_DoNotUse::Funcs::SerializeToCodedStream(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt >::const_iterator
          it = this->allele_support_ext().begin();
          it != this->allele_support_ext().end(); ++it) {
        DeepVariantCall_AlleleSupportExtEntry_DoNotUse::Funcs::SerializeToCodedStream(5, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt ref_support_ext = 6;
  if (this->has_ref_support_ext()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::ref_support_ext(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.DeepVariantCall)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeepVariantCall::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.DeepVariantCall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nucleus.genomics.v1.Variant variant = 1;
  if (this->has_variant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::variant(this), target);
  }

  // map<string, .learning.genomics.deepvariant.DeepVariantCall.SupportingReads> allele_support = 2;
  if (!this->allele_support().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "learning.genomics.deepvariant.DeepVariantCall.AlleleSupportEntry.key");
      }
    };

    if (false &&
        this->allele_support().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->allele_support().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads >::const_iterator
          it = this->allele_support().begin();
          it != this->allele_support().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DeepVariantCall_AlleleSupportEntry_DoNotUse::Funcs::SerializeToArray(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads >::const_iterator
          it = this->allele_support().begin();
          it != this->allele_support().end(); ++it) {
        target = DeepVariantCall_AlleleSupportEntry_DoNotUse::Funcs::SerializeToArray(2, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, float> allele_frequency = 3;
  if (!this->allele_frequency().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "learning.genomics.deepvariant.DeepVariantCall.AlleleFrequencyEntry.key");
      }
    };

    if (false &&
        this->allele_frequency().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->allele_frequency().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->allele_frequency().begin();
          it != this->allele_frequency().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DeepVariantCall_AlleleFrequencyEntry_DoNotUse::Funcs::SerializeToArray(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->allele_frequency().begin();
          it != this->allele_frequency().end(); ++it) {
        target = DeepVariantCall_AlleleFrequencyEntry_DoNotUse::Funcs::SerializeToArray(3, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string ref_support = 4;
  for (int i = 0, n = this->ref_support_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ref_support(i).data(), static_cast<int>(this->ref_support(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantCall.ref_support");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(4, this->ref_support(i), target);
  }

  // map<string, .learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt> allele_support_ext = 5;
  if (!this->allele_support_ext().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "learning.genomics.deepvariant.DeepVariantCall.AlleleSupportExtEntry.key");
      }
    };

    if (false &&
        this->allele_support_ext().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->allele_support_ext().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt >::const_iterator
          it = this->allele_support_ext().begin();
          it != this->allele_support_ext().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DeepVariantCall_AlleleSupportExtEntry_DoNotUse::Funcs::SerializeToArray(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt >::const_iterator
          it = this->allele_support_ext().begin();
          it != this->allele_support_ext().end(); ++it) {
        target = DeepVariantCall_AlleleSupportExtEntry_DoNotUse::Funcs::SerializeToArray(5, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt ref_support_ext = 6;
  if (this->has_ref_support_ext()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::ref_support_ext(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.DeepVariantCall)
  return target;
}

size_t DeepVariantCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.DeepVariantCall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .learning.genomics.deepvariant.DeepVariantCall.SupportingReads> allele_support = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->allele_support_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads >::const_iterator
      it = this->allele_support().begin();
      it != this->allele_support().end(); ++it) {
    total_size += DeepVariantCall_AlleleSupportEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, float> allele_frequency = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->allele_frequency_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->allele_frequency().begin();
      it != this->allele_frequency().end(); ++it) {
    total_size += DeepVariantCall_AlleleFrequencyEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string ref_support = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->ref_support_size());
  for (int i = 0, n = this->ref_support_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->ref_support(i));
  }

  // map<string, .learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt> allele_support_ext = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->allele_support_ext_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt >::const_iterator
      it = this->allele_support_ext().begin();
      it != this->allele_support_ext().end(); ++it) {
    total_size += DeepVariantCall_AlleleSupportExtEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .nucleus.genomics.v1.Variant variant = 1;
  if (this->has_variant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variant_);
  }

  // .learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt ref_support_ext = 6;
  if (this->has_ref_support_ext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ref_support_ext_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeepVariantCall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.DeepVariantCall)
  GOOGLE_DCHECK_NE(&from, this);
  const DeepVariantCall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeepVariantCall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.DeepVariantCall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.DeepVariantCall)
    MergeFrom(*source);
  }
}

void DeepVariantCall::MergeFrom(const DeepVariantCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.DeepVariantCall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allele_support_.MergeFrom(from.allele_support_);
  allele_frequency_.MergeFrom(from.allele_frequency_);
  ref_support_.MergeFrom(from.ref_support_);
  allele_support_ext_.MergeFrom(from.allele_support_ext_);
  if (from.has_variant()) {
    mutable_variant()->::nucleus::genomics::v1::Variant::MergeFrom(from.variant());
  }
  if (from.has_ref_support_ext()) {
    mutable_ref_support_ext()->::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt::MergeFrom(from.ref_support_ext());
  }
}

void DeepVariantCall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.DeepVariantCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeepVariantCall::CopyFrom(const DeepVariantCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.DeepVariantCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeepVariantCall::IsInitialized() const {
  return true;
}

void DeepVariantCall::InternalSwap(DeepVariantCall* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  allele_support_.Swap(&other->allele_support_);
  allele_frequency_.Swap(&other->allele_frequency_);
  ref_support_.InternalSwap(CastToBase(&other->ref_support_));
  allele_support_ext_.Swap(&other->allele_support_ext_);
  swap(variant_, other->variant_);
  swap(ref_support_ext_, other->ref_support_ext_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeepVariantCall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlleleCounterOptions::InitAsDefaultInstance() {
  ::learning::genomics::deepvariant::_AlleleCounterOptions_default_instance_._instance.get_mutable()->read_requirements_ = const_cast< ::nucleus::genomics::v1::ReadRequirements*>(
      ::nucleus::genomics::v1::ReadRequirements::internal_default_instance());
}
class AlleleCounterOptions::_Internal {
 public:
  static const ::nucleus::genomics::v1::ReadRequirements& read_requirements(const AlleleCounterOptions* msg);
};

const ::nucleus::genomics::v1::ReadRequirements&
AlleleCounterOptions::_Internal::read_requirements(const AlleleCounterOptions* msg) {
  return *msg->read_requirements_;
}
void AlleleCounterOptions::clear_read_requirements() {
  if (GetArenaNoVirtual() == nullptr && read_requirements_ != nullptr) {
    delete read_requirements_;
  }
  read_requirements_ = nullptr;
}
AlleleCounterOptions::AlleleCounterOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.AlleleCounterOptions)
}
AlleleCounterOptions::AlleleCounterOptions(const AlleleCounterOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_read_requirements()) {
    read_requirements_ = new ::nucleus::genomics::v1::ReadRequirements(*from.read_requirements_);
  } else {
    read_requirements_ = nullptr;
  }
  ::memcpy(&partition_size_, &from.partition_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&keep_legacy_behavior_) -
    reinterpret_cast<char*>(&partition_size_)) + sizeof(keep_legacy_behavior_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.AlleleCounterOptions)
}

void AlleleCounterOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlleleCounterOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  ::memset(&read_requirements_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keep_legacy_behavior_) -
      reinterpret_cast<char*>(&read_requirements_)) + sizeof(keep_legacy_behavior_));
}

AlleleCounterOptions::~AlleleCounterOptions() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.AlleleCounterOptions)
  SharedDtor();
}

void AlleleCounterOptions::SharedDtor() {
  if (this != internal_default_instance()) delete read_requirements_;
}

void AlleleCounterOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlleleCounterOptions& AlleleCounterOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlleleCounterOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void AlleleCounterOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.AlleleCounterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && read_requirements_ != nullptr) {
    delete read_requirements_;
  }
  read_requirements_ = nullptr;
  ::memset(&partition_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keep_legacy_behavior_) -
      reinterpret_cast<char*>(&partition_size_)) + sizeof(keep_legacy_behavior_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlleleCounterOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 partition_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          partition_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nucleus.genomics.v1.ReadRequirements read_requirements = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_read_requirements(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool track_ref_reads = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          track_ref_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool normalize_reads = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          normalize_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool keep_legacy_behavior = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          keep_legacy_behavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlleleCounterOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.AlleleCounterOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 partition_size = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nucleus.genomics.v1.ReadRequirements read_requirements = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_read_requirements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool track_ref_reads = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &track_ref_reads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool normalize_reads = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_reads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool keep_legacy_behavior = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_legacy_behavior_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.AlleleCounterOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.AlleleCounterOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlleleCounterOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.AlleleCounterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 partition_size = 1;
  if (this->partition_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->partition_size(), output);
  }

  // .nucleus.genomics.v1.ReadRequirements read_requirements = 2;
  if (this->has_read_requirements()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::read_requirements(this), output);
  }

  // bool track_ref_reads = 3;
  if (this->track_ref_reads() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->track_ref_reads(), output);
  }

  // bool normalize_reads = 4;
  if (this->normalize_reads() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->normalize_reads(), output);
  }

  // bool keep_legacy_behavior = 5;
  if (this->keep_legacy_behavior() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->keep_legacy_behavior(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.AlleleCounterOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlleleCounterOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.AlleleCounterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 partition_size = 1;
  if (this->partition_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->partition_size(), target);
  }

  // .nucleus.genomics.v1.ReadRequirements read_requirements = 2;
  if (this->has_read_requirements()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::read_requirements(this), target);
  }

  // bool track_ref_reads = 3;
  if (this->track_ref_reads() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->track_ref_reads(), target);
  }

  // bool normalize_reads = 4;
  if (this->normalize_reads() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->normalize_reads(), target);
  }

  // bool keep_legacy_behavior = 5;
  if (this->keep_legacy_behavior() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->keep_legacy_behavior(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.AlleleCounterOptions)
  return target;
}

size_t AlleleCounterOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.AlleleCounterOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nucleus.genomics.v1.ReadRequirements read_requirements = 2;
  if (this->has_read_requirements()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_requirements_);
  }

  // int32 partition_size = 1;
  if (this->partition_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->partition_size());
  }

  // bool track_ref_reads = 3;
  if (this->track_ref_reads() != 0) {
    total_size += 1 + 1;
  }

  // bool normalize_reads = 4;
  if (this->normalize_reads() != 0) {
    total_size += 1 + 1;
  }

  // bool keep_legacy_behavior = 5;
  if (this->keep_legacy_behavior() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlleleCounterOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.AlleleCounterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const AlleleCounterOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlleleCounterOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.AlleleCounterOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.AlleleCounterOptions)
    MergeFrom(*source);
  }
}

void AlleleCounterOptions::MergeFrom(const AlleleCounterOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.AlleleCounterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_read_requirements()) {
    mutable_read_requirements()->::nucleus::genomics::v1::ReadRequirements::MergeFrom(from.read_requirements());
  }
  if (from.partition_size() != 0) {
    set_partition_size(from.partition_size());
  }
  if (from.track_ref_reads() != 0) {
    set_track_ref_reads(from.track_ref_reads());
  }
  if (from.normalize_reads() != 0) {
    set_normalize_reads(from.normalize_reads());
  }
  if (from.keep_legacy_behavior() != 0) {
    set_keep_legacy_behavior(from.keep_legacy_behavior());
  }
}

void AlleleCounterOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.AlleleCounterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlleleCounterOptions::CopyFrom(const AlleleCounterOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.AlleleCounterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlleleCounterOptions::IsInitialized() const {
  return true;
}

void AlleleCounterOptions::InternalSwap(AlleleCounterOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(read_requirements_, other->read_requirements_);
  swap(partition_size_, other->partition_size_);
  swap(track_ref_reads_, other->track_ref_reads_);
  swap(normalize_reads_, other->normalize_reads_);
  swap(keep_legacy_behavior_, other->keep_legacy_behavior_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlleleCounterOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CallVariantsOutput_AltAlleleIndices::InitAsDefaultInstance() {
}
class CallVariantsOutput_AltAlleleIndices::_Internal {
 public:
};

CallVariantsOutput_AltAlleleIndices::CallVariantsOutput_AltAlleleIndices()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
}
CallVariantsOutput_AltAlleleIndices::CallVariantsOutput_AltAlleleIndices(const CallVariantsOutput_AltAlleleIndices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      indices_(from.indices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
}

void CallVariantsOutput_AltAlleleIndices::SharedCtor() {
}

CallVariantsOutput_AltAlleleIndices::~CallVariantsOutput_AltAlleleIndices() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
  SharedDtor();
}

void CallVariantsOutput_AltAlleleIndices::SharedDtor() {
}

void CallVariantsOutput_AltAlleleIndices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallVariantsOutput_AltAlleleIndices& CallVariantsOutput_AltAlleleIndices::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CallVariantsOutput_AltAlleleIndices_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void CallVariantsOutput_AltAlleleIndices::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indices_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CallVariantsOutput_AltAlleleIndices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 indices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CallVariantsOutput_AltAlleleIndices::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 indices = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_indices())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_indices())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CallVariantsOutput_AltAlleleIndices::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  if (this->indices_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_indices_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->indices_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->indices(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
}

::PROTOBUF_NAMESPACE_ID::uint8* CallVariantsOutput_AltAlleleIndices::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  if (this->indices_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _indices_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->indices_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
  return target;
}

size_t CallVariantsOutput_AltAlleleIndices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 indices = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallVariantsOutput_AltAlleleIndices::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
  GOOGLE_DCHECK_NE(&from, this);
  const CallVariantsOutput_AltAlleleIndices* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CallVariantsOutput_AltAlleleIndices>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
    MergeFrom(*source);
  }
}

void CallVariantsOutput_AltAlleleIndices::MergeFrom(const CallVariantsOutput_AltAlleleIndices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indices_.MergeFrom(from.indices_);
}

void CallVariantsOutput_AltAlleleIndices::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallVariantsOutput_AltAlleleIndices::CopyFrom(const CallVariantsOutput_AltAlleleIndices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallVariantsOutput_AltAlleleIndices::IsInitialized() const {
  return true;
}

void CallVariantsOutput_AltAlleleIndices::InternalSwap(CallVariantsOutput_AltAlleleIndices* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  indices_.InternalSwap(&other->indices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CallVariantsOutput_AltAlleleIndices::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CallVariantsOutput_DebugInfo::InitAsDefaultInstance() {
}
class CallVariantsOutput_DebugInfo::_Internal {
 public:
};

CallVariantsOutput_DebugInfo::CallVariantsOutput_DebugInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
}
CallVariantsOutput_DebugInfo::CallVariantsOutput_DebugInfo(const CallVariantsOutput_DebugInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      logits_(from.logits_),
      prelogits_(from.prelogits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&predicted_label_, &from.predicted_label_,
    static_cast<size_t>(reinterpret_cast<char*>(&true_label_) -
    reinterpret_cast<char*>(&predicted_label_)) + sizeof(true_label_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
}

void CallVariantsOutput_DebugInfo::SharedCtor() {
  ::memset(&predicted_label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&true_label_) -
      reinterpret_cast<char*>(&predicted_label_)) + sizeof(true_label_));
}

CallVariantsOutput_DebugInfo::~CallVariantsOutput_DebugInfo() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
  SharedDtor();
}

void CallVariantsOutput_DebugInfo::SharedDtor() {
}

void CallVariantsOutput_DebugInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallVariantsOutput_DebugInfo& CallVariantsOutput_DebugInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CallVariantsOutput_DebugInfo_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void CallVariantsOutput_DebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logits_.Clear();
  prelogits_.Clear();
  ::memset(&predicted_label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&true_label_) -
      reinterpret_cast<char*>(&predicted_label_)) + sizeof(true_label_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CallVariantsOutput_DebugInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 predicted_label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          predicted_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_insertion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          has_insertion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_deletion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          has_deletion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_snp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_snp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 true_label = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          true_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double logits = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_logits(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          add_logits(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double prelogits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_prelogits(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          add_prelogits(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CallVariantsOutput_DebugInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 predicted_label = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &predicted_label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_insertion = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_insertion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_deletion = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_deletion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_snp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_snp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 true_label = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &true_label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double logits = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_logits())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50u, input, this->mutable_logits())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double prelogits = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_prelogits())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 58u, input, this->mutable_prelogits())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CallVariantsOutput_DebugInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 predicted_label = 1;
  if (this->predicted_label() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->predicted_label(), output);
  }

  // bool has_insertion = 2;
  if (this->has_insertion() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->has_insertion(), output);
  }

  // bool has_deletion = 3;
  if (this->has_deletion() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->has_deletion(), output);
  }

  // bool is_snp = 4;
  if (this->is_snp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->is_snp(), output);
  }

  // int32 true_label = 5;
  if (this->true_label() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->true_label(), output);
  }

  // repeated double logits = 6;
  if (this->logits_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(6, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_logits_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->logits().data(), this->logits_size(), output);
  }

  // repeated double prelogits = 7;
  if (this->prelogits_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(7, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_prelogits_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->prelogits().data(), this->prelogits_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* CallVariantsOutput_DebugInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 predicted_label = 1;
  if (this->predicted_label() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->predicted_label(), target);
  }

  // bool has_insertion = 2;
  if (this->has_insertion() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->has_insertion(), target);
  }

  // bool has_deletion = 3;
  if (this->has_deletion() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->has_deletion(), target);
  }

  // bool is_snp = 4;
  if (this->is_snp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->is_snp(), target);
  }

  // int32 true_label = 5;
  if (this->true_label() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->true_label(), target);
  }

  // repeated double logits = 6;
  if (this->logits_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      6,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _logits_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->logits_, target);
  }

  // repeated double prelogits = 7;
  if (this->prelogits_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      7,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _prelogits_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->prelogits_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
  return target;
}

size_t CallVariantsOutput_DebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double logits = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->logits_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _logits_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double prelogits = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->prelogits_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _prelogits_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 predicted_label = 1;
  if (this->predicted_label() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->predicted_label());
  }

  // bool has_insertion = 2;
  if (this->has_insertion() != 0) {
    total_size += 1 + 1;
  }

  // bool has_deletion = 3;
  if (this->has_deletion() != 0) {
    total_size += 1 + 1;
  }

  // bool is_snp = 4;
  if (this->is_snp() != 0) {
    total_size += 1 + 1;
  }

  // int32 true_label = 5;
  if (this->true_label() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->true_label());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallVariantsOutput_DebugInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CallVariantsOutput_DebugInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CallVariantsOutput_DebugInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
    MergeFrom(*source);
  }
}

void CallVariantsOutput_DebugInfo::MergeFrom(const CallVariantsOutput_DebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logits_.MergeFrom(from.logits_);
  prelogits_.MergeFrom(from.prelogits_);
  if (from.predicted_label() != 0) {
    set_predicted_label(from.predicted_label());
  }
  if (from.has_insertion() != 0) {
    set_has_insertion(from.has_insertion());
  }
  if (from.has_deletion() != 0) {
    set_has_deletion(from.has_deletion());
  }
  if (from.is_snp() != 0) {
    set_is_snp(from.is_snp());
  }
  if (from.true_label() != 0) {
    set_true_label(from.true_label());
  }
}

void CallVariantsOutput_DebugInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallVariantsOutput_DebugInfo::CopyFrom(const CallVariantsOutput_DebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallVariantsOutput_DebugInfo::IsInitialized() const {
  return true;
}

void CallVariantsOutput_DebugInfo::InternalSwap(CallVariantsOutput_DebugInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  logits_.InternalSwap(&other->logits_);
  prelogits_.InternalSwap(&other->prelogits_);
  swap(predicted_label_, other->predicted_label_);
  swap(has_insertion_, other->has_insertion_);
  swap(has_deletion_, other->has_deletion_);
  swap(is_snp_, other->is_snp_);
  swap(true_label_, other->true_label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CallVariantsOutput_DebugInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CallVariantsOutput::InitAsDefaultInstance() {
  ::learning::genomics::deepvariant::_CallVariantsOutput_default_instance_._instance.get_mutable()->variant_ = const_cast< ::nucleus::genomics::v1::Variant*>(
      ::nucleus::genomics::v1::Variant::internal_default_instance());
  ::learning::genomics::deepvariant::_CallVariantsOutput_default_instance_._instance.get_mutable()->alt_allele_indices_ = const_cast< ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices*>(
      ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices::internal_default_instance());
  ::learning::genomics::deepvariant::_CallVariantsOutput_default_instance_._instance.get_mutable()->debug_info_ = const_cast< ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo*>(
      ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo::internal_default_instance());
}
class CallVariantsOutput::_Internal {
 public:
  static const ::nucleus::genomics::v1::Variant& variant(const CallVariantsOutput* msg);
  static const ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices& alt_allele_indices(const CallVariantsOutput* msg);
  static const ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo& debug_info(const CallVariantsOutput* msg);
};

const ::nucleus::genomics::v1::Variant&
CallVariantsOutput::_Internal::variant(const CallVariantsOutput* msg) {
  return *msg->variant_;
}
const ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices&
CallVariantsOutput::_Internal::alt_allele_indices(const CallVariantsOutput* msg) {
  return *msg->alt_allele_indices_;
}
const ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo&
CallVariantsOutput::_Internal::debug_info(const CallVariantsOutput* msg) {
  return *msg->debug_info_;
}
void CallVariantsOutput::clear_variant() {
  if (GetArenaNoVirtual() == nullptr && variant_ != nullptr) {
    delete variant_;
  }
  variant_ = nullptr;
}
CallVariantsOutput::CallVariantsOutput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.CallVariantsOutput)
}
CallVariantsOutput::CallVariantsOutput(const CallVariantsOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      genotype_probabilities_(from.genotype_probabilities_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_variant()) {
    variant_ = new ::nucleus::genomics::v1::Variant(*from.variant_);
  } else {
    variant_ = nullptr;
  }
  if (from.has_alt_allele_indices()) {
    alt_allele_indices_ = new ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices(*from.alt_allele_indices_);
  } else {
    alt_allele_indices_ = nullptr;
  }
  if (from.has_debug_info()) {
    debug_info_ = new ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo(*from.debug_info_);
  } else {
    debug_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.CallVariantsOutput)
}

void CallVariantsOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CallVariantsOutput_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  ::memset(&variant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debug_info_) -
      reinterpret_cast<char*>(&variant_)) + sizeof(debug_info_));
}

CallVariantsOutput::~CallVariantsOutput() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.CallVariantsOutput)
  SharedDtor();
}

void CallVariantsOutput::SharedDtor() {
  if (this != internal_default_instance()) delete variant_;
  if (this != internal_default_instance()) delete alt_allele_indices_;
  if (this != internal_default_instance()) delete debug_info_;
}

void CallVariantsOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CallVariantsOutput& CallVariantsOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CallVariantsOutput_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void CallVariantsOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.CallVariantsOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  genotype_probabilities_.Clear();
  if (GetArenaNoVirtual() == nullptr && variant_ != nullptr) {
    delete variant_;
  }
  variant_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && alt_allele_indices_ != nullptr) {
    delete alt_allele_indices_;
  }
  alt_allele_indices_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && debug_info_ != nullptr) {
    delete debug_info_;
  }
  debug_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CallVariantsOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nucleus.genomics.v1.Variant variant = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_variant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices alt_allele_indices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_alt_allele_indices(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double genotype_probabilities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_genotype_probabilities(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          add_genotype_probabilities(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.CallVariantsOutput.DebugInfo debug_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_debug_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CallVariantsOutput::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.CallVariantsOutput)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nucleus.genomics.v1.Variant variant = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_variant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices alt_allele_indices = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alt_allele_indices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double genotype_probabilities = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_genotype_probabilities())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26u, input, this->mutable_genotype_probabilities())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.CallVariantsOutput.DebugInfo debug_info = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_debug_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.CallVariantsOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.CallVariantsOutput)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CallVariantsOutput::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.CallVariantsOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nucleus.genomics.v1.Variant variant = 1;
  if (this->has_variant()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::variant(this), output);
  }

  // .learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices alt_allele_indices = 2;
  if (this->has_alt_allele_indices()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::alt_allele_indices(this), output);
  }

  // repeated double genotype_probabilities = 3;
  if (this->genotype_probabilities_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_genotype_probabilities_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->genotype_probabilities().data(), this->genotype_probabilities_size(), output);
  }

  // .learning.genomics.deepvariant.CallVariantsOutput.DebugInfo debug_info = 4;
  if (this->has_debug_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::debug_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.CallVariantsOutput)
}

::PROTOBUF_NAMESPACE_ID::uint8* CallVariantsOutput::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.CallVariantsOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nucleus.genomics.v1.Variant variant = 1;
  if (this->has_variant()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::variant(this), target);
  }

  // .learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices alt_allele_indices = 2;
  if (this->has_alt_allele_indices()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::alt_allele_indices(this), target);
  }

  // repeated double genotype_probabilities = 3;
  if (this->genotype_probabilities_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _genotype_probabilities_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->genotype_probabilities_, target);
  }

  // .learning.genomics.deepvariant.CallVariantsOutput.DebugInfo debug_info = 4;
  if (this->has_debug_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::debug_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.CallVariantsOutput)
  return target;
}

size_t CallVariantsOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.CallVariantsOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double genotype_probabilities = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->genotype_probabilities_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _genotype_probabilities_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .nucleus.genomics.v1.Variant variant = 1;
  if (this->has_variant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variant_);
  }

  // .learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices alt_allele_indices = 2;
  if (this->has_alt_allele_indices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alt_allele_indices_);
  }

  // .learning.genomics.deepvariant.CallVariantsOutput.DebugInfo debug_info = 4;
  if (this->has_debug_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *debug_info_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallVariantsOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.CallVariantsOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const CallVariantsOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CallVariantsOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.CallVariantsOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.CallVariantsOutput)
    MergeFrom(*source);
  }
}

void CallVariantsOutput::MergeFrom(const CallVariantsOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.CallVariantsOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  genotype_probabilities_.MergeFrom(from.genotype_probabilities_);
  if (from.has_variant()) {
    mutable_variant()->::nucleus::genomics::v1::Variant::MergeFrom(from.variant());
  }
  if (from.has_alt_allele_indices()) {
    mutable_alt_allele_indices()->::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices::MergeFrom(from.alt_allele_indices());
  }
  if (from.has_debug_info()) {
    mutable_debug_info()->::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo::MergeFrom(from.debug_info());
  }
}

void CallVariantsOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.CallVariantsOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallVariantsOutput::CopyFrom(const CallVariantsOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.CallVariantsOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallVariantsOutput::IsInitialized() const {
  return true;
}

void CallVariantsOutput::InternalSwap(CallVariantsOutput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  genotype_probabilities_.InternalSwap(&other->genotype_probabilities_);
  swap(variant_, other->variant_);
  swap(alt_allele_indices_, other->alt_allele_indices_);
  swap(debug_info_, other->debug_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CallVariantsOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VariantCallerOptions::InitAsDefaultInstance() {
}
class VariantCallerOptions::_Internal {
 public:
};

VariantCallerOptions::VariantCallerOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.VariantCallerOptions)
}
VariantCallerOptions::VariantCallerOptions(const VariantCallerOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sample_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sample_name().empty()) {
    sample_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sample_name_);
  }
  ::memcpy(&min_count_snps_, &from.min_count_snps_,
    static_cast<size_t>(reinterpret_cast<char*>(&track_ref_reads_) -
    reinterpret_cast<char*>(&min_count_snps_)) + sizeof(track_ref_reads_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.VariantCallerOptions)
}

void VariantCallerOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VariantCallerOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  sample_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_count_snps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&track_ref_reads_) -
      reinterpret_cast<char*>(&min_count_snps_)) + sizeof(track_ref_reads_));
}

VariantCallerOptions::~VariantCallerOptions() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.VariantCallerOptions)
  SharedDtor();
}

void VariantCallerOptions::SharedDtor() {
  sample_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VariantCallerOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VariantCallerOptions& VariantCallerOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VariantCallerOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void VariantCallerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.VariantCallerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sample_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_count_snps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&track_ref_reads_) -
      reinterpret_cast<char*>(&min_count_snps_)) + sizeof(track_ref_reads_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VariantCallerOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 min_count_snps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          min_count_snps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_count_indels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          min_count_indels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float min_fraction_snps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          min_fraction_snps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_fraction_indels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          min_fraction_indels_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fraction_reference_sites_to_emit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          fraction_reference_sites_to_emit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 random_seed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sample_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sample_name(), ptr, ctx, "learning.genomics.deepvariant.VariantCallerOptions.sample_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float p_error = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          p_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 max_gq = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          max_gq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gq_resolution = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          gq_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ploidy = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ploidy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float min_fraction_multiplier = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          min_fraction_multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool skip_uncalled_genotypes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          skip_uncalled_genotypes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool track_ref_reads = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          track_ref_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VariantCallerOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.VariantCallerOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 min_count_snps = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_count_snps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_count_indels = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_count_indels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_fraction_snps = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_fraction_snps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_fraction_indels = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_fraction_indels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fraction_reference_sites_to_emit = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fraction_reference_sites_to_emit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 random_seed = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sample_name = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sample_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sample_name().data(), static_cast<int>(this->sample_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.VariantCallerOptions.sample_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float p_error = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_gq = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_gq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gq_resolution = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &gq_resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ploidy = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ploidy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_fraction_multiplier = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_fraction_multiplier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool skip_uncalled_genotypes = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_uncalled_genotypes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool track_ref_reads = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &track_ref_reads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.VariantCallerOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.VariantCallerOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VariantCallerOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.VariantCallerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 min_count_snps = 1;
  if (this->min_count_snps() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->min_count_snps(), output);
  }

  // int32 min_count_indels = 2;
  if (this->min_count_indels() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->min_count_indels(), output);
  }

  // float min_fraction_snps = 3;
  if (!(this->min_fraction_snps() <= 0 && this->min_fraction_snps() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->min_fraction_snps(), output);
  }

  // float min_fraction_indels = 4;
  if (!(this->min_fraction_indels() <= 0 && this->min_fraction_indels() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->min_fraction_indels(), output);
  }

  // float fraction_reference_sites_to_emit = 5;
  if (!(this->fraction_reference_sites_to_emit() <= 0 && this->fraction_reference_sites_to_emit() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->fraction_reference_sites_to_emit(), output);
  }

  // uint32 random_seed = 6;
  if (this->random_seed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->random_seed(), output);
  }

  // string sample_name = 7;
  if (this->sample_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sample_name().data(), static_cast<int>(this->sample_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.VariantCallerOptions.sample_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sample_name(), output);
  }

  // float p_error = 8;
  if (!(this->p_error() <= 0 && this->p_error() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->p_error(), output);
  }

  // int32 max_gq = 9;
  if (this->max_gq() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->max_gq(), output);
  }

  // int32 gq_resolution = 10;
  if (this->gq_resolution() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->gq_resolution(), output);
  }

  // int32 ploidy = 11;
  if (this->ploidy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->ploidy(), output);
  }

  // float min_fraction_multiplier = 12;
  if (!(this->min_fraction_multiplier() <= 0 && this->min_fraction_multiplier() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->min_fraction_multiplier(), output);
  }

  // bool skip_uncalled_genotypes = 13;
  if (this->skip_uncalled_genotypes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->skip_uncalled_genotypes(), output);
  }

  // bool track_ref_reads = 14;
  if (this->track_ref_reads() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->track_ref_reads(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.VariantCallerOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* VariantCallerOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.VariantCallerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 min_count_snps = 1;
  if (this->min_count_snps() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->min_count_snps(), target);
  }

  // int32 min_count_indels = 2;
  if (this->min_count_indels() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->min_count_indels(), target);
  }

  // float min_fraction_snps = 3;
  if (!(this->min_fraction_snps() <= 0 && this->min_fraction_snps() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->min_fraction_snps(), target);
  }

  // float min_fraction_indels = 4;
  if (!(this->min_fraction_indels() <= 0 && this->min_fraction_indels() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->min_fraction_indels(), target);
  }

  // float fraction_reference_sites_to_emit = 5;
  if (!(this->fraction_reference_sites_to_emit() <= 0 && this->fraction_reference_sites_to_emit() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->fraction_reference_sites_to_emit(), target);
  }

  // uint32 random_seed = 6;
  if (this->random_seed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->random_seed(), target);
  }

  // string sample_name = 7;
  if (this->sample_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sample_name().data(), static_cast<int>(this->sample_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.VariantCallerOptions.sample_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->sample_name(), target);
  }

  // float p_error = 8;
  if (!(this->p_error() <= 0 && this->p_error() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->p_error(), target);
  }

  // int32 max_gq = 9;
  if (this->max_gq() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->max_gq(), target);
  }

  // int32 gq_resolution = 10;
  if (this->gq_resolution() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->gq_resolution(), target);
  }

  // int32 ploidy = 11;
  if (this->ploidy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->ploidy(), target);
  }

  // float min_fraction_multiplier = 12;
  if (!(this->min_fraction_multiplier() <= 0 && this->min_fraction_multiplier() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->min_fraction_multiplier(), target);
  }

  // bool skip_uncalled_genotypes = 13;
  if (this->skip_uncalled_genotypes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->skip_uncalled_genotypes(), target);
  }

  // bool track_ref_reads = 14;
  if (this->track_ref_reads() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->track_ref_reads(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.VariantCallerOptions)
  return target;
}

size_t VariantCallerOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.VariantCallerOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sample_name = 7;
  if (this->sample_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sample_name());
  }

  // int32 min_count_snps = 1;
  if (this->min_count_snps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_count_snps());
  }

  // int32 min_count_indels = 2;
  if (this->min_count_indels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_count_indels());
  }

  // float min_fraction_snps = 3;
  if (!(this->min_fraction_snps() <= 0 && this->min_fraction_snps() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_fraction_indels = 4;
  if (!(this->min_fraction_indels() <= 0 && this->min_fraction_indels() >= 0)) {
    total_size += 1 + 4;
  }

  // float fraction_reference_sites_to_emit = 5;
  if (!(this->fraction_reference_sites_to_emit() <= 0 && this->fraction_reference_sites_to_emit() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 random_seed = 6;
  if (this->random_seed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->random_seed());
  }

  // float p_error = 8;
  if (!(this->p_error() <= 0 && this->p_error() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 max_gq = 9;
  if (this->max_gq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_gq());
  }

  // int32 gq_resolution = 10;
  if (this->gq_resolution() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->gq_resolution());
  }

  // int32 ploidy = 11;
  if (this->ploidy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ploidy());
  }

  // float min_fraction_multiplier = 12;
  if (!(this->min_fraction_multiplier() <= 0 && this->min_fraction_multiplier() >= 0)) {
    total_size += 1 + 4;
  }

  // bool skip_uncalled_genotypes = 13;
  if (this->skip_uncalled_genotypes() != 0) {
    total_size += 1 + 1;
  }

  // bool track_ref_reads = 14;
  if (this->track_ref_reads() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariantCallerOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.VariantCallerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const VariantCallerOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VariantCallerOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.VariantCallerOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.VariantCallerOptions)
    MergeFrom(*source);
  }
}

void VariantCallerOptions::MergeFrom(const VariantCallerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.VariantCallerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sample_name().size() > 0) {

    sample_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sample_name_);
  }
  if (from.min_count_snps() != 0) {
    set_min_count_snps(from.min_count_snps());
  }
  if (from.min_count_indels() != 0) {
    set_min_count_indels(from.min_count_indels());
  }
  if (!(from.min_fraction_snps() <= 0 && from.min_fraction_snps() >= 0)) {
    set_min_fraction_snps(from.min_fraction_snps());
  }
  if (!(from.min_fraction_indels() <= 0 && from.min_fraction_indels() >= 0)) {
    set_min_fraction_indels(from.min_fraction_indels());
  }
  if (!(from.fraction_reference_sites_to_emit() <= 0 && from.fraction_reference_sites_to_emit() >= 0)) {
    set_fraction_reference_sites_to_emit(from.fraction_reference_sites_to_emit());
  }
  if (from.random_seed() != 0) {
    set_random_seed(from.random_seed());
  }
  if (!(from.p_error() <= 0 && from.p_error() >= 0)) {
    set_p_error(from.p_error());
  }
  if (from.max_gq() != 0) {
    set_max_gq(from.max_gq());
  }
  if (from.gq_resolution() != 0) {
    set_gq_resolution(from.gq_resolution());
  }
  if (from.ploidy() != 0) {
    set_ploidy(from.ploidy());
  }
  if (!(from.min_fraction_multiplier() <= 0 && from.min_fraction_multiplier() >= 0)) {
    set_min_fraction_multiplier(from.min_fraction_multiplier());
  }
  if (from.skip_uncalled_genotypes() != 0) {
    set_skip_uncalled_genotypes(from.skip_uncalled_genotypes());
  }
  if (from.track_ref_reads() != 0) {
    set_track_ref_reads(from.track_ref_reads());
  }
}

void VariantCallerOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.VariantCallerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantCallerOptions::CopyFrom(const VariantCallerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.VariantCallerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariantCallerOptions::IsInitialized() const {
  return true;
}

void VariantCallerOptions::InternalSwap(VariantCallerOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sample_name_.Swap(&other->sample_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(min_count_snps_, other->min_count_snps_);
  swap(min_count_indels_, other->min_count_indels_);
  swap(min_fraction_snps_, other->min_fraction_snps_);
  swap(min_fraction_indels_, other->min_fraction_indels_);
  swap(fraction_reference_sites_to_emit_, other->fraction_reference_sites_to_emit_);
  swap(random_seed_, other->random_seed_);
  swap(p_error_, other->p_error_);
  swap(max_gq_, other->max_gq_);
  swap(gq_resolution_, other->gq_resolution_);
  swap(ploidy_, other->ploidy_);
  swap(min_fraction_multiplier_, other->min_fraction_multiplier_);
  swap(skip_uncalled_genotypes_, other->skip_uncalled_genotypes_);
  swap(track_ref_reads_, other->track_ref_reads_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VariantCallerOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VariantLabelerOptions::InitAsDefaultInstance() {
}
class VariantLabelerOptions::_Internal {
 public:
};

VariantLabelerOptions::VariantLabelerOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.VariantLabelerOptions)
}
VariantLabelerOptions::VariantLabelerOptions(const VariantLabelerOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.VariantLabelerOptions)
}

void VariantLabelerOptions::SharedCtor() {
}

VariantLabelerOptions::~VariantLabelerOptions() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.VariantLabelerOptions)
  SharedDtor();
}

void VariantLabelerOptions::SharedDtor() {
}

void VariantLabelerOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VariantLabelerOptions& VariantLabelerOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VariantLabelerOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void VariantLabelerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.VariantLabelerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VariantLabelerOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VariantLabelerOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.VariantLabelerOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.VariantLabelerOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.VariantLabelerOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VariantLabelerOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.VariantLabelerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.VariantLabelerOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* VariantLabelerOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.VariantLabelerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.VariantLabelerOptions)
  return target;
}

size_t VariantLabelerOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.VariantLabelerOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariantLabelerOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.VariantLabelerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const VariantLabelerOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VariantLabelerOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.VariantLabelerOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.VariantLabelerOptions)
    MergeFrom(*source);
  }
}

void VariantLabelerOptions::MergeFrom(const VariantLabelerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.VariantLabelerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void VariantLabelerOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.VariantLabelerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantLabelerOptions::CopyFrom(const VariantLabelerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.VariantLabelerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariantLabelerOptions::IsInitialized() const {
  return true;
}

void VariantLabelerOptions::InternalSwap(VariantLabelerOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VariantLabelerOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PileupImageOptions::InitAsDefaultInstance() {
  ::learning::genomics::deepvariant::_PileupImageOptions_default_instance_._instance.get_mutable()->read_requirements_ = const_cast< ::nucleus::genomics::v1::ReadRequirements*>(
      ::nucleus::genomics::v1::ReadRequirements::internal_default_instance());
}
class PileupImageOptions::_Internal {
 public:
  static const ::nucleus::genomics::v1::ReadRequirements& read_requirements(const PileupImageOptions* msg);
};

const ::nucleus::genomics::v1::ReadRequirements&
PileupImageOptions::_Internal::read_requirements(const PileupImageOptions* msg) {
  return *msg->read_requirements_;
}
void PileupImageOptions::clear_read_requirements() {
  if (GetArenaNoVirtual() == nullptr && read_requirements_ != nullptr) {
    delete read_requirements_;
  }
  read_requirements_ = nullptr;
}
PileupImageOptions::PileupImageOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.PileupImageOptions)
}
PileupImageOptions::PileupImageOptions(const PileupImageOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  indel_anchoring_base_char_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.indel_anchoring_base_char().empty()) {
    indel_anchoring_base_char_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.indel_anchoring_base_char_);
  }
  unused_insert_base_char_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.unused_insert_base_char().empty()) {
    unused_insert_base_char_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unused_insert_base_char_);
  }
  unused_delete_base_char_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.unused_delete_base_char().empty()) {
    unused_delete_base_char_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unused_delete_base_char_);
  }
  alt_aligned_pileup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.alt_aligned_pileup().empty()) {
    alt_aligned_pileup_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.alt_aligned_pileup_);
  }
  types_to_alt_align_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.types_to_alt_align().empty()) {
    types_to_alt_align_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.types_to_alt_align_);
  }
  if (from.has_read_requirements()) {
    read_requirements_ = new ::nucleus::genomics::v1::ReadRequirements(*from.read_requirements_);
  } else {
    read_requirements_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&hp_tag_for_assembly_polishing_) -
    reinterpret_cast<char*>(&height_)) + sizeof(hp_tag_for_assembly_polishing_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.PileupImageOptions)
}

void PileupImageOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PileupImageOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  indel_anchoring_base_char_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unused_insert_base_char_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unused_delete_base_char_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alt_aligned_pileup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  types_to_alt_align_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&read_requirements_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hp_tag_for_assembly_polishing_) -
      reinterpret_cast<char*>(&read_requirements_)) + sizeof(hp_tag_for_assembly_polishing_));
}

PileupImageOptions::~PileupImageOptions() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.PileupImageOptions)
  SharedDtor();
}

void PileupImageOptions::SharedDtor() {
  indel_anchoring_base_char_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unused_insert_base_char_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unused_delete_base_char_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alt_aligned_pileup_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  types_to_alt_align_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete read_requirements_;
}

void PileupImageOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PileupImageOptions& PileupImageOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PileupImageOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void PileupImageOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.PileupImageOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  indel_anchoring_base_char_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unused_insert_base_char_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unused_delete_base_char_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alt_aligned_pileup_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  types_to_alt_align_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && read_requirements_ != nullptr) {
    delete read_requirements_;
  }
  read_requirements_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hp_tag_for_assembly_polishing_) -
      reinterpret_cast<char*>(&height_)) + sizeof(hp_tag_for_assembly_polishing_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PileupImageOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 reference_band_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reference_band_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 base_color_offset_a_and_g = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          base_color_offset_a_and_g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 base_color_offset_t_and_c = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          base_color_offset_t_and_c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 base_color_stride = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          base_color_stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float reference_alpha = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          reference_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 reference_base_quality = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          reference_base_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float allele_supporting_read_alpha = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          allele_supporting_read_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float allele_unsupporting_read_alpha = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          allele_unsupporting_read_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float reference_matching_read_alpha = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          reference_matching_read_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float reference_mismatching_read_alpha = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          reference_mismatching_read_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string indel_anchoring_base_char = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_indel_anchoring_base_char(), ptr, ctx, "learning.genomics.deepvariant.PileupImageOptions.indel_anchoring_base_char");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 positive_strand_color = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          positive_strand_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 negative_strand_color = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          negative_strand_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 base_quality_cap = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          base_quality_cap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 read_overlap_buffer_bp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          read_overlap_buffer_bp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nucleus.genomics.v1.ReadRequirements read_requirements = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_read_requirements(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.PileupImageOptions.MultiAllelicMode multi_allelic_mode = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_multi_allelic_mode(static_cast<::learning::genomics::deepvariant::PileupImageOptions_MultiAllelicMode>(val));
        } else goto handle_unusual;
        continue;
      // int32 mapping_quality_cap = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          mapping_quality_cap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 random_seed = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_channels = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          num_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unused_insert_base_char = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_unused_insert_base_char(), ptr, ctx, "learning.genomics.deepvariant.PileupImageOptions.unused_insert_base_char");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string unused_delete_base_char = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_unused_delete_base_char(), ptr, ctx, "learning.genomics.deepvariant.PileupImageOptions.unused_delete_base_char");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool unused_custom_pileup_image = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          unused_custom_pileup_image_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool unused_sequencing_type_image = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          unused_sequencing_type_image_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.PileupImageOptions.SequencingType sequencing_type = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_sequencing_type(static_cast<::learning::genomics::deepvariant::PileupImageOptions_SequencingType>(val));
        } else goto handle_unusual;
        continue;
      // string alt_aligned_pileup = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_alt_aligned_pileup(), ptr, ctx, "learning.genomics.deepvariant.PileupImageOptions.alt_aligned_pileup");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sort_by_haplotypes = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          sort_by_haplotypes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float other_allele_supporting_read_alpha = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          other_allele_supporting_read_alpha_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_non_zero_allele_frequency = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          min_non_zero_allele_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool use_allele_frequency = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          use_allele_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sort_by_haplotypes_sample_hp_tag = 35 [deprecated = true];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sort_by_haplotypes_sample_hp_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string types_to_alt_align = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_types_to_alt_align(), ptr, ctx, "learning.genomics.deepvariant.PileupImageOptions.types_to_alt_align");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool add_hp_channel = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          add_hp_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hp_tag_for_assembly_polishing = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          hp_tag_for_assembly_polishing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string channels = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_channels(), ptr, ctx, "learning.genomics.deepvariant.PileupImageOptions.channels");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 698);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PileupImageOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.PileupImageOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 height = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reference_band_height = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &reference_band_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 base_color_offset_a_and_g = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_color_offset_a_and_g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 base_color_offset_t_and_c = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_color_offset_t_and_c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 base_color_stride = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_color_stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float reference_alpha = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reference_alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reference_base_quality = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &reference_base_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float allele_supporting_read_alpha = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &allele_supporting_read_alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float allele_unsupporting_read_alpha = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &allele_unsupporting_read_alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float reference_matching_read_alpha = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reference_matching_read_alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float reference_mismatching_read_alpha = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reference_mismatching_read_alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string indel_anchoring_base_char = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_indel_anchoring_base_char()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->indel_anchoring_base_char().data(), static_cast<int>(this->indel_anchoring_base_char().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.PileupImageOptions.indel_anchoring_base_char"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 positive_strand_color = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &positive_strand_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 negative_strand_color = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &negative_strand_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 base_quality_cap = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_quality_cap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 read_overlap_buffer_bp = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &read_overlap_buffer_bp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nucleus.genomics.v1.ReadRequirements read_requirements = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_read_requirements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.PileupImageOptions.MultiAllelicMode multi_allelic_mode = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_multi_allelic_mode(static_cast< ::learning::genomics::deepvariant::PileupImageOptions_MultiAllelicMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mapping_quality_cap = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapping_quality_cap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 random_seed = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_channels = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unused_insert_base_char = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_unused_insert_base_char()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->unused_insert_base_char().data(), static_cast<int>(this->unused_insert_base_char().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.PileupImageOptions.unused_insert_base_char"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unused_delete_base_char = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_unused_delete_base_char()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->unused_delete_base_char().data(), static_cast<int>(this->unused_delete_base_char().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.PileupImageOptions.unused_delete_base_char"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool unused_custom_pileup_image = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unused_custom_pileup_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool unused_sequencing_type_image = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unused_sequencing_type_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.PileupImageOptions.SequencingType sequencing_type = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sequencing_type(static_cast< ::learning::genomics::deepvariant::PileupImageOptions_SequencingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string alt_aligned_pileup = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_alt_aligned_pileup()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->alt_aligned_pileup().data(), static_cast<int>(this->alt_aligned_pileup().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.PileupImageOptions.alt_aligned_pileup"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sort_by_haplotypes = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sort_by_haplotypes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float other_allele_supporting_read_alpha = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (261 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &other_allele_supporting_read_alpha_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_non_zero_allele_frequency = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (269 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_non_zero_allele_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_allele_frequency = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (272 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_allele_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sort_by_haplotypes_sample_hp_tag = 35 [deprecated = true];
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (280 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_by_haplotypes_sample_hp_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string types_to_alt_align = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_types_to_alt_align()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->types_to_alt_align().data(), static_cast<int>(this->types_to_alt_align().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.PileupImageOptions.types_to_alt_align"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool add_hp_channel = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (296 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_hp_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hp_tag_for_assembly_polishing = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (304 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_tag_for_assembly_polishing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string channels = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_channels()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->channels(this->channels_size() - 1).data(),
            static_cast<int>(this->channels(this->channels_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.PileupImageOptions.channels"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.PileupImageOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.PileupImageOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PileupImageOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.PileupImageOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->height(), output);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // int32 reference_band_height = 3;
  if (this->reference_band_height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->reference_band_height(), output);
  }

  // int32 base_color_offset_a_and_g = 4;
  if (this->base_color_offset_a_and_g() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->base_color_offset_a_and_g(), output);
  }

  // int32 base_color_offset_t_and_c = 5;
  if (this->base_color_offset_t_and_c() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->base_color_offset_t_and_c(), output);
  }

  // int32 base_color_stride = 6;
  if (this->base_color_stride() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->base_color_stride(), output);
  }

  // float reference_alpha = 7;
  if (!(this->reference_alpha() <= 0 && this->reference_alpha() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->reference_alpha(), output);
  }

  // int32 reference_base_quality = 8;
  if (this->reference_base_quality() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->reference_base_quality(), output);
  }

  // float allele_supporting_read_alpha = 9;
  if (!(this->allele_supporting_read_alpha() <= 0 && this->allele_supporting_read_alpha() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->allele_supporting_read_alpha(), output);
  }

  // float allele_unsupporting_read_alpha = 10;
  if (!(this->allele_unsupporting_read_alpha() <= 0 && this->allele_unsupporting_read_alpha() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->allele_unsupporting_read_alpha(), output);
  }

  // float reference_matching_read_alpha = 11;
  if (!(this->reference_matching_read_alpha() <= 0 && this->reference_matching_read_alpha() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->reference_matching_read_alpha(), output);
  }

  // float reference_mismatching_read_alpha = 12;
  if (!(this->reference_mismatching_read_alpha() <= 0 && this->reference_mismatching_read_alpha() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->reference_mismatching_read_alpha(), output);
  }

  // string indel_anchoring_base_char = 13;
  if (this->indel_anchoring_base_char().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->indel_anchoring_base_char().data(), static_cast<int>(this->indel_anchoring_base_char().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.PileupImageOptions.indel_anchoring_base_char");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->indel_anchoring_base_char(), output);
  }

  // int32 positive_strand_color = 14;
  if (this->positive_strand_color() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->positive_strand_color(), output);
  }

  // int32 negative_strand_color = 15;
  if (this->negative_strand_color() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->negative_strand_color(), output);
  }

  // int32 base_quality_cap = 16;
  if (this->base_quality_cap() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->base_quality_cap(), output);
  }

  // int32 read_overlap_buffer_bp = 17;
  if (this->read_overlap_buffer_bp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(17, this->read_overlap_buffer_bp(), output);
  }

  // .nucleus.genomics.v1.ReadRequirements read_requirements = 18;
  if (this->has_read_requirements()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, _Internal::read_requirements(this), output);
  }

  // .learning.genomics.deepvariant.PileupImageOptions.MultiAllelicMode multi_allelic_mode = 19;
  if (this->multi_allelic_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      19, this->multi_allelic_mode(), output);
  }

  // int32 mapping_quality_cap = 20;
  if (this->mapping_quality_cap() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(20, this->mapping_quality_cap(), output);
  }

  // uint32 random_seed = 21;
  if (this->random_seed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(21, this->random_seed(), output);
  }

  // int32 num_channels = 22;
  if (this->num_channels() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(22, this->num_channels(), output);
  }

  // string unused_insert_base_char = 23;
  if (this->unused_insert_base_char().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->unused_insert_base_char().data(), static_cast<int>(this->unused_insert_base_char().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.PileupImageOptions.unused_insert_base_char");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->unused_insert_base_char(), output);
  }

  // string unused_delete_base_char = 24;
  if (this->unused_delete_base_char().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->unused_delete_base_char().data(), static_cast<int>(this->unused_delete_base_char().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.PileupImageOptions.unused_delete_base_char");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->unused_delete_base_char(), output);
  }

  // bool unused_custom_pileup_image = 25;
  if (this->unused_custom_pileup_image() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(25, this->unused_custom_pileup_image(), output);
  }

  // bool unused_sequencing_type_image = 26;
  if (this->unused_sequencing_type_image() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(26, this->unused_sequencing_type_image(), output);
  }

  // .learning.genomics.deepvariant.PileupImageOptions.SequencingType sequencing_type = 27;
  if (this->sequencing_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      27, this->sequencing_type(), output);
  }

  // string alt_aligned_pileup = 30;
  if (this->alt_aligned_pileup().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->alt_aligned_pileup().data(), static_cast<int>(this->alt_aligned_pileup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.PileupImageOptions.alt_aligned_pileup");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->alt_aligned_pileup(), output);
  }

  // bool sort_by_haplotypes = 31;
  if (this->sort_by_haplotypes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(31, this->sort_by_haplotypes(), output);
  }

  // float other_allele_supporting_read_alpha = 32;
  if (!(this->other_allele_supporting_read_alpha() <= 0 && this->other_allele_supporting_read_alpha() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(32, this->other_allele_supporting_read_alpha(), output);
  }

  // float min_non_zero_allele_frequency = 33;
  if (!(this->min_non_zero_allele_frequency() <= 0 && this->min_non_zero_allele_frequency() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(33, this->min_non_zero_allele_frequency(), output);
  }

  // bool use_allele_frequency = 34;
  if (this->use_allele_frequency() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(34, this->use_allele_frequency(), output);
  }

  // int32 sort_by_haplotypes_sample_hp_tag = 35 [deprecated = true];
  if (this->sort_by_haplotypes_sample_hp_tag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(35, this->sort_by_haplotypes_sample_hp_tag(), output);
  }

  // string types_to_alt_align = 36;
  if (this->types_to_alt_align().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->types_to_alt_align().data(), static_cast<int>(this->types_to_alt_align().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.PileupImageOptions.types_to_alt_align");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      36, this->types_to_alt_align(), output);
  }

  // bool add_hp_channel = 37;
  if (this->add_hp_channel() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(37, this->add_hp_channel(), output);
  }

  // int32 hp_tag_for_assembly_polishing = 38;
  if (this->hp_tag_for_assembly_polishing() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(38, this->hp_tag_for_assembly_polishing(), output);
  }

  // repeated string channels = 39;
  for (int i = 0, n = this->channels_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->channels(i).data(), static_cast<int>(this->channels(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.PileupImageOptions.channels");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      39, this->channels(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.PileupImageOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* PileupImageOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.PileupImageOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->height(), target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // int32 reference_band_height = 3;
  if (this->reference_band_height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->reference_band_height(), target);
  }

  // int32 base_color_offset_a_and_g = 4;
  if (this->base_color_offset_a_and_g() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->base_color_offset_a_and_g(), target);
  }

  // int32 base_color_offset_t_and_c = 5;
  if (this->base_color_offset_t_and_c() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->base_color_offset_t_and_c(), target);
  }

  // int32 base_color_stride = 6;
  if (this->base_color_stride() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->base_color_stride(), target);
  }

  // float reference_alpha = 7;
  if (!(this->reference_alpha() <= 0 && this->reference_alpha() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->reference_alpha(), target);
  }

  // int32 reference_base_quality = 8;
  if (this->reference_base_quality() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->reference_base_quality(), target);
  }

  // float allele_supporting_read_alpha = 9;
  if (!(this->allele_supporting_read_alpha() <= 0 && this->allele_supporting_read_alpha() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->allele_supporting_read_alpha(), target);
  }

  // float allele_unsupporting_read_alpha = 10;
  if (!(this->allele_unsupporting_read_alpha() <= 0 && this->allele_unsupporting_read_alpha() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->allele_unsupporting_read_alpha(), target);
  }

  // float reference_matching_read_alpha = 11;
  if (!(this->reference_matching_read_alpha() <= 0 && this->reference_matching_read_alpha() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->reference_matching_read_alpha(), target);
  }

  // float reference_mismatching_read_alpha = 12;
  if (!(this->reference_mismatching_read_alpha() <= 0 && this->reference_mismatching_read_alpha() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->reference_mismatching_read_alpha(), target);
  }

  // string indel_anchoring_base_char = 13;
  if (this->indel_anchoring_base_char().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->indel_anchoring_base_char().data(), static_cast<int>(this->indel_anchoring_base_char().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.PileupImageOptions.indel_anchoring_base_char");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->indel_anchoring_base_char(), target);
  }

  // int32 positive_strand_color = 14;
  if (this->positive_strand_color() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->positive_strand_color(), target);
  }

  // int32 negative_strand_color = 15;
  if (this->negative_strand_color() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->negative_strand_color(), target);
  }

  // int32 base_quality_cap = 16;
  if (this->base_quality_cap() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->base_quality_cap(), target);
  }

  // int32 read_overlap_buffer_bp = 17;
  if (this->read_overlap_buffer_bp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->read_overlap_buffer_bp(), target);
  }

  // .nucleus.genomics.v1.ReadRequirements read_requirements = 18;
  if (this->has_read_requirements()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, _Internal::read_requirements(this), target);
  }

  // .learning.genomics.deepvariant.PileupImageOptions.MultiAllelicMode multi_allelic_mode = 19;
  if (this->multi_allelic_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->multi_allelic_mode(), target);
  }

  // int32 mapping_quality_cap = 20;
  if (this->mapping_quality_cap() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->mapping_quality_cap(), target);
  }

  // uint32 random_seed = 21;
  if (this->random_seed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->random_seed(), target);
  }

  // int32 num_channels = 22;
  if (this->num_channels() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->num_channels(), target);
  }

  // string unused_insert_base_char = 23;
  if (this->unused_insert_base_char().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->unused_insert_base_char().data(), static_cast<int>(this->unused_insert_base_char().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.PileupImageOptions.unused_insert_base_char");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        23, this->unused_insert_base_char(), target);
  }

  // string unused_delete_base_char = 24;
  if (this->unused_delete_base_char().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->unused_delete_base_char().data(), static_cast<int>(this->unused_delete_base_char().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.PileupImageOptions.unused_delete_base_char");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        24, this->unused_delete_base_char(), target);
  }

  // bool unused_custom_pileup_image = 25;
  if (this->unused_custom_pileup_image() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->unused_custom_pileup_image(), target);
  }

  // bool unused_sequencing_type_image = 26;
  if (this->unused_sequencing_type_image() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->unused_sequencing_type_image(), target);
  }

  // .learning.genomics.deepvariant.PileupImageOptions.SequencingType sequencing_type = 27;
  if (this->sequencing_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->sequencing_type(), target);
  }

  // string alt_aligned_pileup = 30;
  if (this->alt_aligned_pileup().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->alt_aligned_pileup().data(), static_cast<int>(this->alt_aligned_pileup().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.PileupImageOptions.alt_aligned_pileup");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        30, this->alt_aligned_pileup(), target);
  }

  // bool sort_by_haplotypes = 31;
  if (this->sort_by_haplotypes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->sort_by_haplotypes(), target);
  }

  // float other_allele_supporting_read_alpha = 32;
  if (!(this->other_allele_supporting_read_alpha() <= 0 && this->other_allele_supporting_read_alpha() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->other_allele_supporting_read_alpha(), target);
  }

  // float min_non_zero_allele_frequency = 33;
  if (!(this->min_non_zero_allele_frequency() <= 0 && this->min_non_zero_allele_frequency() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->min_non_zero_allele_frequency(), target);
  }

  // bool use_allele_frequency = 34;
  if (this->use_allele_frequency() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->use_allele_frequency(), target);
  }

  // int32 sort_by_haplotypes_sample_hp_tag = 35 [deprecated = true];
  if (this->sort_by_haplotypes_sample_hp_tag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->sort_by_haplotypes_sample_hp_tag(), target);
  }

  // string types_to_alt_align = 36;
  if (this->types_to_alt_align().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->types_to_alt_align().data(), static_cast<int>(this->types_to_alt_align().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.PileupImageOptions.types_to_alt_align");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        36, this->types_to_alt_align(), target);
  }

  // bool add_hp_channel = 37;
  if (this->add_hp_channel() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->add_hp_channel(), target);
  }

  // int32 hp_tag_for_assembly_polishing = 38;
  if (this->hp_tag_for_assembly_polishing() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->hp_tag_for_assembly_polishing(), target);
  }

  // repeated string channels = 39;
  for (int i = 0, n = this->channels_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->channels(i).data(), static_cast<int>(this->channels(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.PileupImageOptions.channels");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(39, this->channels(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.PileupImageOptions)
  return target;
}

size_t PileupImageOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.PileupImageOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string channels = 39;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->channels_size());
  for (int i = 0, n = this->channels_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->channels(i));
  }

  // string indel_anchoring_base_char = 13;
  if (this->indel_anchoring_base_char().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->indel_anchoring_base_char());
  }

  // string unused_insert_base_char = 23;
  if (this->unused_insert_base_char().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->unused_insert_base_char());
  }

  // string unused_delete_base_char = 24;
  if (this->unused_delete_base_char().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->unused_delete_base_char());
  }

  // string alt_aligned_pileup = 30;
  if (this->alt_aligned_pileup().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->alt_aligned_pileup());
  }

  // string types_to_alt_align = 36;
  if (this->types_to_alt_align().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->types_to_alt_align());
  }

  // .nucleus.genomics.v1.ReadRequirements read_requirements = 18;
  if (this->has_read_requirements()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_requirements_);
  }

  // int32 height = 1;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 reference_band_height = 3;
  if (this->reference_band_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->reference_band_height());
  }

  // int32 base_color_offset_a_and_g = 4;
  if (this->base_color_offset_a_and_g() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->base_color_offset_a_and_g());
  }

  // int32 base_color_offset_t_and_c = 5;
  if (this->base_color_offset_t_and_c() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->base_color_offset_t_and_c());
  }

  // int32 base_color_stride = 6;
  if (this->base_color_stride() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->base_color_stride());
  }

  // float reference_alpha = 7;
  if (!(this->reference_alpha() <= 0 && this->reference_alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 reference_base_quality = 8;
  if (this->reference_base_quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->reference_base_quality());
  }

  // float allele_supporting_read_alpha = 9;
  if (!(this->allele_supporting_read_alpha() <= 0 && this->allele_supporting_read_alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float allele_unsupporting_read_alpha = 10;
  if (!(this->allele_unsupporting_read_alpha() <= 0 && this->allele_unsupporting_read_alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float reference_matching_read_alpha = 11;
  if (!(this->reference_matching_read_alpha() <= 0 && this->reference_matching_read_alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // float reference_mismatching_read_alpha = 12;
  if (!(this->reference_mismatching_read_alpha() <= 0 && this->reference_mismatching_read_alpha() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 positive_strand_color = 14;
  if (this->positive_strand_color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->positive_strand_color());
  }

  // int32 negative_strand_color = 15;
  if (this->negative_strand_color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->negative_strand_color());
  }

  // int32 base_quality_cap = 16;
  if (this->base_quality_cap() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->base_quality_cap());
  }

  // int32 read_overlap_buffer_bp = 17;
  if (this->read_overlap_buffer_bp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->read_overlap_buffer_bp());
  }

  // .learning.genomics.deepvariant.PileupImageOptions.MultiAllelicMode multi_allelic_mode = 19;
  if (this->multi_allelic_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->multi_allelic_mode());
  }

  // int32 mapping_quality_cap = 20;
  if (this->mapping_quality_cap() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mapping_quality_cap());
  }

  // uint32 random_seed = 21;
  if (this->random_seed() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->random_seed());
  }

  // int32 num_channels = 22;
  if (this->num_channels() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_channels());
  }

  // .learning.genomics.deepvariant.PileupImageOptions.SequencingType sequencing_type = 27;
  if (this->sequencing_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->sequencing_type());
  }

  // bool unused_custom_pileup_image = 25;
  if (this->unused_custom_pileup_image() != 0) {
    total_size += 2 + 1;
  }

  // bool unused_sequencing_type_image = 26;
  if (this->unused_sequencing_type_image() != 0) {
    total_size += 2 + 1;
  }

  // bool sort_by_haplotypes = 31;
  if (this->sort_by_haplotypes() != 0) {
    total_size += 2 + 1;
  }

  // bool use_allele_frequency = 34;
  if (this->use_allele_frequency() != 0) {
    total_size += 2 + 1;
  }

  // float other_allele_supporting_read_alpha = 32;
  if (!(this->other_allele_supporting_read_alpha() <= 0 && this->other_allele_supporting_read_alpha() >= 0)) {
    total_size += 2 + 4;
  }

  // float min_non_zero_allele_frequency = 33;
  if (!(this->min_non_zero_allele_frequency() <= 0 && this->min_non_zero_allele_frequency() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 sort_by_haplotypes_sample_hp_tag = 35 [deprecated = true];
  if (this->sort_by_haplotypes_sample_hp_tag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->sort_by_haplotypes_sample_hp_tag());
  }

  // bool add_hp_channel = 37;
  if (this->add_hp_channel() != 0) {
    total_size += 2 + 1;
  }

  // int32 hp_tag_for_assembly_polishing = 38;
  if (this->hp_tag_for_assembly_polishing() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->hp_tag_for_assembly_polishing());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PileupImageOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.PileupImageOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const PileupImageOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PileupImageOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.PileupImageOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.PileupImageOptions)
    MergeFrom(*source);
  }
}

void PileupImageOptions::MergeFrom(const PileupImageOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.PileupImageOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from.indel_anchoring_base_char().size() > 0) {

    indel_anchoring_base_char_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.indel_anchoring_base_char_);
  }
  if (from.unused_insert_base_char().size() > 0) {

    unused_insert_base_char_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unused_insert_base_char_);
  }
  if (from.unused_delete_base_char().size() > 0) {

    unused_delete_base_char_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.unused_delete_base_char_);
  }
  if (from.alt_aligned_pileup().size() > 0) {

    alt_aligned_pileup_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.alt_aligned_pileup_);
  }
  if (from.types_to_alt_align().size() > 0) {

    types_to_alt_align_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.types_to_alt_align_);
  }
  if (from.has_read_requirements()) {
    mutable_read_requirements()->::nucleus::genomics::v1::ReadRequirements::MergeFrom(from.read_requirements());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.reference_band_height() != 0) {
    set_reference_band_height(from.reference_band_height());
  }
  if (from.base_color_offset_a_and_g() != 0) {
    set_base_color_offset_a_and_g(from.base_color_offset_a_and_g());
  }
  if (from.base_color_offset_t_and_c() != 0) {
    set_base_color_offset_t_and_c(from.base_color_offset_t_and_c());
  }
  if (from.base_color_stride() != 0) {
    set_base_color_stride(from.base_color_stride());
  }
  if (!(from.reference_alpha() <= 0 && from.reference_alpha() >= 0)) {
    set_reference_alpha(from.reference_alpha());
  }
  if (from.reference_base_quality() != 0) {
    set_reference_base_quality(from.reference_base_quality());
  }
  if (!(from.allele_supporting_read_alpha() <= 0 && from.allele_supporting_read_alpha() >= 0)) {
    set_allele_supporting_read_alpha(from.allele_supporting_read_alpha());
  }
  if (!(from.allele_unsupporting_read_alpha() <= 0 && from.allele_unsupporting_read_alpha() >= 0)) {
    set_allele_unsupporting_read_alpha(from.allele_unsupporting_read_alpha());
  }
  if (!(from.reference_matching_read_alpha() <= 0 && from.reference_matching_read_alpha() >= 0)) {
    set_reference_matching_read_alpha(from.reference_matching_read_alpha());
  }
  if (!(from.reference_mismatching_read_alpha() <= 0 && from.reference_mismatching_read_alpha() >= 0)) {
    set_reference_mismatching_read_alpha(from.reference_mismatching_read_alpha());
  }
  if (from.positive_strand_color() != 0) {
    set_positive_strand_color(from.positive_strand_color());
  }
  if (from.negative_strand_color() != 0) {
    set_negative_strand_color(from.negative_strand_color());
  }
  if (from.base_quality_cap() != 0) {
    set_base_quality_cap(from.base_quality_cap());
  }
  if (from.read_overlap_buffer_bp() != 0) {
    set_read_overlap_buffer_bp(from.read_overlap_buffer_bp());
  }
  if (from.multi_allelic_mode() != 0) {
    set_multi_allelic_mode(from.multi_allelic_mode());
  }
  if (from.mapping_quality_cap() != 0) {
    set_mapping_quality_cap(from.mapping_quality_cap());
  }
  if (from.random_seed() != 0) {
    set_random_seed(from.random_seed());
  }
  if (from.num_channels() != 0) {
    set_num_channels(from.num_channels());
  }
  if (from.sequencing_type() != 0) {
    set_sequencing_type(from.sequencing_type());
  }
  if (from.unused_custom_pileup_image() != 0) {
    set_unused_custom_pileup_image(from.unused_custom_pileup_image());
  }
  if (from.unused_sequencing_type_image() != 0) {
    set_unused_sequencing_type_image(from.unused_sequencing_type_image());
  }
  if (from.sort_by_haplotypes() != 0) {
    set_sort_by_haplotypes(from.sort_by_haplotypes());
  }
  if (from.use_allele_frequency() != 0) {
    set_use_allele_frequency(from.use_allele_frequency());
  }
  if (!(from.other_allele_supporting_read_alpha() <= 0 && from.other_allele_supporting_read_alpha() >= 0)) {
    set_other_allele_supporting_read_alpha(from.other_allele_supporting_read_alpha());
  }
  if (!(from.min_non_zero_allele_frequency() <= 0 && from.min_non_zero_allele_frequency() >= 0)) {
    set_min_non_zero_allele_frequency(from.min_non_zero_allele_frequency());
  }
  if (from.sort_by_haplotypes_sample_hp_tag() != 0) {
    set_sort_by_haplotypes_sample_hp_tag(from.sort_by_haplotypes_sample_hp_tag());
  }
  if (from.add_hp_channel() != 0) {
    set_add_hp_channel(from.add_hp_channel());
  }
  if (from.hp_tag_for_assembly_polishing() != 0) {
    set_hp_tag_for_assembly_polishing(from.hp_tag_for_assembly_polishing());
  }
}

void PileupImageOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.PileupImageOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PileupImageOptions::CopyFrom(const PileupImageOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.PileupImageOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PileupImageOptions::IsInitialized() const {
  return true;
}

void PileupImageOptions::InternalSwap(PileupImageOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channels_.InternalSwap(CastToBase(&other->channels_));
  indel_anchoring_base_char_.Swap(&other->indel_anchoring_base_char_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unused_insert_base_char_.Swap(&other->unused_insert_base_char_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  unused_delete_base_char_.Swap(&other->unused_delete_base_char_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  alt_aligned_pileup_.Swap(&other->alt_aligned_pileup_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  types_to_alt_align_.Swap(&other->types_to_alt_align_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(read_requirements_, other->read_requirements_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(reference_band_height_, other->reference_band_height_);
  swap(base_color_offset_a_and_g_, other->base_color_offset_a_and_g_);
  swap(base_color_offset_t_and_c_, other->base_color_offset_t_and_c_);
  swap(base_color_stride_, other->base_color_stride_);
  swap(reference_alpha_, other->reference_alpha_);
  swap(reference_base_quality_, other->reference_base_quality_);
  swap(allele_supporting_read_alpha_, other->allele_supporting_read_alpha_);
  swap(allele_unsupporting_read_alpha_, other->allele_unsupporting_read_alpha_);
  swap(reference_matching_read_alpha_, other->reference_matching_read_alpha_);
  swap(reference_mismatching_read_alpha_, other->reference_mismatching_read_alpha_);
  swap(positive_strand_color_, other->positive_strand_color_);
  swap(negative_strand_color_, other->negative_strand_color_);
  swap(base_quality_cap_, other->base_quality_cap_);
  swap(read_overlap_buffer_bp_, other->read_overlap_buffer_bp_);
  swap(multi_allelic_mode_, other->multi_allelic_mode_);
  swap(mapping_quality_cap_, other->mapping_quality_cap_);
  swap(random_seed_, other->random_seed_);
  swap(num_channels_, other->num_channels_);
  swap(sequencing_type_, other->sequencing_type_);
  swap(unused_custom_pileup_image_, other->unused_custom_pileup_image_);
  swap(unused_sequencing_type_image_, other->unused_sequencing_type_image_);
  swap(sort_by_haplotypes_, other->sort_by_haplotypes_);
  swap(use_allele_frequency_, other->use_allele_frequency_);
  swap(other_allele_supporting_read_alpha_, other->other_allele_supporting_read_alpha_);
  swap(min_non_zero_allele_frequency_, other->min_non_zero_allele_frequency_);
  swap(sort_by_haplotypes_sample_hp_tag_, other->sort_by_haplotypes_sample_hp_tag_);
  swap(add_hp_channel_, other->add_hp_channel_);
  swap(hp_tag_for_assembly_polishing_, other->hp_tag_for_assembly_polishing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PileupImageOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SampleOptions::InitAsDefaultInstance() {
  ::learning::genomics::deepvariant::_SampleOptions_default_instance_._instance.get_mutable()->variant_caller_options_ = const_cast< ::learning::genomics::deepvariant::VariantCallerOptions*>(
      ::learning::genomics::deepvariant::VariantCallerOptions::internal_default_instance());
}
class SampleOptions::_Internal {
 public:
  static const ::learning::genomics::deepvariant::VariantCallerOptions& variant_caller_options(const SampleOptions* msg);
};

const ::learning::genomics::deepvariant::VariantCallerOptions&
SampleOptions::_Internal::variant_caller_options(const SampleOptions* msg) {
  return *msg->variant_caller_options_;
}
SampleOptions::SampleOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.SampleOptions)
}
SampleOptions::SampleOptions(const SampleOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      reads_filenames_(from.reads_filenames_),
      order_(from.order_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.role().empty()) {
    role_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  proposed_variants_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.proposed_variants_filename().empty()) {
    proposed_variants_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proposed_variants_filename_);
  }
  if (from.has_variant_caller_options()) {
    variant_caller_options_ = new ::learning::genomics::deepvariant::VariantCallerOptions(*from.variant_caller_options_);
  } else {
    variant_caller_options_ = nullptr;
  }
  ::memcpy(&downsample_fraction_, &from.downsample_fraction_,
    static_cast<size_t>(reinterpret_cast<char*>(&pileup_height_) -
    reinterpret_cast<char*>(&downsample_fraction_)) + sizeof(pileup_height_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.SampleOptions)
}

void SampleOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SampleOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposed_variants_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&variant_caller_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pileup_height_) -
      reinterpret_cast<char*>(&variant_caller_options_)) + sizeof(pileup_height_));
}

SampleOptions::~SampleOptions() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.SampleOptions)
  SharedDtor();
}

void SampleOptions::SharedDtor() {
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposed_variants_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete variant_caller_options_;
}

void SampleOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SampleOptions& SampleOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SampleOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void SampleOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.SampleOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reads_filenames_.Clear();
  order_.Clear();
  role_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  proposed_variants_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && variant_caller_options_ != nullptr) {
    delete variant_caller_options_;
  }
  variant_caller_options_ = nullptr;
  ::memset(&downsample_fraction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pileup_height_) -
      reinterpret_cast<char*>(&downsample_fraction_)) + sizeof(pileup_height_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SampleOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string reads_filenames = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_reads_filenames(), ptr, ctx, "learning.genomics.deepvariant.SampleOptions.reads_filenames");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // float downsample_fraction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          downsample_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.VariantCallerOptions variant_caller_options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_variant_caller_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pileup_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pileup_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 order = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_order(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          add_order(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string role = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_role(), ptr, ctx, "learning.genomics.deepvariant.SampleOptions.role");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "learning.genomics.deepvariant.SampleOptions.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string proposed_variants_filename = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_proposed_variants_filename(), ptr, ctx, "learning.genomics.deepvariant.SampleOptions.proposed_variants_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SampleOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.SampleOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string reads_filenames = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_reads_filenames()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->reads_filenames(this->reads_filenames_size() - 1).data(),
            static_cast<int>(this->reads_filenames(this->reads_filenames_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.SampleOptions.reads_filenames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float downsample_fraction = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &downsample_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.VariantCallerOptions variant_caller_options = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_variant_caller_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pileup_height = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &pileup_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 order = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_order())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_order())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_role()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->role().data(), static_cast<int>(this->role().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.SampleOptions.role"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.SampleOptions.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proposed_variants_filename = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_proposed_variants_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->proposed_variants_filename().data(), static_cast<int>(this->proposed_variants_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.SampleOptions.proposed_variants_filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.SampleOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.SampleOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SampleOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.SampleOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string reads_filenames = 1;
  for (int i = 0, n = this->reads_filenames_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reads_filenames(i).data(), static_cast<int>(this->reads_filenames(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.SampleOptions.reads_filenames");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->reads_filenames(i), output);
  }

  // float downsample_fraction = 2;
  if (!(this->downsample_fraction() <= 0 && this->downsample_fraction() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->downsample_fraction(), output);
  }

  // .learning.genomics.deepvariant.VariantCallerOptions variant_caller_options = 3;
  if (this->has_variant_caller_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::variant_caller_options(this), output);
  }

  // int32 pileup_height = 4;
  if (this->pileup_height() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->pileup_height(), output);
  }

  // repeated int32 order = 5;
  if (this->order_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_order_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->order_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->order(i), output);
  }

  // string role = 6;
  if (this->role().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), static_cast<int>(this->role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.SampleOptions.role");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->role(), output);
  }

  // string name = 7;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.SampleOptions.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // string proposed_variants_filename = 8;
  if (this->proposed_variants_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->proposed_variants_filename().data(), static_cast<int>(this->proposed_variants_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.SampleOptions.proposed_variants_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->proposed_variants_filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.SampleOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* SampleOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.SampleOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string reads_filenames = 1;
  for (int i = 0, n = this->reads_filenames_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reads_filenames(i).data(), static_cast<int>(this->reads_filenames(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.SampleOptions.reads_filenames");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->reads_filenames(i), target);
  }

  // float downsample_fraction = 2;
  if (!(this->downsample_fraction() <= 0 && this->downsample_fraction() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->downsample_fraction(), target);
  }

  // .learning.genomics.deepvariant.VariantCallerOptions variant_caller_options = 3;
  if (this->has_variant_caller_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::variant_caller_options(this), target);
  }

  // int32 pileup_height = 4;
  if (this->pileup_height() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->pileup_height(), target);
  }

  // repeated int32 order = 5;
  if (this->order_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _order_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->order_, target);
  }

  // string role = 6;
  if (this->role().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->role().data(), static_cast<int>(this->role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.SampleOptions.role");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->role(), target);
  }

  // string name = 7;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.SampleOptions.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // string proposed_variants_filename = 8;
  if (this->proposed_variants_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->proposed_variants_filename().data(), static_cast<int>(this->proposed_variants_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.SampleOptions.proposed_variants_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->proposed_variants_filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.SampleOptions)
  return target;
}

size_t SampleOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.SampleOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string reads_filenames = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->reads_filenames_size());
  for (int i = 0, n = this->reads_filenames_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->reads_filenames(i));
  }

  // repeated int32 order = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->order_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _order_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string role = 6;
  if (this->role().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->role());
  }

  // string name = 7;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string proposed_variants_filename = 8;
  if (this->proposed_variants_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->proposed_variants_filename());
  }

  // .learning.genomics.deepvariant.VariantCallerOptions variant_caller_options = 3;
  if (this->has_variant_caller_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *variant_caller_options_);
  }

  // float downsample_fraction = 2;
  if (!(this->downsample_fraction() <= 0 && this->downsample_fraction() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 pileup_height = 4;
  if (this->pileup_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->pileup_height());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SampleOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.SampleOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const SampleOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SampleOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.SampleOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.SampleOptions)
    MergeFrom(*source);
  }
}

void SampleOptions::MergeFrom(const SampleOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.SampleOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reads_filenames_.MergeFrom(from.reads_filenames_);
  order_.MergeFrom(from.order_);
  if (from.role().size() > 0) {

    role_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.role_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.proposed_variants_filename().size() > 0) {

    proposed_variants_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proposed_variants_filename_);
  }
  if (from.has_variant_caller_options()) {
    mutable_variant_caller_options()->::learning::genomics::deepvariant::VariantCallerOptions::MergeFrom(from.variant_caller_options());
  }
  if (!(from.downsample_fraction() <= 0 && from.downsample_fraction() >= 0)) {
    set_downsample_fraction(from.downsample_fraction());
  }
  if (from.pileup_height() != 0) {
    set_pileup_height(from.pileup_height());
  }
}

void SampleOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.SampleOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleOptions::CopyFrom(const SampleOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.SampleOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleOptions::IsInitialized() const {
  return true;
}

void SampleOptions::InternalSwap(SampleOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reads_filenames_.InternalSwap(CastToBase(&other->reads_filenames_));
  order_.InternalSwap(&other->order_);
  role_.Swap(&other->role_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  proposed_variants_filename_.Swap(&other->proposed_variants_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(variant_caller_options_, other->variant_caller_options_);
  swap(downsample_fraction_, other->downsample_fraction_);
  swap(pileup_height_, other->pileup_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SampleOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MakeExamplesOptions::InitAsDefaultInstance() {
  ::learning::genomics::deepvariant::_MakeExamplesOptions_default_instance_._instance.get_mutable()->allele_counter_options_ = const_cast< ::learning::genomics::deepvariant::AlleleCounterOptions*>(
      ::learning::genomics::deepvariant::AlleleCounterOptions::internal_default_instance());
  ::learning::genomics::deepvariant::_MakeExamplesOptions_default_instance_._instance.get_mutable()->deprecated_variant_caller_options_ = const_cast< ::learning::genomics::deepvariant::VariantCallerOptions*>(
      ::learning::genomics::deepvariant::VariantCallerOptions::internal_default_instance());
  ::learning::genomics::deepvariant::_MakeExamplesOptions_default_instance_._instance.get_mutable()->pic_options_ = const_cast< ::learning::genomics::deepvariant::PileupImageOptions*>(
      ::learning::genomics::deepvariant::PileupImageOptions::internal_default_instance());
  ::learning::genomics::deepvariant::_MakeExamplesOptions_default_instance_._instance.get_mutable()->labeler_options_ = const_cast< ::learning::genomics::deepvariant::VariantLabelerOptions*>(
      ::learning::genomics::deepvariant::VariantLabelerOptions::internal_default_instance());
  ::learning::genomics::deepvariant::_MakeExamplesOptions_default_instance_._instance.get_mutable()->read_requirements_ = const_cast< ::nucleus::genomics::v1::ReadRequirements*>(
      ::nucleus::genomics::v1::ReadRequirements::internal_default_instance());
  ::learning::genomics::deepvariant::_MakeExamplesOptions_default_instance_._instance.get_mutable()->realigner_options_ = const_cast< ::learning::genomics::deepvariant::RealignerOptions*>(
      ::learning::genomics::deepvariant::RealignerOptions::internal_default_instance());
}
class MakeExamplesOptions::_Internal {
 public:
  static const ::learning::genomics::deepvariant::AlleleCounterOptions& allele_counter_options(const MakeExamplesOptions* msg);
  static const ::learning::genomics::deepvariant::VariantCallerOptions& deprecated_variant_caller_options(const MakeExamplesOptions* msg);
  static const ::learning::genomics::deepvariant::PileupImageOptions& pic_options(const MakeExamplesOptions* msg);
  static const ::learning::genomics::deepvariant::VariantLabelerOptions& labeler_options(const MakeExamplesOptions* msg);
  static const ::nucleus::genomics::v1::ReadRequirements& read_requirements(const MakeExamplesOptions* msg);
  static const ::learning::genomics::deepvariant::RealignerOptions& realigner_options(const MakeExamplesOptions* msg);
};

const ::learning::genomics::deepvariant::AlleleCounterOptions&
MakeExamplesOptions::_Internal::allele_counter_options(const MakeExamplesOptions* msg) {
  return *msg->allele_counter_options_;
}
const ::learning::genomics::deepvariant::VariantCallerOptions&
MakeExamplesOptions::_Internal::deprecated_variant_caller_options(const MakeExamplesOptions* msg) {
  return *msg->deprecated_variant_caller_options_;
}
const ::learning::genomics::deepvariant::PileupImageOptions&
MakeExamplesOptions::_Internal::pic_options(const MakeExamplesOptions* msg) {
  return *msg->pic_options_;
}
const ::learning::genomics::deepvariant::VariantLabelerOptions&
MakeExamplesOptions::_Internal::labeler_options(const MakeExamplesOptions* msg) {
  return *msg->labeler_options_;
}
const ::nucleus::genomics::v1::ReadRequirements&
MakeExamplesOptions::_Internal::read_requirements(const MakeExamplesOptions* msg) {
  return *msg->read_requirements_;
}
const ::learning::genomics::deepvariant::RealignerOptions&
MakeExamplesOptions::_Internal::realigner_options(const MakeExamplesOptions* msg) {
  return *msg->realigner_options_;
}
void MakeExamplesOptions::clear_read_requirements() {
  if (GetArenaNoVirtual() == nullptr && read_requirements_ != nullptr) {
    delete read_requirements_;
  }
  read_requirements_ = nullptr;
}
void MakeExamplesOptions::clear_realigner_options() {
  if (GetArenaNoVirtual() == nullptr && realigner_options_ != nullptr) {
    delete realigner_options_;
  }
  realigner_options_ = nullptr;
}
MakeExamplesOptions::MakeExamplesOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.MakeExamplesOptions)
}
MakeExamplesOptions::MakeExamplesOptions(const MakeExamplesOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      exclude_contigs_(from.exclude_contigs_),
      calling_regions_(from.calling_regions_),
      exclude_calling_regions_(from.exclude_calling_regions_),
      select_variant_types_(from.select_variant_types_),
      deprecated_reads_filenames_(from.deprecated_reads_filenames_),
      population_vcf_filenames_(from.population_vcf_filenames_),
      sample_options_(from.sample_options_),
      aux_fields_to_keep_(from.aux_fields_to_keep_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.reference_filename().empty()) {
    reference_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_filename_);
  }
  deprecated_reads_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.deprecated_reads_filename().empty()) {
    deprecated_reads_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deprecated_reads_filename_);
  }
  candidates_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.candidates_filename().empty()) {
    candidates_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.candidates_filename_);
  }
  examples_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.examples_filename().empty()) {
    examples_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.examples_filename_);
  }
  confident_regions_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.confident_regions_filename().empty()) {
    confident_regions_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.confident_regions_filename_);
  }
  truth_variants_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.truth_variants_filename().empty()) {
    truth_variants_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.truth_variants_filename_);
  }
  gvcf_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.gvcf_filename().empty()) {
    gvcf_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gvcf_filename_);
  }
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.model_name().empty()) {
    model_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  run_info_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.run_info_filename().empty()) {
    run_info_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.run_info_filename_);
  }
  deprecated_proposed_variants_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.deprecated_proposed_variants_filename().empty()) {
    deprecated_proposed_variants_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deprecated_proposed_variants_filename_);
  }
  runtime_by_region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.runtime_by_region().empty()) {
    runtime_by_region_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.runtime_by_region_);
  }
  customized_classes_labeler_classes_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.customized_classes_labeler_classes_list().empty()) {
    customized_classes_labeler_classes_list_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.customized_classes_labeler_classes_list_);
  }
  customized_classes_labeler_info_field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.customized_classes_labeler_info_field_name().empty()) {
    customized_classes_labeler_info_field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.customized_classes_labeler_info_field_name_);
  }
  bam_fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.bam_fname().empty()) {
    bam_fname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bam_fname_);
  }
  sample_role_to_train_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sample_role_to_train().empty()) {
    sample_role_to_train_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sample_role_to_train_);
  }
  if (from.has_allele_counter_options()) {
    allele_counter_options_ = new ::learning::genomics::deepvariant::AlleleCounterOptions(*from.allele_counter_options_);
  } else {
    allele_counter_options_ = nullptr;
  }
  if (from.has_deprecated_variant_caller_options()) {
    deprecated_variant_caller_options_ = new ::learning::genomics::deepvariant::VariantCallerOptions(*from.deprecated_variant_caller_options_);
  } else {
    deprecated_variant_caller_options_ = nullptr;
  }
  if (from.has_pic_options()) {
    pic_options_ = new ::learning::genomics::deepvariant::PileupImageOptions(*from.pic_options_);
  } else {
    pic_options_ = nullptr;
  }
  if (from.has_labeler_options()) {
    labeler_options_ = new ::learning::genomics::deepvariant::VariantLabelerOptions(*from.labeler_options_);
  } else {
    labeler_options_ = nullptr;
  }
  if (from.has_read_requirements()) {
    read_requirements_ = new ::nucleus::genomics::v1::ReadRequirements(*from.read_requirements_);
  } else {
    read_requirements_ = nullptr;
  }
  if (from.has_realigner_options()) {
    realigner_options_ = new ::learning::genomics::deepvariant::RealignerOptions(*from.realigner_options_);
  } else {
    realigner_options_ = nullptr;
  }
  ::memcpy(&random_seed_, &from.random_seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&main_sample_index_) -
    reinterpret_cast<char*>(&random_seed_)) + sizeof(main_sample_index_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.MakeExamplesOptions)
}

void MakeExamplesOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MakeExamplesOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  reference_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deprecated_reads_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  candidates_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  examples_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  confident_regions_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  truth_variants_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gvcf_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  run_info_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deprecated_proposed_variants_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_by_region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customized_classes_labeler_classes_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customized_classes_labeler_info_field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bam_fname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_role_to_train_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&allele_counter_options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&main_sample_index_) -
      reinterpret_cast<char*>(&allele_counter_options_)) + sizeof(main_sample_index_));
}

MakeExamplesOptions::~MakeExamplesOptions() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.MakeExamplesOptions)
  SharedDtor();
}

void MakeExamplesOptions::SharedDtor() {
  reference_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deprecated_reads_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  candidates_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  examples_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  confident_regions_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  truth_variants_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gvcf_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  run_info_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deprecated_proposed_variants_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_by_region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customized_classes_labeler_classes_list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customized_classes_labeler_info_field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bam_fname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_role_to_train_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete allele_counter_options_;
  if (this != internal_default_instance()) delete deprecated_variant_caller_options_;
  if (this != internal_default_instance()) delete pic_options_;
  if (this != internal_default_instance()) delete labeler_options_;
  if (this != internal_default_instance()) delete read_requirements_;
  if (this != internal_default_instance()) delete realigner_options_;
}

void MakeExamplesOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MakeExamplesOptions& MakeExamplesOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MakeExamplesOptions_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void MakeExamplesOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.MakeExamplesOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exclude_contigs_.Clear();
  calling_regions_.Clear();
  exclude_calling_regions_.Clear();
  select_variant_types_.Clear();
  deprecated_reads_filenames_.Clear();
  population_vcf_filenames_.Clear();
  sample_options_.Clear();
  aux_fields_to_keep_.Clear();
  reference_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deprecated_reads_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  candidates_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  examples_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  confident_regions_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  truth_variants_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gvcf_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  run_info_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deprecated_proposed_variants_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_by_region_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customized_classes_labeler_classes_list_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customized_classes_labeler_info_field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bam_fname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_role_to_train_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && allele_counter_options_ != nullptr) {
    delete allele_counter_options_;
  }
  allele_counter_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && deprecated_variant_caller_options_ != nullptr) {
    delete deprecated_variant_caller_options_;
  }
  deprecated_variant_caller_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pic_options_ != nullptr) {
    delete pic_options_;
  }
  pic_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && labeler_options_ != nullptr) {
    delete labeler_options_;
  }
  labeler_options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && read_requirements_ != nullptr) {
    delete read_requirements_;
  }
  read_requirements_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && realigner_options_ != nullptr) {
    delete realigner_options_;
  }
  realigner_options_ = nullptr;
  ::memset(&random_seed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&main_sample_index_) -
      reinterpret_cast<char*>(&random_seed_)) + sizeof(main_sample_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MakeExamplesOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string exclude_contigs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_exclude_contigs(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.exclude_contigs");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated string calling_regions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_calling_regions(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.calling_regions");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // uint32 random_seed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_cores = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          n_cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.AlleleCounterOptions allele_counter_options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_allele_counter_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.VariantCallerOptions deprecated_variant_caller_options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_deprecated_variant_caller_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.PileupImageOptions pic_options = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_pic_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.VariantLabelerOptions labeler_options = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_labeler_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nucleus.genomics.v1.ReadRequirements read_requirements = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_read_requirements(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference_filename = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_reference_filename(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.reference_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deprecated_reads_filename = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_deprecated_reads_filename(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string candidates_filename = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_candidates_filename(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.candidates_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string examples_filename = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_examples_filename(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.examples_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string confident_regions_filename = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_confident_regions_filename(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.confident_regions_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string truth_variants_filename = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_truth_variants_filename(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.truth_variants_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gvcf_filename = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_gvcf_filename(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.gvcf_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_model_name(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.model_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.MakeExamplesOptions.Mode mode = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_mode(static_cast<::learning::genomics::deepvariant::MakeExamplesOptions_Mode>(val));
        } else goto handle_unusual;
        continue;
      // float min_shared_contigs_basepairs = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          min_shared_contigs_basepairs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 task_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_shards = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          num_shards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool realigner_enabled = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          realigner_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.RealignerOptions realigner_options = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_realigner_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_reads_per_partition = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          max_reads_per_partition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float deprecated_downsample_fraction = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          deprecated_downsample_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string exclude_calling_regions = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_exclude_calling_regions(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.exclude_calling_regions");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 466);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.MakeExamplesOptions.LabelerAlgorithm labeler_algorithm = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_labeler_algorithm(static_cast<::learning::genomics::deepvariant::MakeExamplesOptions_LabelerAlgorithm>(val));
        } else goto handle_unusual;
        continue;
      // string run_info_filename = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_run_info_filename(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.run_info_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_original_quality_scores = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          use_original_quality_scores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string select_variant_types = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_select_variant_types(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.select_variant_types");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 498);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.MakeExamplesOptions.VariantCaller variant_caller = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_variant_caller(static_cast<::learning::genomics::deepvariant::MakeExamplesOptions_VariantCaller>(val));
        } else goto handle_unusual;
        continue;
      // repeated string deprecated_reads_filenames = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_deprecated_reads_filenames(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filenames");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 642);
        } else goto handle_unusual;
        continue;
      // string deprecated_proposed_variants_filename = 33 [deprecated = true];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_deprecated_proposed_variants_filename(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.deprecated_proposed_variants_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_allele_frequency = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          use_allele_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string population_vcf_filenames = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_population_vcf_filenames(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.population_vcf_filenames");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 666);
        } else goto handle_unusual;
        continue;
      // string runtime_by_region = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_runtime_by_region(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.runtime_by_region");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_ref_for_cram = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          use_ref_for_cram_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool parse_sam_aux_fields = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          parse_sam_aux_fields_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hts_block_size = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          hts_block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 logging_every_n_candidates = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          logging_every_n_candidates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customized_classes_labeler_classes_list = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_customized_classes_labeler_classes_list(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_classes_list");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customized_classes_labeler_info_field_name = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_customized_classes_labeler_info_field_name(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_info_field_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_med_dp = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          include_med_dp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 main_sample_index = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          main_sample_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bam_fname = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_bam_fname(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.bam_fname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .learning.genomics.deepvariant.SampleOptions sample_options = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_sample_options(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 754);
        } else goto handle_unusual;
        continue;
      // string sample_role_to_train = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sample_role_to_train(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.sample_role_to_train");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string aux_fields_to_keep = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_aux_fields_to_keep(), ptr, ctx, "learning.genomics.deepvariant.MakeExamplesOptions.aux_fields_to_keep");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 914);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MakeExamplesOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.MakeExamplesOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string exclude_contigs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_exclude_contigs()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exclude_contigs(this->exclude_contigs_size() - 1).data(),
            static_cast<int>(this->exclude_contigs(this->exclude_contigs_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.exclude_contigs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string calling_regions = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_calling_regions()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->calling_regions(this->calling_regions_size() - 1).data(),
            static_cast<int>(this->calling_regions(this->calling_regions_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.calling_regions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 random_seed = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n_cores = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_cores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.AlleleCounterOptions allele_counter_options = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allele_counter_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.VariantCallerOptions deprecated_variant_caller_options = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_deprecated_variant_caller_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.PileupImageOptions pic_options = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pic_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.VariantLabelerOptions labeler_options = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_labeler_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nucleus.genomics.v1.ReadRequirements read_requirements = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_read_requirements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_filename = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->reference_filename().data(), static_cast<int>(this->reference_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.reference_filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string deprecated_reads_filename = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_reads_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->deprecated_reads_filename().data(), static_cast<int>(this->deprecated_reads_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string candidates_filename = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_candidates_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->candidates_filename().data(), static_cast<int>(this->candidates_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.candidates_filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string examples_filename = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_examples_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->examples_filename().data(), static_cast<int>(this->examples_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.examples_filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string confident_regions_filename = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_confident_regions_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->confident_regions_filename().data(), static_cast<int>(this->confident_regions_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.confident_regions_filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string truth_variants_filename = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_truth_variants_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->truth_variants_filename().data(), static_cast<int>(this->truth_variants_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.truth_variants_filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string gvcf_filename = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_gvcf_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->gvcf_filename().data(), static_cast<int>(this->gvcf_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.gvcf_filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_name = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_model_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->model_name().data(), static_cast<int>(this->model_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.model_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.MakeExamplesOptions.Mode mode = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::learning::genomics::deepvariant::MakeExamplesOptions_Mode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_shared_contigs_basepairs = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (157 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_shared_contigs_basepairs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 task_id = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_shards = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_shards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool realigner_enabled = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &realigner_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.RealignerOptions realigner_options = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_realigner_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_reads_per_partition = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_reads_per_partition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float deprecated_downsample_fraction = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (205 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &deprecated_downsample_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string exclude_calling_regions = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_exclude_calling_regions()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exclude_calling_regions(this->exclude_calling_regions_size() - 1).data(),
            static_cast<int>(this->exclude_calling_regions(this->exclude_calling_regions_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.exclude_calling_regions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.MakeExamplesOptions.LabelerAlgorithm labeler_algorithm = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_labeler_algorithm(static_cast< ::learning::genomics::deepvariant::MakeExamplesOptions_LabelerAlgorithm >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string run_info_filename = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_run_info_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->run_info_filename().data(), static_cast<int>(this->run_info_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.run_info_filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_original_quality_scores = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (232 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_original_quality_scores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string select_variant_types = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_select_variant_types()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->select_variant_types(this->select_variant_types_size() - 1).data(),
            static_cast<int>(this->select_variant_types(this->select_variant_types_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.select_variant_types"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.MakeExamplesOptions.VariantCaller variant_caller = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_variant_caller(static_cast< ::learning::genomics::deepvariant::MakeExamplesOptions_VariantCaller >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string deprecated_reads_filenames = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_deprecated_reads_filenames()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->deprecated_reads_filenames(this->deprecated_reads_filenames_size() - 1).data(),
            static_cast<int>(this->deprecated_reads_filenames(this->deprecated_reads_filenames_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filenames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string deprecated_proposed_variants_filename = 33 [deprecated = true];
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_deprecated_proposed_variants_filename()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->deprecated_proposed_variants_filename().data(), static_cast<int>(this->deprecated_proposed_variants_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.deprecated_proposed_variants_filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_allele_frequency = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (272 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_allele_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string population_vcf_filenames = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_population_vcf_filenames()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->population_vcf_filenames(this->population_vcf_filenames_size() - 1).data(),
            static_cast<int>(this->population_vcf_filenames(this->population_vcf_filenames_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.population_vcf_filenames"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string runtime_by_region = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_runtime_by_region()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->runtime_by_region().data(), static_cast<int>(this->runtime_by_region().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.runtime_by_region"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_ref_for_cram = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (296 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_ref_for_cram_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool parse_sam_aux_fields = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (304 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parse_sam_aux_fields_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hts_block_size = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (312 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &hts_block_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 logging_every_n_candidates = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (320 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &logging_every_n_candidates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string customized_classes_labeler_classes_list = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (330 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_customized_classes_labeler_classes_list()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->customized_classes_labeler_classes_list().data(), static_cast<int>(this->customized_classes_labeler_classes_list().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_classes_list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string customized_classes_labeler_info_field_name = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (338 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_customized_classes_labeler_info_field_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->customized_classes_labeler_info_field_name().data(), static_cast<int>(this->customized_classes_labeler_info_field_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_info_field_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool include_med_dp = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (344 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_med_dp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 main_sample_index = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (352 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_sample_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bam_fname = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bam_fname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->bam_fname().data(), static_cast<int>(this->bam_fname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.bam_fname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .learning.genomics.deepvariant.SampleOptions sample_options = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sample_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sample_role_to_train = 47;
      case 47: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (378 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sample_role_to_train()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sample_role_to_train().data(), static_cast<int>(this->sample_role_to_train().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.sample_role_to_train"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string aux_fields_to_keep = 50;
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_aux_fields_to_keep()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->aux_fields_to_keep(this->aux_fields_to_keep_size() - 1).data(),
            static_cast<int>(this->aux_fields_to_keep(this->aux_fields_to_keep_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.MakeExamplesOptions.aux_fields_to_keep"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.MakeExamplesOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.MakeExamplesOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MakeExamplesOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.MakeExamplesOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string exclude_contigs = 1;
  for (int i = 0, n = this->exclude_contigs_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exclude_contigs(i).data(), static_cast<int>(this->exclude_contigs(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.exclude_contigs");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->exclude_contigs(i), output);
  }

  // repeated string calling_regions = 2;
  for (int i = 0, n = this->calling_regions_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->calling_regions(i).data(), static_cast<int>(this->calling_regions(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.calling_regions");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->calling_regions(i), output);
  }

  // uint32 random_seed = 3;
  if (this->random_seed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->random_seed(), output);
  }

  // int32 n_cores = 4;
  if (this->n_cores() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->n_cores(), output);
  }

  // .learning.genomics.deepvariant.AlleleCounterOptions allele_counter_options = 5;
  if (this->has_allele_counter_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::allele_counter_options(this), output);
  }

  // .learning.genomics.deepvariant.VariantCallerOptions deprecated_variant_caller_options = 6;
  if (this->has_deprecated_variant_caller_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::deprecated_variant_caller_options(this), output);
  }

  // .learning.genomics.deepvariant.PileupImageOptions pic_options = 7;
  if (this->has_pic_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::pic_options(this), output);
  }

  // .learning.genomics.deepvariant.VariantLabelerOptions labeler_options = 8;
  if (this->has_labeler_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::labeler_options(this), output);
  }

  // .nucleus.genomics.v1.ReadRequirements read_requirements = 9;
  if (this->has_read_requirements()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::read_requirements(this), output);
  }

  // string reference_filename = 10;
  if (this->reference_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reference_filename().data(), static_cast<int>(this->reference_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.reference_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->reference_filename(), output);
  }

  // string deprecated_reads_filename = 11;
  if (this->deprecated_reads_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deprecated_reads_filename().data(), static_cast<int>(this->deprecated_reads_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->deprecated_reads_filename(), output);
  }

  // string candidates_filename = 12;
  if (this->candidates_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->candidates_filename().data(), static_cast<int>(this->candidates_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.candidates_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->candidates_filename(), output);
  }

  // string examples_filename = 13;
  if (this->examples_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->examples_filename().data(), static_cast<int>(this->examples_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.examples_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->examples_filename(), output);
  }

  // string confident_regions_filename = 14;
  if (this->confident_regions_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->confident_regions_filename().data(), static_cast<int>(this->confident_regions_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.confident_regions_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->confident_regions_filename(), output);
  }

  // string truth_variants_filename = 15;
  if (this->truth_variants_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->truth_variants_filename().data(), static_cast<int>(this->truth_variants_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.truth_variants_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->truth_variants_filename(), output);
  }

  // string gvcf_filename = 16;
  if (this->gvcf_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gvcf_filename().data(), static_cast<int>(this->gvcf_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.gvcf_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->gvcf_filename(), output);
  }

  // string model_name = 17;
  if (this->model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.model_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->model_name(), output);
  }

  // .learning.genomics.deepvariant.MakeExamplesOptions.Mode mode = 18;
  if (this->mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      18, this->mode(), output);
  }

  // float min_shared_contigs_basepairs = 19;
  if (!(this->min_shared_contigs_basepairs() <= 0 && this->min_shared_contigs_basepairs() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(19, this->min_shared_contigs_basepairs(), output);
  }

  // int32 task_id = 20;
  if (this->task_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(20, this->task_id(), output);
  }

  // int32 num_shards = 21;
  if (this->num_shards() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(21, this->num_shards(), output);
  }

  // bool realigner_enabled = 22;
  if (this->realigner_enabled() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(22, this->realigner_enabled(), output);
  }

  // .learning.genomics.deepvariant.RealignerOptions realigner_options = 23;
  if (this->has_realigner_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, _Internal::realigner_options(this), output);
  }

  // int32 max_reads_per_partition = 24;
  if (this->max_reads_per_partition() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(24, this->max_reads_per_partition(), output);
  }

  // float deprecated_downsample_fraction = 25;
  if (!(this->deprecated_downsample_fraction() <= 0 && this->deprecated_downsample_fraction() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(25, this->deprecated_downsample_fraction(), output);
  }

  // repeated string exclude_calling_regions = 26;
  for (int i = 0, n = this->exclude_calling_regions_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exclude_calling_regions(i).data(), static_cast<int>(this->exclude_calling_regions(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.exclude_calling_regions");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      26, this->exclude_calling_regions(i), output);
  }

  // .learning.genomics.deepvariant.MakeExamplesOptions.LabelerAlgorithm labeler_algorithm = 27;
  if (this->labeler_algorithm() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      27, this->labeler_algorithm(), output);
  }

  // string run_info_filename = 28;
  if (this->run_info_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->run_info_filename().data(), static_cast<int>(this->run_info_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.run_info_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->run_info_filename(), output);
  }

  // bool use_original_quality_scores = 29;
  if (this->use_original_quality_scores() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(29, this->use_original_quality_scores(), output);
  }

  // repeated string select_variant_types = 30;
  for (int i = 0, n = this->select_variant_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->select_variant_types(i).data(), static_cast<int>(this->select_variant_types(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.select_variant_types");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      30, this->select_variant_types(i), output);
  }

  // .learning.genomics.deepvariant.MakeExamplesOptions.VariantCaller variant_caller = 31;
  if (this->variant_caller() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      31, this->variant_caller(), output);
  }

  // repeated string deprecated_reads_filenames = 32;
  for (int i = 0, n = this->deprecated_reads_filenames_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deprecated_reads_filenames(i).data(), static_cast<int>(this->deprecated_reads_filenames(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filenames");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      32, this->deprecated_reads_filenames(i), output);
  }

  // string deprecated_proposed_variants_filename = 33 [deprecated = true];
  if (this->deprecated_proposed_variants_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deprecated_proposed_variants_filename().data(), static_cast<int>(this->deprecated_proposed_variants_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.deprecated_proposed_variants_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->deprecated_proposed_variants_filename(), output);
  }

  // bool use_allele_frequency = 34;
  if (this->use_allele_frequency() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(34, this->use_allele_frequency(), output);
  }

  // repeated string population_vcf_filenames = 35;
  for (int i = 0, n = this->population_vcf_filenames_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->population_vcf_filenames(i).data(), static_cast<int>(this->population_vcf_filenames(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.population_vcf_filenames");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      35, this->population_vcf_filenames(i), output);
  }

  // string runtime_by_region = 36;
  if (this->runtime_by_region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_by_region().data(), static_cast<int>(this->runtime_by_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.runtime_by_region");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      36, this->runtime_by_region(), output);
  }

  // bool use_ref_for_cram = 37;
  if (this->use_ref_for_cram() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(37, this->use_ref_for_cram(), output);
  }

  // bool parse_sam_aux_fields = 38;
  if (this->parse_sam_aux_fields() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(38, this->parse_sam_aux_fields(), output);
  }

  // int32 hts_block_size = 39;
  if (this->hts_block_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(39, this->hts_block_size(), output);
  }

  // int32 logging_every_n_candidates = 40;
  if (this->logging_every_n_candidates() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(40, this->logging_every_n_candidates(), output);
  }

  // string customized_classes_labeler_classes_list = 41;
  if (this->customized_classes_labeler_classes_list().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->customized_classes_labeler_classes_list().data(), static_cast<int>(this->customized_classes_labeler_classes_list().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_classes_list");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      41, this->customized_classes_labeler_classes_list(), output);
  }

  // string customized_classes_labeler_info_field_name = 42;
  if (this->customized_classes_labeler_info_field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->customized_classes_labeler_info_field_name().data(), static_cast<int>(this->customized_classes_labeler_info_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_info_field_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      42, this->customized_classes_labeler_info_field_name(), output);
  }

  // bool include_med_dp = 43;
  if (this->include_med_dp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(43, this->include_med_dp(), output);
  }

  // int32 main_sample_index = 44;
  if (this->main_sample_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(44, this->main_sample_index(), output);
  }

  // string bam_fname = 45;
  if (this->bam_fname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bam_fname().data(), static_cast<int>(this->bam_fname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.bam_fname");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      45, this->bam_fname(), output);
  }

  // repeated .learning.genomics.deepvariant.SampleOptions sample_options = 46;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sample_options_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      46,
      this->sample_options(static_cast<int>(i)),
      output);
  }

  // string sample_role_to_train = 47;
  if (this->sample_role_to_train().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sample_role_to_train().data(), static_cast<int>(this->sample_role_to_train().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.sample_role_to_train");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      47, this->sample_role_to_train(), output);
  }

  // repeated string aux_fields_to_keep = 50;
  for (int i = 0, n = this->aux_fields_to_keep_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aux_fields_to_keep(i).data(), static_cast<int>(this->aux_fields_to_keep(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.aux_fields_to_keep");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      50, this->aux_fields_to_keep(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.MakeExamplesOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* MakeExamplesOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.MakeExamplesOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string exclude_contigs = 1;
  for (int i = 0, n = this->exclude_contigs_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exclude_contigs(i).data(), static_cast<int>(this->exclude_contigs(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.exclude_contigs");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->exclude_contigs(i), target);
  }

  // repeated string calling_regions = 2;
  for (int i = 0, n = this->calling_regions_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->calling_regions(i).data(), static_cast<int>(this->calling_regions(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.calling_regions");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->calling_regions(i), target);
  }

  // uint32 random_seed = 3;
  if (this->random_seed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->random_seed(), target);
  }

  // int32 n_cores = 4;
  if (this->n_cores() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->n_cores(), target);
  }

  // .learning.genomics.deepvariant.AlleleCounterOptions allele_counter_options = 5;
  if (this->has_allele_counter_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::allele_counter_options(this), target);
  }

  // .learning.genomics.deepvariant.VariantCallerOptions deprecated_variant_caller_options = 6;
  if (this->has_deprecated_variant_caller_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::deprecated_variant_caller_options(this), target);
  }

  // .learning.genomics.deepvariant.PileupImageOptions pic_options = 7;
  if (this->has_pic_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::pic_options(this), target);
  }

  // .learning.genomics.deepvariant.VariantLabelerOptions labeler_options = 8;
  if (this->has_labeler_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::labeler_options(this), target);
  }

  // .nucleus.genomics.v1.ReadRequirements read_requirements = 9;
  if (this->has_read_requirements()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::read_requirements(this), target);
  }

  // string reference_filename = 10;
  if (this->reference_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reference_filename().data(), static_cast<int>(this->reference_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.reference_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->reference_filename(), target);
  }

  // string deprecated_reads_filename = 11;
  if (this->deprecated_reads_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deprecated_reads_filename().data(), static_cast<int>(this->deprecated_reads_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->deprecated_reads_filename(), target);
  }

  // string candidates_filename = 12;
  if (this->candidates_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->candidates_filename().data(), static_cast<int>(this->candidates_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.candidates_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->candidates_filename(), target);
  }

  // string examples_filename = 13;
  if (this->examples_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->examples_filename().data(), static_cast<int>(this->examples_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.examples_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->examples_filename(), target);
  }

  // string confident_regions_filename = 14;
  if (this->confident_regions_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->confident_regions_filename().data(), static_cast<int>(this->confident_regions_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.confident_regions_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->confident_regions_filename(), target);
  }

  // string truth_variants_filename = 15;
  if (this->truth_variants_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->truth_variants_filename().data(), static_cast<int>(this->truth_variants_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.truth_variants_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        15, this->truth_variants_filename(), target);
  }

  // string gvcf_filename = 16;
  if (this->gvcf_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gvcf_filename().data(), static_cast<int>(this->gvcf_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.gvcf_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        16, this->gvcf_filename(), target);
  }

  // string model_name = 17;
  if (this->model_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_name().data(), static_cast<int>(this->model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.model_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        17, this->model_name(), target);
  }

  // .learning.genomics.deepvariant.MakeExamplesOptions.Mode mode = 18;
  if (this->mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->mode(), target);
  }

  // float min_shared_contigs_basepairs = 19;
  if (!(this->min_shared_contigs_basepairs() <= 0 && this->min_shared_contigs_basepairs() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->min_shared_contigs_basepairs(), target);
  }

  // int32 task_id = 20;
  if (this->task_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->task_id(), target);
  }

  // int32 num_shards = 21;
  if (this->num_shards() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->num_shards(), target);
  }

  // bool realigner_enabled = 22;
  if (this->realigner_enabled() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->realigner_enabled(), target);
  }

  // .learning.genomics.deepvariant.RealignerOptions realigner_options = 23;
  if (this->has_realigner_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, _Internal::realigner_options(this), target);
  }

  // int32 max_reads_per_partition = 24;
  if (this->max_reads_per_partition() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->max_reads_per_partition(), target);
  }

  // float deprecated_downsample_fraction = 25;
  if (!(this->deprecated_downsample_fraction() <= 0 && this->deprecated_downsample_fraction() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->deprecated_downsample_fraction(), target);
  }

  // repeated string exclude_calling_regions = 26;
  for (int i = 0, n = this->exclude_calling_regions_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exclude_calling_regions(i).data(), static_cast<int>(this->exclude_calling_regions(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.exclude_calling_regions");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(26, this->exclude_calling_regions(i), target);
  }

  // .learning.genomics.deepvariant.MakeExamplesOptions.LabelerAlgorithm labeler_algorithm = 27;
  if (this->labeler_algorithm() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->labeler_algorithm(), target);
  }

  // string run_info_filename = 28;
  if (this->run_info_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->run_info_filename().data(), static_cast<int>(this->run_info_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.run_info_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        28, this->run_info_filename(), target);
  }

  // bool use_original_quality_scores = 29;
  if (this->use_original_quality_scores() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->use_original_quality_scores(), target);
  }

  // repeated string select_variant_types = 30;
  for (int i = 0, n = this->select_variant_types_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->select_variant_types(i).data(), static_cast<int>(this->select_variant_types(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.select_variant_types");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(30, this->select_variant_types(i), target);
  }

  // .learning.genomics.deepvariant.MakeExamplesOptions.VariantCaller variant_caller = 31;
  if (this->variant_caller() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      31, this->variant_caller(), target);
  }

  // repeated string deprecated_reads_filenames = 32;
  for (int i = 0, n = this->deprecated_reads_filenames_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deprecated_reads_filenames(i).data(), static_cast<int>(this->deprecated_reads_filenames(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filenames");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(32, this->deprecated_reads_filenames(i), target);
  }

  // string deprecated_proposed_variants_filename = 33 [deprecated = true];
  if (this->deprecated_proposed_variants_filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->deprecated_proposed_variants_filename().data(), static_cast<int>(this->deprecated_proposed_variants_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.deprecated_proposed_variants_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        33, this->deprecated_proposed_variants_filename(), target);
  }

  // bool use_allele_frequency = 34;
  if (this->use_allele_frequency() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->use_allele_frequency(), target);
  }

  // repeated string population_vcf_filenames = 35;
  for (int i = 0, n = this->population_vcf_filenames_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->population_vcf_filenames(i).data(), static_cast<int>(this->population_vcf_filenames(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.population_vcf_filenames");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(35, this->population_vcf_filenames(i), target);
  }

  // string runtime_by_region = 36;
  if (this->runtime_by_region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->runtime_by_region().data(), static_cast<int>(this->runtime_by_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.runtime_by_region");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        36, this->runtime_by_region(), target);
  }

  // bool use_ref_for_cram = 37;
  if (this->use_ref_for_cram() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(37, this->use_ref_for_cram(), target);
  }

  // bool parse_sam_aux_fields = 38;
  if (this->parse_sam_aux_fields() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(38, this->parse_sam_aux_fields(), target);
  }

  // int32 hts_block_size = 39;
  if (this->hts_block_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->hts_block_size(), target);
  }

  // int32 logging_every_n_candidates = 40;
  if (this->logging_every_n_candidates() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->logging_every_n_candidates(), target);
  }

  // string customized_classes_labeler_classes_list = 41;
  if (this->customized_classes_labeler_classes_list().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->customized_classes_labeler_classes_list().data(), static_cast<int>(this->customized_classes_labeler_classes_list().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_classes_list");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        41, this->customized_classes_labeler_classes_list(), target);
  }

  // string customized_classes_labeler_info_field_name = 42;
  if (this->customized_classes_labeler_info_field_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->customized_classes_labeler_info_field_name().data(), static_cast<int>(this->customized_classes_labeler_info_field_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_info_field_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        42, this->customized_classes_labeler_info_field_name(), target);
  }

  // bool include_med_dp = 43;
  if (this->include_med_dp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->include_med_dp(), target);
  }

  // int32 main_sample_index = 44;
  if (this->main_sample_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(44, this->main_sample_index(), target);
  }

  // string bam_fname = 45;
  if (this->bam_fname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bam_fname().data(), static_cast<int>(this->bam_fname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.bam_fname");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        45, this->bam_fname(), target);
  }

  // repeated .learning.genomics.deepvariant.SampleOptions sample_options = 46;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sample_options_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        46, this->sample_options(static_cast<int>(i)), target);
  }

  // string sample_role_to_train = 47;
  if (this->sample_role_to_train().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sample_role_to_train().data(), static_cast<int>(this->sample_role_to_train().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.sample_role_to_train");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        47, this->sample_role_to_train(), target);
  }

  // repeated string aux_fields_to_keep = 50;
  for (int i = 0, n = this->aux_fields_to_keep_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aux_fields_to_keep(i).data(), static_cast<int>(this->aux_fields_to_keep(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.MakeExamplesOptions.aux_fields_to_keep");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(50, this->aux_fields_to_keep(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.MakeExamplesOptions)
  return target;
}

size_t MakeExamplesOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.MakeExamplesOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string exclude_contigs = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->exclude_contigs_size());
  for (int i = 0, n = this->exclude_contigs_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->exclude_contigs(i));
  }

  // repeated string calling_regions = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->calling_regions_size());
  for (int i = 0, n = this->calling_regions_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->calling_regions(i));
  }

  // repeated string exclude_calling_regions = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->exclude_calling_regions_size());
  for (int i = 0, n = this->exclude_calling_regions_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->exclude_calling_regions(i));
  }

  // repeated string select_variant_types = 30;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->select_variant_types_size());
  for (int i = 0, n = this->select_variant_types_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->select_variant_types(i));
  }

  // repeated string deprecated_reads_filenames = 32;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->deprecated_reads_filenames_size());
  for (int i = 0, n = this->deprecated_reads_filenames_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->deprecated_reads_filenames(i));
  }

  // repeated string population_vcf_filenames = 35;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->population_vcf_filenames_size());
  for (int i = 0, n = this->population_vcf_filenames_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->population_vcf_filenames(i));
  }

  // repeated .learning.genomics.deepvariant.SampleOptions sample_options = 46;
  {
    unsigned int count = static_cast<unsigned int>(this->sample_options_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sample_options(static_cast<int>(i)));
    }
  }

  // repeated string aux_fields_to_keep = 50;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->aux_fields_to_keep_size());
  for (int i = 0, n = this->aux_fields_to_keep_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->aux_fields_to_keep(i));
  }

  // string reference_filename = 10;
  if (this->reference_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->reference_filename());
  }

  // string deprecated_reads_filename = 11;
  if (this->deprecated_reads_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->deprecated_reads_filename());
  }

  // string candidates_filename = 12;
  if (this->candidates_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->candidates_filename());
  }

  // string examples_filename = 13;
  if (this->examples_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->examples_filename());
  }

  // string confident_regions_filename = 14;
  if (this->confident_regions_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->confident_regions_filename());
  }

  // string truth_variants_filename = 15;
  if (this->truth_variants_filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->truth_variants_filename());
  }

  // string gvcf_filename = 16;
  if (this->gvcf_filename().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->gvcf_filename());
  }

  // string model_name = 17;
  if (this->model_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->model_name());
  }

  // string run_info_filename = 28;
  if (this->run_info_filename().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->run_info_filename());
  }

  // string deprecated_proposed_variants_filename = 33 [deprecated = true];
  if (this->deprecated_proposed_variants_filename().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->deprecated_proposed_variants_filename());
  }

  // string runtime_by_region = 36;
  if (this->runtime_by_region().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->runtime_by_region());
  }

  // string customized_classes_labeler_classes_list = 41;
  if (this->customized_classes_labeler_classes_list().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->customized_classes_labeler_classes_list());
  }

  // string customized_classes_labeler_info_field_name = 42;
  if (this->customized_classes_labeler_info_field_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->customized_classes_labeler_info_field_name());
  }

  // string bam_fname = 45;
  if (this->bam_fname().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->bam_fname());
  }

  // string sample_role_to_train = 47;
  if (this->sample_role_to_train().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sample_role_to_train());
  }

  // .learning.genomics.deepvariant.AlleleCounterOptions allele_counter_options = 5;
  if (this->has_allele_counter_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *allele_counter_options_);
  }

  // .learning.genomics.deepvariant.VariantCallerOptions deprecated_variant_caller_options = 6;
  if (this->has_deprecated_variant_caller_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deprecated_variant_caller_options_);
  }

  // .learning.genomics.deepvariant.PileupImageOptions pic_options = 7;
  if (this->has_pic_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pic_options_);
  }

  // .learning.genomics.deepvariant.VariantLabelerOptions labeler_options = 8;
  if (this->has_labeler_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *labeler_options_);
  }

  // .nucleus.genomics.v1.ReadRequirements read_requirements = 9;
  if (this->has_read_requirements()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_requirements_);
  }

  // .learning.genomics.deepvariant.RealignerOptions realigner_options = 23;
  if (this->has_realigner_options()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *realigner_options_);
  }

  // uint32 random_seed = 3;
  if (this->random_seed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->random_seed());
  }

  // int32 n_cores = 4;
  if (this->n_cores() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n_cores());
  }

  // .learning.genomics.deepvariant.MakeExamplesOptions.Mode mode = 18;
  if (this->mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mode());
  }

  // float min_shared_contigs_basepairs = 19;
  if (!(this->min_shared_contigs_basepairs() <= 0 && this->min_shared_contigs_basepairs() >= 0)) {
    total_size += 2 + 4;
  }

  // int32 task_id = 20;
  if (this->task_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->task_id());
  }

  // int32 num_shards = 21;
  if (this->num_shards() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_shards());
  }

  // int32 max_reads_per_partition = 24;
  if (this->max_reads_per_partition() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_reads_per_partition());
  }

  // float deprecated_downsample_fraction = 25;
  if (!(this->deprecated_downsample_fraction() <= 0 && this->deprecated_downsample_fraction() >= 0)) {
    total_size += 2 + 4;
  }

  // .learning.genomics.deepvariant.MakeExamplesOptions.LabelerAlgorithm labeler_algorithm = 27;
  if (this->labeler_algorithm() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->labeler_algorithm());
  }

  // .learning.genomics.deepvariant.MakeExamplesOptions.VariantCaller variant_caller = 31;
  if (this->variant_caller() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->variant_caller());
  }

  // bool include_med_dp = 43;
  if (this->include_med_dp() != 0) {
    total_size += 2 + 1;
  }

  // bool realigner_enabled = 22;
  if (this->realigner_enabled() != 0) {
    total_size += 2 + 1;
  }

  // bool use_original_quality_scores = 29;
  if (this->use_original_quality_scores() != 0) {
    total_size += 2 + 1;
  }

  // bool use_allele_frequency = 34;
  if (this->use_allele_frequency() != 0) {
    total_size += 2 + 1;
  }

  // bool use_ref_for_cram = 37;
  if (this->use_ref_for_cram() != 0) {
    total_size += 2 + 1;
  }

  // bool parse_sam_aux_fields = 38;
  if (this->parse_sam_aux_fields() != 0) {
    total_size += 2 + 1;
  }

  // int32 hts_block_size = 39;
  if (this->hts_block_size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->hts_block_size());
  }

  // int32 logging_every_n_candidates = 40;
  if (this->logging_every_n_candidates() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->logging_every_n_candidates());
  }

  // int32 main_sample_index = 44;
  if (this->main_sample_index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->main_sample_index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MakeExamplesOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.MakeExamplesOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const MakeExamplesOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MakeExamplesOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.MakeExamplesOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.MakeExamplesOptions)
    MergeFrom(*source);
  }
}

void MakeExamplesOptions::MergeFrom(const MakeExamplesOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.MakeExamplesOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exclude_contigs_.MergeFrom(from.exclude_contigs_);
  calling_regions_.MergeFrom(from.calling_regions_);
  exclude_calling_regions_.MergeFrom(from.exclude_calling_regions_);
  select_variant_types_.MergeFrom(from.select_variant_types_);
  deprecated_reads_filenames_.MergeFrom(from.deprecated_reads_filenames_);
  population_vcf_filenames_.MergeFrom(from.population_vcf_filenames_);
  sample_options_.MergeFrom(from.sample_options_);
  aux_fields_to_keep_.MergeFrom(from.aux_fields_to_keep_);
  if (from.reference_filename().size() > 0) {

    reference_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_filename_);
  }
  if (from.deprecated_reads_filename().size() > 0) {

    deprecated_reads_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deprecated_reads_filename_);
  }
  if (from.candidates_filename().size() > 0) {

    candidates_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.candidates_filename_);
  }
  if (from.examples_filename().size() > 0) {

    examples_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.examples_filename_);
  }
  if (from.confident_regions_filename().size() > 0) {

    confident_regions_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.confident_regions_filename_);
  }
  if (from.truth_variants_filename().size() > 0) {

    truth_variants_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.truth_variants_filename_);
  }
  if (from.gvcf_filename().size() > 0) {

    gvcf_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gvcf_filename_);
  }
  if (from.model_name().size() > 0) {

    model_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_name_);
  }
  if (from.run_info_filename().size() > 0) {

    run_info_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.run_info_filename_);
  }
  if (from.deprecated_proposed_variants_filename().size() > 0) {

    deprecated_proposed_variants_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deprecated_proposed_variants_filename_);
  }
  if (from.runtime_by_region().size() > 0) {

    runtime_by_region_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.runtime_by_region_);
  }
  if (from.customized_classes_labeler_classes_list().size() > 0) {

    customized_classes_labeler_classes_list_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.customized_classes_labeler_classes_list_);
  }
  if (from.customized_classes_labeler_info_field_name().size() > 0) {

    customized_classes_labeler_info_field_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.customized_classes_labeler_info_field_name_);
  }
  if (from.bam_fname().size() > 0) {

    bam_fname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bam_fname_);
  }
  if (from.sample_role_to_train().size() > 0) {

    sample_role_to_train_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sample_role_to_train_);
  }
  if (from.has_allele_counter_options()) {
    mutable_allele_counter_options()->::learning::genomics::deepvariant::AlleleCounterOptions::MergeFrom(from.allele_counter_options());
  }
  if (from.has_deprecated_variant_caller_options()) {
    mutable_deprecated_variant_caller_options()->::learning::genomics::deepvariant::VariantCallerOptions::MergeFrom(from.deprecated_variant_caller_options());
  }
  if (from.has_pic_options()) {
    mutable_pic_options()->::learning::genomics::deepvariant::PileupImageOptions::MergeFrom(from.pic_options());
  }
  if (from.has_labeler_options()) {
    mutable_labeler_options()->::learning::genomics::deepvariant::VariantLabelerOptions::MergeFrom(from.labeler_options());
  }
  if (from.has_read_requirements()) {
    mutable_read_requirements()->::nucleus::genomics::v1::ReadRequirements::MergeFrom(from.read_requirements());
  }
  if (from.has_realigner_options()) {
    mutable_realigner_options()->::learning::genomics::deepvariant::RealignerOptions::MergeFrom(from.realigner_options());
  }
  if (from.random_seed() != 0) {
    set_random_seed(from.random_seed());
  }
  if (from.n_cores() != 0) {
    set_n_cores(from.n_cores());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (!(from.min_shared_contigs_basepairs() <= 0 && from.min_shared_contigs_basepairs() >= 0)) {
    set_min_shared_contigs_basepairs(from.min_shared_contigs_basepairs());
  }
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
  if (from.num_shards() != 0) {
    set_num_shards(from.num_shards());
  }
  if (from.max_reads_per_partition() != 0) {
    set_max_reads_per_partition(from.max_reads_per_partition());
  }
  if (!(from.deprecated_downsample_fraction() <= 0 && from.deprecated_downsample_fraction() >= 0)) {
    set_deprecated_downsample_fraction(from.deprecated_downsample_fraction());
  }
  if (from.labeler_algorithm() != 0) {
    set_labeler_algorithm(from.labeler_algorithm());
  }
  if (from.variant_caller() != 0) {
    set_variant_caller(from.variant_caller());
  }
  if (from.include_med_dp() != 0) {
    set_include_med_dp(from.include_med_dp());
  }
  if (from.realigner_enabled() != 0) {
    set_realigner_enabled(from.realigner_enabled());
  }
  if (from.use_original_quality_scores() != 0) {
    set_use_original_quality_scores(from.use_original_quality_scores());
  }
  if (from.use_allele_frequency() != 0) {
    set_use_allele_frequency(from.use_allele_frequency());
  }
  if (from.use_ref_for_cram() != 0) {
    set_use_ref_for_cram(from.use_ref_for_cram());
  }
  if (from.parse_sam_aux_fields() != 0) {
    set_parse_sam_aux_fields(from.parse_sam_aux_fields());
  }
  if (from.hts_block_size() != 0) {
    set_hts_block_size(from.hts_block_size());
  }
  if (from.logging_every_n_candidates() != 0) {
    set_logging_every_n_candidates(from.logging_every_n_candidates());
  }
  if (from.main_sample_index() != 0) {
    set_main_sample_index(from.main_sample_index());
  }
}

void MakeExamplesOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.MakeExamplesOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeExamplesOptions::CopyFrom(const MakeExamplesOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.MakeExamplesOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeExamplesOptions::IsInitialized() const {
  return true;
}

void MakeExamplesOptions::InternalSwap(MakeExamplesOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  exclude_contigs_.InternalSwap(CastToBase(&other->exclude_contigs_));
  calling_regions_.InternalSwap(CastToBase(&other->calling_regions_));
  exclude_calling_regions_.InternalSwap(CastToBase(&other->exclude_calling_regions_));
  select_variant_types_.InternalSwap(CastToBase(&other->select_variant_types_));
  deprecated_reads_filenames_.InternalSwap(CastToBase(&other->deprecated_reads_filenames_));
  population_vcf_filenames_.InternalSwap(CastToBase(&other->population_vcf_filenames_));
  CastToBase(&sample_options_)->InternalSwap(CastToBase(&other->sample_options_));
  aux_fields_to_keep_.InternalSwap(CastToBase(&other->aux_fields_to_keep_));
  reference_filename_.Swap(&other->reference_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deprecated_reads_filename_.Swap(&other->deprecated_reads_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  candidates_filename_.Swap(&other->candidates_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  examples_filename_.Swap(&other->examples_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  confident_regions_filename_.Swap(&other->confident_regions_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  truth_variants_filename_.Swap(&other->truth_variants_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gvcf_filename_.Swap(&other->gvcf_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_name_.Swap(&other->model_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  run_info_filename_.Swap(&other->run_info_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deprecated_proposed_variants_filename_.Swap(&other->deprecated_proposed_variants_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  runtime_by_region_.Swap(&other->runtime_by_region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  customized_classes_labeler_classes_list_.Swap(&other->customized_classes_labeler_classes_list_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  customized_classes_labeler_info_field_name_.Swap(&other->customized_classes_labeler_info_field_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bam_fname_.Swap(&other->bam_fname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sample_role_to_train_.Swap(&other->sample_role_to_train_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(allele_counter_options_, other->allele_counter_options_);
  swap(deprecated_variant_caller_options_, other->deprecated_variant_caller_options_);
  swap(pic_options_, other->pic_options_);
  swap(labeler_options_, other->labeler_options_);
  swap(read_requirements_, other->read_requirements_);
  swap(realigner_options_, other->realigner_options_);
  swap(random_seed_, other->random_seed_);
  swap(n_cores_, other->n_cores_);
  swap(mode_, other->mode_);
  swap(min_shared_contigs_basepairs_, other->min_shared_contigs_basepairs_);
  swap(task_id_, other->task_id_);
  swap(num_shards_, other->num_shards_);
  swap(max_reads_per_partition_, other->max_reads_per_partition_);
  swap(deprecated_downsample_fraction_, other->deprecated_downsample_fraction_);
  swap(labeler_algorithm_, other->labeler_algorithm_);
  swap(variant_caller_, other->variant_caller_);
  swap(include_med_dp_, other->include_med_dp_);
  swap(realigner_enabled_, other->realigner_enabled_);
  swap(use_original_quality_scores_, other->use_original_quality_scores_);
  swap(use_allele_frequency_, other->use_allele_frequency_);
  swap(use_ref_for_cram_, other->use_ref_for_cram_);
  swap(parse_sam_aux_fields_, other->parse_sam_aux_fields_);
  swap(hts_block_size_, other->hts_block_size_);
  swap(logging_every_n_candidates_, other->logging_every_n_candidates_);
  swap(main_sample_index_, other->main_sample_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MakeExamplesOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeepVariantDatasetConfig::InitAsDefaultInstance() {
}
class DeepVariantDatasetConfig::_Internal {
 public:
};

DeepVariantDatasetConfig::DeepVariantDatasetConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.DeepVariantDatasetConfig)
}
DeepVariantDatasetConfig::DeepVariantDatasetConfig(const DeepVariantDatasetConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  tfrecord_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.tfrecord_path().empty()) {
    tfrecord_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tfrecord_path_);
  }
  num_examples_ = from.num_examples_;
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.DeepVariantDatasetConfig)
}

void DeepVariantDatasetConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeepVariantDatasetConfig_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tfrecord_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_examples_ = 0u;
}

DeepVariantDatasetConfig::~DeepVariantDatasetConfig() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.DeepVariantDatasetConfig)
  SharedDtor();
}

void DeepVariantDatasetConfig::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tfrecord_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeepVariantDatasetConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeepVariantDatasetConfig& DeepVariantDatasetConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeepVariantDatasetConfig_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void DeepVariantDatasetConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.DeepVariantDatasetConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tfrecord_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  num_examples_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeepVariantDatasetConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "learning.genomics.deepvariant.DeepVariantDatasetConfig.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tfrecord_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tfrecord_path(), ptr, ctx, "learning.genomics.deepvariant.DeepVariantDatasetConfig.tfrecord_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_examples = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeepVariantDatasetConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.DeepVariantDatasetConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantDatasetConfig.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tfrecord_path = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tfrecord_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tfrecord_path().data(), static_cast<int>(this->tfrecord_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantDatasetConfig.tfrecord_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_examples = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_examples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.DeepVariantDatasetConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.DeepVariantDatasetConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeepVariantDatasetConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.DeepVariantDatasetConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantDatasetConfig.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string tfrecord_path = 2;
  if (this->tfrecord_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tfrecord_path().data(), static_cast<int>(this->tfrecord_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantDatasetConfig.tfrecord_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tfrecord_path(), output);
  }

  // uint32 num_examples = 3;
  if (this->num_examples() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->num_examples(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.DeepVariantDatasetConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeepVariantDatasetConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.DeepVariantDatasetConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantDatasetConfig.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string tfrecord_path = 2;
  if (this->tfrecord_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tfrecord_path().data(), static_cast<int>(this->tfrecord_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantDatasetConfig.tfrecord_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->tfrecord_path(), target);
  }

  // uint32 num_examples = 3;
  if (this->num_examples() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_examples(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.DeepVariantDatasetConfig)
  return target;
}

size_t DeepVariantDatasetConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.DeepVariantDatasetConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string tfrecord_path = 2;
  if (this->tfrecord_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tfrecord_path());
  }

  // uint32 num_examples = 3;
  if (this->num_examples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->num_examples());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeepVariantDatasetConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.DeepVariantDatasetConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DeepVariantDatasetConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeepVariantDatasetConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.DeepVariantDatasetConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.DeepVariantDatasetConfig)
    MergeFrom(*source);
  }
}

void DeepVariantDatasetConfig::MergeFrom(const DeepVariantDatasetConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.DeepVariantDatasetConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.tfrecord_path().size() > 0) {

    tfrecord_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tfrecord_path_);
  }
  if (from.num_examples() != 0) {
    set_num_examples(from.num_examples());
  }
}

void DeepVariantDatasetConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.DeepVariantDatasetConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeepVariantDatasetConfig::CopyFrom(const DeepVariantDatasetConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.DeepVariantDatasetConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeepVariantDatasetConfig::IsInitialized() const {
  return true;
}

void DeepVariantDatasetConfig::InternalSwap(DeepVariantDatasetConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tfrecord_path_.Swap(&other->tfrecord_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_examples_, other->num_examples_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeepVariantDatasetConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeepVariantInputDatasets_Dataset::InitAsDefaultInstance() {
}
class DeepVariantInputDatasets_Dataset::_Internal {
 public:
};

DeepVariantInputDatasets_Dataset::DeepVariantInputDatasets_Dataset()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
}
DeepVariantInputDatasets_Dataset::DeepVariantInputDatasets_Dataset(const DeepVariantInputDatasets_Dataset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      downsample_fractions_(from.downsample_fractions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  confident_regions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.confident_regions().empty()) {
    confident_regions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.confident_regions_);
  }
  reads_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.reads().empty()) {
    reads_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reads_);
  }
  ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.ref().empty()) {
    ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ref_);
  }
  truth_variants_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.truth_variants().empty()) {
    truth_variants_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.truth_variants_);
  }
  regions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.regions().empty()) {
    regions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regions_);
  }
  training_random_emit_ref_sites_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.training_random_emit_ref_sites().empty()) {
    training_random_emit_ref_sites_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.training_random_emit_ref_sites_);
  }
  exclude_regions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.exclude_regions().empty()) {
    exclude_regions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exclude_regions_);
  }
  sample_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sample_name().empty()) {
    sample_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sample_name_);
  }
  sequencing_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sequencing_type().empty()) {
    sequencing_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sequencing_type_);
  }
  population_vcfs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.population_vcfs().empty()) {
    population_vcfs_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.population_vcfs_);
  }
  ::memcpy(&sort_by_haplotypes_sample_hp_tag_, &from.sort_by_haplotypes_sample_hp_tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&add_hp_channel_) -
    reinterpret_cast<char*>(&sort_by_haplotypes_sample_hp_tag_)) + sizeof(add_hp_channel_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
}

void DeepVariantInputDatasets_Dataset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeepVariantInputDatasets_Dataset_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  confident_regions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reads_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  truth_variants_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  training_random_emit_ref_sites_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exclude_regions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequencing_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  population_vcfs_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sort_by_haplotypes_sample_hp_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_hp_channel_) -
      reinterpret_cast<char*>(&sort_by_haplotypes_sample_hp_tag_)) + sizeof(add_hp_channel_));
}

DeepVariantInputDatasets_Dataset::~DeepVariantInputDatasets_Dataset() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
  SharedDtor();
}

void DeepVariantInputDatasets_Dataset::SharedDtor() {
  confident_regions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reads_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  truth_variants_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  training_random_emit_ref_sites_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exclude_regions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequencing_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  population_vcfs_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeepVariantInputDatasets_Dataset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeepVariantInputDatasets_Dataset& DeepVariantInputDatasets_Dataset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeepVariantInputDatasets_Dataset_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void DeepVariantInputDatasets_Dataset::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  downsample_fractions_.Clear();
  confident_regions_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reads_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  truth_variants_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regions_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  training_random_emit_ref_sites_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exclude_regions_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequencing_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  population_vcfs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sort_by_haplotypes_sample_hp_tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_hp_channel_) -
      reinterpret_cast<char*>(&sort_by_haplotypes_sample_hp_tag_)) + sizeof(add_hp_channel_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeepVariantInputDatasets_Dataset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string confident_regions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_confident_regions(), ptr, ctx, "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.confident_regions");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_reads(), ptr, ctx, "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.reads");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ref = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ref(), ptr, ctx, "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.ref");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string truth_variants = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_truth_variants(), ptr, ctx, "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.truth_variants");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_regions(), ptr, ctx, "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.regions");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string training_random_emit_ref_sites = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_training_random_emit_ref_sites(), ptr, ctx, "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.training_random_emit_ref_sites");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string downsample_fractions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_downsample_fractions(), ptr, ctx, "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.downsample_fractions");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // string exclude_regions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_exclude_regions(), ptr, ctx, "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.exclude_regions");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sample_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sample_name(), ptr, ctx, "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sample_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sequencing_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sequencing_type(), ptr, ctx, "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sequencing_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string population_vcfs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_population_vcfs(), ptr, ctx, "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.population_vcfs");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sort_by_haplotypes_sample_hp_tag = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          sort_by_haplotypes_sample_hp_tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hp_tag_for_assembly_polishing = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          hp_tag_for_assembly_polishing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sort_by_haplotypes = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          sort_by_haplotypes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool parse_sam_aux_fields = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          parse_sam_aux_fields_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool add_hp_channel = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          add_hp_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeepVariantInputDatasets_Dataset::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string confident_regions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_confident_regions()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->confident_regions().data(), static_cast<int>(this->confident_regions().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.confident_regions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reads = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reads()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->reads().data(), static_cast<int>(this->reads().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.reads"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ref = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ref()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ref().data(), static_cast<int>(this->ref().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.ref"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string truth_variants = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_truth_variants()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->truth_variants().data(), static_cast<int>(this->truth_variants().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.truth_variants"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string regions = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_regions()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->regions().data(), static_cast<int>(this->regions().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.regions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string training_random_emit_ref_sites = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_training_random_emit_ref_sites()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->training_random_emit_ref_sites().data(), static_cast<int>(this->training_random_emit_ref_sites().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.training_random_emit_ref_sites"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string downsample_fractions = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_downsample_fractions()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->downsample_fractions(this->downsample_fractions_size() - 1).data(),
            static_cast<int>(this->downsample_fractions(this->downsample_fractions_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.downsample_fractions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exclude_regions = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exclude_regions()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exclude_regions().data(), static_cast<int>(this->exclude_regions().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.exclude_regions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sample_name = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sample_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sample_name().data(), static_cast<int>(this->sample_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sample_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sequencing_type = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sequencing_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sequencing_type().data(), static_cast<int>(this->sequencing_type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sequencing_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string population_vcfs = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_population_vcfs()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->population_vcfs().data(), static_cast<int>(this->population_vcfs().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.population_vcfs"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sort_by_haplotypes_sample_hp_tag = 12 [deprecated = true];
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_by_haplotypes_sample_hp_tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hp_tag_for_assembly_polishing = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_tag_for_assembly_polishing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool sort_by_haplotypes = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sort_by_haplotypes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool parse_sam_aux_fields = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parse_sam_aux_fields_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool add_hp_channel = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_hp_channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeepVariantInputDatasets_Dataset::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string confident_regions = 1;
  if (this->confident_regions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->confident_regions().data(), static_cast<int>(this->confident_regions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.confident_regions");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->confident_regions(), output);
  }

  // string reads = 2;
  if (this->reads().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reads().data(), static_cast<int>(this->reads().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.reads");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reads(), output);
  }

  // string ref = 3;
  if (this->ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ref().data(), static_cast<int>(this->ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.ref");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ref(), output);
  }

  // string truth_variants = 4;
  if (this->truth_variants().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->truth_variants().data(), static_cast<int>(this->truth_variants().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.truth_variants");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->truth_variants(), output);
  }

  // string regions = 5;
  if (this->regions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->regions().data(), static_cast<int>(this->regions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.regions");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->regions(), output);
  }

  // string training_random_emit_ref_sites = 6;
  if (this->training_random_emit_ref_sites().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->training_random_emit_ref_sites().data(), static_cast<int>(this->training_random_emit_ref_sites().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.training_random_emit_ref_sites");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->training_random_emit_ref_sites(), output);
  }

  // repeated string downsample_fractions = 7;
  for (int i = 0, n = this->downsample_fractions_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->downsample_fractions(i).data(), static_cast<int>(this->downsample_fractions(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.downsample_fractions");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      7, this->downsample_fractions(i), output);
  }

  // string exclude_regions = 8;
  if (this->exclude_regions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exclude_regions().data(), static_cast<int>(this->exclude_regions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.exclude_regions");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->exclude_regions(), output);
  }

  // string sample_name = 9;
  if (this->sample_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sample_name().data(), static_cast<int>(this->sample_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sample_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sample_name(), output);
  }

  // string sequencing_type = 10;
  if (this->sequencing_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sequencing_type().data(), static_cast<int>(this->sequencing_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sequencing_type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->sequencing_type(), output);
  }

  // string population_vcfs = 11;
  if (this->population_vcfs().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->population_vcfs().data(), static_cast<int>(this->population_vcfs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.population_vcfs");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->population_vcfs(), output);
  }

  // int32 sort_by_haplotypes_sample_hp_tag = 12 [deprecated = true];
  if (this->sort_by_haplotypes_sample_hp_tag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->sort_by_haplotypes_sample_hp_tag(), output);
  }

  // int32 hp_tag_for_assembly_polishing = 13;
  if (this->hp_tag_for_assembly_polishing() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->hp_tag_for_assembly_polishing(), output);
  }

  // bool sort_by_haplotypes = 14;
  if (this->sort_by_haplotypes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->sort_by_haplotypes(), output);
  }

  // bool parse_sam_aux_fields = 15;
  if (this->parse_sam_aux_fields() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->parse_sam_aux_fields(), output);
  }

  // bool add_hp_channel = 16;
  if (this->add_hp_channel() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(16, this->add_hp_channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeepVariantInputDatasets_Dataset::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string confident_regions = 1;
  if (this->confident_regions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->confident_regions().data(), static_cast<int>(this->confident_regions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.confident_regions");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->confident_regions(), target);
  }

  // string reads = 2;
  if (this->reads().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reads().data(), static_cast<int>(this->reads().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.reads");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->reads(), target);
  }

  // string ref = 3;
  if (this->ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ref().data(), static_cast<int>(this->ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.ref");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->ref(), target);
  }

  // string truth_variants = 4;
  if (this->truth_variants().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->truth_variants().data(), static_cast<int>(this->truth_variants().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.truth_variants");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->truth_variants(), target);
  }

  // string regions = 5;
  if (this->regions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->regions().data(), static_cast<int>(this->regions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.regions");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->regions(), target);
  }

  // string training_random_emit_ref_sites = 6;
  if (this->training_random_emit_ref_sites().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->training_random_emit_ref_sites().data(), static_cast<int>(this->training_random_emit_ref_sites().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.training_random_emit_ref_sites");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->training_random_emit_ref_sites(), target);
  }

  // repeated string downsample_fractions = 7;
  for (int i = 0, n = this->downsample_fractions_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->downsample_fractions(i).data(), static_cast<int>(this->downsample_fractions(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.downsample_fractions");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(7, this->downsample_fractions(i), target);
  }

  // string exclude_regions = 8;
  if (this->exclude_regions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exclude_regions().data(), static_cast<int>(this->exclude_regions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.exclude_regions");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->exclude_regions(), target);
  }

  // string sample_name = 9;
  if (this->sample_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sample_name().data(), static_cast<int>(this->sample_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sample_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->sample_name(), target);
  }

  // string sequencing_type = 10;
  if (this->sequencing_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sequencing_type().data(), static_cast<int>(this->sequencing_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sequencing_type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->sequencing_type(), target);
  }

  // string population_vcfs = 11;
  if (this->population_vcfs().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->population_vcfs().data(), static_cast<int>(this->population_vcfs().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.population_vcfs");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->population_vcfs(), target);
  }

  // int32 sort_by_haplotypes_sample_hp_tag = 12 [deprecated = true];
  if (this->sort_by_haplotypes_sample_hp_tag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->sort_by_haplotypes_sample_hp_tag(), target);
  }

  // int32 hp_tag_for_assembly_polishing = 13;
  if (this->hp_tag_for_assembly_polishing() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->hp_tag_for_assembly_polishing(), target);
  }

  // bool sort_by_haplotypes = 14;
  if (this->sort_by_haplotypes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->sort_by_haplotypes(), target);
  }

  // bool parse_sam_aux_fields = 15;
  if (this->parse_sam_aux_fields() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->parse_sam_aux_fields(), target);
  }

  // bool add_hp_channel = 16;
  if (this->add_hp_channel() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->add_hp_channel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
  return target;
}

size_t DeepVariantInputDatasets_Dataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string downsample_fractions = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->downsample_fractions_size());
  for (int i = 0, n = this->downsample_fractions_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->downsample_fractions(i));
  }

  // string confident_regions = 1;
  if (this->confident_regions().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->confident_regions());
  }

  // string reads = 2;
  if (this->reads().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->reads());
  }

  // string ref = 3;
  if (this->ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ref());
  }

  // string truth_variants = 4;
  if (this->truth_variants().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->truth_variants());
  }

  // string regions = 5;
  if (this->regions().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->regions());
  }

  // string training_random_emit_ref_sites = 6;
  if (this->training_random_emit_ref_sites().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->training_random_emit_ref_sites());
  }

  // string exclude_regions = 8;
  if (this->exclude_regions().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->exclude_regions());
  }

  // string sample_name = 9;
  if (this->sample_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sample_name());
  }

  // string sequencing_type = 10;
  if (this->sequencing_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sequencing_type());
  }

  // string population_vcfs = 11;
  if (this->population_vcfs().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->population_vcfs());
  }

  // int32 sort_by_haplotypes_sample_hp_tag = 12 [deprecated = true];
  if (this->sort_by_haplotypes_sample_hp_tag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->sort_by_haplotypes_sample_hp_tag());
  }

  // int32 hp_tag_for_assembly_polishing = 13;
  if (this->hp_tag_for_assembly_polishing() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->hp_tag_for_assembly_polishing());
  }

  // bool sort_by_haplotypes = 14;
  if (this->sort_by_haplotypes() != 0) {
    total_size += 1 + 1;
  }

  // bool parse_sam_aux_fields = 15;
  if (this->parse_sam_aux_fields() != 0) {
    total_size += 1 + 1;
  }

  // bool add_hp_channel = 16;
  if (this->add_hp_channel() != 0) {
    total_size += 2 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeepVariantInputDatasets_Dataset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
  GOOGLE_DCHECK_NE(&from, this);
  const DeepVariantInputDatasets_Dataset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeepVariantInputDatasets_Dataset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
    MergeFrom(*source);
  }
}

void DeepVariantInputDatasets_Dataset::MergeFrom(const DeepVariantInputDatasets_Dataset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  downsample_fractions_.MergeFrom(from.downsample_fractions_);
  if (from.confident_regions().size() > 0) {

    confident_regions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.confident_regions_);
  }
  if (from.reads().size() > 0) {

    reads_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reads_);
  }
  if (from.ref().size() > 0) {

    ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ref_);
  }
  if (from.truth_variants().size() > 0) {

    truth_variants_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.truth_variants_);
  }
  if (from.regions().size() > 0) {

    regions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.regions_);
  }
  if (from.training_random_emit_ref_sites().size() > 0) {

    training_random_emit_ref_sites_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.training_random_emit_ref_sites_);
  }
  if (from.exclude_regions().size() > 0) {

    exclude_regions_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exclude_regions_);
  }
  if (from.sample_name().size() > 0) {

    sample_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sample_name_);
  }
  if (from.sequencing_type().size() > 0) {

    sequencing_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sequencing_type_);
  }
  if (from.population_vcfs().size() > 0) {

    population_vcfs_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.population_vcfs_);
  }
  if (from.sort_by_haplotypes_sample_hp_tag() != 0) {
    set_sort_by_haplotypes_sample_hp_tag(from.sort_by_haplotypes_sample_hp_tag());
  }
  if (from.hp_tag_for_assembly_polishing() != 0) {
    set_hp_tag_for_assembly_polishing(from.hp_tag_for_assembly_polishing());
  }
  if (from.sort_by_haplotypes() != 0) {
    set_sort_by_haplotypes(from.sort_by_haplotypes());
  }
  if (from.parse_sam_aux_fields() != 0) {
    set_parse_sam_aux_fields(from.parse_sam_aux_fields());
  }
  if (from.add_hp_channel() != 0) {
    set_add_hp_channel(from.add_hp_channel());
  }
}

void DeepVariantInputDatasets_Dataset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeepVariantInputDatasets_Dataset::CopyFrom(const DeepVariantInputDatasets_Dataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeepVariantInputDatasets_Dataset::IsInitialized() const {
  return true;
}

void DeepVariantInputDatasets_Dataset::InternalSwap(DeepVariantInputDatasets_Dataset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  downsample_fractions_.InternalSwap(CastToBase(&other->downsample_fractions_));
  confident_regions_.Swap(&other->confident_regions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reads_.Swap(&other->reads_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ref_.Swap(&other->ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  truth_variants_.Swap(&other->truth_variants_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  regions_.Swap(&other->regions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  training_random_emit_ref_sites_.Swap(&other->training_random_emit_ref_sites_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exclude_regions_.Swap(&other->exclude_regions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sample_name_.Swap(&other->sample_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sequencing_type_.Swap(&other->sequencing_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  population_vcfs_.Swap(&other->population_vcfs_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sort_by_haplotypes_sample_hp_tag_, other->sort_by_haplotypes_sample_hp_tag_);
  swap(hp_tag_for_assembly_polishing_, other->hp_tag_for_assembly_polishing_);
  swap(sort_by_haplotypes_, other->sort_by_haplotypes_);
  swap(parse_sam_aux_fields_, other->parse_sam_aux_fields_);
  swap(add_hp_channel_, other->add_hp_channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeepVariantInputDatasets_Dataset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeepVariantInputDatasets::InitAsDefaultInstance() {
}
class DeepVariantInputDatasets::_Internal {
 public:
};

DeepVariantInputDatasets::DeepVariantInputDatasets()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.DeepVariantInputDatasets)
}
DeepVariantInputDatasets::DeepVariantInputDatasets(const DeepVariantInputDatasets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      datasets_(from.datasets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.group_name().empty()) {
    group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.DeepVariantInputDatasets)
}

void DeepVariantInputDatasets::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeepVariantInputDatasets_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeepVariantInputDatasets::~DeepVariantInputDatasets() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.DeepVariantInputDatasets)
  SharedDtor();
}

void DeepVariantInputDatasets::SharedDtor() {
  group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeepVariantInputDatasets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeepVariantInputDatasets& DeepVariantInputDatasets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeepVariantInputDatasets_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void DeepVariantInputDatasets::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.DeepVariantInputDatasets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datasets_.Clear();
  group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeepVariantInputDatasets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset datasets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_datasets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // string group_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_group_name(), ptr, ctx, "learning.genomics.deepvariant.DeepVariantInputDatasets.group_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeepVariantInputDatasets::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.DeepVariantInputDatasets)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset datasets = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_datasets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->group_name().data(), static_cast<int>(this->group_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.DeepVariantInputDatasets.group_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.DeepVariantInputDatasets)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.DeepVariantInputDatasets)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeepVariantInputDatasets::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.DeepVariantInputDatasets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset datasets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->datasets_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->datasets(static_cast<int>(i)),
      output);
  }

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->group_name().data(), static_cast<int>(this->group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.group_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.DeepVariantInputDatasets)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeepVariantInputDatasets::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.DeepVariantInputDatasets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset datasets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->datasets_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->datasets(static_cast<int>(i)), target);
  }

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->group_name().data(), static_cast<int>(this->group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.DeepVariantInputDatasets.group_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->group_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.DeepVariantInputDatasets)
  return target;
}

size_t DeepVariantInputDatasets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.DeepVariantInputDatasets)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset datasets = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->datasets_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->datasets(static_cast<int>(i)));
    }
  }

  // string group_name = 2;
  if (this->group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->group_name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeepVariantInputDatasets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.DeepVariantInputDatasets)
  GOOGLE_DCHECK_NE(&from, this);
  const DeepVariantInputDatasets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeepVariantInputDatasets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.DeepVariantInputDatasets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.DeepVariantInputDatasets)
    MergeFrom(*source);
  }
}

void DeepVariantInputDatasets::MergeFrom(const DeepVariantInputDatasets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.DeepVariantInputDatasets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datasets_.MergeFrom(from.datasets_);
  if (from.group_name().size() > 0) {

    group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
}

void DeepVariantInputDatasets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.DeepVariantInputDatasets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeepVariantInputDatasets::CopyFrom(const DeepVariantInputDatasets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.DeepVariantInputDatasets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeepVariantInputDatasets::IsInitialized() const {
  return true;
}

void DeepVariantInputDatasets::InternalSwap(DeepVariantInputDatasets* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&datasets_)->InternalSwap(CastToBase(&other->datasets_));
  group_name_.Swap(&other->group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeepVariantInputDatasets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeepVariantInputDatasetsGroup::InitAsDefaultInstance() {
}
class DeepVariantInputDatasetsGroup::_Internal {
 public:
};

DeepVariantInputDatasetsGroup::DeepVariantInputDatasetsGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
}
DeepVariantInputDatasetsGroup::DeepVariantInputDatasetsGroup(const DeepVariantInputDatasetsGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
}

void DeepVariantInputDatasetsGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeepVariantInputDatasetsGroup_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
}

DeepVariantInputDatasetsGroup::~DeepVariantInputDatasetsGroup() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
  SharedDtor();
}

void DeepVariantInputDatasetsGroup::SharedDtor() {
}

void DeepVariantInputDatasetsGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeepVariantInputDatasetsGroup& DeepVariantInputDatasetsGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeepVariantInputDatasetsGroup_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void DeepVariantInputDatasetsGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeepVariantInputDatasetsGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .learning.genomics.deepvariant.DeepVariantInputDatasets groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeepVariantInputDatasetsGroup::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .learning.genomics.deepvariant.DeepVariantInputDatasets groups = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeepVariantInputDatasetsGroup::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .learning.genomics.deepvariant.DeepVariantInputDatasets groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->groups(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeepVariantInputDatasetsGroup::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .learning.genomics.deepvariant.DeepVariantInputDatasets groups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->groups(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
  return target;
}

size_t DeepVariantInputDatasetsGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .learning.genomics.deepvariant.DeepVariantInputDatasets groups = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->groups(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeepVariantInputDatasetsGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const DeepVariantInputDatasetsGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeepVariantInputDatasetsGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
    MergeFrom(*source);
  }
}

void DeepVariantInputDatasetsGroup::MergeFrom(const DeepVariantInputDatasetsGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
}

void DeepVariantInputDatasetsGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeepVariantInputDatasetsGroup::CopyFrom(const DeepVariantInputDatasetsGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeepVariantInputDatasetsGroup::IsInitialized() const {
  return true;
}

void DeepVariantInputDatasetsGroup::InternalSwap(DeepVariantInputDatasetsGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&groups_)->InternalSwap(CastToBase(&other->groups_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeepVariantInputDatasetsGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabelingMetrics::InitAsDefaultInstance() {
}
class LabelingMetrics::_Internal {
 public:
};

LabelingMetrics::LabelingMetrics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.LabelingMetrics)
}
LabelingMetrics::LabelingMetrics(const LabelingMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&n_truth_variant_sites_, &from.n_truth_variant_sites_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_truth_multiallelics_sites_with_missed_alleles_) -
    reinterpret_cast<char*>(&n_truth_variant_sites_)) + sizeof(n_truth_multiallelics_sites_with_missed_alleles_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.LabelingMetrics)
}

void LabelingMetrics::SharedCtor() {
  ::memset(&n_truth_variant_sites_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_truth_multiallelics_sites_with_missed_alleles_) -
      reinterpret_cast<char*>(&n_truth_variant_sites_)) + sizeof(n_truth_multiallelics_sites_with_missed_alleles_));
}

LabelingMetrics::~LabelingMetrics() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.LabelingMetrics)
  SharedDtor();
}

void LabelingMetrics::SharedDtor() {
}

void LabelingMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabelingMetrics& LabelingMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabelingMetrics_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void LabelingMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.LabelingMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&n_truth_variant_sites_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_truth_multiallelics_sites_with_missed_alleles_) -
      reinterpret_cast<char*>(&n_truth_variant_sites_)) + sizeof(n_truth_multiallelics_sites_with_missed_alleles_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LabelingMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 n_truth_variant_sites = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n_truth_variant_sites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_truth_variant_alleles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          n_truth_variant_alleles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_candidate_variant_sites = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          n_candidate_variant_sites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_candidate_variant_alleles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          n_candidate_variant_alleles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_non_confident_candidate_variant_sites = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          n_non_confident_candidate_variant_sites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_true_positive_sites = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          n_true_positive_sites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_true_positive_alleles = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          n_true_positive_alleles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_false_negative_sites = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          n_false_negative_sites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_false_negative_alleles = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          n_false_negative_alleles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_false_positive_sites = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          n_false_positive_sites_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_false_positive_alleles = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          n_false_positive_alleles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_inexact_position_matches = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          n_inexact_position_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_exact_position_matches = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          n_exact_position_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_exact_position_and_allele_matches = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          n_exact_position_and_allele_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_exact_position_and_allele_and_genotype_matches = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          n_exact_position_and_allele_and_genotype_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 n_truth_multiallelics_sites_with_missed_alleles = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          n_truth_multiallelics_sites_with_missed_alleles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LabelingMetrics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.LabelingMetrics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 n_truth_variant_sites = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_truth_variant_sites_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n_truth_variant_alleles = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_truth_variant_alleles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n_candidate_variant_sites = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_candidate_variant_sites_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n_candidate_variant_alleles = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_candidate_variant_alleles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n_non_confident_candidate_variant_sites = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_non_confident_candidate_variant_sites_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n_true_positive_sites = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_true_positive_sites_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n_true_positive_alleles = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_true_positive_alleles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n_false_negative_sites = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_false_negative_sites_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n_false_negative_alleles = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_false_negative_alleles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n_false_positive_sites = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_false_positive_sites_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n_false_positive_alleles = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_false_positive_alleles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n_inexact_position_matches = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_inexact_position_matches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n_exact_position_matches = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_exact_position_matches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n_exact_position_and_allele_matches = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_exact_position_and_allele_matches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n_exact_position_and_allele_and_genotype_matches = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_exact_position_and_allele_and_genotype_matches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 n_truth_multiallelics_sites_with_missed_alleles = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &n_truth_multiallelics_sites_with_missed_alleles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.LabelingMetrics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.LabelingMetrics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LabelingMetrics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.LabelingMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n_truth_variant_sites = 1;
  if (this->n_truth_variant_sites() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->n_truth_variant_sites(), output);
  }

  // int32 n_truth_variant_alleles = 2;
  if (this->n_truth_variant_alleles() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->n_truth_variant_alleles(), output);
  }

  // int32 n_candidate_variant_sites = 3;
  if (this->n_candidate_variant_sites() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->n_candidate_variant_sites(), output);
  }

  // int32 n_candidate_variant_alleles = 4;
  if (this->n_candidate_variant_alleles() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->n_candidate_variant_alleles(), output);
  }

  // int32 n_non_confident_candidate_variant_sites = 5;
  if (this->n_non_confident_candidate_variant_sites() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->n_non_confident_candidate_variant_sites(), output);
  }

  // int32 n_true_positive_sites = 6;
  if (this->n_true_positive_sites() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->n_true_positive_sites(), output);
  }

  // int32 n_true_positive_alleles = 7;
  if (this->n_true_positive_alleles() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->n_true_positive_alleles(), output);
  }

  // int32 n_false_negative_sites = 8;
  if (this->n_false_negative_sites() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->n_false_negative_sites(), output);
  }

  // int32 n_false_negative_alleles = 9;
  if (this->n_false_negative_alleles() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->n_false_negative_alleles(), output);
  }

  // int32 n_false_positive_sites = 10;
  if (this->n_false_positive_sites() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->n_false_positive_sites(), output);
  }

  // int32 n_false_positive_alleles = 11;
  if (this->n_false_positive_alleles() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->n_false_positive_alleles(), output);
  }

  // int32 n_inexact_position_matches = 12;
  if (this->n_inexact_position_matches() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->n_inexact_position_matches(), output);
  }

  // int32 n_exact_position_matches = 13;
  if (this->n_exact_position_matches() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->n_exact_position_matches(), output);
  }

  // int32 n_exact_position_and_allele_matches = 14;
  if (this->n_exact_position_and_allele_matches() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->n_exact_position_and_allele_matches(), output);
  }

  // int32 n_exact_position_and_allele_and_genotype_matches = 15;
  if (this->n_exact_position_and_allele_and_genotype_matches() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->n_exact_position_and_allele_and_genotype_matches(), output);
  }

  // int32 n_truth_multiallelics_sites_with_missed_alleles = 16;
  if (this->n_truth_multiallelics_sites_with_missed_alleles() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->n_truth_multiallelics_sites_with_missed_alleles(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.LabelingMetrics)
}

::PROTOBUF_NAMESPACE_ID::uint8* LabelingMetrics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.LabelingMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 n_truth_variant_sites = 1;
  if (this->n_truth_variant_sites() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->n_truth_variant_sites(), target);
  }

  // int32 n_truth_variant_alleles = 2;
  if (this->n_truth_variant_alleles() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->n_truth_variant_alleles(), target);
  }

  // int32 n_candidate_variant_sites = 3;
  if (this->n_candidate_variant_sites() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->n_candidate_variant_sites(), target);
  }

  // int32 n_candidate_variant_alleles = 4;
  if (this->n_candidate_variant_alleles() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->n_candidate_variant_alleles(), target);
  }

  // int32 n_non_confident_candidate_variant_sites = 5;
  if (this->n_non_confident_candidate_variant_sites() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->n_non_confident_candidate_variant_sites(), target);
  }

  // int32 n_true_positive_sites = 6;
  if (this->n_true_positive_sites() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->n_true_positive_sites(), target);
  }

  // int32 n_true_positive_alleles = 7;
  if (this->n_true_positive_alleles() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->n_true_positive_alleles(), target);
  }

  // int32 n_false_negative_sites = 8;
  if (this->n_false_negative_sites() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->n_false_negative_sites(), target);
  }

  // int32 n_false_negative_alleles = 9;
  if (this->n_false_negative_alleles() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->n_false_negative_alleles(), target);
  }

  // int32 n_false_positive_sites = 10;
  if (this->n_false_positive_sites() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->n_false_positive_sites(), target);
  }

  // int32 n_false_positive_alleles = 11;
  if (this->n_false_positive_alleles() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->n_false_positive_alleles(), target);
  }

  // int32 n_inexact_position_matches = 12;
  if (this->n_inexact_position_matches() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->n_inexact_position_matches(), target);
  }

  // int32 n_exact_position_matches = 13;
  if (this->n_exact_position_matches() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->n_exact_position_matches(), target);
  }

  // int32 n_exact_position_and_allele_matches = 14;
  if (this->n_exact_position_and_allele_matches() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->n_exact_position_and_allele_matches(), target);
  }

  // int32 n_exact_position_and_allele_and_genotype_matches = 15;
  if (this->n_exact_position_and_allele_and_genotype_matches() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->n_exact_position_and_allele_and_genotype_matches(), target);
  }

  // int32 n_truth_multiallelics_sites_with_missed_alleles = 16;
  if (this->n_truth_multiallelics_sites_with_missed_alleles() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->n_truth_multiallelics_sites_with_missed_alleles(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.LabelingMetrics)
  return target;
}

size_t LabelingMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.LabelingMetrics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 n_truth_variant_sites = 1;
  if (this->n_truth_variant_sites() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n_truth_variant_sites());
  }

  // int32 n_truth_variant_alleles = 2;
  if (this->n_truth_variant_alleles() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n_truth_variant_alleles());
  }

  // int32 n_candidate_variant_sites = 3;
  if (this->n_candidate_variant_sites() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n_candidate_variant_sites());
  }

  // int32 n_candidate_variant_alleles = 4;
  if (this->n_candidate_variant_alleles() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n_candidate_variant_alleles());
  }

  // int32 n_non_confident_candidate_variant_sites = 5;
  if (this->n_non_confident_candidate_variant_sites() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n_non_confident_candidate_variant_sites());
  }

  // int32 n_true_positive_sites = 6;
  if (this->n_true_positive_sites() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n_true_positive_sites());
  }

  // int32 n_true_positive_alleles = 7;
  if (this->n_true_positive_alleles() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n_true_positive_alleles());
  }

  // int32 n_false_negative_sites = 8;
  if (this->n_false_negative_sites() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n_false_negative_sites());
  }

  // int32 n_false_negative_alleles = 9;
  if (this->n_false_negative_alleles() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n_false_negative_alleles());
  }

  // int32 n_false_positive_sites = 10;
  if (this->n_false_positive_sites() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n_false_positive_sites());
  }

  // int32 n_false_positive_alleles = 11;
  if (this->n_false_positive_alleles() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n_false_positive_alleles());
  }

  // int32 n_inexact_position_matches = 12;
  if (this->n_inexact_position_matches() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n_inexact_position_matches());
  }

  // int32 n_exact_position_matches = 13;
  if (this->n_exact_position_matches() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n_exact_position_matches());
  }

  // int32 n_exact_position_and_allele_matches = 14;
  if (this->n_exact_position_and_allele_matches() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n_exact_position_and_allele_matches());
  }

  // int32 n_exact_position_and_allele_and_genotype_matches = 15;
  if (this->n_exact_position_and_allele_and_genotype_matches() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n_exact_position_and_allele_and_genotype_matches());
  }

  // int32 n_truth_multiallelics_sites_with_missed_alleles = 16;
  if (this->n_truth_multiallelics_sites_with_missed_alleles() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->n_truth_multiallelics_sites_with_missed_alleles());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabelingMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.LabelingMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const LabelingMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabelingMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.LabelingMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.LabelingMetrics)
    MergeFrom(*source);
  }
}

void LabelingMetrics::MergeFrom(const LabelingMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.LabelingMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.n_truth_variant_sites() != 0) {
    set_n_truth_variant_sites(from.n_truth_variant_sites());
  }
  if (from.n_truth_variant_alleles() != 0) {
    set_n_truth_variant_alleles(from.n_truth_variant_alleles());
  }
  if (from.n_candidate_variant_sites() != 0) {
    set_n_candidate_variant_sites(from.n_candidate_variant_sites());
  }
  if (from.n_candidate_variant_alleles() != 0) {
    set_n_candidate_variant_alleles(from.n_candidate_variant_alleles());
  }
  if (from.n_non_confident_candidate_variant_sites() != 0) {
    set_n_non_confident_candidate_variant_sites(from.n_non_confident_candidate_variant_sites());
  }
  if (from.n_true_positive_sites() != 0) {
    set_n_true_positive_sites(from.n_true_positive_sites());
  }
  if (from.n_true_positive_alleles() != 0) {
    set_n_true_positive_alleles(from.n_true_positive_alleles());
  }
  if (from.n_false_negative_sites() != 0) {
    set_n_false_negative_sites(from.n_false_negative_sites());
  }
  if (from.n_false_negative_alleles() != 0) {
    set_n_false_negative_alleles(from.n_false_negative_alleles());
  }
  if (from.n_false_positive_sites() != 0) {
    set_n_false_positive_sites(from.n_false_positive_sites());
  }
  if (from.n_false_positive_alleles() != 0) {
    set_n_false_positive_alleles(from.n_false_positive_alleles());
  }
  if (from.n_inexact_position_matches() != 0) {
    set_n_inexact_position_matches(from.n_inexact_position_matches());
  }
  if (from.n_exact_position_matches() != 0) {
    set_n_exact_position_matches(from.n_exact_position_matches());
  }
  if (from.n_exact_position_and_allele_matches() != 0) {
    set_n_exact_position_and_allele_matches(from.n_exact_position_and_allele_matches());
  }
  if (from.n_exact_position_and_allele_and_genotype_matches() != 0) {
    set_n_exact_position_and_allele_and_genotype_matches(from.n_exact_position_and_allele_and_genotype_matches());
  }
  if (from.n_truth_multiallelics_sites_with_missed_alleles() != 0) {
    set_n_truth_multiallelics_sites_with_missed_alleles(from.n_truth_multiallelics_sites_with_missed_alleles());
  }
}

void LabelingMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.LabelingMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabelingMetrics::CopyFrom(const LabelingMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.LabelingMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelingMetrics::IsInitialized() const {
  return true;
}

void LabelingMetrics::InternalSwap(LabelingMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(n_truth_variant_sites_, other->n_truth_variant_sites_);
  swap(n_truth_variant_alleles_, other->n_truth_variant_alleles_);
  swap(n_candidate_variant_sites_, other->n_candidate_variant_sites_);
  swap(n_candidate_variant_alleles_, other->n_candidate_variant_alleles_);
  swap(n_non_confident_candidate_variant_sites_, other->n_non_confident_candidate_variant_sites_);
  swap(n_true_positive_sites_, other->n_true_positive_sites_);
  swap(n_true_positive_alleles_, other->n_true_positive_alleles_);
  swap(n_false_negative_sites_, other->n_false_negative_sites_);
  swap(n_false_negative_alleles_, other->n_false_negative_alleles_);
  swap(n_false_positive_sites_, other->n_false_positive_sites_);
  swap(n_false_positive_alleles_, other->n_false_positive_alleles_);
  swap(n_inexact_position_matches_, other->n_inexact_position_matches_);
  swap(n_exact_position_matches_, other->n_exact_position_matches_);
  swap(n_exact_position_and_allele_matches_, other->n_exact_position_and_allele_matches_);
  swap(n_exact_position_and_allele_and_genotype_matches_, other->n_exact_position_and_allele_and_genotype_matches_);
  swap(n_truth_multiallelics_sites_with_missed_alleles_, other->n_truth_multiallelics_sites_with_missed_alleles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelingMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MakeExamplesStats::InitAsDefaultInstance() {
}
class MakeExamplesStats::_Internal {
 public:
};

MakeExamplesStats::MakeExamplesStats()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.MakeExamplesStats)
}
MakeExamplesStats::MakeExamplesStats(const MakeExamplesStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_examples_, &from.num_examples_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_class_2_) -
    reinterpret_cast<char*>(&num_examples_)) + sizeof(num_class_2_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.MakeExamplesStats)
}

void MakeExamplesStats::SharedCtor() {
  ::memset(&num_examples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_class_2_) -
      reinterpret_cast<char*>(&num_examples_)) + sizeof(num_class_2_));
}

MakeExamplesStats::~MakeExamplesStats() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.MakeExamplesStats)
  SharedDtor();
}

void MakeExamplesStats::SharedDtor() {
}

void MakeExamplesStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MakeExamplesStats& MakeExamplesStats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MakeExamplesStats_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void MakeExamplesStats::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.MakeExamplesStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_examples_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_class_2_) -
      reinterpret_cast<char*>(&num_examples_)) + sizeof(num_class_2_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MakeExamplesStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_examples = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_examples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_indels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_indels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_snps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_snps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_class_0 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_class_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_class_1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_class_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_class_2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          num_class_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MakeExamplesStats::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.MakeExamplesStats)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_examples = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_examples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_indels = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_indels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_snps = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_snps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_class_0 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_class_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_class_1 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_class_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_class_2 = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_class_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.MakeExamplesStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.MakeExamplesStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MakeExamplesStats::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.MakeExamplesStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_examples = 1;
  if (this->num_examples() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_examples(), output);
  }

  // int32 num_indels = 2;
  if (this->num_indels() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_indels(), output);
  }

  // int32 num_snps = 3;
  if (this->num_snps() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_snps(), output);
  }

  // int32 num_class_0 = 4;
  if (this->num_class_0() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->num_class_0(), output);
  }

  // int32 num_class_1 = 5;
  if (this->num_class_1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->num_class_1(), output);
  }

  // int32 num_class_2 = 6;
  if (this->num_class_2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->num_class_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.MakeExamplesStats)
}

::PROTOBUF_NAMESPACE_ID::uint8* MakeExamplesStats::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.MakeExamplesStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_examples = 1;
  if (this->num_examples() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_examples(), target);
  }

  // int32 num_indels = 2;
  if (this->num_indels() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->num_indels(), target);
  }

  // int32 num_snps = 3;
  if (this->num_snps() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->num_snps(), target);
  }

  // int32 num_class_0 = 4;
  if (this->num_class_0() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->num_class_0(), target);
  }

  // int32 num_class_1 = 5;
  if (this->num_class_1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->num_class_1(), target);
  }

  // int32 num_class_2 = 6;
  if (this->num_class_2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->num_class_2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.MakeExamplesStats)
  return target;
}

size_t MakeExamplesStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.MakeExamplesStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 num_examples = 1;
  if (this->num_examples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_examples());
  }

  // int32 num_indels = 2;
  if (this->num_indels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_indels());
  }

  // int32 num_snps = 3;
  if (this->num_snps() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_snps());
  }

  // int32 num_class_0 = 4;
  if (this->num_class_0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_class_0());
  }

  // int32 num_class_1 = 5;
  if (this->num_class_1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_class_1());
  }

  // int32 num_class_2 = 6;
  if (this->num_class_2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_class_2());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MakeExamplesStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.MakeExamplesStats)
  GOOGLE_DCHECK_NE(&from, this);
  const MakeExamplesStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MakeExamplesStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.MakeExamplesStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.MakeExamplesStats)
    MergeFrom(*source);
  }
}

void MakeExamplesStats::MergeFrom(const MakeExamplesStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.MakeExamplesStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_examples() != 0) {
    set_num_examples(from.num_examples());
  }
  if (from.num_indels() != 0) {
    set_num_indels(from.num_indels());
  }
  if (from.num_snps() != 0) {
    set_num_snps(from.num_snps());
  }
  if (from.num_class_0() != 0) {
    set_num_class_0(from.num_class_0());
  }
  if (from.num_class_1() != 0) {
    set_num_class_1(from.num_class_1());
  }
  if (from.num_class_2() != 0) {
    set_num_class_2(from.num_class_2());
  }
}

void MakeExamplesStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.MakeExamplesStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeExamplesStats::CopyFrom(const MakeExamplesStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.MakeExamplesStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeExamplesStats::IsInitialized() const {
  return true;
}

void MakeExamplesStats::InternalSwap(MakeExamplesStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(num_examples_, other->num_examples_);
  swap(num_indels_, other->num_indels_);
  swap(num_snps_, other->num_snps_);
  swap(num_class_0_, other->num_class_0_);
  swap(num_class_1_, other->num_class_1_);
  swap(num_class_2_, other->num_class_2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MakeExamplesStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MakeExamplesRunInfo::InitAsDefaultInstance() {
  ::learning::genomics::deepvariant::_MakeExamplesRunInfo_default_instance_._instance.get_mutable()->options_ = const_cast< ::learning::genomics::deepvariant::MakeExamplesOptions*>(
      ::learning::genomics::deepvariant::MakeExamplesOptions::internal_default_instance());
  ::learning::genomics::deepvariant::_MakeExamplesRunInfo_default_instance_._instance.get_mutable()->labeling_metrics_ = const_cast< ::learning::genomics::deepvariant::LabelingMetrics*>(
      ::learning::genomics::deepvariant::LabelingMetrics::internal_default_instance());
  ::learning::genomics::deepvariant::_MakeExamplesRunInfo_default_instance_._instance.get_mutable()->resource_metrics_ = const_cast< ::learning::genomics::deepvariant::ResourceMetrics*>(
      ::learning::genomics::deepvariant::ResourceMetrics::internal_default_instance());
  ::learning::genomics::deepvariant::_MakeExamplesRunInfo_default_instance_._instance.get_mutable()->stats_ = const_cast< ::learning::genomics::deepvariant::MakeExamplesStats*>(
      ::learning::genomics::deepvariant::MakeExamplesStats::internal_default_instance());
}
class MakeExamplesRunInfo::_Internal {
 public:
  static const ::learning::genomics::deepvariant::MakeExamplesOptions& options(const MakeExamplesRunInfo* msg);
  static const ::learning::genomics::deepvariant::LabelingMetrics& labeling_metrics(const MakeExamplesRunInfo* msg);
  static const ::learning::genomics::deepvariant::ResourceMetrics& resource_metrics(const MakeExamplesRunInfo* msg);
  static const ::learning::genomics::deepvariant::MakeExamplesStats& stats(const MakeExamplesRunInfo* msg);
};

const ::learning::genomics::deepvariant::MakeExamplesOptions&
MakeExamplesRunInfo::_Internal::options(const MakeExamplesRunInfo* msg) {
  return *msg->options_;
}
const ::learning::genomics::deepvariant::LabelingMetrics&
MakeExamplesRunInfo::_Internal::labeling_metrics(const MakeExamplesRunInfo* msg) {
  return *msg->labeling_metrics_;
}
const ::learning::genomics::deepvariant::ResourceMetrics&
MakeExamplesRunInfo::_Internal::resource_metrics(const MakeExamplesRunInfo* msg) {
  return *msg->resource_metrics_;
}
const ::learning::genomics::deepvariant::MakeExamplesStats&
MakeExamplesRunInfo::_Internal::stats(const MakeExamplesRunInfo* msg) {
  return *msg->stats_;
}
void MakeExamplesRunInfo::clear_resource_metrics() {
  if (GetArenaNoVirtual() == nullptr && resource_metrics_ != nullptr) {
    delete resource_metrics_;
  }
  resource_metrics_ = nullptr;
}
MakeExamplesRunInfo::MakeExamplesRunInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.MakeExamplesRunInfo)
}
MakeExamplesRunInfo::MakeExamplesRunInfo(const MakeExamplesRunInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_options()) {
    options_ = new ::learning::genomics::deepvariant::MakeExamplesOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  if (from.has_labeling_metrics()) {
    labeling_metrics_ = new ::learning::genomics::deepvariant::LabelingMetrics(*from.labeling_metrics_);
  } else {
    labeling_metrics_ = nullptr;
  }
  if (from.has_resource_metrics()) {
    resource_metrics_ = new ::learning::genomics::deepvariant::ResourceMetrics(*from.resource_metrics_);
  } else {
    resource_metrics_ = nullptr;
  }
  if (from.has_stats()) {
    stats_ = new ::learning::genomics::deepvariant::MakeExamplesStats(*from.stats_);
  } else {
    stats_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.MakeExamplesRunInfo)
}

void MakeExamplesRunInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MakeExamplesRunInfo_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  ::memset(&options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stats_) -
      reinterpret_cast<char*>(&options_)) + sizeof(stats_));
}

MakeExamplesRunInfo::~MakeExamplesRunInfo() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.MakeExamplesRunInfo)
  SharedDtor();
}

void MakeExamplesRunInfo::SharedDtor() {
  if (this != internal_default_instance()) delete options_;
  if (this != internal_default_instance()) delete labeling_metrics_;
  if (this != internal_default_instance()) delete resource_metrics_;
  if (this != internal_default_instance()) delete stats_;
}

void MakeExamplesRunInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MakeExamplesRunInfo& MakeExamplesRunInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MakeExamplesRunInfo_deepvariant_2fprotos_2fdeepvariant_2eproto.base);
  return *internal_default_instance();
}


void MakeExamplesRunInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.MakeExamplesRunInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && labeling_metrics_ != nullptr) {
    delete labeling_metrics_;
  }
  labeling_metrics_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && resource_metrics_ != nullptr) {
    delete resource_metrics_;
  }
  resource_metrics_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MakeExamplesRunInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .learning.genomics.deepvariant.MakeExamplesOptions options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.LabelingMetrics labeling_metrics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_labeling_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.ResourceMetrics resource_metrics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_resource_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.MakeExamplesStats stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MakeExamplesRunInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.MakeExamplesRunInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .learning.genomics.deepvariant.MakeExamplesOptions options = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.LabelingMetrics labeling_metrics = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_labeling_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.ResourceMetrics resource_metrics = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_resource_metrics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.MakeExamplesStats stats = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.MakeExamplesRunInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.MakeExamplesRunInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MakeExamplesRunInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.MakeExamplesRunInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .learning.genomics.deepvariant.MakeExamplesOptions options = 1;
  if (this->has_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::options(this), output);
  }

  // .learning.genomics.deepvariant.LabelingMetrics labeling_metrics = 2;
  if (this->has_labeling_metrics()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::labeling_metrics(this), output);
  }

  // .learning.genomics.deepvariant.ResourceMetrics resource_metrics = 3;
  if (this->has_resource_metrics()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::resource_metrics(this), output);
  }

  // .learning.genomics.deepvariant.MakeExamplesStats stats = 4;
  if (this->has_stats()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::stats(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.MakeExamplesRunInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* MakeExamplesRunInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.MakeExamplesRunInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .learning.genomics.deepvariant.MakeExamplesOptions options = 1;
  if (this->has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::options(this), target);
  }

  // .learning.genomics.deepvariant.LabelingMetrics labeling_metrics = 2;
  if (this->has_labeling_metrics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::labeling_metrics(this), target);
  }

  // .learning.genomics.deepvariant.ResourceMetrics resource_metrics = 3;
  if (this->has_resource_metrics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::resource_metrics(this), target);
  }

  // .learning.genomics.deepvariant.MakeExamplesStats stats = 4;
  if (this->has_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::stats(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.MakeExamplesRunInfo)
  return target;
}

size_t MakeExamplesRunInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.MakeExamplesRunInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .learning.genomics.deepvariant.MakeExamplesOptions options = 1;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // .learning.genomics.deepvariant.LabelingMetrics labeling_metrics = 2;
  if (this->has_labeling_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *labeling_metrics_);
  }

  // .learning.genomics.deepvariant.ResourceMetrics resource_metrics = 3;
  if (this->has_resource_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_metrics_);
  }

  // .learning.genomics.deepvariant.MakeExamplesStats stats = 4;
  if (this->has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stats_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MakeExamplesRunInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.MakeExamplesRunInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MakeExamplesRunInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MakeExamplesRunInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.MakeExamplesRunInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.MakeExamplesRunInfo)
    MergeFrom(*source);
  }
}

void MakeExamplesRunInfo::MergeFrom(const MakeExamplesRunInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.MakeExamplesRunInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_options()) {
    mutable_options()->::learning::genomics::deepvariant::MakeExamplesOptions::MergeFrom(from.options());
  }
  if (from.has_labeling_metrics()) {
    mutable_labeling_metrics()->::learning::genomics::deepvariant::LabelingMetrics::MergeFrom(from.labeling_metrics());
  }
  if (from.has_resource_metrics()) {
    mutable_resource_metrics()->::learning::genomics::deepvariant::ResourceMetrics::MergeFrom(from.resource_metrics());
  }
  if (from.has_stats()) {
    mutable_stats()->::learning::genomics::deepvariant::MakeExamplesStats::MergeFrom(from.stats());
  }
}

void MakeExamplesRunInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.MakeExamplesRunInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeExamplesRunInfo::CopyFrom(const MakeExamplesRunInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.MakeExamplesRunInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeExamplesRunInfo::IsInitialized() const {
  return true;
}

void MakeExamplesRunInfo::InternalSwap(MakeExamplesRunInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(options_, other->options_);
  swap(labeling_metrics_, other->labeling_metrics_);
  swap(resource_metrics_, other->resource_metrics_);
  swap(stats_, other->stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MakeExamplesRunInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace deepvariant
}  // namespace genomics
}  // namespace learning
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::Allele* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::Allele >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::Allele >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::AlleleCount_ReadAllelesEntry_DoNotUse* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::AlleleCount_ReadAllelesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::AlleleCount_ReadAllelesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::AlleleCount_Alleles* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::AlleleCount_Alleles >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::AlleleCount_Alleles >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::AlleleCount_SampleAllelesEntry_DoNotUse* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::AlleleCount_SampleAllelesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::AlleleCount_SampleAllelesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::AlleleCount* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::AlleleCount >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::AlleleCount >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::AlleleCountSummary* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::AlleleCountSummary >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::AlleleCountSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportEntry_DoNotUse* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::DeepVariantCall_AlleleFrequencyEntry_DoNotUse* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::DeepVariantCall_AlleleFrequencyEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::DeepVariantCall_AlleleFrequencyEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::DeepVariantCall_ReadSupport* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::DeepVariantCall_ReadSupport >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::DeepVariantCall_ReadSupport >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportExtEntry_DoNotUse* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportExtEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportExtEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::DeepVariantCall* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::DeepVariantCall >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::DeepVariantCall >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::AlleleCounterOptions* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::AlleleCounterOptions >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::AlleleCounterOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::CallVariantsOutput* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::CallVariantsOutput >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::CallVariantsOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::VariantCallerOptions* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::VariantCallerOptions >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::VariantCallerOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::VariantLabelerOptions* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::VariantLabelerOptions >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::VariantLabelerOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::PileupImageOptions* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::PileupImageOptions >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::PileupImageOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::SampleOptions* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::SampleOptions >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::SampleOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::MakeExamplesOptions* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::MakeExamplesOptions >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::MakeExamplesOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::DeepVariantDatasetConfig* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::DeepVariantDatasetConfig >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::DeepVariantDatasetConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::DeepVariantInputDatasets* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::DeepVariantInputDatasets >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::DeepVariantInputDatasets >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::DeepVariantInputDatasetsGroup* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::DeepVariantInputDatasetsGroup >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::DeepVariantInputDatasetsGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::LabelingMetrics* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::LabelingMetrics >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::LabelingMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::MakeExamplesStats* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::MakeExamplesStats >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::MakeExamplesStats >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::MakeExamplesRunInfo* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::MakeExamplesRunInfo >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::MakeExamplesRunInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
