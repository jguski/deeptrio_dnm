//////////////////////////////////////////////////////////////////////
// This file was automatically generated by PyCLIF.
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: deepvariant/protos/realigner.proto

#include "deepvariant/protos/realigner.pb.h"
#include "clif/python/postconv.h"

namespace learning { namespace genomics { namespace deepvariant {
using namespace ::clif;

// CLIF use `::learning::genomics::deepvariant::CandidateHaplotypes` as CandidateHaplotypes
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::CandidateHaplotypes* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::CandidateHaplotypes&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::CandidateHaplotypes>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::CandidateHaplotypes>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::CandidateHaplotypes>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::WindowSelectorModel` as WindowSelectorModel
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::WindowSelectorModel* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::WindowSelectorModel&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::WindowSelectorModel>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::WindowSelectorModel>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::WindowSelectorModel>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::WindowSelectorModel::VariantReadsThresholdModel` as WindowSelectorModel.VariantReadsThresholdModel
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::WindowSelectorModel::VariantReadsThresholdModel* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::WindowSelectorModel::VariantReadsThresholdModel&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::WindowSelectorModel::VariantReadsThresholdModel>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::WindowSelectorModel::VariantReadsThresholdModel>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::WindowSelectorModel::VariantReadsThresholdModel>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::WindowSelectorModel::AlleleCountLinearModel` as WindowSelectorModel.AlleleCountLinearModel
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::WindowSelectorModel::AlleleCountLinearModel* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::WindowSelectorModel::AlleleCountLinearModel&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::WindowSelectorModel::AlleleCountLinearModel>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::WindowSelectorModel::AlleleCountLinearModel>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::WindowSelectorModel::AlleleCountLinearModel>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::WindowSelectorOptions` as WindowSelectorOptions
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::WindowSelectorOptions* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::WindowSelectorOptions&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::WindowSelectorOptions>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::WindowSelectorOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::WindowSelectorOptions>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::DeBruijnGraphOptions` as DeBruijnGraphOptions
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::DeBruijnGraphOptions* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::DeBruijnGraphOptions&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::DeBruijnGraphOptions>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::DeBruijnGraphOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::DeBruijnGraphOptions>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::AlignerOptions` as AlignerOptions
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::AlignerOptions* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::AlignerOptions&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::AlignerOptions>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::AlignerOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::AlignerOptions>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::Diagnostics` as Diagnostics
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::Diagnostics* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::Diagnostics&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::Diagnostics>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::Diagnostics>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::Diagnostics>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::RealignerOptions` as RealignerOptions
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::RealignerOptions* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::RealignerOptions&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::RealignerOptions>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::RealignerOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::RealignerOptions>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::WindowSelectorModel::ModelType` as WindowSelectorModel.ModelType
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::WindowSelectorModel::ModelType* output);
PyObject* Clif_PyObjFrom(::learning::genomics::deepvariant::WindowSelectorModel::ModelType, py::PostConv);

} } }  // namespace learning::genomics::deepvariant
