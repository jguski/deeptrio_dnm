// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: third_party/nucleus/protos/variants.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "third_party/nucleus/protos/reference.pb.h"
#include "third_party/nucleus/protos/struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto;
namespace nucleus {
namespace genomics {
namespace v1 {
class Variant;
class VariantDefaultTypeInternal;
extern VariantDefaultTypeInternal _Variant_default_instance_;
class VariantCall;
class VariantCallDefaultTypeInternal;
extern VariantCallDefaultTypeInternal _VariantCall_default_instance_;
class VariantCall_InfoEntry_DoNotUse;
class VariantCall_InfoEntry_DoNotUseDefaultTypeInternal;
extern VariantCall_InfoEntry_DoNotUseDefaultTypeInternal _VariantCall_InfoEntry_DoNotUse_default_instance_;
class Variant_InfoEntry_DoNotUse;
class Variant_InfoEntry_DoNotUseDefaultTypeInternal;
extern Variant_InfoEntry_DoNotUseDefaultTypeInternal _Variant_InfoEntry_DoNotUse_default_instance_;
class VcfExtra;
class VcfExtraDefaultTypeInternal;
extern VcfExtraDefaultTypeInternal _VcfExtra_default_instance_;
class VcfFilterInfo;
class VcfFilterInfoDefaultTypeInternal;
extern VcfFilterInfoDefaultTypeInternal _VcfFilterInfo_default_instance_;
class VcfFormatInfo;
class VcfFormatInfoDefaultTypeInternal;
extern VcfFormatInfoDefaultTypeInternal _VcfFormatInfo_default_instance_;
class VcfHeader;
class VcfHeaderDefaultTypeInternal;
extern VcfHeaderDefaultTypeInternal _VcfHeader_default_instance_;
class VcfInfo;
class VcfInfoDefaultTypeInternal;
extern VcfInfoDefaultTypeInternal _VcfInfo_default_instance_;
class VcfReaderOptions;
class VcfReaderOptionsDefaultTypeInternal;
extern VcfReaderOptionsDefaultTypeInternal _VcfReaderOptions_default_instance_;
class VcfStructuredExtra;
class VcfStructuredExtraDefaultTypeInternal;
extern VcfStructuredExtraDefaultTypeInternal _VcfStructuredExtra_default_instance_;
class VcfWriterOptions;
class VcfWriterOptionsDefaultTypeInternal;
extern VcfWriterOptionsDefaultTypeInternal _VcfWriterOptions_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
PROTOBUF_NAMESPACE_OPEN
template<> ::nucleus::genomics::v1::Variant* Arena::CreateMaybeMessage<::nucleus::genomics::v1::Variant>(Arena*);
template<> ::nucleus::genomics::v1::VariantCall* Arena::CreateMaybeMessage<::nucleus::genomics::v1::VariantCall>(Arena*);
template<> ::nucleus::genomics::v1::VariantCall_InfoEntry_DoNotUse* Arena::CreateMaybeMessage<::nucleus::genomics::v1::VariantCall_InfoEntry_DoNotUse>(Arena*);
template<> ::nucleus::genomics::v1::Variant_InfoEntry_DoNotUse* Arena::CreateMaybeMessage<::nucleus::genomics::v1::Variant_InfoEntry_DoNotUse>(Arena*);
template<> ::nucleus::genomics::v1::VcfExtra* Arena::CreateMaybeMessage<::nucleus::genomics::v1::VcfExtra>(Arena*);
template<> ::nucleus::genomics::v1::VcfFilterInfo* Arena::CreateMaybeMessage<::nucleus::genomics::v1::VcfFilterInfo>(Arena*);
template<> ::nucleus::genomics::v1::VcfFormatInfo* Arena::CreateMaybeMessage<::nucleus::genomics::v1::VcfFormatInfo>(Arena*);
template<> ::nucleus::genomics::v1::VcfHeader* Arena::CreateMaybeMessage<::nucleus::genomics::v1::VcfHeader>(Arena*);
template<> ::nucleus::genomics::v1::VcfInfo* Arena::CreateMaybeMessage<::nucleus::genomics::v1::VcfInfo>(Arena*);
template<> ::nucleus::genomics::v1::VcfReaderOptions* Arena::CreateMaybeMessage<::nucleus::genomics::v1::VcfReaderOptions>(Arena*);
template<> ::nucleus::genomics::v1::VcfStructuredExtra* Arena::CreateMaybeMessage<::nucleus::genomics::v1::VcfStructuredExtra>(Arena*);
template<> ::nucleus::genomics::v1::VcfWriterOptions* Arena::CreateMaybeMessage<::nucleus::genomics::v1::VcfWriterOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nucleus {
namespace genomics {
namespace v1 {

// ===================================================================

class Variant_InfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Variant_InfoEntry_DoNotUse, 
    std::string, ::nucleus::genomics::v1::ListValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Variant_InfoEntry_DoNotUse, 
    std::string, ::nucleus::genomics::v1::ListValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Variant_InfoEntry_DoNotUse();
  Variant_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Variant_InfoEntry_DoNotUse& other);
  static const Variant_InfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Variant_InfoEntry_DoNotUse*>(&_Variant_InfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nucleus.genomics.v1.Variant.InfoEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Variant :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.Variant) */ {
 public:
  Variant();
  virtual ~Variant();

  Variant(const Variant& from);
  Variant(Variant&& from) noexcept
    : Variant() {
    *this = ::std::move(from);
  }

  inline Variant& operator=(const Variant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Variant& operator=(Variant&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Variant& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Variant* internal_default_instance() {
    return reinterpret_cast<const Variant*>(
               &_Variant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Variant& a, Variant& b) {
    a.Swap(&b);
  }
  inline void Swap(Variant* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Variant* New() const final {
    return CreateMaybeMessage<Variant>(nullptr);
  }

  Variant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Variant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Variant& from);
  void MergeFrom(const Variant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Variant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.Variant";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 3,
    kAlternateBasesFieldNumber = 7,
    kFilterFieldNumber = 9,
    kInfoFieldNumber = 10,
    kCallsFieldNumber = 11,
    kIdFieldNumber = 2,
    kReferenceBasesFieldNumber = 6,
    kReferenceNameFieldNumber = 14,
    kVariantSetIdFieldNumber = 15,
    kQualityFieldNumber = 8,
    kCreatedFieldNumber = 12,
    kEndFieldNumber = 13,
    kStartFieldNumber = 16,
  };
  // repeated string names = 3;
  int names_size() const;
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();

  // repeated string alternate_bases = 7;
  int alternate_bases_size() const;
  void clear_alternate_bases();
  const std::string& alternate_bases(int index) const;
  std::string* mutable_alternate_bases(int index);
  void set_alternate_bases(int index, const std::string& value);
  void set_alternate_bases(int index, std::string&& value);
  void set_alternate_bases(int index, const char* value);
  void set_alternate_bases(int index, const char* value, size_t size);
  std::string* add_alternate_bases();
  void add_alternate_bases(const std::string& value);
  void add_alternate_bases(std::string&& value);
  void add_alternate_bases(const char* value);
  void add_alternate_bases(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& alternate_bases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_alternate_bases();

  // repeated string filter = 9;
  int filter_size() const;
  void clear_filter();
  const std::string& filter(int index) const;
  std::string* mutable_filter(int index);
  void set_filter(int index, const std::string& value);
  void set_filter(int index, std::string&& value);
  void set_filter(int index, const char* value);
  void set_filter(int index, const char* value, size_t size);
  std::string* add_filter();
  void add_filter(const std::string& value);
  void add_filter(std::string&& value);
  void add_filter(const char* value);
  void add_filter(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filter();

  // map<string, .nucleus.genomics.v1.ListValue> info = 10;
  int info_size() const;
  void clear_info();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >&
      info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >*
      mutable_info();

  // repeated .nucleus.genomics.v1.VariantCall calls = 11;
  int calls_size() const;
  void clear_calls();
  ::nucleus::genomics::v1::VariantCall* mutable_calls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VariantCall >*
      mutable_calls();
  const ::nucleus::genomics::v1::VariantCall& calls(int index) const;
  ::nucleus::genomics::v1::VariantCall* add_calls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VariantCall >&
      calls() const;

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string reference_bases = 6;
  void clear_reference_bases();
  const std::string& reference_bases() const;
  void set_reference_bases(const std::string& value);
  void set_reference_bases(std::string&& value);
  void set_reference_bases(const char* value);
  void set_reference_bases(const char* value, size_t size);
  std::string* mutable_reference_bases();
  std::string* release_reference_bases();
  void set_allocated_reference_bases(std::string* reference_bases);

  // string reference_name = 14;
  void clear_reference_name();
  const std::string& reference_name() const;
  void set_reference_name(const std::string& value);
  void set_reference_name(std::string&& value);
  void set_reference_name(const char* value);
  void set_reference_name(const char* value, size_t size);
  std::string* mutable_reference_name();
  std::string* release_reference_name();
  void set_allocated_reference_name(std::string* reference_name);

  // string variant_set_id = 15;
  void clear_variant_set_id();
  const std::string& variant_set_id() const;
  void set_variant_set_id(const std::string& value);
  void set_variant_set_id(std::string&& value);
  void set_variant_set_id(const char* value);
  void set_variant_set_id(const char* value, size_t size);
  std::string* mutable_variant_set_id();
  std::string* release_variant_set_id();
  void set_allocated_variant_set_id(std::string* variant_set_id);

  // double quality = 8;
  void clear_quality();
  double quality() const;
  void set_quality(double value);

  // int64 created = 12;
  void clear_created();
  ::PROTOBUF_NAMESPACE_ID::int64 created() const;
  void set_created(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 end = 13;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int64 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 start = 16;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.Variant)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> alternate_bases_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filter_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Variant_InfoEntry_DoNotUse,
      std::string, ::nucleus::genomics::v1::ListValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VariantCall > calls_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_bases_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr variant_set_id_;
  double quality_;
  ::PROTOBUF_NAMESPACE_ID::int64 created_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto;
};
// -------------------------------------------------------------------

class VariantCall_InfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VariantCall_InfoEntry_DoNotUse, 
    std::string, ::nucleus::genomics::v1::ListValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VariantCall_InfoEntry_DoNotUse, 
    std::string, ::nucleus::genomics::v1::ListValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  VariantCall_InfoEntry_DoNotUse();
  VariantCall_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VariantCall_InfoEntry_DoNotUse& other);
  static const VariantCall_InfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VariantCall_InfoEntry_DoNotUse*>(&_VariantCall_InfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nucleus.genomics.v1.VariantCall.InfoEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class VariantCall :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.VariantCall) */ {
 public:
  VariantCall();
  virtual ~VariantCall();

  VariantCall(const VariantCall& from);
  VariantCall(VariantCall&& from) noexcept
    : VariantCall() {
    *this = ::std::move(from);
  }

  inline VariantCall& operator=(const VariantCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariantCall& operator=(VariantCall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VariantCall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariantCall* internal_default_instance() {
    return reinterpret_cast<const VariantCall*>(
               &_VariantCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VariantCall& a, VariantCall& b) {
    a.Swap(&b);
  }
  inline void Swap(VariantCall* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariantCall* New() const final {
    return CreateMaybeMessage<VariantCall>(nullptr);
  }

  VariantCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariantCall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariantCall& from);
  void MergeFrom(const VariantCall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariantCall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.VariantCall";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kGenotypeLikelihoodFieldNumber = 6,
    kGenotypeFieldNumber = 7,
    kPhasesetFieldNumber = 5,
    kCallSetIdFieldNumber = 8,
    kCallSetNameFieldNumber = 9,
    kIsPhasedFieldNumber = 10,
  };
  // map<string, .nucleus.genomics.v1.ListValue> info = 2;
  int info_size() const;
  void clear_info();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >&
      info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >*
      mutable_info();

  // repeated double genotype_likelihood = 6;
  int genotype_likelihood_size() const;
  void clear_genotype_likelihood();
  double genotype_likelihood(int index) const;
  void set_genotype_likelihood(int index, double value);
  void add_genotype_likelihood(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      genotype_likelihood() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_genotype_likelihood();

  // repeated int32 genotype = 7;
  int genotype_size() const;
  void clear_genotype();
  ::PROTOBUF_NAMESPACE_ID::int32 genotype(int index) const;
  void set_genotype(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_genotype(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      genotype() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_genotype();

  // string phaseset = 5;
  void clear_phaseset();
  const std::string& phaseset() const;
  void set_phaseset(const std::string& value);
  void set_phaseset(std::string&& value);
  void set_phaseset(const char* value);
  void set_phaseset(const char* value, size_t size);
  std::string* mutable_phaseset();
  std::string* release_phaseset();
  void set_allocated_phaseset(std::string* phaseset);

  // string call_set_id = 8;
  void clear_call_set_id();
  const std::string& call_set_id() const;
  void set_call_set_id(const std::string& value);
  void set_call_set_id(std::string&& value);
  void set_call_set_id(const char* value);
  void set_call_set_id(const char* value, size_t size);
  std::string* mutable_call_set_id();
  std::string* release_call_set_id();
  void set_allocated_call_set_id(std::string* call_set_id);

  // string call_set_name = 9;
  void clear_call_set_name();
  const std::string& call_set_name() const;
  void set_call_set_name(const std::string& value);
  void set_call_set_name(std::string&& value);
  void set_call_set_name(const char* value);
  void set_call_set_name(const char* value, size_t size);
  std::string* mutable_call_set_name();
  std::string* release_call_set_name();
  void set_allocated_call_set_name(std::string* call_set_name);

  // bool is_phased = 10;
  void clear_is_phased();
  bool is_phased() const;
  void set_is_phased(bool value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.VariantCall)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VariantCall_InfoEntry_DoNotUse,
      std::string, ::nucleus::genomics::v1::ListValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > genotype_likelihood_;
  mutable std::atomic<int> _genotype_likelihood_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > genotype_;
  mutable std::atomic<int> _genotype_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phaseset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr call_set_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr call_set_name_;
  bool is_phased_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto;
};
// -------------------------------------------------------------------

class VcfHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.VcfHeader) */ {
 public:
  VcfHeader();
  virtual ~VcfHeader();

  VcfHeader(const VcfHeader& from);
  VcfHeader(VcfHeader&& from) noexcept
    : VcfHeader() {
    *this = ::std::move(from);
  }

  inline VcfHeader& operator=(const VcfHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline VcfHeader& operator=(VcfHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VcfHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VcfHeader* internal_default_instance() {
    return reinterpret_cast<const VcfHeader*>(
               &_VcfHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VcfHeader& a, VcfHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(VcfHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VcfHeader* New() const final {
    return CreateMaybeMessage<VcfHeader>(nullptr);
  }

  VcfHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VcfHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VcfHeader& from);
  void MergeFrom(const VcfHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VcfHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.VcfHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContigsFieldNumber = 2,
    kFiltersFieldNumber = 3,
    kInfosFieldNumber = 4,
    kFormatsFieldNumber = 5,
    kSampleNamesFieldNumber = 6,
    kExtrasFieldNumber = 7,
    kStructuredExtrasFieldNumber = 8,
    kFileformatFieldNumber = 1,
  };
  // repeated .nucleus.genomics.v1.ContigInfo contigs = 2;
  int contigs_size() const;
  void clear_contigs();
  ::nucleus::genomics::v1::ContigInfo* mutable_contigs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::ContigInfo >*
      mutable_contigs();
  const ::nucleus::genomics::v1::ContigInfo& contigs(int index) const;
  ::nucleus::genomics::v1::ContigInfo* add_contigs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::ContigInfo >&
      contigs() const;

  // repeated .nucleus.genomics.v1.VcfFilterInfo filters = 3;
  int filters_size() const;
  void clear_filters();
  ::nucleus::genomics::v1::VcfFilterInfo* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfFilterInfo >*
      mutable_filters();
  const ::nucleus::genomics::v1::VcfFilterInfo& filters(int index) const;
  ::nucleus::genomics::v1::VcfFilterInfo* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfFilterInfo >&
      filters() const;

  // repeated .nucleus.genomics.v1.VcfInfo infos = 4;
  int infos_size() const;
  void clear_infos();
  ::nucleus::genomics::v1::VcfInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfInfo >*
      mutable_infos();
  const ::nucleus::genomics::v1::VcfInfo& infos(int index) const;
  ::nucleus::genomics::v1::VcfInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfInfo >&
      infos() const;

  // repeated .nucleus.genomics.v1.VcfFormatInfo formats = 5;
  int formats_size() const;
  void clear_formats();
  ::nucleus::genomics::v1::VcfFormatInfo* mutable_formats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfFormatInfo >*
      mutable_formats();
  const ::nucleus::genomics::v1::VcfFormatInfo& formats(int index) const;
  ::nucleus::genomics::v1::VcfFormatInfo* add_formats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfFormatInfo >&
      formats() const;

  // repeated string sample_names = 6;
  int sample_names_size() const;
  void clear_sample_names();
  const std::string& sample_names(int index) const;
  std::string* mutable_sample_names(int index);
  void set_sample_names(int index, const std::string& value);
  void set_sample_names(int index, std::string&& value);
  void set_sample_names(int index, const char* value);
  void set_sample_names(int index, const char* value, size_t size);
  std::string* add_sample_names();
  void add_sample_names(const std::string& value);
  void add_sample_names(std::string&& value);
  void add_sample_names(const char* value);
  void add_sample_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sample_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sample_names();

  // repeated .nucleus.genomics.v1.VcfExtra extras = 7;
  int extras_size() const;
  void clear_extras();
  ::nucleus::genomics::v1::VcfExtra* mutable_extras(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfExtra >*
      mutable_extras();
  const ::nucleus::genomics::v1::VcfExtra& extras(int index) const;
  ::nucleus::genomics::v1::VcfExtra* add_extras();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfExtra >&
      extras() const;

  // repeated .nucleus.genomics.v1.VcfStructuredExtra structured_extras = 8;
  int structured_extras_size() const;
  void clear_structured_extras();
  ::nucleus::genomics::v1::VcfStructuredExtra* mutable_structured_extras(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfStructuredExtra >*
      mutable_structured_extras();
  const ::nucleus::genomics::v1::VcfStructuredExtra& structured_extras(int index) const;
  ::nucleus::genomics::v1::VcfStructuredExtra* add_structured_extras();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfStructuredExtra >&
      structured_extras() const;

  // string fileformat = 1;
  void clear_fileformat();
  const std::string& fileformat() const;
  void set_fileformat(const std::string& value);
  void set_fileformat(std::string&& value);
  void set_fileformat(const char* value);
  void set_fileformat(const char* value, size_t size);
  std::string* mutable_fileformat();
  std::string* release_fileformat();
  void set_allocated_fileformat(std::string* fileformat);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.VcfHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::ContigInfo > contigs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfFilterInfo > filters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfInfo > infos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfFormatInfo > formats_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sample_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfExtra > extras_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfStructuredExtra > structured_extras_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fileformat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto;
};
// -------------------------------------------------------------------

class VcfFilterInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.VcfFilterInfo) */ {
 public:
  VcfFilterInfo();
  virtual ~VcfFilterInfo();

  VcfFilterInfo(const VcfFilterInfo& from);
  VcfFilterInfo(VcfFilterInfo&& from) noexcept
    : VcfFilterInfo() {
    *this = ::std::move(from);
  }

  inline VcfFilterInfo& operator=(const VcfFilterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VcfFilterInfo& operator=(VcfFilterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VcfFilterInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VcfFilterInfo* internal_default_instance() {
    return reinterpret_cast<const VcfFilterInfo*>(
               &_VcfFilterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VcfFilterInfo& a, VcfFilterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VcfFilterInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VcfFilterInfo* New() const final {
    return CreateMaybeMessage<VcfFilterInfo>(nullptr);
  }

  VcfFilterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VcfFilterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VcfFilterInfo& from);
  void MergeFrom(const VcfFilterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VcfFilterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.VcfFilterInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDescriptionFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.VcfFilterInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto;
};
// -------------------------------------------------------------------

class VcfInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.VcfInfo) */ {
 public:
  VcfInfo();
  virtual ~VcfInfo();

  VcfInfo(const VcfInfo& from);
  VcfInfo(VcfInfo&& from) noexcept
    : VcfInfo() {
    *this = ::std::move(from);
  }

  inline VcfInfo& operator=(const VcfInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VcfInfo& operator=(VcfInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VcfInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VcfInfo* internal_default_instance() {
    return reinterpret_cast<const VcfInfo*>(
               &_VcfInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VcfInfo& a, VcfInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VcfInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VcfInfo* New() const final {
    return CreateMaybeMessage<VcfInfo>(nullptr);
  }

  VcfInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VcfInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VcfInfo& from);
  void MergeFrom(const VcfInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VcfInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.VcfInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNumberFieldNumber = 2,
    kTypeFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kSourceFieldNumber = 5,
    kVersionFieldNumber = 6,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string number = 2;
  void clear_number();
  const std::string& number() const;
  void set_number(const std::string& value);
  void set_number(std::string&& value);
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  std::string* mutable_number();
  std::string* release_number();
  void set_allocated_number(std::string* number);

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // string source = 5;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);

  // string version = 6;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.VcfInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto;
};
// -------------------------------------------------------------------

class VcfFormatInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.VcfFormatInfo) */ {
 public:
  VcfFormatInfo();
  virtual ~VcfFormatInfo();

  VcfFormatInfo(const VcfFormatInfo& from);
  VcfFormatInfo(VcfFormatInfo&& from) noexcept
    : VcfFormatInfo() {
    *this = ::std::move(from);
  }

  inline VcfFormatInfo& operator=(const VcfFormatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VcfFormatInfo& operator=(VcfFormatInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VcfFormatInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VcfFormatInfo* internal_default_instance() {
    return reinterpret_cast<const VcfFormatInfo*>(
               &_VcfFormatInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(VcfFormatInfo& a, VcfFormatInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VcfFormatInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VcfFormatInfo* New() const final {
    return CreateMaybeMessage<VcfFormatInfo>(nullptr);
  }

  VcfFormatInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VcfFormatInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VcfFormatInfo& from);
  void MergeFrom(const VcfFormatInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VcfFormatInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.VcfFormatInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNumberFieldNumber = 2,
    kTypeFieldNumber = 3,
    kDescriptionFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string number = 2;
  void clear_number();
  const std::string& number() const;
  void set_number(const std::string& value);
  void set_number(std::string&& value);
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  std::string* mutable_number();
  std::string* release_number();
  void set_allocated_number(std::string* number);

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.VcfFormatInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto;
};
// -------------------------------------------------------------------

class VcfStructuredExtra :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.VcfStructuredExtra) */ {
 public:
  VcfStructuredExtra();
  virtual ~VcfStructuredExtra();

  VcfStructuredExtra(const VcfStructuredExtra& from);
  VcfStructuredExtra(VcfStructuredExtra&& from) noexcept
    : VcfStructuredExtra() {
    *this = ::std::move(from);
  }

  inline VcfStructuredExtra& operator=(const VcfStructuredExtra& from) {
    CopyFrom(from);
    return *this;
  }
  inline VcfStructuredExtra& operator=(VcfStructuredExtra&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VcfStructuredExtra& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VcfStructuredExtra* internal_default_instance() {
    return reinterpret_cast<const VcfStructuredExtra*>(
               &_VcfStructuredExtra_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VcfStructuredExtra& a, VcfStructuredExtra& b) {
    a.Swap(&b);
  }
  inline void Swap(VcfStructuredExtra* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VcfStructuredExtra* New() const final {
    return CreateMaybeMessage<VcfStructuredExtra>(nullptr);
  }

  VcfStructuredExtra* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VcfStructuredExtra>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VcfStructuredExtra& from);
  void MergeFrom(const VcfStructuredExtra& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VcfStructuredExtra* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.VcfStructuredExtra";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated .nucleus.genomics.v1.VcfExtra fields = 2;
  int fields_size() const;
  void clear_fields();
  ::nucleus::genomics::v1::VcfExtra* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfExtra >*
      mutable_fields();
  const ::nucleus::genomics::v1::VcfExtra& fields(int index) const;
  ::nucleus::genomics::v1::VcfExtra* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfExtra >&
      fields() const;

  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.VcfStructuredExtra)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfExtra > fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto;
};
// -------------------------------------------------------------------

class VcfExtra :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.VcfExtra) */ {
 public:
  VcfExtra();
  virtual ~VcfExtra();

  VcfExtra(const VcfExtra& from);
  VcfExtra(VcfExtra&& from) noexcept
    : VcfExtra() {
    *this = ::std::move(from);
  }

  inline VcfExtra& operator=(const VcfExtra& from) {
    CopyFrom(from);
    return *this;
  }
  inline VcfExtra& operator=(VcfExtra&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VcfExtra& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VcfExtra* internal_default_instance() {
    return reinterpret_cast<const VcfExtra*>(
               &_VcfExtra_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VcfExtra& a, VcfExtra& b) {
    a.Swap(&b);
  }
  inline void Swap(VcfExtra* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VcfExtra* New() const final {
    return CreateMaybeMessage<VcfExtra>(nullptr);
  }

  VcfExtra* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VcfExtra>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VcfExtra& from);
  void MergeFrom(const VcfExtra& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VcfExtra* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.VcfExtra";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.VcfExtra)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto;
};
// -------------------------------------------------------------------

class VcfReaderOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.VcfReaderOptions) */ {
 public:
  VcfReaderOptions();
  virtual ~VcfReaderOptions();

  VcfReaderOptions(const VcfReaderOptions& from);
  VcfReaderOptions(VcfReaderOptions&& from) noexcept
    : VcfReaderOptions() {
    *this = ::std::move(from);
  }

  inline VcfReaderOptions& operator=(const VcfReaderOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline VcfReaderOptions& operator=(VcfReaderOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VcfReaderOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VcfReaderOptions* internal_default_instance() {
    return reinterpret_cast<const VcfReaderOptions*>(
               &_VcfReaderOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VcfReaderOptions& a, VcfReaderOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(VcfReaderOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VcfReaderOptions* New() const final {
    return CreateMaybeMessage<VcfReaderOptions>(nullptr);
  }

  VcfReaderOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VcfReaderOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VcfReaderOptions& from);
  void MergeFrom(const VcfReaderOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VcfReaderOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.VcfReaderOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExcludedInfoFieldsFieldNumber = 3,
    kExcludedFormatFieldsFieldNumber = 4,
    kStoreGlAndPlInInfoMapFieldNumber = 5,
  };
  // repeated string excluded_info_fields = 3;
  int excluded_info_fields_size() const;
  void clear_excluded_info_fields();
  const std::string& excluded_info_fields(int index) const;
  std::string* mutable_excluded_info_fields(int index);
  void set_excluded_info_fields(int index, const std::string& value);
  void set_excluded_info_fields(int index, std::string&& value);
  void set_excluded_info_fields(int index, const char* value);
  void set_excluded_info_fields(int index, const char* value, size_t size);
  std::string* add_excluded_info_fields();
  void add_excluded_info_fields(const std::string& value);
  void add_excluded_info_fields(std::string&& value);
  void add_excluded_info_fields(const char* value);
  void add_excluded_info_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& excluded_info_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_excluded_info_fields();

  // repeated string excluded_format_fields = 4;
  int excluded_format_fields_size() const;
  void clear_excluded_format_fields();
  const std::string& excluded_format_fields(int index) const;
  std::string* mutable_excluded_format_fields(int index);
  void set_excluded_format_fields(int index, const std::string& value);
  void set_excluded_format_fields(int index, std::string&& value);
  void set_excluded_format_fields(int index, const char* value);
  void set_excluded_format_fields(int index, const char* value, size_t size);
  std::string* add_excluded_format_fields();
  void add_excluded_format_fields(const std::string& value);
  void add_excluded_format_fields(std::string&& value);
  void add_excluded_format_fields(const char* value);
  void add_excluded_format_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& excluded_format_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_excluded_format_fields();

  // bool store_gl_and_pl_in_info_map = 5;
  void clear_store_gl_and_pl_in_info_map();
  bool store_gl_and_pl_in_info_map() const;
  void set_store_gl_and_pl_in_info_map(bool value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.VcfReaderOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> excluded_info_fields_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> excluded_format_fields_;
  bool store_gl_and_pl_in_info_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto;
};
// -------------------------------------------------------------------

class VcfWriterOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.VcfWriterOptions) */ {
 public:
  VcfWriterOptions();
  virtual ~VcfWriterOptions();

  VcfWriterOptions(const VcfWriterOptions& from);
  VcfWriterOptions(VcfWriterOptions&& from) noexcept
    : VcfWriterOptions() {
    *this = ::std::move(from);
  }

  inline VcfWriterOptions& operator=(const VcfWriterOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline VcfWriterOptions& operator=(VcfWriterOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VcfWriterOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VcfWriterOptions* internal_default_instance() {
    return reinterpret_cast<const VcfWriterOptions*>(
               &_VcfWriterOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VcfWriterOptions& a, VcfWriterOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(VcfWriterOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VcfWriterOptions* New() const final {
    return CreateMaybeMessage<VcfWriterOptions>(nullptr);
  }

  VcfWriterOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VcfWriterOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VcfWriterOptions& from);
  void MergeFrom(const VcfWriterOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VcfWriterOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.VcfWriterOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExcludedInfoFieldsFieldNumber = 7,
    kExcludedFormatFieldsFieldNumber = 8,
    kRoundQualValuesFieldNumber = 6,
    kRetrieveGlAndPlFromInfoMapFieldNumber = 9,
    kExcludeHeaderFieldNumber = 10,
  };
  // repeated string excluded_info_fields = 7;
  int excluded_info_fields_size() const;
  void clear_excluded_info_fields();
  const std::string& excluded_info_fields(int index) const;
  std::string* mutable_excluded_info_fields(int index);
  void set_excluded_info_fields(int index, const std::string& value);
  void set_excluded_info_fields(int index, std::string&& value);
  void set_excluded_info_fields(int index, const char* value);
  void set_excluded_info_fields(int index, const char* value, size_t size);
  std::string* add_excluded_info_fields();
  void add_excluded_info_fields(const std::string& value);
  void add_excluded_info_fields(std::string&& value);
  void add_excluded_info_fields(const char* value);
  void add_excluded_info_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& excluded_info_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_excluded_info_fields();

  // repeated string excluded_format_fields = 8;
  int excluded_format_fields_size() const;
  void clear_excluded_format_fields();
  const std::string& excluded_format_fields(int index) const;
  std::string* mutable_excluded_format_fields(int index);
  void set_excluded_format_fields(int index, const std::string& value);
  void set_excluded_format_fields(int index, std::string&& value);
  void set_excluded_format_fields(int index, const char* value);
  void set_excluded_format_fields(int index, const char* value, size_t size);
  std::string* add_excluded_format_fields();
  void add_excluded_format_fields(const std::string& value);
  void add_excluded_format_fields(std::string&& value);
  void add_excluded_format_fields(const char* value);
  void add_excluded_format_fields(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& excluded_format_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_excluded_format_fields();

  // bool round_qual_values = 6;
  void clear_round_qual_values();
  bool round_qual_values() const;
  void set_round_qual_values(bool value);

  // bool retrieve_gl_and_pl_from_info_map = 9;
  void clear_retrieve_gl_and_pl_from_info_map();
  bool retrieve_gl_and_pl_from_info_map() const;
  void set_retrieve_gl_and_pl_from_info_map(bool value);

  // bool exclude_header = 10;
  void clear_exclude_header();
  bool exclude_header() const;
  void set_exclude_header(bool value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.VcfWriterOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> excluded_info_fields_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> excluded_format_fields_;
  bool round_qual_values_;
  bool retrieve_gl_and_pl_from_info_map_;
  bool exclude_header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Variant

// string reference_name = 14;
inline void Variant::clear_reference_name() {
  reference_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Variant::reference_name() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Variant.reference_name)
  return reference_name_.GetNoArena();
}
inline void Variant::set_reference_name(const std::string& value) {
  
  reference_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Variant.reference_name)
}
inline void Variant::set_reference_name(std::string&& value) {
  
  reference_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.Variant.reference_name)
}
inline void Variant::set_reference_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Variant.reference_name)
}
inline void Variant::set_reference_name(const char* value, size_t size) {
  
  reference_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Variant.reference_name)
}
inline std::string* Variant::mutable_reference_name() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Variant.reference_name)
  return reference_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Variant::release_reference_name() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.Variant.reference_name)
  
  return reference_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Variant::set_allocated_reference_name(std::string* reference_name) {
  if (reference_name != nullptr) {
    
  } else {
    
  }
  reference_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_name);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.Variant.reference_name)
}

// int64 start = 16;
inline void Variant::clear_start() {
  start_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Variant::start() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Variant.start)
  return start_;
}
inline void Variant::set_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Variant.start)
}

// int64 end = 13;
inline void Variant::clear_end() {
  end_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Variant::end() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Variant.end)
  return end_;
}
inline void Variant::set_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Variant.end)
}

// repeated string names = 3;
inline int Variant::names_size() const {
  return names_.size();
}
inline void Variant::clear_names() {
  names_.Clear();
}
inline const std::string& Variant::names(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Variant.names)
  return names_.Get(index);
}
inline std::string* Variant::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Variant.names)
  return names_.Mutable(index);
}
inline void Variant::set_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Variant.names)
  names_.Mutable(index)->assign(value);
}
inline void Variant::set_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Variant.names)
  names_.Mutable(index)->assign(std::move(value));
}
inline void Variant::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Variant.names)
}
inline void Variant::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Variant.names)
}
inline std::string* Variant::add_names() {
  // @@protoc_insertion_point(field_add_mutable:nucleus.genomics.v1.Variant.names)
  return names_.Add();
}
inline void Variant::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.Variant.names)
}
inline void Variant::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.Variant.names)
}
inline void Variant::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nucleus.genomics.v1.Variant.names)
}
inline void Variant::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nucleus.genomics.v1.Variant.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Variant::names() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.Variant.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Variant::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.Variant.names)
  return &names_;
}

// string reference_bases = 6;
inline void Variant::clear_reference_bases() {
  reference_bases_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Variant::reference_bases() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Variant.reference_bases)
  return reference_bases_.GetNoArena();
}
inline void Variant::set_reference_bases(const std::string& value) {
  
  reference_bases_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Variant.reference_bases)
}
inline void Variant::set_reference_bases(std::string&& value) {
  
  reference_bases_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.Variant.reference_bases)
}
inline void Variant::set_reference_bases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_bases_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Variant.reference_bases)
}
inline void Variant::set_reference_bases(const char* value, size_t size) {
  
  reference_bases_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Variant.reference_bases)
}
inline std::string* Variant::mutable_reference_bases() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Variant.reference_bases)
  return reference_bases_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Variant::release_reference_bases() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.Variant.reference_bases)
  
  return reference_bases_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Variant::set_allocated_reference_bases(std::string* reference_bases) {
  if (reference_bases != nullptr) {
    
  } else {
    
  }
  reference_bases_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_bases);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.Variant.reference_bases)
}

// repeated string alternate_bases = 7;
inline int Variant::alternate_bases_size() const {
  return alternate_bases_.size();
}
inline void Variant::clear_alternate_bases() {
  alternate_bases_.Clear();
}
inline const std::string& Variant::alternate_bases(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Variant.alternate_bases)
  return alternate_bases_.Get(index);
}
inline std::string* Variant::mutable_alternate_bases(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Variant.alternate_bases)
  return alternate_bases_.Mutable(index);
}
inline void Variant::set_alternate_bases(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Variant.alternate_bases)
  alternate_bases_.Mutable(index)->assign(value);
}
inline void Variant::set_alternate_bases(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Variant.alternate_bases)
  alternate_bases_.Mutable(index)->assign(std::move(value));
}
inline void Variant::set_alternate_bases(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  alternate_bases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Variant.alternate_bases)
}
inline void Variant::set_alternate_bases(int index, const char* value, size_t size) {
  alternate_bases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Variant.alternate_bases)
}
inline std::string* Variant::add_alternate_bases() {
  // @@protoc_insertion_point(field_add_mutable:nucleus.genomics.v1.Variant.alternate_bases)
  return alternate_bases_.Add();
}
inline void Variant::add_alternate_bases(const std::string& value) {
  alternate_bases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.Variant.alternate_bases)
}
inline void Variant::add_alternate_bases(std::string&& value) {
  alternate_bases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.Variant.alternate_bases)
}
inline void Variant::add_alternate_bases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  alternate_bases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nucleus.genomics.v1.Variant.alternate_bases)
}
inline void Variant::add_alternate_bases(const char* value, size_t size) {
  alternate_bases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nucleus.genomics.v1.Variant.alternate_bases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Variant::alternate_bases() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.Variant.alternate_bases)
  return alternate_bases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Variant::mutable_alternate_bases() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.Variant.alternate_bases)
  return &alternate_bases_;
}

// double quality = 8;
inline void Variant::clear_quality() {
  quality_ = 0;
}
inline double Variant::quality() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Variant.quality)
  return quality_;
}
inline void Variant::set_quality(double value) {
  
  quality_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Variant.quality)
}

// repeated string filter = 9;
inline int Variant::filter_size() const {
  return filter_.size();
}
inline void Variant::clear_filter() {
  filter_.Clear();
}
inline const std::string& Variant::filter(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Variant.filter)
  return filter_.Get(index);
}
inline std::string* Variant::mutable_filter(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Variant.filter)
  return filter_.Mutable(index);
}
inline void Variant::set_filter(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Variant.filter)
  filter_.Mutable(index)->assign(value);
}
inline void Variant::set_filter(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Variant.filter)
  filter_.Mutable(index)->assign(std::move(value));
}
inline void Variant::set_filter(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Variant.filter)
}
inline void Variant::set_filter(int index, const char* value, size_t size) {
  filter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Variant.filter)
}
inline std::string* Variant::add_filter() {
  // @@protoc_insertion_point(field_add_mutable:nucleus.genomics.v1.Variant.filter)
  return filter_.Add();
}
inline void Variant::add_filter(const std::string& value) {
  filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.Variant.filter)
}
inline void Variant::add_filter(std::string&& value) {
  filter_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.Variant.filter)
}
inline void Variant::add_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nucleus.genomics.v1.Variant.filter)
}
inline void Variant::add_filter(const char* value, size_t size) {
  filter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nucleus.genomics.v1.Variant.filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Variant::filter() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.Variant.filter)
  return filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Variant::mutable_filter() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.Variant.filter)
  return &filter_;
}

// map<string, .nucleus.genomics.v1.ListValue> info = 10;
inline int Variant::info_size() const {
  return info_.size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >&
Variant::info() const {
  // @@protoc_insertion_point(field_map:nucleus.genomics.v1.Variant.info)
  return info_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >*
Variant::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:nucleus.genomics.v1.Variant.info)
  return info_.MutableMap();
}

// repeated .nucleus.genomics.v1.VariantCall calls = 11;
inline int Variant::calls_size() const {
  return calls_.size();
}
inline void Variant::clear_calls() {
  calls_.Clear();
}
inline ::nucleus::genomics::v1::VariantCall* Variant::mutable_calls(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Variant.calls)
  return calls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VariantCall >*
Variant::mutable_calls() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.Variant.calls)
  return &calls_;
}
inline const ::nucleus::genomics::v1::VariantCall& Variant::calls(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Variant.calls)
  return calls_.Get(index);
}
inline ::nucleus::genomics::v1::VariantCall* Variant::add_calls() {
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.Variant.calls)
  return calls_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VariantCall >&
Variant::calls() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.Variant.calls)
  return calls_;
}

// string variant_set_id = 15;
inline void Variant::clear_variant_set_id() {
  variant_set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Variant::variant_set_id() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Variant.variant_set_id)
  return variant_set_id_.GetNoArena();
}
inline void Variant::set_variant_set_id(const std::string& value) {
  
  variant_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Variant.variant_set_id)
}
inline void Variant::set_variant_set_id(std::string&& value) {
  
  variant_set_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.Variant.variant_set_id)
}
inline void Variant::set_variant_set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  variant_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Variant.variant_set_id)
}
inline void Variant::set_variant_set_id(const char* value, size_t size) {
  
  variant_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Variant.variant_set_id)
}
inline std::string* Variant::mutable_variant_set_id() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Variant.variant_set_id)
  return variant_set_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Variant::release_variant_set_id() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.Variant.variant_set_id)
  
  return variant_set_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Variant::set_allocated_variant_set_id(std::string* variant_set_id) {
  if (variant_set_id != nullptr) {
    
  } else {
    
  }
  variant_set_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), variant_set_id);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.Variant.variant_set_id)
}

// string id = 2;
inline void Variant::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Variant::id() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Variant.id)
  return id_.GetNoArena();
}
inline void Variant::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Variant.id)
}
inline void Variant::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.Variant.id)
}
inline void Variant::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Variant.id)
}
inline void Variant::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Variant.id)
}
inline std::string* Variant::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Variant.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Variant::release_id() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.Variant.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Variant::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.Variant.id)
}

// int64 created = 12;
inline void Variant::clear_created() {
  created_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Variant::created() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Variant.created)
  return created_;
}
inline void Variant::set_created(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  created_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Variant.created)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VariantCall

// string call_set_name = 9;
inline void VariantCall::clear_call_set_name() {
  call_set_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VariantCall::call_set_name() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VariantCall.call_set_name)
  return call_set_name_.GetNoArena();
}
inline void VariantCall::set_call_set_name(const std::string& value) {
  
  call_set_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VariantCall.call_set_name)
}
inline void VariantCall::set_call_set_name(std::string&& value) {
  
  call_set_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VariantCall.call_set_name)
}
inline void VariantCall::set_call_set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  call_set_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VariantCall.call_set_name)
}
inline void VariantCall::set_call_set_name(const char* value, size_t size) {
  
  call_set_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VariantCall.call_set_name)
}
inline std::string* VariantCall::mutable_call_set_name() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VariantCall.call_set_name)
  return call_set_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VariantCall::release_call_set_name() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VariantCall.call_set_name)
  
  return call_set_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VariantCall::set_allocated_call_set_name(std::string* call_set_name) {
  if (call_set_name != nullptr) {
    
  } else {
    
  }
  call_set_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), call_set_name);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VariantCall.call_set_name)
}

// repeated int32 genotype = 7;
inline int VariantCall::genotype_size() const {
  return genotype_.size();
}
inline void VariantCall::clear_genotype() {
  genotype_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VariantCall::genotype(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VariantCall.genotype)
  return genotype_.Get(index);
}
inline void VariantCall::set_genotype(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  genotype_.Set(index, value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VariantCall.genotype)
}
inline void VariantCall::add_genotype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  genotype_.Add(value);
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VariantCall.genotype)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VariantCall::genotype() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.VariantCall.genotype)
  return genotype_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VariantCall::mutable_genotype() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.VariantCall.genotype)
  return &genotype_;
}

// bool is_phased = 10;
inline void VariantCall::clear_is_phased() {
  is_phased_ = false;
}
inline bool VariantCall::is_phased() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VariantCall.is_phased)
  return is_phased_;
}
inline void VariantCall::set_is_phased(bool value) {
  
  is_phased_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VariantCall.is_phased)
}

// string phaseset = 5;
inline void VariantCall::clear_phaseset() {
  phaseset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VariantCall::phaseset() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VariantCall.phaseset)
  return phaseset_.GetNoArena();
}
inline void VariantCall::set_phaseset(const std::string& value) {
  
  phaseset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VariantCall.phaseset)
}
inline void VariantCall::set_phaseset(std::string&& value) {
  
  phaseset_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VariantCall.phaseset)
}
inline void VariantCall::set_phaseset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phaseset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VariantCall.phaseset)
}
inline void VariantCall::set_phaseset(const char* value, size_t size) {
  
  phaseset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VariantCall.phaseset)
}
inline std::string* VariantCall::mutable_phaseset() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VariantCall.phaseset)
  return phaseset_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VariantCall::release_phaseset() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VariantCall.phaseset)
  
  return phaseset_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VariantCall::set_allocated_phaseset(std::string* phaseset) {
  if (phaseset != nullptr) {
    
  } else {
    
  }
  phaseset_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phaseset);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VariantCall.phaseset)
}

// repeated double genotype_likelihood = 6;
inline int VariantCall::genotype_likelihood_size() const {
  return genotype_likelihood_.size();
}
inline void VariantCall::clear_genotype_likelihood() {
  genotype_likelihood_.Clear();
}
inline double VariantCall::genotype_likelihood(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VariantCall.genotype_likelihood)
  return genotype_likelihood_.Get(index);
}
inline void VariantCall::set_genotype_likelihood(int index, double value) {
  genotype_likelihood_.Set(index, value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VariantCall.genotype_likelihood)
}
inline void VariantCall::add_genotype_likelihood(double value) {
  genotype_likelihood_.Add(value);
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VariantCall.genotype_likelihood)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VariantCall::genotype_likelihood() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.VariantCall.genotype_likelihood)
  return genotype_likelihood_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VariantCall::mutable_genotype_likelihood() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.VariantCall.genotype_likelihood)
  return &genotype_likelihood_;
}

// map<string, .nucleus.genomics.v1.ListValue> info = 2;
inline int VariantCall::info_size() const {
  return info_.size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >&
VariantCall::info() const {
  // @@protoc_insertion_point(field_map:nucleus.genomics.v1.VariantCall.info)
  return info_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >*
VariantCall::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:nucleus.genomics.v1.VariantCall.info)
  return info_.MutableMap();
}

// string call_set_id = 8;
inline void VariantCall::clear_call_set_id() {
  call_set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VariantCall::call_set_id() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VariantCall.call_set_id)
  return call_set_id_.GetNoArena();
}
inline void VariantCall::set_call_set_id(const std::string& value) {
  
  call_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VariantCall.call_set_id)
}
inline void VariantCall::set_call_set_id(std::string&& value) {
  
  call_set_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VariantCall.call_set_id)
}
inline void VariantCall::set_call_set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  call_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VariantCall.call_set_id)
}
inline void VariantCall::set_call_set_id(const char* value, size_t size) {
  
  call_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VariantCall.call_set_id)
}
inline std::string* VariantCall::mutable_call_set_id() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VariantCall.call_set_id)
  return call_set_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VariantCall::release_call_set_id() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VariantCall.call_set_id)
  
  return call_set_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VariantCall::set_allocated_call_set_id(std::string* call_set_id) {
  if (call_set_id != nullptr) {
    
  } else {
    
  }
  call_set_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), call_set_id);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VariantCall.call_set_id)
}

// -------------------------------------------------------------------

// VcfHeader

// string fileformat = 1;
inline void VcfHeader::clear_fileformat() {
  fileformat_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VcfHeader::fileformat() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfHeader.fileformat)
  return fileformat_.GetNoArena();
}
inline void VcfHeader::set_fileformat(const std::string& value) {
  
  fileformat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfHeader.fileformat)
}
inline void VcfHeader::set_fileformat(std::string&& value) {
  
  fileformat_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VcfHeader.fileformat)
}
inline void VcfHeader::set_fileformat(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fileformat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfHeader.fileformat)
}
inline void VcfHeader::set_fileformat(const char* value, size_t size) {
  
  fileformat_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfHeader.fileformat)
}
inline std::string* VcfHeader::mutable_fileformat() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfHeader.fileformat)
  return fileformat_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VcfHeader::release_fileformat() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VcfHeader.fileformat)
  
  return fileformat_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VcfHeader::set_allocated_fileformat(std::string* fileformat) {
  if (fileformat != nullptr) {
    
  } else {
    
  }
  fileformat_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fileformat);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VcfHeader.fileformat)
}

// repeated .nucleus.genomics.v1.ContigInfo contigs = 2;
inline int VcfHeader::contigs_size() const {
  return contigs_.size();
}
inline ::nucleus::genomics::v1::ContigInfo* VcfHeader::mutable_contigs(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfHeader.contigs)
  return contigs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::ContigInfo >*
VcfHeader::mutable_contigs() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.VcfHeader.contigs)
  return &contigs_;
}
inline const ::nucleus::genomics::v1::ContigInfo& VcfHeader::contigs(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfHeader.contigs)
  return contigs_.Get(index);
}
inline ::nucleus::genomics::v1::ContigInfo* VcfHeader::add_contigs() {
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VcfHeader.contigs)
  return contigs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::ContigInfo >&
VcfHeader::contigs() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.VcfHeader.contigs)
  return contigs_;
}

// repeated .nucleus.genomics.v1.VcfFilterInfo filters = 3;
inline int VcfHeader::filters_size() const {
  return filters_.size();
}
inline void VcfHeader::clear_filters() {
  filters_.Clear();
}
inline ::nucleus::genomics::v1::VcfFilterInfo* VcfHeader::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfHeader.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfFilterInfo >*
VcfHeader::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.VcfHeader.filters)
  return &filters_;
}
inline const ::nucleus::genomics::v1::VcfFilterInfo& VcfHeader::filters(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfHeader.filters)
  return filters_.Get(index);
}
inline ::nucleus::genomics::v1::VcfFilterInfo* VcfHeader::add_filters() {
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VcfHeader.filters)
  return filters_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfFilterInfo >&
VcfHeader::filters() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.VcfHeader.filters)
  return filters_;
}

// repeated .nucleus.genomics.v1.VcfInfo infos = 4;
inline int VcfHeader::infos_size() const {
  return infos_.size();
}
inline void VcfHeader::clear_infos() {
  infos_.Clear();
}
inline ::nucleus::genomics::v1::VcfInfo* VcfHeader::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfHeader.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfInfo >*
VcfHeader::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.VcfHeader.infos)
  return &infos_;
}
inline const ::nucleus::genomics::v1::VcfInfo& VcfHeader::infos(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfHeader.infos)
  return infos_.Get(index);
}
inline ::nucleus::genomics::v1::VcfInfo* VcfHeader::add_infos() {
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VcfHeader.infos)
  return infos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfInfo >&
VcfHeader::infos() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.VcfHeader.infos)
  return infos_;
}

// repeated .nucleus.genomics.v1.VcfFormatInfo formats = 5;
inline int VcfHeader::formats_size() const {
  return formats_.size();
}
inline void VcfHeader::clear_formats() {
  formats_.Clear();
}
inline ::nucleus::genomics::v1::VcfFormatInfo* VcfHeader::mutable_formats(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfHeader.formats)
  return formats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfFormatInfo >*
VcfHeader::mutable_formats() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.VcfHeader.formats)
  return &formats_;
}
inline const ::nucleus::genomics::v1::VcfFormatInfo& VcfHeader::formats(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfHeader.formats)
  return formats_.Get(index);
}
inline ::nucleus::genomics::v1::VcfFormatInfo* VcfHeader::add_formats() {
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VcfHeader.formats)
  return formats_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfFormatInfo >&
VcfHeader::formats() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.VcfHeader.formats)
  return formats_;
}

// repeated string sample_names = 6;
inline int VcfHeader::sample_names_size() const {
  return sample_names_.size();
}
inline void VcfHeader::clear_sample_names() {
  sample_names_.Clear();
}
inline const std::string& VcfHeader::sample_names(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfHeader.sample_names)
  return sample_names_.Get(index);
}
inline std::string* VcfHeader::mutable_sample_names(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfHeader.sample_names)
  return sample_names_.Mutable(index);
}
inline void VcfHeader::set_sample_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfHeader.sample_names)
  sample_names_.Mutable(index)->assign(value);
}
inline void VcfHeader::set_sample_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfHeader.sample_names)
  sample_names_.Mutable(index)->assign(std::move(value));
}
inline void VcfHeader::set_sample_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sample_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfHeader.sample_names)
}
inline void VcfHeader::set_sample_names(int index, const char* value, size_t size) {
  sample_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfHeader.sample_names)
}
inline std::string* VcfHeader::add_sample_names() {
  // @@protoc_insertion_point(field_add_mutable:nucleus.genomics.v1.VcfHeader.sample_names)
  return sample_names_.Add();
}
inline void VcfHeader::add_sample_names(const std::string& value) {
  sample_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VcfHeader.sample_names)
}
inline void VcfHeader::add_sample_names(std::string&& value) {
  sample_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VcfHeader.sample_names)
}
inline void VcfHeader::add_sample_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sample_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nucleus.genomics.v1.VcfHeader.sample_names)
}
inline void VcfHeader::add_sample_names(const char* value, size_t size) {
  sample_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nucleus.genomics.v1.VcfHeader.sample_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VcfHeader::sample_names() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.VcfHeader.sample_names)
  return sample_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VcfHeader::mutable_sample_names() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.VcfHeader.sample_names)
  return &sample_names_;
}

// repeated .nucleus.genomics.v1.VcfStructuredExtra structured_extras = 8;
inline int VcfHeader::structured_extras_size() const {
  return structured_extras_.size();
}
inline void VcfHeader::clear_structured_extras() {
  structured_extras_.Clear();
}
inline ::nucleus::genomics::v1::VcfStructuredExtra* VcfHeader::mutable_structured_extras(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfHeader.structured_extras)
  return structured_extras_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfStructuredExtra >*
VcfHeader::mutable_structured_extras() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.VcfHeader.structured_extras)
  return &structured_extras_;
}
inline const ::nucleus::genomics::v1::VcfStructuredExtra& VcfHeader::structured_extras(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfHeader.structured_extras)
  return structured_extras_.Get(index);
}
inline ::nucleus::genomics::v1::VcfStructuredExtra* VcfHeader::add_structured_extras() {
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VcfHeader.structured_extras)
  return structured_extras_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfStructuredExtra >&
VcfHeader::structured_extras() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.VcfHeader.structured_extras)
  return structured_extras_;
}

// repeated .nucleus.genomics.v1.VcfExtra extras = 7;
inline int VcfHeader::extras_size() const {
  return extras_.size();
}
inline void VcfHeader::clear_extras() {
  extras_.Clear();
}
inline ::nucleus::genomics::v1::VcfExtra* VcfHeader::mutable_extras(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfHeader.extras)
  return extras_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfExtra >*
VcfHeader::mutable_extras() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.VcfHeader.extras)
  return &extras_;
}
inline const ::nucleus::genomics::v1::VcfExtra& VcfHeader::extras(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfHeader.extras)
  return extras_.Get(index);
}
inline ::nucleus::genomics::v1::VcfExtra* VcfHeader::add_extras() {
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VcfHeader.extras)
  return extras_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfExtra >&
VcfHeader::extras() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.VcfHeader.extras)
  return extras_;
}

// -------------------------------------------------------------------

// VcfFilterInfo

// string id = 1;
inline void VcfFilterInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VcfFilterInfo::id() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfFilterInfo.id)
  return id_.GetNoArena();
}
inline void VcfFilterInfo::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfFilterInfo.id)
}
inline void VcfFilterInfo::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VcfFilterInfo.id)
}
inline void VcfFilterInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfFilterInfo.id)
}
inline void VcfFilterInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfFilterInfo.id)
}
inline std::string* VcfFilterInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfFilterInfo.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VcfFilterInfo::release_id() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VcfFilterInfo.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VcfFilterInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VcfFilterInfo.id)
}

// string description = 2;
inline void VcfFilterInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VcfFilterInfo::description() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfFilterInfo.description)
  return description_.GetNoArena();
}
inline void VcfFilterInfo::set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfFilterInfo.description)
}
inline void VcfFilterInfo::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VcfFilterInfo.description)
}
inline void VcfFilterInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfFilterInfo.description)
}
inline void VcfFilterInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfFilterInfo.description)
}
inline std::string* VcfFilterInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfFilterInfo.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VcfFilterInfo::release_description() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VcfFilterInfo.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VcfFilterInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VcfFilterInfo.description)
}

// -------------------------------------------------------------------

// VcfInfo

// string id = 1;
inline void VcfInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VcfInfo::id() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfInfo.id)
  return id_.GetNoArena();
}
inline void VcfInfo::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfInfo.id)
}
inline void VcfInfo::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VcfInfo.id)
}
inline void VcfInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfInfo.id)
}
inline void VcfInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfInfo.id)
}
inline std::string* VcfInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfInfo.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VcfInfo::release_id() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VcfInfo.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VcfInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VcfInfo.id)
}

// string number = 2;
inline void VcfInfo::clear_number() {
  number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VcfInfo::number() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfInfo.number)
  return number_.GetNoArena();
}
inline void VcfInfo::set_number(const std::string& value) {
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfInfo.number)
}
inline void VcfInfo::set_number(std::string&& value) {
  
  number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VcfInfo.number)
}
inline void VcfInfo::set_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfInfo.number)
}
inline void VcfInfo::set_number(const char* value, size_t size) {
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfInfo.number)
}
inline std::string* VcfInfo::mutable_number() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfInfo.number)
  return number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VcfInfo::release_number() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VcfInfo.number)
  
  return number_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VcfInfo::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VcfInfo.number)
}

// string type = 3;
inline void VcfInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VcfInfo::type() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfInfo.type)
  return type_.GetNoArena();
}
inline void VcfInfo::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfInfo.type)
}
inline void VcfInfo::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VcfInfo.type)
}
inline void VcfInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfInfo.type)
}
inline void VcfInfo::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfInfo.type)
}
inline std::string* VcfInfo::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfInfo.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VcfInfo::release_type() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VcfInfo.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VcfInfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VcfInfo.type)
}

// string description = 4;
inline void VcfInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VcfInfo::description() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfInfo.description)
  return description_.GetNoArena();
}
inline void VcfInfo::set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfInfo.description)
}
inline void VcfInfo::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VcfInfo.description)
}
inline void VcfInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfInfo.description)
}
inline void VcfInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfInfo.description)
}
inline std::string* VcfInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfInfo.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VcfInfo::release_description() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VcfInfo.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VcfInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VcfInfo.description)
}

// string source = 5;
inline void VcfInfo::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VcfInfo::source() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfInfo.source)
  return source_.GetNoArena();
}
inline void VcfInfo::set_source(const std::string& value) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfInfo.source)
}
inline void VcfInfo::set_source(std::string&& value) {
  
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VcfInfo.source)
}
inline void VcfInfo::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfInfo.source)
}
inline void VcfInfo::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfInfo.source)
}
inline std::string* VcfInfo::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfInfo.source)
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VcfInfo::release_source() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VcfInfo.source)
  
  return source_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VcfInfo::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VcfInfo.source)
}

// string version = 6;
inline void VcfInfo::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VcfInfo::version() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfInfo.version)
  return version_.GetNoArena();
}
inline void VcfInfo::set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfInfo.version)
}
inline void VcfInfo::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VcfInfo.version)
}
inline void VcfInfo::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfInfo.version)
}
inline void VcfInfo::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfInfo.version)
}
inline std::string* VcfInfo::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfInfo.version)
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VcfInfo::release_version() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VcfInfo.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VcfInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VcfInfo.version)
}

// -------------------------------------------------------------------

// VcfFormatInfo

// string id = 1;
inline void VcfFormatInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VcfFormatInfo::id() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfFormatInfo.id)
  return id_.GetNoArena();
}
inline void VcfFormatInfo::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfFormatInfo.id)
}
inline void VcfFormatInfo::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VcfFormatInfo.id)
}
inline void VcfFormatInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfFormatInfo.id)
}
inline void VcfFormatInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfFormatInfo.id)
}
inline std::string* VcfFormatInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfFormatInfo.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VcfFormatInfo::release_id() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VcfFormatInfo.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VcfFormatInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VcfFormatInfo.id)
}

// string number = 2;
inline void VcfFormatInfo::clear_number() {
  number_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VcfFormatInfo::number() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfFormatInfo.number)
  return number_.GetNoArena();
}
inline void VcfFormatInfo::set_number(const std::string& value) {
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfFormatInfo.number)
}
inline void VcfFormatInfo::set_number(std::string&& value) {
  
  number_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VcfFormatInfo.number)
}
inline void VcfFormatInfo::set_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfFormatInfo.number)
}
inline void VcfFormatInfo::set_number(const char* value, size_t size) {
  
  number_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfFormatInfo.number)
}
inline std::string* VcfFormatInfo::mutable_number() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfFormatInfo.number)
  return number_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VcfFormatInfo::release_number() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VcfFormatInfo.number)
  
  return number_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VcfFormatInfo::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VcfFormatInfo.number)
}

// string type = 3;
inline void VcfFormatInfo::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VcfFormatInfo::type() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfFormatInfo.type)
  return type_.GetNoArena();
}
inline void VcfFormatInfo::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfFormatInfo.type)
}
inline void VcfFormatInfo::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VcfFormatInfo.type)
}
inline void VcfFormatInfo::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfFormatInfo.type)
}
inline void VcfFormatInfo::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfFormatInfo.type)
}
inline std::string* VcfFormatInfo::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfFormatInfo.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VcfFormatInfo::release_type() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VcfFormatInfo.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VcfFormatInfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VcfFormatInfo.type)
}

// string description = 4;
inline void VcfFormatInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VcfFormatInfo::description() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfFormatInfo.description)
  return description_.GetNoArena();
}
inline void VcfFormatInfo::set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfFormatInfo.description)
}
inline void VcfFormatInfo::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VcfFormatInfo.description)
}
inline void VcfFormatInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfFormatInfo.description)
}
inline void VcfFormatInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfFormatInfo.description)
}
inline std::string* VcfFormatInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfFormatInfo.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VcfFormatInfo::release_description() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VcfFormatInfo.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VcfFormatInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VcfFormatInfo.description)
}

// -------------------------------------------------------------------

// VcfStructuredExtra

// string key = 1;
inline void VcfStructuredExtra::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VcfStructuredExtra::key() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfStructuredExtra.key)
  return key_.GetNoArena();
}
inline void VcfStructuredExtra::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfStructuredExtra.key)
}
inline void VcfStructuredExtra::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VcfStructuredExtra.key)
}
inline void VcfStructuredExtra::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfStructuredExtra.key)
}
inline void VcfStructuredExtra::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfStructuredExtra.key)
}
inline std::string* VcfStructuredExtra::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfStructuredExtra.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VcfStructuredExtra::release_key() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VcfStructuredExtra.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VcfStructuredExtra::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VcfStructuredExtra.key)
}

// repeated .nucleus.genomics.v1.VcfExtra fields = 2;
inline int VcfStructuredExtra::fields_size() const {
  return fields_.size();
}
inline void VcfStructuredExtra::clear_fields() {
  fields_.Clear();
}
inline ::nucleus::genomics::v1::VcfExtra* VcfStructuredExtra::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfStructuredExtra.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfExtra >*
VcfStructuredExtra::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.VcfStructuredExtra.fields)
  return &fields_;
}
inline const ::nucleus::genomics::v1::VcfExtra& VcfStructuredExtra::fields(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfStructuredExtra.fields)
  return fields_.Get(index);
}
inline ::nucleus::genomics::v1::VcfExtra* VcfStructuredExtra::add_fields() {
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VcfStructuredExtra.fields)
  return fields_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::VcfExtra >&
VcfStructuredExtra::fields() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.VcfStructuredExtra.fields)
  return fields_;
}

// -------------------------------------------------------------------

// VcfExtra

// string key = 1;
inline void VcfExtra::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VcfExtra::key() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfExtra.key)
  return key_.GetNoArena();
}
inline void VcfExtra::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfExtra.key)
}
inline void VcfExtra::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VcfExtra.key)
}
inline void VcfExtra::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfExtra.key)
}
inline void VcfExtra::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfExtra.key)
}
inline std::string* VcfExtra::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfExtra.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VcfExtra::release_key() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VcfExtra.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VcfExtra::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VcfExtra.key)
}

// string value = 2;
inline void VcfExtra::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VcfExtra::value() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfExtra.value)
  return value_.GetNoArena();
}
inline void VcfExtra::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfExtra.value)
}
inline void VcfExtra::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.VcfExtra.value)
}
inline void VcfExtra::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfExtra.value)
}
inline void VcfExtra::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfExtra.value)
}
inline std::string* VcfExtra::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfExtra.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VcfExtra::release_value() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.VcfExtra.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VcfExtra::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.VcfExtra.value)
}

// -------------------------------------------------------------------

// VcfReaderOptions

// repeated string excluded_info_fields = 3;
inline int VcfReaderOptions::excluded_info_fields_size() const {
  return excluded_info_fields_.size();
}
inline void VcfReaderOptions::clear_excluded_info_fields() {
  excluded_info_fields_.Clear();
}
inline const std::string& VcfReaderOptions::excluded_info_fields(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfReaderOptions.excluded_info_fields)
  return excluded_info_fields_.Get(index);
}
inline std::string* VcfReaderOptions::mutable_excluded_info_fields(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfReaderOptions.excluded_info_fields)
  return excluded_info_fields_.Mutable(index);
}
inline void VcfReaderOptions::set_excluded_info_fields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfReaderOptions.excluded_info_fields)
  excluded_info_fields_.Mutable(index)->assign(value);
}
inline void VcfReaderOptions::set_excluded_info_fields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfReaderOptions.excluded_info_fields)
  excluded_info_fields_.Mutable(index)->assign(std::move(value));
}
inline void VcfReaderOptions::set_excluded_info_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excluded_info_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfReaderOptions.excluded_info_fields)
}
inline void VcfReaderOptions::set_excluded_info_fields(int index, const char* value, size_t size) {
  excluded_info_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfReaderOptions.excluded_info_fields)
}
inline std::string* VcfReaderOptions::add_excluded_info_fields() {
  // @@protoc_insertion_point(field_add_mutable:nucleus.genomics.v1.VcfReaderOptions.excluded_info_fields)
  return excluded_info_fields_.Add();
}
inline void VcfReaderOptions::add_excluded_info_fields(const std::string& value) {
  excluded_info_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VcfReaderOptions.excluded_info_fields)
}
inline void VcfReaderOptions::add_excluded_info_fields(std::string&& value) {
  excluded_info_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VcfReaderOptions.excluded_info_fields)
}
inline void VcfReaderOptions::add_excluded_info_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excluded_info_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nucleus.genomics.v1.VcfReaderOptions.excluded_info_fields)
}
inline void VcfReaderOptions::add_excluded_info_fields(const char* value, size_t size) {
  excluded_info_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nucleus.genomics.v1.VcfReaderOptions.excluded_info_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VcfReaderOptions::excluded_info_fields() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.VcfReaderOptions.excluded_info_fields)
  return excluded_info_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VcfReaderOptions::mutable_excluded_info_fields() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.VcfReaderOptions.excluded_info_fields)
  return &excluded_info_fields_;
}

// repeated string excluded_format_fields = 4;
inline int VcfReaderOptions::excluded_format_fields_size() const {
  return excluded_format_fields_.size();
}
inline void VcfReaderOptions::clear_excluded_format_fields() {
  excluded_format_fields_.Clear();
}
inline const std::string& VcfReaderOptions::excluded_format_fields(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfReaderOptions.excluded_format_fields)
  return excluded_format_fields_.Get(index);
}
inline std::string* VcfReaderOptions::mutable_excluded_format_fields(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfReaderOptions.excluded_format_fields)
  return excluded_format_fields_.Mutable(index);
}
inline void VcfReaderOptions::set_excluded_format_fields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfReaderOptions.excluded_format_fields)
  excluded_format_fields_.Mutable(index)->assign(value);
}
inline void VcfReaderOptions::set_excluded_format_fields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfReaderOptions.excluded_format_fields)
  excluded_format_fields_.Mutable(index)->assign(std::move(value));
}
inline void VcfReaderOptions::set_excluded_format_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excluded_format_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfReaderOptions.excluded_format_fields)
}
inline void VcfReaderOptions::set_excluded_format_fields(int index, const char* value, size_t size) {
  excluded_format_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfReaderOptions.excluded_format_fields)
}
inline std::string* VcfReaderOptions::add_excluded_format_fields() {
  // @@protoc_insertion_point(field_add_mutable:nucleus.genomics.v1.VcfReaderOptions.excluded_format_fields)
  return excluded_format_fields_.Add();
}
inline void VcfReaderOptions::add_excluded_format_fields(const std::string& value) {
  excluded_format_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VcfReaderOptions.excluded_format_fields)
}
inline void VcfReaderOptions::add_excluded_format_fields(std::string&& value) {
  excluded_format_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VcfReaderOptions.excluded_format_fields)
}
inline void VcfReaderOptions::add_excluded_format_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excluded_format_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nucleus.genomics.v1.VcfReaderOptions.excluded_format_fields)
}
inline void VcfReaderOptions::add_excluded_format_fields(const char* value, size_t size) {
  excluded_format_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nucleus.genomics.v1.VcfReaderOptions.excluded_format_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VcfReaderOptions::excluded_format_fields() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.VcfReaderOptions.excluded_format_fields)
  return excluded_format_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VcfReaderOptions::mutable_excluded_format_fields() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.VcfReaderOptions.excluded_format_fields)
  return &excluded_format_fields_;
}

// bool store_gl_and_pl_in_info_map = 5;
inline void VcfReaderOptions::clear_store_gl_and_pl_in_info_map() {
  store_gl_and_pl_in_info_map_ = false;
}
inline bool VcfReaderOptions::store_gl_and_pl_in_info_map() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfReaderOptions.store_gl_and_pl_in_info_map)
  return store_gl_and_pl_in_info_map_;
}
inline void VcfReaderOptions::set_store_gl_and_pl_in_info_map(bool value) {
  
  store_gl_and_pl_in_info_map_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfReaderOptions.store_gl_and_pl_in_info_map)
}

// -------------------------------------------------------------------

// VcfWriterOptions

// repeated string excluded_info_fields = 7;
inline int VcfWriterOptions::excluded_info_fields_size() const {
  return excluded_info_fields_.size();
}
inline void VcfWriterOptions::clear_excluded_info_fields() {
  excluded_info_fields_.Clear();
}
inline const std::string& VcfWriterOptions::excluded_info_fields(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfWriterOptions.excluded_info_fields)
  return excluded_info_fields_.Get(index);
}
inline std::string* VcfWriterOptions::mutable_excluded_info_fields(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfWriterOptions.excluded_info_fields)
  return excluded_info_fields_.Mutable(index);
}
inline void VcfWriterOptions::set_excluded_info_fields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfWriterOptions.excluded_info_fields)
  excluded_info_fields_.Mutable(index)->assign(value);
}
inline void VcfWriterOptions::set_excluded_info_fields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfWriterOptions.excluded_info_fields)
  excluded_info_fields_.Mutable(index)->assign(std::move(value));
}
inline void VcfWriterOptions::set_excluded_info_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excluded_info_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfWriterOptions.excluded_info_fields)
}
inline void VcfWriterOptions::set_excluded_info_fields(int index, const char* value, size_t size) {
  excluded_info_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfWriterOptions.excluded_info_fields)
}
inline std::string* VcfWriterOptions::add_excluded_info_fields() {
  // @@protoc_insertion_point(field_add_mutable:nucleus.genomics.v1.VcfWriterOptions.excluded_info_fields)
  return excluded_info_fields_.Add();
}
inline void VcfWriterOptions::add_excluded_info_fields(const std::string& value) {
  excluded_info_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VcfWriterOptions.excluded_info_fields)
}
inline void VcfWriterOptions::add_excluded_info_fields(std::string&& value) {
  excluded_info_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VcfWriterOptions.excluded_info_fields)
}
inline void VcfWriterOptions::add_excluded_info_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excluded_info_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nucleus.genomics.v1.VcfWriterOptions.excluded_info_fields)
}
inline void VcfWriterOptions::add_excluded_info_fields(const char* value, size_t size) {
  excluded_info_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nucleus.genomics.v1.VcfWriterOptions.excluded_info_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VcfWriterOptions::excluded_info_fields() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.VcfWriterOptions.excluded_info_fields)
  return excluded_info_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VcfWriterOptions::mutable_excluded_info_fields() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.VcfWriterOptions.excluded_info_fields)
  return &excluded_info_fields_;
}

// repeated string excluded_format_fields = 8;
inline int VcfWriterOptions::excluded_format_fields_size() const {
  return excluded_format_fields_.size();
}
inline void VcfWriterOptions::clear_excluded_format_fields() {
  excluded_format_fields_.Clear();
}
inline const std::string& VcfWriterOptions::excluded_format_fields(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfWriterOptions.excluded_format_fields)
  return excluded_format_fields_.Get(index);
}
inline std::string* VcfWriterOptions::mutable_excluded_format_fields(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.VcfWriterOptions.excluded_format_fields)
  return excluded_format_fields_.Mutable(index);
}
inline void VcfWriterOptions::set_excluded_format_fields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfWriterOptions.excluded_format_fields)
  excluded_format_fields_.Mutable(index)->assign(value);
}
inline void VcfWriterOptions::set_excluded_format_fields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfWriterOptions.excluded_format_fields)
  excluded_format_fields_.Mutable(index)->assign(std::move(value));
}
inline void VcfWriterOptions::set_excluded_format_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excluded_format_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.VcfWriterOptions.excluded_format_fields)
}
inline void VcfWriterOptions::set_excluded_format_fields(int index, const char* value, size_t size) {
  excluded_format_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.VcfWriterOptions.excluded_format_fields)
}
inline std::string* VcfWriterOptions::add_excluded_format_fields() {
  // @@protoc_insertion_point(field_add_mutable:nucleus.genomics.v1.VcfWriterOptions.excluded_format_fields)
  return excluded_format_fields_.Add();
}
inline void VcfWriterOptions::add_excluded_format_fields(const std::string& value) {
  excluded_format_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VcfWriterOptions.excluded_format_fields)
}
inline void VcfWriterOptions::add_excluded_format_fields(std::string&& value) {
  excluded_format_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.VcfWriterOptions.excluded_format_fields)
}
inline void VcfWriterOptions::add_excluded_format_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  excluded_format_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nucleus.genomics.v1.VcfWriterOptions.excluded_format_fields)
}
inline void VcfWriterOptions::add_excluded_format_fields(const char* value, size_t size) {
  excluded_format_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nucleus.genomics.v1.VcfWriterOptions.excluded_format_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VcfWriterOptions::excluded_format_fields() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.VcfWriterOptions.excluded_format_fields)
  return excluded_format_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VcfWriterOptions::mutable_excluded_format_fields() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.VcfWriterOptions.excluded_format_fields)
  return &excluded_format_fields_;
}

// bool round_qual_values = 6;
inline void VcfWriterOptions::clear_round_qual_values() {
  round_qual_values_ = false;
}
inline bool VcfWriterOptions::round_qual_values() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfWriterOptions.round_qual_values)
  return round_qual_values_;
}
inline void VcfWriterOptions::set_round_qual_values(bool value) {
  
  round_qual_values_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfWriterOptions.round_qual_values)
}

// bool retrieve_gl_and_pl_from_info_map = 9;
inline void VcfWriterOptions::clear_retrieve_gl_and_pl_from_info_map() {
  retrieve_gl_and_pl_from_info_map_ = false;
}
inline bool VcfWriterOptions::retrieve_gl_and_pl_from_info_map() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfWriterOptions.retrieve_gl_and_pl_from_info_map)
  return retrieve_gl_and_pl_from_info_map_;
}
inline void VcfWriterOptions::set_retrieve_gl_and_pl_from_info_map(bool value) {
  
  retrieve_gl_and_pl_from_info_map_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfWriterOptions.retrieve_gl_and_pl_from_info_map)
}

// bool exclude_header = 10;
inline void VcfWriterOptions::clear_exclude_header() {
  exclude_header_ = false;
}
inline bool VcfWriterOptions::exclude_header() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.VcfWriterOptions.exclude_header)
  return exclude_header_;
}
inline void VcfWriterOptions::set_exclude_header(bool value) {
  
  exclude_header_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.VcfWriterOptions.exclude_header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace genomics
}  // namespace nucleus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2fvariants_2eproto
