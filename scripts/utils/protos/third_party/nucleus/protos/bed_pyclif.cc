//////////////////////////////////////////////////////////////////////
// This file was automatically generated by PyCLIF.
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: third_party/nucleus/protos/bed.proto

#include "clif/python/runtime.h"
#include "clif/python/types.h"
#include "third_party/nucleus/protos/bed_pyclif.h"

namespace nucleus { namespace genomics { namespace v1 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// BedRecord to/from ::nucleus::genomics::v1::BedRecord conversion

bool Clif_PyObjAs(PyObject* py, ::nucleus::genomics::v1::BedRecord* c) {
  CHECK(c != nullptr);
  PyObject* type = ImportFQName("third_party.nucleus.protos.bed_pb2.BedRecord");
  if (!::clif::proto::TypeCheck(py, type, "", "BedRecord") ) {
    return ::clif::proto::InGeneratedPool(py, c);
  }
  if (const proto2::Message* cpb = ::clif::proto::GetCProto(py)) {
    c->CopyFrom(*cpb);
    return true;
  }
  PyObject* ser = ::clif::proto::Serialize(py);
  if (ser == nullptr) return false;
  bool ok = c->ParsePartialFromArray(PyBytes_AS_STRING(ser), static_cast<int>(PyBytes_GET_SIZE(ser)));
  Py_DECREF(ser);
  if (!ok) PyErr_SetString(PyExc_ValueError, "Serialized bytes can't be parsed into C++ proto");
  return ok;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::nucleus::genomics::v1::BedRecord>* c) {
  CHECK(c != nullptr);
  if (!*c) c->reset(new ::nucleus::genomics::v1::BedRecord);
  return Clif_PyObjAs(py, c->get());
}

PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::BedRecord& c, py::PostConv) {
  PyObject* type = ImportFQName("third_party.nucleus.protos.bed_pb2.BedRecord");
  return ::clif::proto::PyProtoFrom(&c, type, "");
}

PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::BedRecord> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.bed_pb2.BedRecord");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::BedRecord> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.bed_pb2.BedRecord");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

// BedHeader to/from ::nucleus::genomics::v1::BedHeader conversion

bool Clif_PyObjAs(PyObject* py, ::nucleus::genomics::v1::BedHeader* c) {
  CHECK(c != nullptr);
  PyObject* type = ImportFQName("third_party.nucleus.protos.bed_pb2.BedHeader");
  if (!::clif::proto::TypeCheck(py, type, "", "BedHeader") ) {
    return ::clif::proto::InGeneratedPool(py, c);
  }
  if (const proto2::Message* cpb = ::clif::proto::GetCProto(py)) {
    c->CopyFrom(*cpb);
    return true;
  }
  PyObject* ser = ::clif::proto::Serialize(py);
  if (ser == nullptr) return false;
  bool ok = c->ParsePartialFromArray(PyBytes_AS_STRING(ser), static_cast<int>(PyBytes_GET_SIZE(ser)));
  Py_DECREF(ser);
  if (!ok) PyErr_SetString(PyExc_ValueError, "Serialized bytes can't be parsed into C++ proto");
  return ok;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::nucleus::genomics::v1::BedHeader>* c) {
  CHECK(c != nullptr);
  if (!*c) c->reset(new ::nucleus::genomics::v1::BedHeader);
  return Clif_PyObjAs(py, c->get());
}

PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::BedHeader& c, py::PostConv) {
  PyObject* type = ImportFQName("third_party.nucleus.protos.bed_pb2.BedHeader");
  return ::clif::proto::PyProtoFrom(&c, type, "");
}

PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::BedHeader> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.bed_pb2.BedHeader");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::BedHeader> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.bed_pb2.BedHeader");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

// BedReaderOptions to/from ::nucleus::genomics::v1::BedReaderOptions conversion

bool Clif_PyObjAs(PyObject* py, ::nucleus::genomics::v1::BedReaderOptions* c) {
  CHECK(c != nullptr);
  PyObject* type = ImportFQName("third_party.nucleus.protos.bed_pb2.BedReaderOptions");
  if (!::clif::proto::TypeCheck(py, type, "", "BedReaderOptions") ) {
    return ::clif::proto::InGeneratedPool(py, c);
  }
  if (const proto2::Message* cpb = ::clif::proto::GetCProto(py)) {
    c->CopyFrom(*cpb);
    return true;
  }
  PyObject* ser = ::clif::proto::Serialize(py);
  if (ser == nullptr) return false;
  bool ok = c->ParsePartialFromArray(PyBytes_AS_STRING(ser), static_cast<int>(PyBytes_GET_SIZE(ser)));
  Py_DECREF(ser);
  if (!ok) PyErr_SetString(PyExc_ValueError, "Serialized bytes can't be parsed into C++ proto");
  return ok;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::nucleus::genomics::v1::BedReaderOptions>* c) {
  CHECK(c != nullptr);
  if (!*c) c->reset(new ::nucleus::genomics::v1::BedReaderOptions);
  return Clif_PyObjAs(py, c->get());
}

PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::BedReaderOptions& c, py::PostConv) {
  PyObject* type = ImportFQName("third_party.nucleus.protos.bed_pb2.BedReaderOptions");
  return ::clif::proto::PyProtoFrom(&c, type, "");
}

PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::BedReaderOptions> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.bed_pb2.BedReaderOptions");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::BedReaderOptions> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.bed_pb2.BedReaderOptions");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

// BedWriterOptions to/from ::nucleus::genomics::v1::BedWriterOptions conversion

bool Clif_PyObjAs(PyObject* py, ::nucleus::genomics::v1::BedWriterOptions* c) {
  CHECK(c != nullptr);
  PyObject* type = ImportFQName("third_party.nucleus.protos.bed_pb2.BedWriterOptions");
  if (!::clif::proto::TypeCheck(py, type, "", "BedWriterOptions") ) {
    return ::clif::proto::InGeneratedPool(py, c);
  }
  if (const proto2::Message* cpb = ::clif::proto::GetCProto(py)) {
    c->CopyFrom(*cpb);
    return true;
  }
  PyObject* ser = ::clif::proto::Serialize(py);
  if (ser == nullptr) return false;
  bool ok = c->ParsePartialFromArray(PyBytes_AS_STRING(ser), static_cast<int>(PyBytes_GET_SIZE(ser)));
  Py_DECREF(ser);
  if (!ok) PyErr_SetString(PyExc_ValueError, "Serialized bytes can't be parsed into C++ proto");
  return ok;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::nucleus::genomics::v1::BedWriterOptions>* c) {
  CHECK(c != nullptr);
  if (!*c) c->reset(new ::nucleus::genomics::v1::BedWriterOptions);
  return Clif_PyObjAs(py, c->get());
}

PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::BedWriterOptions& c, py::PostConv) {
  PyObject* type = ImportFQName("third_party.nucleus.protos.bed_pb2.BedWriterOptions");
  return ::clif::proto::PyProtoFrom(&c, type, "");
}

PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::BedWriterOptions> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.bed_pb2.BedWriterOptions");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::BedWriterOptions> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.bed_pb2.BedWriterOptions");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

// BedRecord.Strand to/from enum ::nucleus::genomics::v1::BedRecord::Strand conversion
bool Clif_PyObjAs(PyObject* py, ::nucleus::genomics::v1::BedRecord::Strand* c) {
  CHECK(c != nullptr);
  int v;
  if (!Clif_PyObjAs(py, &v)) return false;
  *c = static_cast<::nucleus::genomics::v1::BedRecord::Strand>(v);
  return true;
}
PyObject* Clif_PyObjFrom(::nucleus::genomics::v1::BedRecord::Strand c, py::PostConv pc) {
  return Clif_PyObjFrom(static_cast<int>(c), pc);
}

} } }  // namespace nucleus::genomics::v1
