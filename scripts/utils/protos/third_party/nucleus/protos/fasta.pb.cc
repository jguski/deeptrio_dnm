// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: third_party/nucleus/protos/fasta.proto

#include "third_party/nucleus/protos/fasta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2freference_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContigInfo_third_5fparty_2fnucleus_2fprotos_2freference_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2frange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Range_third_5fparty_2fnucleus_2fprotos_2frange_2eproto;
namespace nucleus {
namespace genomics {
namespace v1 {
class FastaRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastaRecord> _instance;
} _FastaRecord_default_instance_;
class FastaReaderOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastaReaderOptions> _instance;
} _FastaReaderOptions_default_instance_;
class FastaWriterOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastaWriterOptions> _instance;
} _FastaWriterOptions_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
static void InitDefaultsscc_info_FastaReaderOptions_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_FastaReaderOptions_default_instance_;
    new (ptr) ::nucleus::genomics::v1::FastaReaderOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::FastaReaderOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FastaReaderOptions_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FastaReaderOptions_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto}, {}};

static void InitDefaultsscc_info_FastaRecord_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_FastaRecord_default_instance_;
    new (ptr) ::nucleus::genomics::v1::FastaRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::FastaRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FastaRecord_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_FastaRecord_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto}, {
      &scc_info_ContigInfo_third_5fparty_2fnucleus_2fprotos_2freference_2eproto.base,
      &scc_info_Range_third_5fparty_2fnucleus_2fprotos_2frange_2eproto.base,}};

static void InitDefaultsscc_info_FastaWriterOptions_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_FastaWriterOptions_default_instance_;
    new (ptr) ::nucleus::genomics::v1::FastaWriterOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::FastaWriterOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FastaWriterOptions_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FastaWriterOptions_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastaRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastaRecord, defline_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastaRecord, contig_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastaRecord, region_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastaRecord, sequence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastaReaderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastaReaderOptions, keep_true_case_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastaReaderOptions, alphabet_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastaReaderOptions, defline_parsing_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastaReaderOptions, include_range_in_records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastaWriterOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nucleus::genomics::v1::FastaRecord)},
  { 9, -1, sizeof(::nucleus::genomics::v1::FastaReaderOptions)},
  { 18, -1, sizeof(::nucleus::genomics::v1::FastaWriterOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_FastaRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_FastaReaderOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_FastaWriterOptions_default_instance_),
};

const char descriptor_table_protodef_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&third_party/nucleus/protos/fasta.proto"
  "\022\023nucleus.genomics.v1\032&third_party/nucle"
  "us/protos/range.proto\032*third_party/nucle"
  "us/protos/reference.proto\"\215\001\n\013FastaRecor"
  "d\022\017\n\007defline\030\001 \001(\t\022/\n\006contig\030\002 \001(\0132\037.nuc"
  "leus.genomics.v1.ContigInfo\022*\n\006region\030\003 "
  "\001(\0132\032.nucleus.genomics.v1.Range\022\020\n\010seque"
  "nce\030\004 \001(\t\"\336\001\n\022FastaReaderOptions\022\026\n\016keep"
  "_true_case\030\001 \001(\010\022\020\n\010alphabet\030\002 \001(\t\022O\n\017de"
  "fline_parsing\030\003 \001(\01626.nucleus.genomics.v"
  "1.FastaReaderOptions.DeflineParsing\022 \n\030i"
  "nclude_range_in_records\030\004 \001(\010\"+\n\016Defline"
  "Parsing\022\010\n\004NONE\020\000\022\017\n\013CONTIG_INFO\020\001\"\024\n\022Fa"
  "staWriterOptionsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto_deps[2] = {
  &::descriptor_table_third_5fparty_2fnucleus_2fprotos_2frange_2eproto,
  &::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freference_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto_sccs[3] = {
  &scc_info_FastaReaderOptions_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto.base,
  &scc_info_FastaRecord_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto.base,
  &scc_info_FastaWriterOptions_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto_once;
static bool descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto = {
  &descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto_initialized, descriptor_table_protodef_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto, "third_party/nucleus/protos/fasta.proto", 544,
  &descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto_once, descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto_sccs, descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto::offsets,
  file_level_metadata_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto, 3, file_level_enum_descriptors_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto, file_level_service_descriptors_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto), true);
namespace nucleus {
namespace genomics {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FastaReaderOptions_DeflineParsing_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto);
  return file_level_enum_descriptors_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto[0];
}
bool FastaReaderOptions_DeflineParsing_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FastaReaderOptions_DeflineParsing FastaReaderOptions::NONE;
constexpr FastaReaderOptions_DeflineParsing FastaReaderOptions::CONTIG_INFO;
constexpr FastaReaderOptions_DeflineParsing FastaReaderOptions::DeflineParsing_MIN;
constexpr FastaReaderOptions_DeflineParsing FastaReaderOptions::DeflineParsing_MAX;
constexpr int FastaReaderOptions::DeflineParsing_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void FastaRecord::InitAsDefaultInstance() {
  ::nucleus::genomics::v1::_FastaRecord_default_instance_._instance.get_mutable()->contig_ = const_cast< ::nucleus::genomics::v1::ContigInfo*>(
      ::nucleus::genomics::v1::ContigInfo::internal_default_instance());
  ::nucleus::genomics::v1::_FastaRecord_default_instance_._instance.get_mutable()->region_ = const_cast< ::nucleus::genomics::v1::Range*>(
      ::nucleus::genomics::v1::Range::internal_default_instance());
}
class FastaRecord::_Internal {
 public:
  static const ::nucleus::genomics::v1::ContigInfo& contig(const FastaRecord* msg);
  static const ::nucleus::genomics::v1::Range& region(const FastaRecord* msg);
};

const ::nucleus::genomics::v1::ContigInfo&
FastaRecord::_Internal::contig(const FastaRecord* msg) {
  return *msg->contig_;
}
const ::nucleus::genomics::v1::Range&
FastaRecord::_Internal::region(const FastaRecord* msg) {
  return *msg->region_;
}
void FastaRecord::clear_contig() {
  if (GetArenaNoVirtual() == nullptr && contig_ != nullptr) {
    delete contig_;
  }
  contig_ = nullptr;
}
void FastaRecord::clear_region() {
  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
}
FastaRecord::FastaRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.FastaRecord)
}
FastaRecord::FastaRecord(const FastaRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  defline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.defline().empty()) {
    defline_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.defline_);
  }
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sequence().empty()) {
    sequence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  if (from.has_contig()) {
    contig_ = new ::nucleus::genomics::v1::ContigInfo(*from.contig_);
  } else {
    contig_ = nullptr;
  }
  if (from.has_region()) {
    region_ = new ::nucleus::genomics::v1::Range(*from.region_);
  } else {
    region_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.FastaRecord)
}

void FastaRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastaRecord_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto.base);
  defline_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&contig_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_) -
      reinterpret_cast<char*>(&contig_)) + sizeof(region_));
}

FastaRecord::~FastaRecord() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.FastaRecord)
  SharedDtor();
}

void FastaRecord::SharedDtor() {
  defline_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete contig_;
  if (this != internal_default_instance()) delete region_;
}

void FastaRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastaRecord& FastaRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastaRecord_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto.base);
  return *internal_default_instance();
}


void FastaRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.FastaRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  defline_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && contig_ != nullptr) {
    delete contig_;
  }
  contig_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FastaRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string defline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_defline(), ptr, ctx, "nucleus.genomics.v1.FastaRecord.defline");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nucleus.genomics.v1.ContigInfo contig = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_contig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nucleus.genomics.v1.Range region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sequence(), ptr, ctx, "nucleus.genomics.v1.FastaRecord.sequence");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FastaRecord::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.FastaRecord)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string defline = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_defline()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->defline().data(), static_cast<int>(this->defline().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.FastaRecord.defline"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nucleus.genomics.v1.ContigInfo contig = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_contig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nucleus.genomics.v1.Range region = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_region()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sequence = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), static_cast<int>(this->sequence().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.FastaRecord.sequence"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.FastaRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.FastaRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FastaRecord::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.FastaRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string defline = 1;
  if (this->defline().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->defline().data(), static_cast<int>(this->defline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.FastaRecord.defline");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->defline(), output);
  }

  // .nucleus.genomics.v1.ContigInfo contig = 2;
  if (this->has_contig()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::contig(this), output);
  }

  // .nucleus.genomics.v1.Range region = 3;
  if (this->has_region()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::region(this), output);
  }

  // string sequence = 4;
  if (this->sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.FastaRecord.sequence");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sequence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.FastaRecord)
}

::PROTOBUF_NAMESPACE_ID::uint8* FastaRecord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.FastaRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string defline = 1;
  if (this->defline().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->defline().data(), static_cast<int>(this->defline().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.FastaRecord.defline");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->defline(), target);
  }

  // .nucleus.genomics.v1.ContigInfo contig = 2;
  if (this->has_contig()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::contig(this), target);
  }

  // .nucleus.genomics.v1.Range region = 3;
  if (this->has_region()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::region(this), target);
  }

  // string sequence = 4;
  if (this->sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.FastaRecord.sequence");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->sequence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.FastaRecord)
  return target;
}

size_t FastaRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.FastaRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string defline = 1;
  if (this->defline().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->defline());
  }

  // string sequence = 4;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // .nucleus.genomics.v1.ContigInfo contig = 2;
  if (this->has_contig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *contig_);
  }

  // .nucleus.genomics.v1.Range region = 3;
  if (this->has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastaRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.FastaRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const FastaRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastaRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.FastaRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.FastaRecord)
    MergeFrom(*source);
  }
}

void FastaRecord::MergeFrom(const FastaRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.FastaRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.defline().size() > 0) {

    defline_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.defline_);
  }
  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  if (from.has_contig()) {
    mutable_contig()->::nucleus::genomics::v1::ContigInfo::MergeFrom(from.contig());
  }
  if (from.has_region()) {
    mutable_region()->::nucleus::genomics::v1::Range::MergeFrom(from.region());
  }
}

void FastaRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.FastaRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastaRecord::CopyFrom(const FastaRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.FastaRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastaRecord::IsInitialized() const {
  return true;
}

void FastaRecord::InternalSwap(FastaRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  defline_.Swap(&other->defline_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sequence_.Swap(&other->sequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(contig_, other->contig_);
  swap(region_, other->region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastaRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FastaReaderOptions::InitAsDefaultInstance() {
}
class FastaReaderOptions::_Internal {
 public:
};

FastaReaderOptions::FastaReaderOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.FastaReaderOptions)
}
FastaReaderOptions::FastaReaderOptions(const FastaReaderOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alphabet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.alphabet().empty()) {
    alphabet_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.alphabet_);
  }
  ::memcpy(&keep_true_case_, &from.keep_true_case_,
    static_cast<size_t>(reinterpret_cast<char*>(&defline_parsing_) -
    reinterpret_cast<char*>(&keep_true_case_)) + sizeof(defline_parsing_));
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.FastaReaderOptions)
}

void FastaReaderOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastaReaderOptions_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto.base);
  alphabet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&keep_true_case_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&defline_parsing_) -
      reinterpret_cast<char*>(&keep_true_case_)) + sizeof(defline_parsing_));
}

FastaReaderOptions::~FastaReaderOptions() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.FastaReaderOptions)
  SharedDtor();
}

void FastaReaderOptions::SharedDtor() {
  alphabet_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FastaReaderOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastaReaderOptions& FastaReaderOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastaReaderOptions_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto.base);
  return *internal_default_instance();
}


void FastaReaderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.FastaReaderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alphabet_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&keep_true_case_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&defline_parsing_) -
      reinterpret_cast<char*>(&keep_true_case_)) + sizeof(defline_parsing_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FastaReaderOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool keep_true_case = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          keep_true_case_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alphabet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_alphabet(), ptr, ctx, "nucleus.genomics.v1.FastaReaderOptions.alphabet");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nucleus.genomics.v1.FastaReaderOptions.DeflineParsing defline_parsing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_defline_parsing(static_cast<::nucleus::genomics::v1::FastaReaderOptions_DeflineParsing>(val));
        } else goto handle_unusual;
        continue;
      // bool include_range_in_records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          include_range_in_records_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FastaReaderOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.FastaReaderOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool keep_true_case = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_true_case_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string alphabet = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_alphabet()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->alphabet().data(), static_cast<int>(this->alphabet().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.FastaReaderOptions.alphabet"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nucleus.genomics.v1.FastaReaderOptions.DeflineParsing defline_parsing = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_defline_parsing(static_cast< ::nucleus::genomics::v1::FastaReaderOptions_DeflineParsing >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool include_range_in_records = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_range_in_records_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.FastaReaderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.FastaReaderOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FastaReaderOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.FastaReaderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool keep_true_case = 1;
  if (this->keep_true_case() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->keep_true_case(), output);
  }

  // string alphabet = 2;
  if (this->alphabet().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->alphabet().data(), static_cast<int>(this->alphabet().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.FastaReaderOptions.alphabet");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->alphabet(), output);
  }

  // .nucleus.genomics.v1.FastaReaderOptions.DeflineParsing defline_parsing = 3;
  if (this->defline_parsing() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->defline_parsing(), output);
  }

  // bool include_range_in_records = 4;
  if (this->include_range_in_records() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->include_range_in_records(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.FastaReaderOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* FastaReaderOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.FastaReaderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool keep_true_case = 1;
  if (this->keep_true_case() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->keep_true_case(), target);
  }

  // string alphabet = 2;
  if (this->alphabet().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->alphabet().data(), static_cast<int>(this->alphabet().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.FastaReaderOptions.alphabet");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->alphabet(), target);
  }

  // .nucleus.genomics.v1.FastaReaderOptions.DeflineParsing defline_parsing = 3;
  if (this->defline_parsing() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->defline_parsing(), target);
  }

  // bool include_range_in_records = 4;
  if (this->include_range_in_records() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->include_range_in_records(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.FastaReaderOptions)
  return target;
}

size_t FastaReaderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.FastaReaderOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string alphabet = 2;
  if (this->alphabet().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->alphabet());
  }

  // bool keep_true_case = 1;
  if (this->keep_true_case() != 0) {
    total_size += 1 + 1;
  }

  // bool include_range_in_records = 4;
  if (this->include_range_in_records() != 0) {
    total_size += 1 + 1;
  }

  // .nucleus.genomics.v1.FastaReaderOptions.DeflineParsing defline_parsing = 3;
  if (this->defline_parsing() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->defline_parsing());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastaReaderOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.FastaReaderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const FastaReaderOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastaReaderOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.FastaReaderOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.FastaReaderOptions)
    MergeFrom(*source);
  }
}

void FastaReaderOptions::MergeFrom(const FastaReaderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.FastaReaderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alphabet().size() > 0) {

    alphabet_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.alphabet_);
  }
  if (from.keep_true_case() != 0) {
    set_keep_true_case(from.keep_true_case());
  }
  if (from.include_range_in_records() != 0) {
    set_include_range_in_records(from.include_range_in_records());
  }
  if (from.defline_parsing() != 0) {
    set_defline_parsing(from.defline_parsing());
  }
}

void FastaReaderOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.FastaReaderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastaReaderOptions::CopyFrom(const FastaReaderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.FastaReaderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastaReaderOptions::IsInitialized() const {
  return true;
}

void FastaReaderOptions::InternalSwap(FastaReaderOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  alphabet_.Swap(&other->alphabet_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(keep_true_case_, other->keep_true_case_);
  swap(include_range_in_records_, other->include_range_in_records_);
  swap(defline_parsing_, other->defline_parsing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastaReaderOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FastaWriterOptions::InitAsDefaultInstance() {
}
class FastaWriterOptions::_Internal {
 public:
};

FastaWriterOptions::FastaWriterOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.FastaWriterOptions)
}
FastaWriterOptions::FastaWriterOptions(const FastaWriterOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.FastaWriterOptions)
}

void FastaWriterOptions::SharedCtor() {
}

FastaWriterOptions::~FastaWriterOptions() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.FastaWriterOptions)
  SharedDtor();
}

void FastaWriterOptions::SharedDtor() {
}

void FastaWriterOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastaWriterOptions& FastaWriterOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastaWriterOptions_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto.base);
  return *internal_default_instance();
}


void FastaWriterOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.FastaWriterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FastaWriterOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FastaWriterOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.FastaWriterOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.FastaWriterOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.FastaWriterOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FastaWriterOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.FastaWriterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.FastaWriterOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* FastaWriterOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.FastaWriterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.FastaWriterOptions)
  return target;
}

size_t FastaWriterOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.FastaWriterOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastaWriterOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.FastaWriterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const FastaWriterOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastaWriterOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.FastaWriterOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.FastaWriterOptions)
    MergeFrom(*source);
  }
}

void FastaWriterOptions::MergeFrom(const FastaWriterOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.FastaWriterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FastaWriterOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.FastaWriterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastaWriterOptions::CopyFrom(const FastaWriterOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.FastaWriterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastaWriterOptions::IsInitialized() const {
  return true;
}

void FastaWriterOptions::InternalSwap(FastaWriterOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastaWriterOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::FastaRecord* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::FastaRecord >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::FastaRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::FastaReaderOptions* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::FastaReaderOptions >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::FastaReaderOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::FastaWriterOptions* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::FastaWriterOptions >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::FastaWriterOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
