//////////////////////////////////////////////////////////////////////
// This file was automatically generated by PyCLIF.
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: third_party/nucleus/protos/reads.proto

#include "third_party/nucleus/protos/reads.pb.h"
#include "clif/python/postconv.h"

namespace nucleus { namespace genomics { namespace v1 {
using namespace ::clif;

// CLIF use `::nucleus::genomics::v1::LinearAlignment` as LinearAlignment
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::LinearAlignment* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::LinearAlignment&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::LinearAlignment>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::LinearAlignment>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::LinearAlignment>, py::PostConv);
// CLIF use `::nucleus::genomics::v1::Read` as Read
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::Read* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::Read&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::Read>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::Read>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::Read>, py::PostConv);
// CLIF use `::nucleus::genomics::v1::SamHeader` as SamHeader
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::SamHeader* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::SamHeader&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::SamHeader>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::SamHeader>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::SamHeader>, py::PostConv);
// CLIF use `::nucleus::genomics::v1::ReadGroup` as ReadGroup
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::ReadGroup* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::ReadGroup&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::ReadGroup>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::ReadGroup>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::ReadGroup>, py::PostConv);
// CLIF use `::nucleus::genomics::v1::Program` as Program
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::Program* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::Program&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::Program>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::Program>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::Program>, py::PostConv);
// CLIF use `::nucleus::genomics::v1::SamReaderOptions` as SamReaderOptions
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::SamReaderOptions* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::SamReaderOptions&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::SamReaderOptions>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::SamReaderOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::SamReaderOptions>, py::PostConv);
// CLIF use `::nucleus::genomics::v1::ReadRequirements` as ReadRequirements
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::ReadRequirements* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::ReadRequirements&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::ReadRequirements>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::ReadRequirements>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::ReadRequirements>, py::PostConv);
// CLIF use `::nucleus::genomics::v1::SamHeader::SortingOrder` as SamHeader.SortingOrder
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::SamHeader::SortingOrder* output);
PyObject* Clif_PyObjFrom(::nucleus::genomics::v1::SamHeader::SortingOrder, py::PostConv);
// CLIF use `::nucleus::genomics::v1::SamHeader::AlignmentGrouping` as SamHeader.AlignmentGrouping
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::SamHeader::AlignmentGrouping* output);
PyObject* Clif_PyObjFrom(::nucleus::genomics::v1::SamHeader::AlignmentGrouping, py::PostConv);
// CLIF use `::nucleus::genomics::v1::SamReaderOptions::AuxFieldHandling` as SamReaderOptions.AuxFieldHandling
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::SamReaderOptions::AuxFieldHandling* output);
PyObject* Clif_PyObjFrom(::nucleus::genomics::v1::SamReaderOptions::AuxFieldHandling, py::PostConv);
// CLIF use `::nucleus::genomics::v1::ReadRequirements::MinBaseQualityMode` as ReadRequirements.MinBaseQualityMode
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::ReadRequirements::MinBaseQualityMode* output);
PyObject* Clif_PyObjFrom(::nucleus::genomics::v1::ReadRequirements::MinBaseQualityMode, py::PostConv);

} } }  // namespace nucleus::genomics::v1
