//////////////////////////////////////////////////////////////////////
// This file was automatically generated by PyCLIF.
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: third_party/nucleus/protos/variants.proto

#include "third_party/nucleus/protos/variants.pb.h"
#include "clif/python/postconv.h"

namespace nucleus { namespace genomics { namespace v1 {
using namespace ::clif;

// CLIF use `::nucleus::genomics::v1::Variant` as Variant
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::Variant* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::Variant&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::Variant>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::Variant>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::Variant>, py::PostConv);
// CLIF use `::nucleus::genomics::v1::VariantCall` as VariantCall
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::VariantCall* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::VariantCall&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::VariantCall>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::VariantCall>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::VariantCall>, py::PostConv);
// CLIF use `::nucleus::genomics::v1::VcfHeader` as VcfHeader
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::VcfHeader* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::VcfHeader&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::VcfHeader>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::VcfHeader>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::VcfHeader>, py::PostConv);
// CLIF use `::nucleus::genomics::v1::VcfFilterInfo` as VcfFilterInfo
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::VcfFilterInfo* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::VcfFilterInfo&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::VcfFilterInfo>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::VcfFilterInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::VcfFilterInfo>, py::PostConv);
// CLIF use `::nucleus::genomics::v1::VcfInfo` as VcfInfo
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::VcfInfo* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::VcfInfo&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::VcfInfo>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::VcfInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::VcfInfo>, py::PostConv);
// CLIF use `::nucleus::genomics::v1::VcfFormatInfo` as VcfFormatInfo
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::VcfFormatInfo* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::VcfFormatInfo&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::VcfFormatInfo>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::VcfFormatInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::VcfFormatInfo>, py::PostConv);
// CLIF use `::nucleus::genomics::v1::VcfStructuredExtra` as VcfStructuredExtra
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::VcfStructuredExtra* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::VcfStructuredExtra&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::VcfStructuredExtra>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::VcfStructuredExtra>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::VcfStructuredExtra>, py::PostConv);
// CLIF use `::nucleus::genomics::v1::VcfExtra` as VcfExtra
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::VcfExtra* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::VcfExtra&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::VcfExtra>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::VcfExtra>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::VcfExtra>, py::PostConv);
// CLIF use `::nucleus::genomics::v1::VcfReaderOptions` as VcfReaderOptions
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::VcfReaderOptions* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::VcfReaderOptions&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::VcfReaderOptions>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::VcfReaderOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::VcfReaderOptions>, py::PostConv);
// CLIF use `::nucleus::genomics::v1::VcfWriterOptions` as VcfWriterOptions
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::VcfWriterOptions* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::VcfWriterOptions&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::VcfWriterOptions>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::VcfWriterOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::VcfWriterOptions>, py::PostConv);

} } }  // namespace nucleus::genomics::v1
