// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: third_party/nucleus/protos/reference.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2freference_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2freference_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "third_party/nucleus/protos/range.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2freference_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_third_5fparty_2fnucleus_2fprotos_2freference_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_third_5fparty_2fnucleus_2fprotos_2freference_2eproto;
namespace nucleus {
namespace genomics {
namespace v1 {
class ContigInfo;
class ContigInfoDefaultTypeInternal;
extern ContigInfoDefaultTypeInternal _ContigInfo_default_instance_;
class ContigInfo_ExtraEntry_DoNotUse;
class ContigInfo_ExtraEntry_DoNotUseDefaultTypeInternal;
extern ContigInfo_ExtraEntry_DoNotUseDefaultTypeInternal _ContigInfo_ExtraEntry_DoNotUse_default_instance_;
class ReferenceSequence;
class ReferenceSequenceDefaultTypeInternal;
extern ReferenceSequenceDefaultTypeInternal _ReferenceSequence_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
PROTOBUF_NAMESPACE_OPEN
template<> ::nucleus::genomics::v1::ContigInfo* Arena::CreateMaybeMessage<::nucleus::genomics::v1::ContigInfo>(Arena*);
template<> ::nucleus::genomics::v1::ContigInfo_ExtraEntry_DoNotUse* Arena::CreateMaybeMessage<::nucleus::genomics::v1::ContigInfo_ExtraEntry_DoNotUse>(Arena*);
template<> ::nucleus::genomics::v1::ReferenceSequence* Arena::CreateMaybeMessage<::nucleus::genomics::v1::ReferenceSequence>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nucleus {
namespace genomics {
namespace v1 {

// ===================================================================

class ContigInfo_ExtraEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContigInfo_ExtraEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ContigInfo_ExtraEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ContigInfo_ExtraEntry_DoNotUse();
  ContigInfo_ExtraEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ContigInfo_ExtraEntry_DoNotUse& other);
  static const ContigInfo_ExtraEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ContigInfo_ExtraEntry_DoNotUse*>(&_ContigInfo_ExtraEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nucleus.genomics.v1.ContigInfo.ExtraEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nucleus.genomics.v1.ContigInfo.ExtraEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freference_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freference_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class ContigInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.ContigInfo) */ {
 public:
  ContigInfo();
  virtual ~ContigInfo();

  ContigInfo(const ContigInfo& from);
  ContigInfo(ContigInfo&& from) noexcept
    : ContigInfo() {
    *this = ::std::move(from);
  }

  inline ContigInfo& operator=(const ContigInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContigInfo& operator=(ContigInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContigInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContigInfo* internal_default_instance() {
    return reinterpret_cast<const ContigInfo*>(
               &_ContigInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContigInfo& a, ContigInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ContigInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContigInfo* New() const final {
    return CreateMaybeMessage<ContigInfo>(nullptr);
  }

  ContigInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContigInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContigInfo& from);
  void MergeFrom(const ContigInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContigInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.ContigInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freference_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freference_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kExtraFieldNumber = 5,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kNBasesFieldNumber = 3,
    kPosInFastaFieldNumber = 4,
  };
  // map<string, string> extra = 5;
  int extra_size() const;
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      extra() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_extra();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // int64 n_bases = 3;
  void clear_n_bases();
  ::PROTOBUF_NAMESPACE_ID::int64 n_bases() const;
  void set_n_bases(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 pos_in_fasta = 4;
  void clear_pos_in_fasta();
  ::PROTOBUF_NAMESPACE_ID::int32 pos_in_fasta() const;
  void set_pos_in_fasta(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.ContigInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ContigInfo_ExtraEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > extra_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::int64 n_bases_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_in_fasta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2freference_2eproto;
};
// -------------------------------------------------------------------

class ReferenceSequence :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.ReferenceSequence) */ {
 public:
  ReferenceSequence();
  virtual ~ReferenceSequence();

  ReferenceSequence(const ReferenceSequence& from);
  ReferenceSequence(ReferenceSequence&& from) noexcept
    : ReferenceSequence() {
    *this = ::std::move(from);
  }

  inline ReferenceSequence& operator=(const ReferenceSequence& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReferenceSequence& operator=(ReferenceSequence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReferenceSequence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReferenceSequence* internal_default_instance() {
    return reinterpret_cast<const ReferenceSequence*>(
               &_ReferenceSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReferenceSequence& a, ReferenceSequence& b) {
    a.Swap(&b);
  }
  inline void Swap(ReferenceSequence* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReferenceSequence* New() const final {
    return CreateMaybeMessage<ReferenceSequence>(nullptr);
  }

  ReferenceSequence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceSequence>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReferenceSequence& from);
  void MergeFrom(const ReferenceSequence& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceSequence* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.ReferenceSequence";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freference_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freference_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasesFieldNumber = 2,
    kRegionFieldNumber = 1,
  };
  // string bases = 2;
  void clear_bases();
  const std::string& bases() const;
  void set_bases(const std::string& value);
  void set_bases(std::string&& value);
  void set_bases(const char* value);
  void set_bases(const char* value, size_t size);
  std::string* mutable_bases();
  std::string* release_bases();
  void set_allocated_bases(std::string* bases);

  // .nucleus.genomics.v1.Range region = 1;
  bool has_region() const;
  void clear_region();
  const ::nucleus::genomics::v1::Range& region() const;
  ::nucleus::genomics::v1::Range* release_region();
  ::nucleus::genomics::v1::Range* mutable_region();
  void set_allocated_region(::nucleus::genomics::v1::Range* region);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.ReferenceSequence)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bases_;
  ::nucleus::genomics::v1::Range* region_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2freference_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ContigInfo

// string name = 1;
inline void ContigInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContigInfo::name() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ContigInfo.name)
  return name_.GetNoArena();
}
inline void ContigInfo::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ContigInfo.name)
}
inline void ContigInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.ContigInfo.name)
}
inline void ContigInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.ContigInfo.name)
}
inline void ContigInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.ContigInfo.name)
}
inline std::string* ContigInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.ContigInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContigInfo::release_name() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.ContigInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContigInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.ContigInfo.name)
}

// string description = 2;
inline void ContigInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContigInfo::description() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ContigInfo.description)
  return description_.GetNoArena();
}
inline void ContigInfo::set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ContigInfo.description)
}
inline void ContigInfo::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.ContigInfo.description)
}
inline void ContigInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.ContigInfo.description)
}
inline void ContigInfo::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.ContigInfo.description)
}
inline std::string* ContigInfo::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.ContigInfo.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContigInfo::release_description() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.ContigInfo.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContigInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.ContigInfo.description)
}

// int64 n_bases = 3;
inline void ContigInfo::clear_n_bases() {
  n_bases_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContigInfo::n_bases() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ContigInfo.n_bases)
  return n_bases_;
}
inline void ContigInfo::set_n_bases(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  n_bases_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ContigInfo.n_bases)
}

// map<string, string> extra = 5;
inline int ContigInfo::extra_size() const {
  return extra_.size();
}
inline void ContigInfo::clear_extra() {
  extra_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ContigInfo::extra() const {
  // @@protoc_insertion_point(field_map:nucleus.genomics.v1.ContigInfo.extra)
  return extra_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ContigInfo::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_map:nucleus.genomics.v1.ContigInfo.extra)
  return extra_.MutableMap();
}

// int32 pos_in_fasta = 4;
inline void ContigInfo::clear_pos_in_fasta() {
  pos_in_fasta_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContigInfo::pos_in_fasta() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ContigInfo.pos_in_fasta)
  return pos_in_fasta_;
}
inline void ContigInfo::set_pos_in_fasta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pos_in_fasta_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ContigInfo.pos_in_fasta)
}

// -------------------------------------------------------------------

// ReferenceSequence

// .nucleus.genomics.v1.Range region = 1;
inline bool ReferenceSequence::has_region() const {
  return this != internal_default_instance() && region_ != nullptr;
}
inline const ::nucleus::genomics::v1::Range& ReferenceSequence::region() const {
  const ::nucleus::genomics::v1::Range* p = region_;
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReferenceSequence.region)
  return p != nullptr ? *p : *reinterpret_cast<const ::nucleus::genomics::v1::Range*>(
      &::nucleus::genomics::v1::_Range_default_instance_);
}
inline ::nucleus::genomics::v1::Range* ReferenceSequence::release_region() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.ReferenceSequence.region)
  
  ::nucleus::genomics::v1::Range* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::nucleus::genomics::v1::Range* ReferenceSequence::mutable_region() {
  
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::nucleus::genomics::v1::Range>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.ReferenceSequence.region)
  return region_;
}
inline void ReferenceSequence::set_allocated_region(::nucleus::genomics::v1::Range* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.ReferenceSequence.region)
}

// string bases = 2;
inline void ReferenceSequence::clear_bases() {
  bases_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReferenceSequence::bases() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReferenceSequence.bases)
  return bases_.GetNoArena();
}
inline void ReferenceSequence::set_bases(const std::string& value) {
  
  bases_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReferenceSequence.bases)
}
inline void ReferenceSequence::set_bases(std::string&& value) {
  
  bases_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.ReferenceSequence.bases)
}
inline void ReferenceSequence::set_bases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bases_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.ReferenceSequence.bases)
}
inline void ReferenceSequence::set_bases(const char* value, size_t size) {
  
  bases_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.ReferenceSequence.bases)
}
inline std::string* ReferenceSequence::mutable_bases() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.ReferenceSequence.bases)
  return bases_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReferenceSequence::release_bases() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.ReferenceSequence.bases)
  
  return bases_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReferenceSequence::set_allocated_bases(std::string* bases) {
  if (bases != nullptr) {
    
  } else {
    
  }
  bases_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bases);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.ReferenceSequence.bases)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace genomics
}  // namespace nucleus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2freference_2eproto
