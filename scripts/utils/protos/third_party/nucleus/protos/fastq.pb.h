// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: third_party/nucleus/protos/fastq.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto;
namespace nucleus {
namespace genomics {
namespace v1 {
class FastqReaderOptions;
class FastqReaderOptionsDefaultTypeInternal;
extern FastqReaderOptionsDefaultTypeInternal _FastqReaderOptions_default_instance_;
class FastqRecord;
class FastqRecordDefaultTypeInternal;
extern FastqRecordDefaultTypeInternal _FastqRecord_default_instance_;
class FastqWriterOptions;
class FastqWriterOptionsDefaultTypeInternal;
extern FastqWriterOptionsDefaultTypeInternal _FastqWriterOptions_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
PROTOBUF_NAMESPACE_OPEN
template<> ::nucleus::genomics::v1::FastqReaderOptions* Arena::CreateMaybeMessage<::nucleus::genomics::v1::FastqReaderOptions>(Arena*);
template<> ::nucleus::genomics::v1::FastqRecord* Arena::CreateMaybeMessage<::nucleus::genomics::v1::FastqRecord>(Arena*);
template<> ::nucleus::genomics::v1::FastqWriterOptions* Arena::CreateMaybeMessage<::nucleus::genomics::v1::FastqWriterOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nucleus {
namespace genomics {
namespace v1 {

// ===================================================================

class FastqRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.FastqRecord) */ {
 public:
  FastqRecord();
  virtual ~FastqRecord();

  FastqRecord(const FastqRecord& from);
  FastqRecord(FastqRecord&& from) noexcept
    : FastqRecord() {
    *this = ::std::move(from);
  }

  inline FastqRecord& operator=(const FastqRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastqRecord& operator=(FastqRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastqRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastqRecord* internal_default_instance() {
    return reinterpret_cast<const FastqRecord*>(
               &_FastqRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FastqRecord& a, FastqRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(FastqRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastqRecord* New() const final {
    return CreateMaybeMessage<FastqRecord>(nullptr);
  }

  FastqRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastqRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastqRecord& from);
  void MergeFrom(const FastqRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastqRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.FastqRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kSequenceFieldNumber = 3,
    kQualityFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // string sequence = 3;
  void clear_sequence();
  const std::string& sequence() const;
  void set_sequence(const std::string& value);
  void set_sequence(std::string&& value);
  void set_sequence(const char* value);
  void set_sequence(const char* value, size_t size);
  std::string* mutable_sequence();
  std::string* release_sequence();
  void set_allocated_sequence(std::string* sequence);

  // string quality = 4;
  void clear_quality();
  const std::string& quality() const;
  void set_quality(const std::string& value);
  void set_quality(std::string&& value);
  void set_quality(const char* value);
  void set_quality(const char* value, size_t size);
  std::string* mutable_quality();
  std::string* release_quality();
  void set_allocated_quality(std::string* quality);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.FastqRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequence_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto;
};
// -------------------------------------------------------------------

class FastqReaderOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.FastqReaderOptions) */ {
 public:
  FastqReaderOptions();
  virtual ~FastqReaderOptions();

  FastqReaderOptions(const FastqReaderOptions& from);
  FastqReaderOptions(FastqReaderOptions&& from) noexcept
    : FastqReaderOptions() {
    *this = ::std::move(from);
  }

  inline FastqReaderOptions& operator=(const FastqReaderOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastqReaderOptions& operator=(FastqReaderOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastqReaderOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastqReaderOptions* internal_default_instance() {
    return reinterpret_cast<const FastqReaderOptions*>(
               &_FastqReaderOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FastqReaderOptions& a, FastqReaderOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(FastqReaderOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastqReaderOptions* New() const final {
    return CreateMaybeMessage<FastqReaderOptions>(nullptr);
  }

  FastqReaderOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastqReaderOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastqReaderOptions& from);
  void MergeFrom(const FastqReaderOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastqReaderOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.FastqReaderOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkipInvalidRecordsFieldNumber = 2,
  };
  // bool skip_invalid_records = 2;
  void clear_skip_invalid_records();
  bool skip_invalid_records() const;
  void set_skip_invalid_records(bool value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.FastqReaderOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool skip_invalid_records_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto;
};
// -------------------------------------------------------------------

class FastqWriterOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.FastqWriterOptions) */ {
 public:
  FastqWriterOptions();
  virtual ~FastqWriterOptions();

  FastqWriterOptions(const FastqWriterOptions& from);
  FastqWriterOptions(FastqWriterOptions&& from) noexcept
    : FastqWriterOptions() {
    *this = ::std::move(from);
  }

  inline FastqWriterOptions& operator=(const FastqWriterOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastqWriterOptions& operator=(FastqWriterOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastqWriterOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastqWriterOptions* internal_default_instance() {
    return reinterpret_cast<const FastqWriterOptions*>(
               &_FastqWriterOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FastqWriterOptions& a, FastqWriterOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(FastqWriterOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastqWriterOptions* New() const final {
    return CreateMaybeMessage<FastqWriterOptions>(nullptr);
  }

  FastqWriterOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastqWriterOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastqWriterOptions& from);
  void MergeFrom(const FastqWriterOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastqWriterOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.FastqWriterOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.FastqWriterOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FastqRecord

// string id = 1;
inline void FastqRecord::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FastqRecord::id() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.FastqRecord.id)
  return id_.GetNoArena();
}
inline void FastqRecord::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.FastqRecord.id)
}
inline void FastqRecord::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.FastqRecord.id)
}
inline void FastqRecord::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.FastqRecord.id)
}
inline void FastqRecord::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.FastqRecord.id)
}
inline std::string* FastqRecord::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.FastqRecord.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FastqRecord::release_id() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.FastqRecord.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FastqRecord::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.FastqRecord.id)
}

// string description = 2;
inline void FastqRecord::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FastqRecord::description() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.FastqRecord.description)
  return description_.GetNoArena();
}
inline void FastqRecord::set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.FastqRecord.description)
}
inline void FastqRecord::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.FastqRecord.description)
}
inline void FastqRecord::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.FastqRecord.description)
}
inline void FastqRecord::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.FastqRecord.description)
}
inline std::string* FastqRecord::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.FastqRecord.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FastqRecord::release_description() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.FastqRecord.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FastqRecord::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.FastqRecord.description)
}

// string sequence = 3;
inline void FastqRecord::clear_sequence() {
  sequence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FastqRecord::sequence() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.FastqRecord.sequence)
  return sequence_.GetNoArena();
}
inline void FastqRecord::set_sequence(const std::string& value) {
  
  sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.FastqRecord.sequence)
}
inline void FastqRecord::set_sequence(std::string&& value) {
  
  sequence_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.FastqRecord.sequence)
}
inline void FastqRecord::set_sequence(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.FastqRecord.sequence)
}
inline void FastqRecord::set_sequence(const char* value, size_t size) {
  
  sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.FastqRecord.sequence)
}
inline std::string* FastqRecord::mutable_sequence() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.FastqRecord.sequence)
  return sequence_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FastqRecord::release_sequence() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.FastqRecord.sequence)
  
  return sequence_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FastqRecord::set_allocated_sequence(std::string* sequence) {
  if (sequence != nullptr) {
    
  } else {
    
  }
  sequence_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequence);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.FastqRecord.sequence)
}

// string quality = 4;
inline void FastqRecord::clear_quality() {
  quality_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FastqRecord::quality() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.FastqRecord.quality)
  return quality_.GetNoArena();
}
inline void FastqRecord::set_quality(const std::string& value) {
  
  quality_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.FastqRecord.quality)
}
inline void FastqRecord::set_quality(std::string&& value) {
  
  quality_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.FastqRecord.quality)
}
inline void FastqRecord::set_quality(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  quality_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.FastqRecord.quality)
}
inline void FastqRecord::set_quality(const char* value, size_t size) {
  
  quality_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.FastqRecord.quality)
}
inline std::string* FastqRecord::mutable_quality() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.FastqRecord.quality)
  return quality_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FastqRecord::release_quality() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.FastqRecord.quality)
  
  return quality_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FastqRecord::set_allocated_quality(std::string* quality) {
  if (quality != nullptr) {
    
  } else {
    
  }
  quality_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), quality);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.FastqRecord.quality)
}

// -------------------------------------------------------------------

// FastqReaderOptions

// bool skip_invalid_records = 2;
inline void FastqReaderOptions::clear_skip_invalid_records() {
  skip_invalid_records_ = false;
}
inline bool FastqReaderOptions::skip_invalid_records() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.FastqReaderOptions.skip_invalid_records)
  return skip_invalid_records_;
}
inline void FastqReaderOptions::set_skip_invalid_records(bool value) {
  
  skip_invalid_records_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.FastqReaderOptions.skip_invalid_records)
}

// -------------------------------------------------------------------

// FastqWriterOptions

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace genomics
}  // namespace nucleus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto
