// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: third_party/nucleus/protos/fasta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "third_party/nucleus/protos/range.pb.h"
#include "third_party/nucleus/protos/reference.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto;
namespace nucleus {
namespace genomics {
namespace v1 {
class FastaReaderOptions;
class FastaReaderOptionsDefaultTypeInternal;
extern FastaReaderOptionsDefaultTypeInternal _FastaReaderOptions_default_instance_;
class FastaRecord;
class FastaRecordDefaultTypeInternal;
extern FastaRecordDefaultTypeInternal _FastaRecord_default_instance_;
class FastaWriterOptions;
class FastaWriterOptionsDefaultTypeInternal;
extern FastaWriterOptionsDefaultTypeInternal _FastaWriterOptions_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
PROTOBUF_NAMESPACE_OPEN
template<> ::nucleus::genomics::v1::FastaReaderOptions* Arena::CreateMaybeMessage<::nucleus::genomics::v1::FastaReaderOptions>(Arena*);
template<> ::nucleus::genomics::v1::FastaRecord* Arena::CreateMaybeMessage<::nucleus::genomics::v1::FastaRecord>(Arena*);
template<> ::nucleus::genomics::v1::FastaWriterOptions* Arena::CreateMaybeMessage<::nucleus::genomics::v1::FastaWriterOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nucleus {
namespace genomics {
namespace v1 {

enum FastaReaderOptions_DeflineParsing : int {
  FastaReaderOptions_DeflineParsing_NONE = 0,
  FastaReaderOptions_DeflineParsing_CONTIG_INFO = 1,
  FastaReaderOptions_DeflineParsing_FastaReaderOptions_DeflineParsing_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FastaReaderOptions_DeflineParsing_FastaReaderOptions_DeflineParsing_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FastaReaderOptions_DeflineParsing_IsValid(int value);
constexpr FastaReaderOptions_DeflineParsing FastaReaderOptions_DeflineParsing_DeflineParsing_MIN = FastaReaderOptions_DeflineParsing_NONE;
constexpr FastaReaderOptions_DeflineParsing FastaReaderOptions_DeflineParsing_DeflineParsing_MAX = FastaReaderOptions_DeflineParsing_CONTIG_INFO;
constexpr int FastaReaderOptions_DeflineParsing_DeflineParsing_ARRAYSIZE = FastaReaderOptions_DeflineParsing_DeflineParsing_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FastaReaderOptions_DeflineParsing_descriptor();
template<typename T>
inline const std::string& FastaReaderOptions_DeflineParsing_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FastaReaderOptions_DeflineParsing>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FastaReaderOptions_DeflineParsing_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FastaReaderOptions_DeflineParsing_descriptor(), enum_t_value);
}
inline bool FastaReaderOptions_DeflineParsing_Parse(
    const std::string& name, FastaReaderOptions_DeflineParsing* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FastaReaderOptions_DeflineParsing>(
    FastaReaderOptions_DeflineParsing_descriptor(), name, value);
}
// ===================================================================

class FastaRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.FastaRecord) */ {
 public:
  FastaRecord();
  virtual ~FastaRecord();

  FastaRecord(const FastaRecord& from);
  FastaRecord(FastaRecord&& from) noexcept
    : FastaRecord() {
    *this = ::std::move(from);
  }

  inline FastaRecord& operator=(const FastaRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastaRecord& operator=(FastaRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastaRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastaRecord* internal_default_instance() {
    return reinterpret_cast<const FastaRecord*>(
               &_FastaRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FastaRecord& a, FastaRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(FastaRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastaRecord* New() const final {
    return CreateMaybeMessage<FastaRecord>(nullptr);
  }

  FastaRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastaRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastaRecord& from);
  void MergeFrom(const FastaRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastaRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.FastaRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeflineFieldNumber = 1,
    kSequenceFieldNumber = 4,
    kContigFieldNumber = 2,
    kRegionFieldNumber = 3,
  };
  // string defline = 1;
  void clear_defline();
  const std::string& defline() const;
  void set_defline(const std::string& value);
  void set_defline(std::string&& value);
  void set_defline(const char* value);
  void set_defline(const char* value, size_t size);
  std::string* mutable_defline();
  std::string* release_defline();
  void set_allocated_defline(std::string* defline);

  // string sequence = 4;
  void clear_sequence();
  const std::string& sequence() const;
  void set_sequence(const std::string& value);
  void set_sequence(std::string&& value);
  void set_sequence(const char* value);
  void set_sequence(const char* value, size_t size);
  std::string* mutable_sequence();
  std::string* release_sequence();
  void set_allocated_sequence(std::string* sequence);

  // .nucleus.genomics.v1.ContigInfo contig = 2;
  bool has_contig() const;
  void clear_contig();
  const ::nucleus::genomics::v1::ContigInfo& contig() const;
  ::nucleus::genomics::v1::ContigInfo* release_contig();
  ::nucleus::genomics::v1::ContigInfo* mutable_contig();
  void set_allocated_contig(::nucleus::genomics::v1::ContigInfo* contig);

  // .nucleus.genomics.v1.Range region = 3;
  bool has_region() const;
  void clear_region();
  const ::nucleus::genomics::v1::Range& region() const;
  ::nucleus::genomics::v1::Range* release_region();
  ::nucleus::genomics::v1::Range* mutable_region();
  void set_allocated_region(::nucleus::genomics::v1::Range* region);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.FastaRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr defline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequence_;
  ::nucleus::genomics::v1::ContigInfo* contig_;
  ::nucleus::genomics::v1::Range* region_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto;
};
// -------------------------------------------------------------------

class FastaReaderOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.FastaReaderOptions) */ {
 public:
  FastaReaderOptions();
  virtual ~FastaReaderOptions();

  FastaReaderOptions(const FastaReaderOptions& from);
  FastaReaderOptions(FastaReaderOptions&& from) noexcept
    : FastaReaderOptions() {
    *this = ::std::move(from);
  }

  inline FastaReaderOptions& operator=(const FastaReaderOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastaReaderOptions& operator=(FastaReaderOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastaReaderOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastaReaderOptions* internal_default_instance() {
    return reinterpret_cast<const FastaReaderOptions*>(
               &_FastaReaderOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FastaReaderOptions& a, FastaReaderOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(FastaReaderOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastaReaderOptions* New() const final {
    return CreateMaybeMessage<FastaReaderOptions>(nullptr);
  }

  FastaReaderOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastaReaderOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastaReaderOptions& from);
  void MergeFrom(const FastaReaderOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastaReaderOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.FastaReaderOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FastaReaderOptions_DeflineParsing DeflineParsing;
  static constexpr DeflineParsing NONE =
    FastaReaderOptions_DeflineParsing_NONE;
  static constexpr DeflineParsing CONTIG_INFO =
    FastaReaderOptions_DeflineParsing_CONTIG_INFO;
  static inline bool DeflineParsing_IsValid(int value) {
    return FastaReaderOptions_DeflineParsing_IsValid(value);
  }
  static constexpr DeflineParsing DeflineParsing_MIN =
    FastaReaderOptions_DeflineParsing_DeflineParsing_MIN;
  static constexpr DeflineParsing DeflineParsing_MAX =
    FastaReaderOptions_DeflineParsing_DeflineParsing_MAX;
  static constexpr int DeflineParsing_ARRAYSIZE =
    FastaReaderOptions_DeflineParsing_DeflineParsing_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeflineParsing_descriptor() {
    return FastaReaderOptions_DeflineParsing_descriptor();
  }
  template<typename T>
  static inline const std::string& DeflineParsing_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeflineParsing>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeflineParsing_Name.");
    return FastaReaderOptions_DeflineParsing_Name(enum_t_value);
  }
  static inline bool DeflineParsing_Parse(const std::string& name,
      DeflineParsing* value) {
    return FastaReaderOptions_DeflineParsing_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAlphabetFieldNumber = 2,
    kKeepTrueCaseFieldNumber = 1,
    kIncludeRangeInRecordsFieldNumber = 4,
    kDeflineParsingFieldNumber = 3,
  };
  // string alphabet = 2;
  void clear_alphabet();
  const std::string& alphabet() const;
  void set_alphabet(const std::string& value);
  void set_alphabet(std::string&& value);
  void set_alphabet(const char* value);
  void set_alphabet(const char* value, size_t size);
  std::string* mutable_alphabet();
  std::string* release_alphabet();
  void set_allocated_alphabet(std::string* alphabet);

  // bool keep_true_case = 1;
  void clear_keep_true_case();
  bool keep_true_case() const;
  void set_keep_true_case(bool value);

  // bool include_range_in_records = 4;
  void clear_include_range_in_records();
  bool include_range_in_records() const;
  void set_include_range_in_records(bool value);

  // .nucleus.genomics.v1.FastaReaderOptions.DeflineParsing defline_parsing = 3;
  void clear_defline_parsing();
  ::nucleus::genomics::v1::FastaReaderOptions_DeflineParsing defline_parsing() const;
  void set_defline_parsing(::nucleus::genomics::v1::FastaReaderOptions_DeflineParsing value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.FastaReaderOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alphabet_;
  bool keep_true_case_;
  bool include_range_in_records_;
  int defline_parsing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto;
};
// -------------------------------------------------------------------

class FastaWriterOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.FastaWriterOptions) */ {
 public:
  FastaWriterOptions();
  virtual ~FastaWriterOptions();

  FastaWriterOptions(const FastaWriterOptions& from);
  FastaWriterOptions(FastaWriterOptions&& from) noexcept
    : FastaWriterOptions() {
    *this = ::std::move(from);
  }

  inline FastaWriterOptions& operator=(const FastaWriterOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline FastaWriterOptions& operator=(FastaWriterOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FastaWriterOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastaWriterOptions* internal_default_instance() {
    return reinterpret_cast<const FastaWriterOptions*>(
               &_FastaWriterOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FastaWriterOptions& a, FastaWriterOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(FastaWriterOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FastaWriterOptions* New() const final {
    return CreateMaybeMessage<FastaWriterOptions>(nullptr);
  }

  FastaWriterOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FastaWriterOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FastaWriterOptions& from);
  void MergeFrom(const FastaWriterOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FastaWriterOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.FastaWriterOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.FastaWriterOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FastaRecord

// string defline = 1;
inline void FastaRecord::clear_defline() {
  defline_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FastaRecord::defline() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.FastaRecord.defline)
  return defline_.GetNoArena();
}
inline void FastaRecord::set_defline(const std::string& value) {
  
  defline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.FastaRecord.defline)
}
inline void FastaRecord::set_defline(std::string&& value) {
  
  defline_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.FastaRecord.defline)
}
inline void FastaRecord::set_defline(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  defline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.FastaRecord.defline)
}
inline void FastaRecord::set_defline(const char* value, size_t size) {
  
  defline_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.FastaRecord.defline)
}
inline std::string* FastaRecord::mutable_defline() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.FastaRecord.defline)
  return defline_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FastaRecord::release_defline() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.FastaRecord.defline)
  
  return defline_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FastaRecord::set_allocated_defline(std::string* defline) {
  if (defline != nullptr) {
    
  } else {
    
  }
  defline_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), defline);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.FastaRecord.defline)
}

// .nucleus.genomics.v1.ContigInfo contig = 2;
inline bool FastaRecord::has_contig() const {
  return this != internal_default_instance() && contig_ != nullptr;
}
inline const ::nucleus::genomics::v1::ContigInfo& FastaRecord::contig() const {
  const ::nucleus::genomics::v1::ContigInfo* p = contig_;
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.FastaRecord.contig)
  return p != nullptr ? *p : *reinterpret_cast<const ::nucleus::genomics::v1::ContigInfo*>(
      &::nucleus::genomics::v1::_ContigInfo_default_instance_);
}
inline ::nucleus::genomics::v1::ContigInfo* FastaRecord::release_contig() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.FastaRecord.contig)
  
  ::nucleus::genomics::v1::ContigInfo* temp = contig_;
  contig_ = nullptr;
  return temp;
}
inline ::nucleus::genomics::v1::ContigInfo* FastaRecord::mutable_contig() {
  
  if (contig_ == nullptr) {
    auto* p = CreateMaybeMessage<::nucleus::genomics::v1::ContigInfo>(GetArenaNoVirtual());
    contig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.FastaRecord.contig)
  return contig_;
}
inline void FastaRecord::set_allocated_contig(::nucleus::genomics::v1::ContigInfo* contig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contig_);
  }
  if (contig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      contig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contig, submessage_arena);
    }
    
  } else {
    
  }
  contig_ = contig;
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.FastaRecord.contig)
}

// .nucleus.genomics.v1.Range region = 3;
inline bool FastaRecord::has_region() const {
  return this != internal_default_instance() && region_ != nullptr;
}
inline const ::nucleus::genomics::v1::Range& FastaRecord::region() const {
  const ::nucleus::genomics::v1::Range* p = region_;
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.FastaRecord.region)
  return p != nullptr ? *p : *reinterpret_cast<const ::nucleus::genomics::v1::Range*>(
      &::nucleus::genomics::v1::_Range_default_instance_);
}
inline ::nucleus::genomics::v1::Range* FastaRecord::release_region() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.FastaRecord.region)
  
  ::nucleus::genomics::v1::Range* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::nucleus::genomics::v1::Range* FastaRecord::mutable_region() {
  
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::nucleus::genomics::v1::Range>(GetArenaNoVirtual());
    region_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.FastaRecord.region)
  return region_;
}
inline void FastaRecord::set_allocated_region(::nucleus::genomics::v1::Range* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.FastaRecord.region)
}

// string sequence = 4;
inline void FastaRecord::clear_sequence() {
  sequence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FastaRecord::sequence() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.FastaRecord.sequence)
  return sequence_.GetNoArena();
}
inline void FastaRecord::set_sequence(const std::string& value) {
  
  sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.FastaRecord.sequence)
}
inline void FastaRecord::set_sequence(std::string&& value) {
  
  sequence_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.FastaRecord.sequence)
}
inline void FastaRecord::set_sequence(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.FastaRecord.sequence)
}
inline void FastaRecord::set_sequence(const char* value, size_t size) {
  
  sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.FastaRecord.sequence)
}
inline std::string* FastaRecord::mutable_sequence() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.FastaRecord.sequence)
  return sequence_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FastaRecord::release_sequence() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.FastaRecord.sequence)
  
  return sequence_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FastaRecord::set_allocated_sequence(std::string* sequence) {
  if (sequence != nullptr) {
    
  } else {
    
  }
  sequence_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequence);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.FastaRecord.sequence)
}

// -------------------------------------------------------------------

// FastaReaderOptions

// bool keep_true_case = 1;
inline void FastaReaderOptions::clear_keep_true_case() {
  keep_true_case_ = false;
}
inline bool FastaReaderOptions::keep_true_case() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.FastaReaderOptions.keep_true_case)
  return keep_true_case_;
}
inline void FastaReaderOptions::set_keep_true_case(bool value) {
  
  keep_true_case_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.FastaReaderOptions.keep_true_case)
}

// string alphabet = 2;
inline void FastaReaderOptions::clear_alphabet() {
  alphabet_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FastaReaderOptions::alphabet() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.FastaReaderOptions.alphabet)
  return alphabet_.GetNoArena();
}
inline void FastaReaderOptions::set_alphabet(const std::string& value) {
  
  alphabet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.FastaReaderOptions.alphabet)
}
inline void FastaReaderOptions::set_alphabet(std::string&& value) {
  
  alphabet_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.FastaReaderOptions.alphabet)
}
inline void FastaReaderOptions::set_alphabet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alphabet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.FastaReaderOptions.alphabet)
}
inline void FastaReaderOptions::set_alphabet(const char* value, size_t size) {
  
  alphabet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.FastaReaderOptions.alphabet)
}
inline std::string* FastaReaderOptions::mutable_alphabet() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.FastaReaderOptions.alphabet)
  return alphabet_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FastaReaderOptions::release_alphabet() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.FastaReaderOptions.alphabet)
  
  return alphabet_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FastaReaderOptions::set_allocated_alphabet(std::string* alphabet) {
  if (alphabet != nullptr) {
    
  } else {
    
  }
  alphabet_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alphabet);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.FastaReaderOptions.alphabet)
}

// .nucleus.genomics.v1.FastaReaderOptions.DeflineParsing defline_parsing = 3;
inline void FastaReaderOptions::clear_defline_parsing() {
  defline_parsing_ = 0;
}
inline ::nucleus::genomics::v1::FastaReaderOptions_DeflineParsing FastaReaderOptions::defline_parsing() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.FastaReaderOptions.defline_parsing)
  return static_cast< ::nucleus::genomics::v1::FastaReaderOptions_DeflineParsing >(defline_parsing_);
}
inline void FastaReaderOptions::set_defline_parsing(::nucleus::genomics::v1::FastaReaderOptions_DeflineParsing value) {
  
  defline_parsing_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.FastaReaderOptions.defline_parsing)
}

// bool include_range_in_records = 4;
inline void FastaReaderOptions::clear_include_range_in_records() {
  include_range_in_records_ = false;
}
inline bool FastaReaderOptions::include_range_in_records() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.FastaReaderOptions.include_range_in_records)
  return include_range_in_records_;
}
inline void FastaReaderOptions::set_include_range_in_records(bool value) {
  
  include_range_in_records_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.FastaReaderOptions.include_range_in_records)
}

// -------------------------------------------------------------------

// FastaWriterOptions

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace genomics
}  // namespace nucleus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nucleus::genomics::v1::FastaReaderOptions_DeflineParsing> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nucleus::genomics::v1::FastaReaderOptions_DeflineParsing>() {
  return ::nucleus::genomics::v1::FastaReaderOptions_DeflineParsing_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2ffasta_2eproto
