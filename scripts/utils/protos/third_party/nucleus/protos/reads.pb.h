// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: third_party/nucleus/protos/reads.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2freads_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2freads_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "third_party/nucleus/protos/cigar.pb.h"
#include "third_party/nucleus/protos/position.pb.h"
#include "third_party/nucleus/protos/reference.pb.h"
#include "third_party/nucleus/protos/struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2freads_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_third_5fparty_2fnucleus_2fprotos_2freads_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto;
namespace nucleus {
namespace genomics {
namespace v1 {
class LinearAlignment;
class LinearAlignmentDefaultTypeInternal;
extern LinearAlignmentDefaultTypeInternal _LinearAlignment_default_instance_;
class Program;
class ProgramDefaultTypeInternal;
extern ProgramDefaultTypeInternal _Program_default_instance_;
class Read;
class ReadDefaultTypeInternal;
extern ReadDefaultTypeInternal _Read_default_instance_;
class ReadGroup;
class ReadGroupDefaultTypeInternal;
extern ReadGroupDefaultTypeInternal _ReadGroup_default_instance_;
class ReadRequirements;
class ReadRequirementsDefaultTypeInternal;
extern ReadRequirementsDefaultTypeInternal _ReadRequirements_default_instance_;
class Read_InfoEntry_DoNotUse;
class Read_InfoEntry_DoNotUseDefaultTypeInternal;
extern Read_InfoEntry_DoNotUseDefaultTypeInternal _Read_InfoEntry_DoNotUse_default_instance_;
class SamHeader;
class SamHeaderDefaultTypeInternal;
extern SamHeaderDefaultTypeInternal _SamHeader_default_instance_;
class SamReaderOptions;
class SamReaderOptionsDefaultTypeInternal;
extern SamReaderOptionsDefaultTypeInternal _SamReaderOptions_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
PROTOBUF_NAMESPACE_OPEN
template<> ::nucleus::genomics::v1::LinearAlignment* Arena::CreateMaybeMessage<::nucleus::genomics::v1::LinearAlignment>(Arena*);
template<> ::nucleus::genomics::v1::Program* Arena::CreateMaybeMessage<::nucleus::genomics::v1::Program>(Arena*);
template<> ::nucleus::genomics::v1::Read* Arena::CreateMaybeMessage<::nucleus::genomics::v1::Read>(Arena*);
template<> ::nucleus::genomics::v1::ReadGroup* Arena::CreateMaybeMessage<::nucleus::genomics::v1::ReadGroup>(Arena*);
template<> ::nucleus::genomics::v1::ReadRequirements* Arena::CreateMaybeMessage<::nucleus::genomics::v1::ReadRequirements>(Arena*);
template<> ::nucleus::genomics::v1::Read_InfoEntry_DoNotUse* Arena::CreateMaybeMessage<::nucleus::genomics::v1::Read_InfoEntry_DoNotUse>(Arena*);
template<> ::nucleus::genomics::v1::SamHeader* Arena::CreateMaybeMessage<::nucleus::genomics::v1::SamHeader>(Arena*);
template<> ::nucleus::genomics::v1::SamReaderOptions* Arena::CreateMaybeMessage<::nucleus::genomics::v1::SamReaderOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nucleus {
namespace genomics {
namespace v1 {

enum SamHeader_SortingOrder : int {
  SamHeader_SortingOrder_UNKNOWN = 0,
  SamHeader_SortingOrder_UNSORTED = 1,
  SamHeader_SortingOrder_QUERYNAME = 2,
  SamHeader_SortingOrder_COORDINATE = 3,
  SamHeader_SortingOrder_SamHeader_SortingOrder_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SamHeader_SortingOrder_SamHeader_SortingOrder_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SamHeader_SortingOrder_IsValid(int value);
constexpr SamHeader_SortingOrder SamHeader_SortingOrder_SortingOrder_MIN = SamHeader_SortingOrder_UNKNOWN;
constexpr SamHeader_SortingOrder SamHeader_SortingOrder_SortingOrder_MAX = SamHeader_SortingOrder_COORDINATE;
constexpr int SamHeader_SortingOrder_SortingOrder_ARRAYSIZE = SamHeader_SortingOrder_SortingOrder_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SamHeader_SortingOrder_descriptor();
template<typename T>
inline const std::string& SamHeader_SortingOrder_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SamHeader_SortingOrder>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SamHeader_SortingOrder_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SamHeader_SortingOrder_descriptor(), enum_t_value);
}
inline bool SamHeader_SortingOrder_Parse(
    const std::string& name, SamHeader_SortingOrder* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SamHeader_SortingOrder>(
    SamHeader_SortingOrder_descriptor(), name, value);
}
enum SamHeader_AlignmentGrouping : int {
  SamHeader_AlignmentGrouping_NONE = 0,
  SamHeader_AlignmentGrouping_QUERY = 1,
  SamHeader_AlignmentGrouping_REFERENCE = 2,
  SamHeader_AlignmentGrouping_SamHeader_AlignmentGrouping_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SamHeader_AlignmentGrouping_SamHeader_AlignmentGrouping_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SamHeader_AlignmentGrouping_IsValid(int value);
constexpr SamHeader_AlignmentGrouping SamHeader_AlignmentGrouping_AlignmentGrouping_MIN = SamHeader_AlignmentGrouping_NONE;
constexpr SamHeader_AlignmentGrouping SamHeader_AlignmentGrouping_AlignmentGrouping_MAX = SamHeader_AlignmentGrouping_REFERENCE;
constexpr int SamHeader_AlignmentGrouping_AlignmentGrouping_ARRAYSIZE = SamHeader_AlignmentGrouping_AlignmentGrouping_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SamHeader_AlignmentGrouping_descriptor();
template<typename T>
inline const std::string& SamHeader_AlignmentGrouping_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SamHeader_AlignmentGrouping>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SamHeader_AlignmentGrouping_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SamHeader_AlignmentGrouping_descriptor(), enum_t_value);
}
inline bool SamHeader_AlignmentGrouping_Parse(
    const std::string& name, SamHeader_AlignmentGrouping* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SamHeader_AlignmentGrouping>(
    SamHeader_AlignmentGrouping_descriptor(), name, value);
}
enum SamReaderOptions_AuxFieldHandling : int {
  SamReaderOptions_AuxFieldHandling_UNSPECIFIED = 0,
  SamReaderOptions_AuxFieldHandling_SKIP_AUX_FIELDS = 1,
  SamReaderOptions_AuxFieldHandling_PARSE_ALL_AUX_FIELDS = 2,
  SamReaderOptions_AuxFieldHandling_SamReaderOptions_AuxFieldHandling_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SamReaderOptions_AuxFieldHandling_SamReaderOptions_AuxFieldHandling_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SamReaderOptions_AuxFieldHandling_IsValid(int value);
constexpr SamReaderOptions_AuxFieldHandling SamReaderOptions_AuxFieldHandling_AuxFieldHandling_MIN = SamReaderOptions_AuxFieldHandling_UNSPECIFIED;
constexpr SamReaderOptions_AuxFieldHandling SamReaderOptions_AuxFieldHandling_AuxFieldHandling_MAX = SamReaderOptions_AuxFieldHandling_PARSE_ALL_AUX_FIELDS;
constexpr int SamReaderOptions_AuxFieldHandling_AuxFieldHandling_ARRAYSIZE = SamReaderOptions_AuxFieldHandling_AuxFieldHandling_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SamReaderOptions_AuxFieldHandling_descriptor();
template<typename T>
inline const std::string& SamReaderOptions_AuxFieldHandling_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SamReaderOptions_AuxFieldHandling>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SamReaderOptions_AuxFieldHandling_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SamReaderOptions_AuxFieldHandling_descriptor(), enum_t_value);
}
inline bool SamReaderOptions_AuxFieldHandling_Parse(
    const std::string& name, SamReaderOptions_AuxFieldHandling* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SamReaderOptions_AuxFieldHandling>(
    SamReaderOptions_AuxFieldHandling_descriptor(), name, value);
}
enum ReadRequirements_MinBaseQualityMode : int {
  ReadRequirements_MinBaseQualityMode_UNSPECIFIED = 0,
  ReadRequirements_MinBaseQualityMode_ENFORCED_BY_CLIENT = 1,
  ReadRequirements_MinBaseQualityMode_ReadRequirements_MinBaseQualityMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReadRequirements_MinBaseQualityMode_ReadRequirements_MinBaseQualityMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReadRequirements_MinBaseQualityMode_IsValid(int value);
constexpr ReadRequirements_MinBaseQualityMode ReadRequirements_MinBaseQualityMode_MinBaseQualityMode_MIN = ReadRequirements_MinBaseQualityMode_UNSPECIFIED;
constexpr ReadRequirements_MinBaseQualityMode ReadRequirements_MinBaseQualityMode_MinBaseQualityMode_MAX = ReadRequirements_MinBaseQualityMode_ENFORCED_BY_CLIENT;
constexpr int ReadRequirements_MinBaseQualityMode_MinBaseQualityMode_ARRAYSIZE = ReadRequirements_MinBaseQualityMode_MinBaseQualityMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadRequirements_MinBaseQualityMode_descriptor();
template<typename T>
inline const std::string& ReadRequirements_MinBaseQualityMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadRequirements_MinBaseQualityMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadRequirements_MinBaseQualityMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReadRequirements_MinBaseQualityMode_descriptor(), enum_t_value);
}
inline bool ReadRequirements_MinBaseQualityMode_Parse(
    const std::string& name, ReadRequirements_MinBaseQualityMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReadRequirements_MinBaseQualityMode>(
    ReadRequirements_MinBaseQualityMode_descriptor(), name, value);
}
// ===================================================================

class LinearAlignment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.LinearAlignment) */ {
 public:
  LinearAlignment();
  virtual ~LinearAlignment();

  LinearAlignment(const LinearAlignment& from);
  LinearAlignment(LinearAlignment&& from) noexcept
    : LinearAlignment() {
    *this = ::std::move(from);
  }

  inline LinearAlignment& operator=(const LinearAlignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearAlignment& operator=(LinearAlignment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinearAlignment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinearAlignment* internal_default_instance() {
    return reinterpret_cast<const LinearAlignment*>(
               &_LinearAlignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LinearAlignment& a, LinearAlignment& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearAlignment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinearAlignment* New() const final {
    return CreateMaybeMessage<LinearAlignment>(nullptr);
  }

  LinearAlignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinearAlignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinearAlignment& from);
  void MergeFrom(const LinearAlignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinearAlignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.LinearAlignment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCigarFieldNumber = 3,
    kPositionFieldNumber = 1,
    kMappingQualityFieldNumber = 2,
  };
  // repeated .nucleus.genomics.v1.CigarUnit cigar = 3;
  int cigar_size() const;
  void clear_cigar();
  ::nucleus::genomics::v1::CigarUnit* mutable_cigar(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::CigarUnit >*
      mutable_cigar();
  const ::nucleus::genomics::v1::CigarUnit& cigar(int index) const;
  ::nucleus::genomics::v1::CigarUnit* add_cigar();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::CigarUnit >&
      cigar() const;

  // .nucleus.genomics.v1.Position position = 1;
  bool has_position() const;
  void clear_position();
  const ::nucleus::genomics::v1::Position& position() const;
  ::nucleus::genomics::v1::Position* release_position();
  ::nucleus::genomics::v1::Position* mutable_position();
  void set_allocated_position(::nucleus::genomics::v1::Position* position);

  // int32 mapping_quality = 2;
  void clear_mapping_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 mapping_quality() const;
  void set_mapping_quality(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.LinearAlignment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::CigarUnit > cigar_;
  ::nucleus::genomics::v1::Position* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 mapping_quality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2freads_2eproto;
};
// -------------------------------------------------------------------

class Read_InfoEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Read_InfoEntry_DoNotUse, 
    std::string, ::nucleus::genomics::v1::ListValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Read_InfoEntry_DoNotUse, 
    std::string, ::nucleus::genomics::v1::ListValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Read_InfoEntry_DoNotUse();
  Read_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Read_InfoEntry_DoNotUse& other);
  static const Read_InfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Read_InfoEntry_DoNotUse*>(&_Read_InfoEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nucleus.genomics.v1.Read.InfoEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class Read :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.Read) */ {
 public:
  Read();
  virtual ~Read();

  Read(const Read& from);
  Read(Read&& from) noexcept
    : Read() {
    *this = ::std::move(from);
  }

  inline Read& operator=(const Read& from) {
    CopyFrom(from);
    return *this;
  }
  inline Read& operator=(Read&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Read& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Read* internal_default_instance() {
    return reinterpret_cast<const Read*>(
               &_Read_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Read& a, Read& b) {
    a.Swap(&b);
  }
  inline void Swap(Read* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Read* New() const final {
    return CreateMaybeMessage<Read>(nullptr);
  }

  Read* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Read>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Read& from);
  void MergeFrom(const Read& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Read* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.Read";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAlignedQualityFieldNumber = 15,
    kInfoFieldNumber = 17,
    kIdFieldNumber = 1,
    kReadGroupIdFieldNumber = 2,
    kReadGroupSetIdFieldNumber = 3,
    kFragmentNameFieldNumber = 4,
    kAlignedSequenceFieldNumber = 14,
    kAlignmentFieldNumber = 11,
    kNextMatePositionFieldNumber = 16,
    kFragmentLengthFieldNumber = 7,
    kReadNumberFieldNumber = 8,
    kProperPlacementFieldNumber = 5,
    kDuplicateFragmentFieldNumber = 6,
    kFailedVendorQualityChecksFieldNumber = 10,
    kSecondaryAlignmentFieldNumber = 12,
    kNumberReadsFieldNumber = 9,
    kCachedEndFieldNumber = 18,
    kSupplementaryAlignmentFieldNumber = 13,
  };
  // repeated int32 aligned_quality = 15;
  int aligned_quality_size() const;
  void clear_aligned_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 aligned_quality(int index) const;
  void set_aligned_quality(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_aligned_quality(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      aligned_quality() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_aligned_quality();

  // map<string, .nucleus.genomics.v1.ListValue> info = 17;
  int info_size() const;
  void clear_info();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >&
      info() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >*
      mutable_info();

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string read_group_id = 2;
  void clear_read_group_id();
  const std::string& read_group_id() const;
  void set_read_group_id(const std::string& value);
  void set_read_group_id(std::string&& value);
  void set_read_group_id(const char* value);
  void set_read_group_id(const char* value, size_t size);
  std::string* mutable_read_group_id();
  std::string* release_read_group_id();
  void set_allocated_read_group_id(std::string* read_group_id);

  // string read_group_set_id = 3;
  void clear_read_group_set_id();
  const std::string& read_group_set_id() const;
  void set_read_group_set_id(const std::string& value);
  void set_read_group_set_id(std::string&& value);
  void set_read_group_set_id(const char* value);
  void set_read_group_set_id(const char* value, size_t size);
  std::string* mutable_read_group_set_id();
  std::string* release_read_group_set_id();
  void set_allocated_read_group_set_id(std::string* read_group_set_id);

  // string fragment_name = 4;
  void clear_fragment_name();
  const std::string& fragment_name() const;
  void set_fragment_name(const std::string& value);
  void set_fragment_name(std::string&& value);
  void set_fragment_name(const char* value);
  void set_fragment_name(const char* value, size_t size);
  std::string* mutable_fragment_name();
  std::string* release_fragment_name();
  void set_allocated_fragment_name(std::string* fragment_name);

  // string aligned_sequence = 14;
  void clear_aligned_sequence();
  const std::string& aligned_sequence() const;
  void set_aligned_sequence(const std::string& value);
  void set_aligned_sequence(std::string&& value);
  void set_aligned_sequence(const char* value);
  void set_aligned_sequence(const char* value, size_t size);
  std::string* mutable_aligned_sequence();
  std::string* release_aligned_sequence();
  void set_allocated_aligned_sequence(std::string* aligned_sequence);

  // .nucleus.genomics.v1.LinearAlignment alignment = 11;
  bool has_alignment() const;
  void clear_alignment();
  const ::nucleus::genomics::v1::LinearAlignment& alignment() const;
  ::nucleus::genomics::v1::LinearAlignment* release_alignment();
  ::nucleus::genomics::v1::LinearAlignment* mutable_alignment();
  void set_allocated_alignment(::nucleus::genomics::v1::LinearAlignment* alignment);

  // .nucleus.genomics.v1.Position next_mate_position = 16;
  bool has_next_mate_position() const;
  void clear_next_mate_position();
  const ::nucleus::genomics::v1::Position& next_mate_position() const;
  ::nucleus::genomics::v1::Position* release_next_mate_position();
  ::nucleus::genomics::v1::Position* mutable_next_mate_position();
  void set_allocated_next_mate_position(::nucleus::genomics::v1::Position* next_mate_position);

  // int32 fragment_length = 7;
  void clear_fragment_length();
  ::PROTOBUF_NAMESPACE_ID::int32 fragment_length() const;
  void set_fragment_length(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 read_number = 8;
  void clear_read_number();
  ::PROTOBUF_NAMESPACE_ID::int32 read_number() const;
  void set_read_number(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool proper_placement = 5;
  void clear_proper_placement();
  bool proper_placement() const;
  void set_proper_placement(bool value);

  // bool duplicate_fragment = 6;
  void clear_duplicate_fragment();
  bool duplicate_fragment() const;
  void set_duplicate_fragment(bool value);

  // bool failed_vendor_quality_checks = 10;
  void clear_failed_vendor_quality_checks();
  bool failed_vendor_quality_checks() const;
  void set_failed_vendor_quality_checks(bool value);

  // bool secondary_alignment = 12;
  void clear_secondary_alignment();
  bool secondary_alignment() const;
  void set_secondary_alignment(bool value);

  // int32 number_reads = 9;
  void clear_number_reads();
  ::PROTOBUF_NAMESPACE_ID::int32 number_reads() const;
  void set_number_reads(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 cached_end = 18;
  void clear_cached_end();
  ::PROTOBUF_NAMESPACE_ID::int64 cached_end() const;
  void set_cached_end(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool supplementary_alignment = 13;
  void clear_supplementary_alignment();
  bool supplementary_alignment() const;
  void set_supplementary_alignment(bool value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.Read)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > aligned_quality_;
  mutable std::atomic<int> _aligned_quality_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Read_InfoEntry_DoNotUse,
      std::string, ::nucleus::genomics::v1::ListValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr read_group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr read_group_set_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fragment_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aligned_sequence_;
  ::nucleus::genomics::v1::LinearAlignment* alignment_;
  ::nucleus::genomics::v1::Position* next_mate_position_;
  ::PROTOBUF_NAMESPACE_ID::int32 fragment_length_;
  ::PROTOBUF_NAMESPACE_ID::int32 read_number_;
  bool proper_placement_;
  bool duplicate_fragment_;
  bool failed_vendor_quality_checks_;
  bool secondary_alignment_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_reads_;
  ::PROTOBUF_NAMESPACE_ID::int64 cached_end_;
  bool supplementary_alignment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2freads_2eproto;
};
// -------------------------------------------------------------------

class SamHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.SamHeader) */ {
 public:
  SamHeader();
  virtual ~SamHeader();

  SamHeader(const SamHeader& from);
  SamHeader(SamHeader&& from) noexcept
    : SamHeader() {
    *this = ::std::move(from);
  }

  inline SamHeader& operator=(const SamHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline SamHeader& operator=(SamHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SamHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SamHeader* internal_default_instance() {
    return reinterpret_cast<const SamHeader*>(
               &_SamHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SamHeader& a, SamHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(SamHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SamHeader* New() const final {
    return CreateMaybeMessage<SamHeader>(nullptr);
  }

  SamHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SamHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SamHeader& from);
  void MergeFrom(const SamHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SamHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.SamHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SamHeader_SortingOrder SortingOrder;
  static constexpr SortingOrder UNKNOWN =
    SamHeader_SortingOrder_UNKNOWN;
  static constexpr SortingOrder UNSORTED =
    SamHeader_SortingOrder_UNSORTED;
  static constexpr SortingOrder QUERYNAME =
    SamHeader_SortingOrder_QUERYNAME;
  static constexpr SortingOrder COORDINATE =
    SamHeader_SortingOrder_COORDINATE;
  static inline bool SortingOrder_IsValid(int value) {
    return SamHeader_SortingOrder_IsValid(value);
  }
  static constexpr SortingOrder SortingOrder_MIN =
    SamHeader_SortingOrder_SortingOrder_MIN;
  static constexpr SortingOrder SortingOrder_MAX =
    SamHeader_SortingOrder_SortingOrder_MAX;
  static constexpr int SortingOrder_ARRAYSIZE =
    SamHeader_SortingOrder_SortingOrder_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SortingOrder_descriptor() {
    return SamHeader_SortingOrder_descriptor();
  }
  template<typename T>
  static inline const std::string& SortingOrder_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SortingOrder>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SortingOrder_Name.");
    return SamHeader_SortingOrder_Name(enum_t_value);
  }
  static inline bool SortingOrder_Parse(const std::string& name,
      SortingOrder* value) {
    return SamHeader_SortingOrder_Parse(name, value);
  }

  typedef SamHeader_AlignmentGrouping AlignmentGrouping;
  static constexpr AlignmentGrouping NONE =
    SamHeader_AlignmentGrouping_NONE;
  static constexpr AlignmentGrouping QUERY =
    SamHeader_AlignmentGrouping_QUERY;
  static constexpr AlignmentGrouping REFERENCE =
    SamHeader_AlignmentGrouping_REFERENCE;
  static inline bool AlignmentGrouping_IsValid(int value) {
    return SamHeader_AlignmentGrouping_IsValid(value);
  }
  static constexpr AlignmentGrouping AlignmentGrouping_MIN =
    SamHeader_AlignmentGrouping_AlignmentGrouping_MIN;
  static constexpr AlignmentGrouping AlignmentGrouping_MAX =
    SamHeader_AlignmentGrouping_AlignmentGrouping_MAX;
  static constexpr int AlignmentGrouping_ARRAYSIZE =
    SamHeader_AlignmentGrouping_AlignmentGrouping_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AlignmentGrouping_descriptor() {
    return SamHeader_AlignmentGrouping_descriptor();
  }
  template<typename T>
  static inline const std::string& AlignmentGrouping_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AlignmentGrouping>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AlignmentGrouping_Name.");
    return SamHeader_AlignmentGrouping_Name(enum_t_value);
  }
  static inline bool AlignmentGrouping_Parse(const std::string& name,
      AlignmentGrouping* value) {
    return SamHeader_AlignmentGrouping_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContigsFieldNumber = 4,
    kReadGroupsFieldNumber = 5,
    kProgramsFieldNumber = 6,
    kCommentsFieldNumber = 7,
    kFormatVersionFieldNumber = 1,
    kSortingOrderFieldNumber = 2,
    kAlignmentGroupingFieldNumber = 3,
  };
  // repeated .nucleus.genomics.v1.ContigInfo contigs = 4;
  int contigs_size() const;
  void clear_contigs();
  ::nucleus::genomics::v1::ContigInfo* mutable_contigs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::ContigInfo >*
      mutable_contigs();
  const ::nucleus::genomics::v1::ContigInfo& contigs(int index) const;
  ::nucleus::genomics::v1::ContigInfo* add_contigs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::ContigInfo >&
      contigs() const;

  // repeated .nucleus.genomics.v1.ReadGroup read_groups = 5;
  int read_groups_size() const;
  void clear_read_groups();
  ::nucleus::genomics::v1::ReadGroup* mutable_read_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::ReadGroup >*
      mutable_read_groups();
  const ::nucleus::genomics::v1::ReadGroup& read_groups(int index) const;
  ::nucleus::genomics::v1::ReadGroup* add_read_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::ReadGroup >&
      read_groups() const;

  // repeated .nucleus.genomics.v1.Program programs = 6;
  int programs_size() const;
  void clear_programs();
  ::nucleus::genomics::v1::Program* mutable_programs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::Program >*
      mutable_programs();
  const ::nucleus::genomics::v1::Program& programs(int index) const;
  ::nucleus::genomics::v1::Program* add_programs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::Program >&
      programs() const;

  // repeated string comments = 7;
  int comments_size() const;
  void clear_comments();
  const std::string& comments(int index) const;
  std::string* mutable_comments(int index);
  void set_comments(int index, const std::string& value);
  void set_comments(int index, std::string&& value);
  void set_comments(int index, const char* value);
  void set_comments(int index, const char* value, size_t size);
  std::string* add_comments();
  void add_comments(const std::string& value);
  void add_comments(std::string&& value);
  void add_comments(const char* value);
  void add_comments(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& comments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_comments();

  // string format_version = 1;
  void clear_format_version();
  const std::string& format_version() const;
  void set_format_version(const std::string& value);
  void set_format_version(std::string&& value);
  void set_format_version(const char* value);
  void set_format_version(const char* value, size_t size);
  std::string* mutable_format_version();
  std::string* release_format_version();
  void set_allocated_format_version(std::string* format_version);

  // .nucleus.genomics.v1.SamHeader.SortingOrder sorting_order = 2;
  void clear_sorting_order();
  ::nucleus::genomics::v1::SamHeader_SortingOrder sorting_order() const;
  void set_sorting_order(::nucleus::genomics::v1::SamHeader_SortingOrder value);

  // .nucleus.genomics.v1.SamHeader.AlignmentGrouping alignment_grouping = 3;
  void clear_alignment_grouping();
  ::nucleus::genomics::v1::SamHeader_AlignmentGrouping alignment_grouping() const;
  void set_alignment_grouping(::nucleus::genomics::v1::SamHeader_AlignmentGrouping value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.SamHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::ContigInfo > contigs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::ReadGroup > read_groups_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::Program > programs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> comments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_version_;
  int sorting_order_;
  int alignment_grouping_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2freads_2eproto;
};
// -------------------------------------------------------------------

class ReadGroup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.ReadGroup) */ {
 public:
  ReadGroup();
  virtual ~ReadGroup();

  ReadGroup(const ReadGroup& from);
  ReadGroup(ReadGroup&& from) noexcept
    : ReadGroup() {
    *this = ::std::move(from);
  }

  inline ReadGroup& operator=(const ReadGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadGroup& operator=(ReadGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadGroup* internal_default_instance() {
    return reinterpret_cast<const ReadGroup*>(
               &_ReadGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReadGroup& a, ReadGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadGroup* New() const final {
    return CreateMaybeMessage<ReadGroup>(nullptr);
  }

  ReadGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadGroup& from);
  void MergeFrom(const ReadGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.ReadGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgramIdsFieldNumber = 8,
    kNameFieldNumber = 1,
    kSequencingCenterFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kDateFieldNumber = 4,
    kFlowOrderFieldNumber = 5,
    kKeySequenceFieldNumber = 6,
    kLibraryIdFieldNumber = 7,
    kPlatformFieldNumber = 10,
    kPlatformModelFieldNumber = 11,
    kPlatformUnitFieldNumber = 12,
    kSampleIdFieldNumber = 13,
    kPredictedInsertSizeFieldNumber = 9,
  };
  // repeated string program_ids = 8;
  int program_ids_size() const;
  void clear_program_ids();
  const std::string& program_ids(int index) const;
  std::string* mutable_program_ids(int index);
  void set_program_ids(int index, const std::string& value);
  void set_program_ids(int index, std::string&& value);
  void set_program_ids(int index, const char* value);
  void set_program_ids(int index, const char* value, size_t size);
  std::string* add_program_ids();
  void add_program_ids(const std::string& value);
  void add_program_ids(std::string&& value);
  void add_program_ids(const char* value);
  void add_program_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& program_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_program_ids();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string sequencing_center = 2;
  void clear_sequencing_center();
  const std::string& sequencing_center() const;
  void set_sequencing_center(const std::string& value);
  void set_sequencing_center(std::string&& value);
  void set_sequencing_center(const char* value);
  void set_sequencing_center(const char* value, size_t size);
  std::string* mutable_sequencing_center();
  std::string* release_sequencing_center();
  void set_allocated_sequencing_center(std::string* sequencing_center);

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // string date = 4;
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);

  // string flow_order = 5;
  void clear_flow_order();
  const std::string& flow_order() const;
  void set_flow_order(const std::string& value);
  void set_flow_order(std::string&& value);
  void set_flow_order(const char* value);
  void set_flow_order(const char* value, size_t size);
  std::string* mutable_flow_order();
  std::string* release_flow_order();
  void set_allocated_flow_order(std::string* flow_order);

  // string key_sequence = 6;
  void clear_key_sequence();
  const std::string& key_sequence() const;
  void set_key_sequence(const std::string& value);
  void set_key_sequence(std::string&& value);
  void set_key_sequence(const char* value);
  void set_key_sequence(const char* value, size_t size);
  std::string* mutable_key_sequence();
  std::string* release_key_sequence();
  void set_allocated_key_sequence(std::string* key_sequence);

  // string library_id = 7;
  void clear_library_id();
  const std::string& library_id() const;
  void set_library_id(const std::string& value);
  void set_library_id(std::string&& value);
  void set_library_id(const char* value);
  void set_library_id(const char* value, size_t size);
  std::string* mutable_library_id();
  std::string* release_library_id();
  void set_allocated_library_id(std::string* library_id);

  // string platform = 10;
  void clear_platform();
  const std::string& platform() const;
  void set_platform(const std::string& value);
  void set_platform(std::string&& value);
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  std::string* mutable_platform();
  std::string* release_platform();
  void set_allocated_platform(std::string* platform);

  // string platform_model = 11;
  void clear_platform_model();
  const std::string& platform_model() const;
  void set_platform_model(const std::string& value);
  void set_platform_model(std::string&& value);
  void set_platform_model(const char* value);
  void set_platform_model(const char* value, size_t size);
  std::string* mutable_platform_model();
  std::string* release_platform_model();
  void set_allocated_platform_model(std::string* platform_model);

  // string platform_unit = 12;
  void clear_platform_unit();
  const std::string& platform_unit() const;
  void set_platform_unit(const std::string& value);
  void set_platform_unit(std::string&& value);
  void set_platform_unit(const char* value);
  void set_platform_unit(const char* value, size_t size);
  std::string* mutable_platform_unit();
  std::string* release_platform_unit();
  void set_allocated_platform_unit(std::string* platform_unit);

  // string sample_id = 13;
  void clear_sample_id();
  const std::string& sample_id() const;
  void set_sample_id(const std::string& value);
  void set_sample_id(std::string&& value);
  void set_sample_id(const char* value);
  void set_sample_id(const char* value, size_t size);
  std::string* mutable_sample_id();
  std::string* release_sample_id();
  void set_allocated_sample_id(std::string* sample_id);

  // int32 predicted_insert_size = 9;
  void clear_predicted_insert_size();
  ::PROTOBUF_NAMESPACE_ID::int32 predicted_insert_size() const;
  void set_predicted_insert_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.ReadGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> program_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequencing_center_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flow_order_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_sequence_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr library_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_unit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sample_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 predicted_insert_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2freads_2eproto;
};
// -------------------------------------------------------------------

class Program :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.Program) */ {
 public:
  Program();
  virtual ~Program();

  Program(const Program& from);
  Program(Program&& from) noexcept
    : Program() {
    *this = ::std::move(from);
  }

  inline Program& operator=(const Program& from) {
    CopyFrom(from);
    return *this;
  }
  inline Program& operator=(Program&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Program& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Program* internal_default_instance() {
    return reinterpret_cast<const Program*>(
               &_Program_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Program& a, Program& b) {
    a.Swap(&b);
  }
  inline void Swap(Program* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Program* New() const final {
    return CreateMaybeMessage<Program>(nullptr);
  }

  Program* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Program>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Program& from);
  void MergeFrom(const Program& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Program* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.Program";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandLineFieldNumber = 1,
    kIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kPrevProgramIdFieldNumber = 4,
    kVersionFieldNumber = 5,
    kDescriptionFieldNumber = 6,
  };
  // string command_line = 1;
  void clear_command_line();
  const std::string& command_line() const;
  void set_command_line(const std::string& value);
  void set_command_line(std::string&& value);
  void set_command_line(const char* value);
  void set_command_line(const char* value, size_t size);
  std::string* mutable_command_line();
  std::string* release_command_line();
  void set_allocated_command_line(std::string* command_line);

  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string prev_program_id = 4;
  void clear_prev_program_id();
  const std::string& prev_program_id() const;
  void set_prev_program_id(const std::string& value);
  void set_prev_program_id(std::string&& value);
  void set_prev_program_id(const char* value);
  void set_prev_program_id(const char* value, size_t size);
  std::string* mutable_prev_program_id();
  std::string* release_prev_program_id();
  void set_allocated_prev_program_id(std::string* prev_program_id);

  // string version = 5;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);

  // string description = 6;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.Program)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_line_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_program_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2freads_2eproto;
};
// -------------------------------------------------------------------

class SamReaderOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.SamReaderOptions) */ {
 public:
  SamReaderOptions();
  virtual ~SamReaderOptions();

  SamReaderOptions(const SamReaderOptions& from);
  SamReaderOptions(SamReaderOptions&& from) noexcept
    : SamReaderOptions() {
    *this = ::std::move(from);
  }

  inline SamReaderOptions& operator=(const SamReaderOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SamReaderOptions& operator=(SamReaderOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SamReaderOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SamReaderOptions* internal_default_instance() {
    return reinterpret_cast<const SamReaderOptions*>(
               &_SamReaderOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SamReaderOptions& a, SamReaderOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(SamReaderOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SamReaderOptions* New() const final {
    return CreateMaybeMessage<SamReaderOptions>(nullptr);
  }

  SamReaderOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SamReaderOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SamReaderOptions& from);
  void MergeFrom(const SamReaderOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SamReaderOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.SamReaderOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SamReaderOptions_AuxFieldHandling AuxFieldHandling;
  static constexpr AuxFieldHandling UNSPECIFIED =
    SamReaderOptions_AuxFieldHandling_UNSPECIFIED;
  static constexpr AuxFieldHandling SKIP_AUX_FIELDS =
    SamReaderOptions_AuxFieldHandling_SKIP_AUX_FIELDS;
  static constexpr AuxFieldHandling PARSE_ALL_AUX_FIELDS =
    SamReaderOptions_AuxFieldHandling_PARSE_ALL_AUX_FIELDS;
  static inline bool AuxFieldHandling_IsValid(int value) {
    return SamReaderOptions_AuxFieldHandling_IsValid(value);
  }
  static constexpr AuxFieldHandling AuxFieldHandling_MIN =
    SamReaderOptions_AuxFieldHandling_AuxFieldHandling_MIN;
  static constexpr AuxFieldHandling AuxFieldHandling_MAX =
    SamReaderOptions_AuxFieldHandling_AuxFieldHandling_MAX;
  static constexpr int AuxFieldHandling_ARRAYSIZE =
    SamReaderOptions_AuxFieldHandling_AuxFieldHandling_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AuxFieldHandling_descriptor() {
    return SamReaderOptions_AuxFieldHandling_descriptor();
  }
  template<typename T>
  static inline const std::string& AuxFieldHandling_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AuxFieldHandling>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AuxFieldHandling_Name.");
    return SamReaderOptions_AuxFieldHandling_Name(enum_t_value);
  }
  static inline bool AuxFieldHandling_Parse(const std::string& name,
      AuxFieldHandling* value) {
    return SamReaderOptions_AuxFieldHandling_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAuxFieldsToKeepFieldNumber = 11,
    kReadRequirementsFieldNumber = 1,
    kHtsBlockSizeFieldNumber = 4,
    kAuxFieldHandlingFieldNumber = 3,
    kDownsampleFractionFieldNumber = 5,
    kRandomSeedFieldNumber = 6,
    kUseOriginalBaseQualityScoresFieldNumber = 10,
  };
  // repeated string aux_fields_to_keep = 11;
  int aux_fields_to_keep_size() const;
  void clear_aux_fields_to_keep();
  const std::string& aux_fields_to_keep(int index) const;
  std::string* mutable_aux_fields_to_keep(int index);
  void set_aux_fields_to_keep(int index, const std::string& value);
  void set_aux_fields_to_keep(int index, std::string&& value);
  void set_aux_fields_to_keep(int index, const char* value);
  void set_aux_fields_to_keep(int index, const char* value, size_t size);
  std::string* add_aux_fields_to_keep();
  void add_aux_fields_to_keep(const std::string& value);
  void add_aux_fields_to_keep(std::string&& value);
  void add_aux_fields_to_keep(const char* value);
  void add_aux_fields_to_keep(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aux_fields_to_keep() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aux_fields_to_keep();

  // .nucleus.genomics.v1.ReadRequirements read_requirements = 1;
  bool has_read_requirements() const;
  void clear_read_requirements();
  const ::nucleus::genomics::v1::ReadRequirements& read_requirements() const;
  ::nucleus::genomics::v1::ReadRequirements* release_read_requirements();
  ::nucleus::genomics::v1::ReadRequirements* mutable_read_requirements();
  void set_allocated_read_requirements(::nucleus::genomics::v1::ReadRequirements* read_requirements);

  // int64 hts_block_size = 4;
  void clear_hts_block_size();
  ::PROTOBUF_NAMESPACE_ID::int64 hts_block_size() const;
  void set_hts_block_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .nucleus.genomics.v1.SamReaderOptions.AuxFieldHandling aux_field_handling = 3;
  void clear_aux_field_handling();
  ::nucleus::genomics::v1::SamReaderOptions_AuxFieldHandling aux_field_handling() const;
  void set_aux_field_handling(::nucleus::genomics::v1::SamReaderOptions_AuxFieldHandling value);

  // float downsample_fraction = 5;
  void clear_downsample_fraction();
  float downsample_fraction() const;
  void set_downsample_fraction(float value);

  // int64 random_seed = 6;
  void clear_random_seed();
  ::PROTOBUF_NAMESPACE_ID::int64 random_seed() const;
  void set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool use_original_base_quality_scores = 10;
  void clear_use_original_base_quality_scores();
  bool use_original_base_quality_scores() const;
  void set_use_original_base_quality_scores(bool value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.SamReaderOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aux_fields_to_keep_;
  ::nucleus::genomics::v1::ReadRequirements* read_requirements_;
  ::PROTOBUF_NAMESPACE_ID::int64 hts_block_size_;
  int aux_field_handling_;
  float downsample_fraction_;
  ::PROTOBUF_NAMESPACE_ID::int64 random_seed_;
  bool use_original_base_quality_scores_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2freads_2eproto;
};
// -------------------------------------------------------------------

class ReadRequirements :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.ReadRequirements) */ {
 public:
  ReadRequirements();
  virtual ~ReadRequirements();

  ReadRequirements(const ReadRequirements& from);
  ReadRequirements(ReadRequirements&& from) noexcept
    : ReadRequirements() {
    *this = ::std::move(from);
  }

  inline ReadRequirements& operator=(const ReadRequirements& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRequirements& operator=(ReadRequirements&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRequirements& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadRequirements* internal_default_instance() {
    return reinterpret_cast<const ReadRequirements*>(
               &_ReadRequirements_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReadRequirements& a, ReadRequirements& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRequirements* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRequirements* New() const final {
    return CreateMaybeMessage<ReadRequirements>(nullptr);
  }

  ReadRequirements* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRequirements>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRequirements& from);
  void MergeFrom(const ReadRequirements& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRequirements* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.ReadRequirements";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReadRequirements_MinBaseQualityMode MinBaseQualityMode;
  static constexpr MinBaseQualityMode UNSPECIFIED =
    ReadRequirements_MinBaseQualityMode_UNSPECIFIED;
  static constexpr MinBaseQualityMode ENFORCED_BY_CLIENT =
    ReadRequirements_MinBaseQualityMode_ENFORCED_BY_CLIENT;
  static inline bool MinBaseQualityMode_IsValid(int value) {
    return ReadRequirements_MinBaseQualityMode_IsValid(value);
  }
  static constexpr MinBaseQualityMode MinBaseQualityMode_MIN =
    ReadRequirements_MinBaseQualityMode_MinBaseQualityMode_MIN;
  static constexpr MinBaseQualityMode MinBaseQualityMode_MAX =
    ReadRequirements_MinBaseQualityMode_MinBaseQualityMode_MAX;
  static constexpr int MinBaseQualityMode_ARRAYSIZE =
    ReadRequirements_MinBaseQualityMode_MinBaseQualityMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MinBaseQualityMode_descriptor() {
    return ReadRequirements_MinBaseQualityMode_descriptor();
  }
  template<typename T>
  static inline const std::string& MinBaseQualityMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MinBaseQualityMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MinBaseQualityMode_Name.");
    return ReadRequirements_MinBaseQualityMode_Name(enum_t_value);
  }
  static inline bool MinBaseQualityMode_Parse(const std::string& name,
      MinBaseQualityMode* value) {
    return ReadRequirements_MinBaseQualityMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeepDuplicatesFieldNumber = 1,
    kKeepFailedVendorQualityChecksFieldNumber = 2,
    kKeepSecondaryAlignmentsFieldNumber = 3,
    kKeepSupplementaryAlignmentsFieldNumber = 4,
    kKeepUnalignedFieldNumber = 5,
    kKeepImproperlyPlacedFieldNumber = 6,
    kMinMappingQualityFieldNumber = 7,
    kMinBaseQualityFieldNumber = 8,
    kMinBaseQualityModeFieldNumber = 9,
  };
  // bool keep_duplicates = 1;
  void clear_keep_duplicates();
  bool keep_duplicates() const;
  void set_keep_duplicates(bool value);

  // bool keep_failed_vendor_quality_checks = 2;
  void clear_keep_failed_vendor_quality_checks();
  bool keep_failed_vendor_quality_checks() const;
  void set_keep_failed_vendor_quality_checks(bool value);

  // bool keep_secondary_alignments = 3;
  void clear_keep_secondary_alignments();
  bool keep_secondary_alignments() const;
  void set_keep_secondary_alignments(bool value);

  // bool keep_supplementary_alignments = 4;
  void clear_keep_supplementary_alignments();
  bool keep_supplementary_alignments() const;
  void set_keep_supplementary_alignments(bool value);

  // bool keep_unaligned = 5;
  void clear_keep_unaligned();
  bool keep_unaligned() const;
  void set_keep_unaligned(bool value);

  // bool keep_improperly_placed = 6;
  void clear_keep_improperly_placed();
  bool keep_improperly_placed() const;
  void set_keep_improperly_placed(bool value);

  // int32 min_mapping_quality = 7;
  void clear_min_mapping_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 min_mapping_quality() const;
  void set_min_mapping_quality(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 min_base_quality = 8;
  void clear_min_base_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 min_base_quality() const;
  void set_min_base_quality(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .nucleus.genomics.v1.ReadRequirements.MinBaseQualityMode min_base_quality_mode = 9;
  void clear_min_base_quality_mode();
  ::nucleus::genomics::v1::ReadRequirements_MinBaseQualityMode min_base_quality_mode() const;
  void set_min_base_quality_mode(::nucleus::genomics::v1::ReadRequirements_MinBaseQualityMode value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.ReadRequirements)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool keep_duplicates_;
  bool keep_failed_vendor_quality_checks_;
  bool keep_secondary_alignments_;
  bool keep_supplementary_alignments_;
  bool keep_unaligned_;
  bool keep_improperly_placed_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_mapping_quality_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_base_quality_;
  int min_base_quality_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2freads_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LinearAlignment

// .nucleus.genomics.v1.Position position = 1;
inline bool LinearAlignment::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::nucleus::genomics::v1::Position& LinearAlignment::position() const {
  const ::nucleus::genomics::v1::Position* p = position_;
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.LinearAlignment.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::nucleus::genomics::v1::Position*>(
      &::nucleus::genomics::v1::_Position_default_instance_);
}
inline ::nucleus::genomics::v1::Position* LinearAlignment::release_position() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.LinearAlignment.position)
  
  ::nucleus::genomics::v1::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::nucleus::genomics::v1::Position* LinearAlignment::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::nucleus::genomics::v1::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.LinearAlignment.position)
  return position_;
}
inline void LinearAlignment::set_allocated_position(::nucleus::genomics::v1::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.LinearAlignment.position)
}

// int32 mapping_quality = 2;
inline void LinearAlignment::clear_mapping_quality() {
  mapping_quality_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LinearAlignment::mapping_quality() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.LinearAlignment.mapping_quality)
  return mapping_quality_;
}
inline void LinearAlignment::set_mapping_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mapping_quality_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.LinearAlignment.mapping_quality)
}

// repeated .nucleus.genomics.v1.CigarUnit cigar = 3;
inline int LinearAlignment::cigar_size() const {
  return cigar_.size();
}
inline ::nucleus::genomics::v1::CigarUnit* LinearAlignment::mutable_cigar(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.LinearAlignment.cigar)
  return cigar_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::CigarUnit >*
LinearAlignment::mutable_cigar() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.LinearAlignment.cigar)
  return &cigar_;
}
inline const ::nucleus::genomics::v1::CigarUnit& LinearAlignment::cigar(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.LinearAlignment.cigar)
  return cigar_.Get(index);
}
inline ::nucleus::genomics::v1::CigarUnit* LinearAlignment::add_cigar() {
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.LinearAlignment.cigar)
  return cigar_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::CigarUnit >&
LinearAlignment::cigar() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.LinearAlignment.cigar)
  return cigar_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Read

// string id = 1;
inline void Read::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Read::id() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Read.id)
  return id_.GetNoArena();
}
inline void Read::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Read.id)
}
inline void Read::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.Read.id)
}
inline void Read::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Read.id)
}
inline void Read::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Read.id)
}
inline std::string* Read::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Read.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Read::release_id() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.Read.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Read::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.Read.id)
}

// string read_group_id = 2;
inline void Read::clear_read_group_id() {
  read_group_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Read::read_group_id() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Read.read_group_id)
  return read_group_id_.GetNoArena();
}
inline void Read::set_read_group_id(const std::string& value) {
  
  read_group_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Read.read_group_id)
}
inline void Read::set_read_group_id(std::string&& value) {
  
  read_group_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.Read.read_group_id)
}
inline void Read::set_read_group_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  read_group_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Read.read_group_id)
}
inline void Read::set_read_group_id(const char* value, size_t size) {
  
  read_group_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Read.read_group_id)
}
inline std::string* Read::mutable_read_group_id() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Read.read_group_id)
  return read_group_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Read::release_read_group_id() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.Read.read_group_id)
  
  return read_group_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Read::set_allocated_read_group_id(std::string* read_group_id) {
  if (read_group_id != nullptr) {
    
  } else {
    
  }
  read_group_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), read_group_id);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.Read.read_group_id)
}

// string read_group_set_id = 3;
inline void Read::clear_read_group_set_id() {
  read_group_set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Read::read_group_set_id() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Read.read_group_set_id)
  return read_group_set_id_.GetNoArena();
}
inline void Read::set_read_group_set_id(const std::string& value) {
  
  read_group_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Read.read_group_set_id)
}
inline void Read::set_read_group_set_id(std::string&& value) {
  
  read_group_set_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.Read.read_group_set_id)
}
inline void Read::set_read_group_set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  read_group_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Read.read_group_set_id)
}
inline void Read::set_read_group_set_id(const char* value, size_t size) {
  
  read_group_set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Read.read_group_set_id)
}
inline std::string* Read::mutable_read_group_set_id() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Read.read_group_set_id)
  return read_group_set_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Read::release_read_group_set_id() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.Read.read_group_set_id)
  
  return read_group_set_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Read::set_allocated_read_group_set_id(std::string* read_group_set_id) {
  if (read_group_set_id != nullptr) {
    
  } else {
    
  }
  read_group_set_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), read_group_set_id);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.Read.read_group_set_id)
}

// string fragment_name = 4;
inline void Read::clear_fragment_name() {
  fragment_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Read::fragment_name() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Read.fragment_name)
  return fragment_name_.GetNoArena();
}
inline void Read::set_fragment_name(const std::string& value) {
  
  fragment_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Read.fragment_name)
}
inline void Read::set_fragment_name(std::string&& value) {
  
  fragment_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.Read.fragment_name)
}
inline void Read::set_fragment_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fragment_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Read.fragment_name)
}
inline void Read::set_fragment_name(const char* value, size_t size) {
  
  fragment_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Read.fragment_name)
}
inline std::string* Read::mutable_fragment_name() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Read.fragment_name)
  return fragment_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Read::release_fragment_name() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.Read.fragment_name)
  
  return fragment_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Read::set_allocated_fragment_name(std::string* fragment_name) {
  if (fragment_name != nullptr) {
    
  } else {
    
  }
  fragment_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fragment_name);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.Read.fragment_name)
}

// bool proper_placement = 5;
inline void Read::clear_proper_placement() {
  proper_placement_ = false;
}
inline bool Read::proper_placement() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Read.proper_placement)
  return proper_placement_;
}
inline void Read::set_proper_placement(bool value) {
  
  proper_placement_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Read.proper_placement)
}

// bool duplicate_fragment = 6;
inline void Read::clear_duplicate_fragment() {
  duplicate_fragment_ = false;
}
inline bool Read::duplicate_fragment() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Read.duplicate_fragment)
  return duplicate_fragment_;
}
inline void Read::set_duplicate_fragment(bool value) {
  
  duplicate_fragment_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Read.duplicate_fragment)
}

// int32 fragment_length = 7;
inline void Read::clear_fragment_length() {
  fragment_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Read::fragment_length() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Read.fragment_length)
  return fragment_length_;
}
inline void Read::set_fragment_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fragment_length_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Read.fragment_length)
}

// int32 read_number = 8;
inline void Read::clear_read_number() {
  read_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Read::read_number() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Read.read_number)
  return read_number_;
}
inline void Read::set_read_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  read_number_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Read.read_number)
}

// int32 number_reads = 9;
inline void Read::clear_number_reads() {
  number_reads_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Read::number_reads() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Read.number_reads)
  return number_reads_;
}
inline void Read::set_number_reads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  number_reads_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Read.number_reads)
}

// bool failed_vendor_quality_checks = 10;
inline void Read::clear_failed_vendor_quality_checks() {
  failed_vendor_quality_checks_ = false;
}
inline bool Read::failed_vendor_quality_checks() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Read.failed_vendor_quality_checks)
  return failed_vendor_quality_checks_;
}
inline void Read::set_failed_vendor_quality_checks(bool value) {
  
  failed_vendor_quality_checks_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Read.failed_vendor_quality_checks)
}

// .nucleus.genomics.v1.LinearAlignment alignment = 11;
inline bool Read::has_alignment() const {
  return this != internal_default_instance() && alignment_ != nullptr;
}
inline void Read::clear_alignment() {
  if (GetArenaNoVirtual() == nullptr && alignment_ != nullptr) {
    delete alignment_;
  }
  alignment_ = nullptr;
}
inline const ::nucleus::genomics::v1::LinearAlignment& Read::alignment() const {
  const ::nucleus::genomics::v1::LinearAlignment* p = alignment_;
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Read.alignment)
  return p != nullptr ? *p : *reinterpret_cast<const ::nucleus::genomics::v1::LinearAlignment*>(
      &::nucleus::genomics::v1::_LinearAlignment_default_instance_);
}
inline ::nucleus::genomics::v1::LinearAlignment* Read::release_alignment() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.Read.alignment)
  
  ::nucleus::genomics::v1::LinearAlignment* temp = alignment_;
  alignment_ = nullptr;
  return temp;
}
inline ::nucleus::genomics::v1::LinearAlignment* Read::mutable_alignment() {
  
  if (alignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::nucleus::genomics::v1::LinearAlignment>(GetArenaNoVirtual());
    alignment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Read.alignment)
  return alignment_;
}
inline void Read::set_allocated_alignment(::nucleus::genomics::v1::LinearAlignment* alignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete alignment_;
  }
  if (alignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment, submessage_arena);
    }
    
  } else {
    
  }
  alignment_ = alignment;
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.Read.alignment)
}

// bool secondary_alignment = 12;
inline void Read::clear_secondary_alignment() {
  secondary_alignment_ = false;
}
inline bool Read::secondary_alignment() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Read.secondary_alignment)
  return secondary_alignment_;
}
inline void Read::set_secondary_alignment(bool value) {
  
  secondary_alignment_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Read.secondary_alignment)
}

// bool supplementary_alignment = 13;
inline void Read::clear_supplementary_alignment() {
  supplementary_alignment_ = false;
}
inline bool Read::supplementary_alignment() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Read.supplementary_alignment)
  return supplementary_alignment_;
}
inline void Read::set_supplementary_alignment(bool value) {
  
  supplementary_alignment_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Read.supplementary_alignment)
}

// string aligned_sequence = 14;
inline void Read::clear_aligned_sequence() {
  aligned_sequence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Read::aligned_sequence() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Read.aligned_sequence)
  return aligned_sequence_.GetNoArena();
}
inline void Read::set_aligned_sequence(const std::string& value) {
  
  aligned_sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Read.aligned_sequence)
}
inline void Read::set_aligned_sequence(std::string&& value) {
  
  aligned_sequence_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.Read.aligned_sequence)
}
inline void Read::set_aligned_sequence(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aligned_sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Read.aligned_sequence)
}
inline void Read::set_aligned_sequence(const char* value, size_t size) {
  
  aligned_sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Read.aligned_sequence)
}
inline std::string* Read::mutable_aligned_sequence() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Read.aligned_sequence)
  return aligned_sequence_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Read::release_aligned_sequence() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.Read.aligned_sequence)
  
  return aligned_sequence_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Read::set_allocated_aligned_sequence(std::string* aligned_sequence) {
  if (aligned_sequence != nullptr) {
    
  } else {
    
  }
  aligned_sequence_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aligned_sequence);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.Read.aligned_sequence)
}

// repeated int32 aligned_quality = 15;
inline int Read::aligned_quality_size() const {
  return aligned_quality_.size();
}
inline void Read::clear_aligned_quality() {
  aligned_quality_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Read::aligned_quality(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Read.aligned_quality)
  return aligned_quality_.Get(index);
}
inline void Read::set_aligned_quality(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  aligned_quality_.Set(index, value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Read.aligned_quality)
}
inline void Read::add_aligned_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  aligned_quality_.Add(value);
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.Read.aligned_quality)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Read::aligned_quality() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.Read.aligned_quality)
  return aligned_quality_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Read::mutable_aligned_quality() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.Read.aligned_quality)
  return &aligned_quality_;
}

// .nucleus.genomics.v1.Position next_mate_position = 16;
inline bool Read::has_next_mate_position() const {
  return this != internal_default_instance() && next_mate_position_ != nullptr;
}
inline const ::nucleus::genomics::v1::Position& Read::next_mate_position() const {
  const ::nucleus::genomics::v1::Position* p = next_mate_position_;
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Read.next_mate_position)
  return p != nullptr ? *p : *reinterpret_cast<const ::nucleus::genomics::v1::Position*>(
      &::nucleus::genomics::v1::_Position_default_instance_);
}
inline ::nucleus::genomics::v1::Position* Read::release_next_mate_position() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.Read.next_mate_position)
  
  ::nucleus::genomics::v1::Position* temp = next_mate_position_;
  next_mate_position_ = nullptr;
  return temp;
}
inline ::nucleus::genomics::v1::Position* Read::mutable_next_mate_position() {
  
  if (next_mate_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::nucleus::genomics::v1::Position>(GetArenaNoVirtual());
    next_mate_position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Read.next_mate_position)
  return next_mate_position_;
}
inline void Read::set_allocated_next_mate_position(::nucleus::genomics::v1::Position* next_mate_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_mate_position_);
  }
  if (next_mate_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      next_mate_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_mate_position, submessage_arena);
    }
    
  } else {
    
  }
  next_mate_position_ = next_mate_position;
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.Read.next_mate_position)
}

// map<string, .nucleus.genomics.v1.ListValue> info = 17;
inline int Read::info_size() const {
  return info_.size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >&
Read::info() const {
  // @@protoc_insertion_point(field_map:nucleus.genomics.v1.Read.info)
  return info_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >*
Read::mutable_info() {
  // @@protoc_insertion_point(field_mutable_map:nucleus.genomics.v1.Read.info)
  return info_.MutableMap();
}

// int64 cached_end = 18;
inline void Read::clear_cached_end() {
  cached_end_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Read::cached_end() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Read.cached_end)
  return cached_end_;
}
inline void Read::set_cached_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cached_end_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Read.cached_end)
}

// -------------------------------------------------------------------

// SamHeader

// string format_version = 1;
inline void SamHeader::clear_format_version() {
  format_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SamHeader::format_version() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.SamHeader.format_version)
  return format_version_.GetNoArena();
}
inline void SamHeader::set_format_version(const std::string& value) {
  
  format_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.SamHeader.format_version)
}
inline void SamHeader::set_format_version(std::string&& value) {
  
  format_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.SamHeader.format_version)
}
inline void SamHeader::set_format_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  format_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.SamHeader.format_version)
}
inline void SamHeader::set_format_version(const char* value, size_t size) {
  
  format_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.SamHeader.format_version)
}
inline std::string* SamHeader::mutable_format_version() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.SamHeader.format_version)
  return format_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SamHeader::release_format_version() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.SamHeader.format_version)
  
  return format_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SamHeader::set_allocated_format_version(std::string* format_version) {
  if (format_version != nullptr) {
    
  } else {
    
  }
  format_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format_version);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.SamHeader.format_version)
}

// .nucleus.genomics.v1.SamHeader.SortingOrder sorting_order = 2;
inline void SamHeader::clear_sorting_order() {
  sorting_order_ = 0;
}
inline ::nucleus::genomics::v1::SamHeader_SortingOrder SamHeader::sorting_order() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.SamHeader.sorting_order)
  return static_cast< ::nucleus::genomics::v1::SamHeader_SortingOrder >(sorting_order_);
}
inline void SamHeader::set_sorting_order(::nucleus::genomics::v1::SamHeader_SortingOrder value) {
  
  sorting_order_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.SamHeader.sorting_order)
}

// .nucleus.genomics.v1.SamHeader.AlignmentGrouping alignment_grouping = 3;
inline void SamHeader::clear_alignment_grouping() {
  alignment_grouping_ = 0;
}
inline ::nucleus::genomics::v1::SamHeader_AlignmentGrouping SamHeader::alignment_grouping() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.SamHeader.alignment_grouping)
  return static_cast< ::nucleus::genomics::v1::SamHeader_AlignmentGrouping >(alignment_grouping_);
}
inline void SamHeader::set_alignment_grouping(::nucleus::genomics::v1::SamHeader_AlignmentGrouping value) {
  
  alignment_grouping_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.SamHeader.alignment_grouping)
}

// repeated .nucleus.genomics.v1.ContigInfo contigs = 4;
inline int SamHeader::contigs_size() const {
  return contigs_.size();
}
inline ::nucleus::genomics::v1::ContigInfo* SamHeader::mutable_contigs(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.SamHeader.contigs)
  return contigs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::ContigInfo >*
SamHeader::mutable_contigs() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.SamHeader.contigs)
  return &contigs_;
}
inline const ::nucleus::genomics::v1::ContigInfo& SamHeader::contigs(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.SamHeader.contigs)
  return contigs_.Get(index);
}
inline ::nucleus::genomics::v1::ContigInfo* SamHeader::add_contigs() {
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.SamHeader.contigs)
  return contigs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::ContigInfo >&
SamHeader::contigs() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.SamHeader.contigs)
  return contigs_;
}

// repeated .nucleus.genomics.v1.ReadGroup read_groups = 5;
inline int SamHeader::read_groups_size() const {
  return read_groups_.size();
}
inline void SamHeader::clear_read_groups() {
  read_groups_.Clear();
}
inline ::nucleus::genomics::v1::ReadGroup* SamHeader::mutable_read_groups(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.SamHeader.read_groups)
  return read_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::ReadGroup >*
SamHeader::mutable_read_groups() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.SamHeader.read_groups)
  return &read_groups_;
}
inline const ::nucleus::genomics::v1::ReadGroup& SamHeader::read_groups(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.SamHeader.read_groups)
  return read_groups_.Get(index);
}
inline ::nucleus::genomics::v1::ReadGroup* SamHeader::add_read_groups() {
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.SamHeader.read_groups)
  return read_groups_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::ReadGroup >&
SamHeader::read_groups() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.SamHeader.read_groups)
  return read_groups_;
}

// repeated .nucleus.genomics.v1.Program programs = 6;
inline int SamHeader::programs_size() const {
  return programs_.size();
}
inline void SamHeader::clear_programs() {
  programs_.Clear();
}
inline ::nucleus::genomics::v1::Program* SamHeader::mutable_programs(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.SamHeader.programs)
  return programs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::Program >*
SamHeader::mutable_programs() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.SamHeader.programs)
  return &programs_;
}
inline const ::nucleus::genomics::v1::Program& SamHeader::programs(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.SamHeader.programs)
  return programs_.Get(index);
}
inline ::nucleus::genomics::v1::Program* SamHeader::add_programs() {
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.SamHeader.programs)
  return programs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::Program >&
SamHeader::programs() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.SamHeader.programs)
  return programs_;
}

// repeated string comments = 7;
inline int SamHeader::comments_size() const {
  return comments_.size();
}
inline void SamHeader::clear_comments() {
  comments_.Clear();
}
inline const std::string& SamHeader::comments(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.SamHeader.comments)
  return comments_.Get(index);
}
inline std::string* SamHeader::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.SamHeader.comments)
  return comments_.Mutable(index);
}
inline void SamHeader::set_comments(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.SamHeader.comments)
  comments_.Mutable(index)->assign(value);
}
inline void SamHeader::set_comments(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.SamHeader.comments)
  comments_.Mutable(index)->assign(std::move(value));
}
inline void SamHeader::set_comments(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  comments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.SamHeader.comments)
}
inline void SamHeader::set_comments(int index, const char* value, size_t size) {
  comments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.SamHeader.comments)
}
inline std::string* SamHeader::add_comments() {
  // @@protoc_insertion_point(field_add_mutable:nucleus.genomics.v1.SamHeader.comments)
  return comments_.Add();
}
inline void SamHeader::add_comments(const std::string& value) {
  comments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.SamHeader.comments)
}
inline void SamHeader::add_comments(std::string&& value) {
  comments_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.SamHeader.comments)
}
inline void SamHeader::add_comments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  comments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nucleus.genomics.v1.SamHeader.comments)
}
inline void SamHeader::add_comments(const char* value, size_t size) {
  comments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nucleus.genomics.v1.SamHeader.comments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SamHeader::comments() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.SamHeader.comments)
  return comments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SamHeader::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.SamHeader.comments)
  return &comments_;
}

// -------------------------------------------------------------------

// ReadGroup

// string name = 1;
inline void ReadGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadGroup::name() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadGroup.name)
  return name_.GetNoArena();
}
inline void ReadGroup::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadGroup.name)
}
inline void ReadGroup::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.ReadGroup.name)
}
inline void ReadGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.ReadGroup.name)
}
inline void ReadGroup::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.ReadGroup.name)
}
inline std::string* ReadGroup::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.ReadGroup.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadGroup::release_name() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.ReadGroup.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadGroup::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.ReadGroup.name)
}

// string sequencing_center = 2;
inline void ReadGroup::clear_sequencing_center() {
  sequencing_center_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadGroup::sequencing_center() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadGroup.sequencing_center)
  return sequencing_center_.GetNoArena();
}
inline void ReadGroup::set_sequencing_center(const std::string& value) {
  
  sequencing_center_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadGroup.sequencing_center)
}
inline void ReadGroup::set_sequencing_center(std::string&& value) {
  
  sequencing_center_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.ReadGroup.sequencing_center)
}
inline void ReadGroup::set_sequencing_center(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sequencing_center_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.ReadGroup.sequencing_center)
}
inline void ReadGroup::set_sequencing_center(const char* value, size_t size) {
  
  sequencing_center_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.ReadGroup.sequencing_center)
}
inline std::string* ReadGroup::mutable_sequencing_center() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.ReadGroup.sequencing_center)
  return sequencing_center_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadGroup::release_sequencing_center() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.ReadGroup.sequencing_center)
  
  return sequencing_center_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadGroup::set_allocated_sequencing_center(std::string* sequencing_center) {
  if (sequencing_center != nullptr) {
    
  } else {
    
  }
  sequencing_center_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequencing_center);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.ReadGroup.sequencing_center)
}

// string description = 3;
inline void ReadGroup::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadGroup::description() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadGroup.description)
  return description_.GetNoArena();
}
inline void ReadGroup::set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadGroup.description)
}
inline void ReadGroup::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.ReadGroup.description)
}
inline void ReadGroup::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.ReadGroup.description)
}
inline void ReadGroup::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.ReadGroup.description)
}
inline std::string* ReadGroup::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.ReadGroup.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadGroup::release_description() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.ReadGroup.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadGroup::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.ReadGroup.description)
}

// string date = 4;
inline void ReadGroup::clear_date() {
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadGroup::date() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadGroup.date)
  return date_.GetNoArena();
}
inline void ReadGroup::set_date(const std::string& value) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadGroup.date)
}
inline void ReadGroup::set_date(std::string&& value) {
  
  date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.ReadGroup.date)
}
inline void ReadGroup::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.ReadGroup.date)
}
inline void ReadGroup::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.ReadGroup.date)
}
inline std::string* ReadGroup::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.ReadGroup.date)
  return date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadGroup::release_date() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.ReadGroup.date)
  
  return date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadGroup::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.ReadGroup.date)
}

// string flow_order = 5;
inline void ReadGroup::clear_flow_order() {
  flow_order_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadGroup::flow_order() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadGroup.flow_order)
  return flow_order_.GetNoArena();
}
inline void ReadGroup::set_flow_order(const std::string& value) {
  
  flow_order_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadGroup.flow_order)
}
inline void ReadGroup::set_flow_order(std::string&& value) {
  
  flow_order_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.ReadGroup.flow_order)
}
inline void ReadGroup::set_flow_order(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flow_order_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.ReadGroup.flow_order)
}
inline void ReadGroup::set_flow_order(const char* value, size_t size) {
  
  flow_order_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.ReadGroup.flow_order)
}
inline std::string* ReadGroup::mutable_flow_order() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.ReadGroup.flow_order)
  return flow_order_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadGroup::release_flow_order() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.ReadGroup.flow_order)
  
  return flow_order_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadGroup::set_allocated_flow_order(std::string* flow_order) {
  if (flow_order != nullptr) {
    
  } else {
    
  }
  flow_order_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flow_order);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.ReadGroup.flow_order)
}

// string key_sequence = 6;
inline void ReadGroup::clear_key_sequence() {
  key_sequence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadGroup::key_sequence() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadGroup.key_sequence)
  return key_sequence_.GetNoArena();
}
inline void ReadGroup::set_key_sequence(const std::string& value) {
  
  key_sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadGroup.key_sequence)
}
inline void ReadGroup::set_key_sequence(std::string&& value) {
  
  key_sequence_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.ReadGroup.key_sequence)
}
inline void ReadGroup::set_key_sequence(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.ReadGroup.key_sequence)
}
inline void ReadGroup::set_key_sequence(const char* value, size_t size) {
  
  key_sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.ReadGroup.key_sequence)
}
inline std::string* ReadGroup::mutable_key_sequence() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.ReadGroup.key_sequence)
  return key_sequence_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadGroup::release_key_sequence() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.ReadGroup.key_sequence)
  
  return key_sequence_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadGroup::set_allocated_key_sequence(std::string* key_sequence) {
  if (key_sequence != nullptr) {
    
  } else {
    
  }
  key_sequence_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_sequence);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.ReadGroup.key_sequence)
}

// string library_id = 7;
inline void ReadGroup::clear_library_id() {
  library_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadGroup::library_id() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadGroup.library_id)
  return library_id_.GetNoArena();
}
inline void ReadGroup::set_library_id(const std::string& value) {
  
  library_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadGroup.library_id)
}
inline void ReadGroup::set_library_id(std::string&& value) {
  
  library_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.ReadGroup.library_id)
}
inline void ReadGroup::set_library_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  library_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.ReadGroup.library_id)
}
inline void ReadGroup::set_library_id(const char* value, size_t size) {
  
  library_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.ReadGroup.library_id)
}
inline std::string* ReadGroup::mutable_library_id() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.ReadGroup.library_id)
  return library_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadGroup::release_library_id() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.ReadGroup.library_id)
  
  return library_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadGroup::set_allocated_library_id(std::string* library_id) {
  if (library_id != nullptr) {
    
  } else {
    
  }
  library_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), library_id);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.ReadGroup.library_id)
}

// repeated string program_ids = 8;
inline int ReadGroup::program_ids_size() const {
  return program_ids_.size();
}
inline void ReadGroup::clear_program_ids() {
  program_ids_.Clear();
}
inline const std::string& ReadGroup::program_ids(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadGroup.program_ids)
  return program_ids_.Get(index);
}
inline std::string* ReadGroup::mutable_program_ids(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.ReadGroup.program_ids)
  return program_ids_.Mutable(index);
}
inline void ReadGroup::set_program_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadGroup.program_ids)
  program_ids_.Mutable(index)->assign(value);
}
inline void ReadGroup::set_program_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadGroup.program_ids)
  program_ids_.Mutable(index)->assign(std::move(value));
}
inline void ReadGroup::set_program_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  program_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.ReadGroup.program_ids)
}
inline void ReadGroup::set_program_ids(int index, const char* value, size_t size) {
  program_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.ReadGroup.program_ids)
}
inline std::string* ReadGroup::add_program_ids() {
  // @@protoc_insertion_point(field_add_mutable:nucleus.genomics.v1.ReadGroup.program_ids)
  return program_ids_.Add();
}
inline void ReadGroup::add_program_ids(const std::string& value) {
  program_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.ReadGroup.program_ids)
}
inline void ReadGroup::add_program_ids(std::string&& value) {
  program_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.ReadGroup.program_ids)
}
inline void ReadGroup::add_program_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  program_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nucleus.genomics.v1.ReadGroup.program_ids)
}
inline void ReadGroup::add_program_ids(const char* value, size_t size) {
  program_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nucleus.genomics.v1.ReadGroup.program_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadGroup::program_ids() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.ReadGroup.program_ids)
  return program_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadGroup::mutable_program_ids() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.ReadGroup.program_ids)
  return &program_ids_;
}

// int32 predicted_insert_size = 9;
inline void ReadGroup::clear_predicted_insert_size() {
  predicted_insert_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadGroup::predicted_insert_size() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadGroup.predicted_insert_size)
  return predicted_insert_size_;
}
inline void ReadGroup::set_predicted_insert_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  predicted_insert_size_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadGroup.predicted_insert_size)
}

// string platform = 10;
inline void ReadGroup::clear_platform() {
  platform_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadGroup::platform() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadGroup.platform)
  return platform_.GetNoArena();
}
inline void ReadGroup::set_platform(const std::string& value) {
  
  platform_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadGroup.platform)
}
inline void ReadGroup::set_platform(std::string&& value) {
  
  platform_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.ReadGroup.platform)
}
inline void ReadGroup::set_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.ReadGroup.platform)
}
inline void ReadGroup::set_platform(const char* value, size_t size) {
  
  platform_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.ReadGroup.platform)
}
inline std::string* ReadGroup::mutable_platform() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.ReadGroup.platform)
  return platform_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadGroup::release_platform() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.ReadGroup.platform)
  
  return platform_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadGroup::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.ReadGroup.platform)
}

// string platform_model = 11;
inline void ReadGroup::clear_platform_model() {
  platform_model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadGroup::platform_model() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadGroup.platform_model)
  return platform_model_.GetNoArena();
}
inline void ReadGroup::set_platform_model(const std::string& value) {
  
  platform_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadGroup.platform_model)
}
inline void ReadGroup::set_platform_model(std::string&& value) {
  
  platform_model_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.ReadGroup.platform_model)
}
inline void ReadGroup::set_platform_model(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.ReadGroup.platform_model)
}
inline void ReadGroup::set_platform_model(const char* value, size_t size) {
  
  platform_model_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.ReadGroup.platform_model)
}
inline std::string* ReadGroup::mutable_platform_model() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.ReadGroup.platform_model)
  return platform_model_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadGroup::release_platform_model() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.ReadGroup.platform_model)
  
  return platform_model_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadGroup::set_allocated_platform_model(std::string* platform_model) {
  if (platform_model != nullptr) {
    
  } else {
    
  }
  platform_model_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform_model);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.ReadGroup.platform_model)
}

// string platform_unit = 12;
inline void ReadGroup::clear_platform_unit() {
  platform_unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadGroup::platform_unit() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadGroup.platform_unit)
  return platform_unit_.GetNoArena();
}
inline void ReadGroup::set_platform_unit(const std::string& value) {
  
  platform_unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadGroup.platform_unit)
}
inline void ReadGroup::set_platform_unit(std::string&& value) {
  
  platform_unit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.ReadGroup.platform_unit)
}
inline void ReadGroup::set_platform_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  platform_unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.ReadGroup.platform_unit)
}
inline void ReadGroup::set_platform_unit(const char* value, size_t size) {
  
  platform_unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.ReadGroup.platform_unit)
}
inline std::string* ReadGroup::mutable_platform_unit() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.ReadGroup.platform_unit)
  return platform_unit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadGroup::release_platform_unit() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.ReadGroup.platform_unit)
  
  return platform_unit_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadGroup::set_allocated_platform_unit(std::string* platform_unit) {
  if (platform_unit != nullptr) {
    
  } else {
    
  }
  platform_unit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform_unit);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.ReadGroup.platform_unit)
}

// string sample_id = 13;
inline void ReadGroup::clear_sample_id() {
  sample_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadGroup::sample_id() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadGroup.sample_id)
  return sample_id_.GetNoArena();
}
inline void ReadGroup::set_sample_id(const std::string& value) {
  
  sample_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadGroup.sample_id)
}
inline void ReadGroup::set_sample_id(std::string&& value) {
  
  sample_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.ReadGroup.sample_id)
}
inline void ReadGroup::set_sample_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sample_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.ReadGroup.sample_id)
}
inline void ReadGroup::set_sample_id(const char* value, size_t size) {
  
  sample_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.ReadGroup.sample_id)
}
inline std::string* ReadGroup::mutable_sample_id() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.ReadGroup.sample_id)
  return sample_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadGroup::release_sample_id() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.ReadGroup.sample_id)
  
  return sample_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadGroup::set_allocated_sample_id(std::string* sample_id) {
  if (sample_id != nullptr) {
    
  } else {
    
  }
  sample_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sample_id);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.ReadGroup.sample_id)
}

// -------------------------------------------------------------------

// Program

// string id = 2;
inline void Program::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Program::id() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Program.id)
  return id_.GetNoArena();
}
inline void Program::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Program.id)
}
inline void Program::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.Program.id)
}
inline void Program::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Program.id)
}
inline void Program::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Program.id)
}
inline std::string* Program::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Program.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Program::release_id() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.Program.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Program::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.Program.id)
}

// string name = 3;
inline void Program::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Program::name() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Program.name)
  return name_.GetNoArena();
}
inline void Program::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Program.name)
}
inline void Program::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.Program.name)
}
inline void Program::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Program.name)
}
inline void Program::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Program.name)
}
inline std::string* Program::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Program.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Program::release_name() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.Program.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Program::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.Program.name)
}

// string command_line = 1;
inline void Program::clear_command_line() {
  command_line_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Program::command_line() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Program.command_line)
  return command_line_.GetNoArena();
}
inline void Program::set_command_line(const std::string& value) {
  
  command_line_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Program.command_line)
}
inline void Program::set_command_line(std::string&& value) {
  
  command_line_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.Program.command_line)
}
inline void Program::set_command_line(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  command_line_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Program.command_line)
}
inline void Program::set_command_line(const char* value, size_t size) {
  
  command_line_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Program.command_line)
}
inline std::string* Program::mutable_command_line() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Program.command_line)
  return command_line_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Program::release_command_line() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.Program.command_line)
  
  return command_line_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Program::set_allocated_command_line(std::string* command_line) {
  if (command_line != nullptr) {
    
  } else {
    
  }
  command_line_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command_line);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.Program.command_line)
}

// string prev_program_id = 4;
inline void Program::clear_prev_program_id() {
  prev_program_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Program::prev_program_id() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Program.prev_program_id)
  return prev_program_id_.GetNoArena();
}
inline void Program::set_prev_program_id(const std::string& value) {
  
  prev_program_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Program.prev_program_id)
}
inline void Program::set_prev_program_id(std::string&& value) {
  
  prev_program_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.Program.prev_program_id)
}
inline void Program::set_prev_program_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prev_program_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Program.prev_program_id)
}
inline void Program::set_prev_program_id(const char* value, size_t size) {
  
  prev_program_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Program.prev_program_id)
}
inline std::string* Program::mutable_prev_program_id() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Program.prev_program_id)
  return prev_program_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Program::release_prev_program_id() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.Program.prev_program_id)
  
  return prev_program_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Program::set_allocated_prev_program_id(std::string* prev_program_id) {
  if (prev_program_id != nullptr) {
    
  } else {
    
  }
  prev_program_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev_program_id);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.Program.prev_program_id)
}

// string description = 6;
inline void Program::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Program::description() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Program.description)
  return description_.GetNoArena();
}
inline void Program::set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Program.description)
}
inline void Program::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.Program.description)
}
inline void Program::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Program.description)
}
inline void Program::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Program.description)
}
inline std::string* Program::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Program.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Program::release_description() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.Program.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Program::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.Program.description)
}

// string version = 5;
inline void Program::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Program::version() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.Program.version)
  return version_.GetNoArena();
}
inline void Program::set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.Program.version)
}
inline void Program::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.Program.version)
}
inline void Program::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.Program.version)
}
inline void Program::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.Program.version)
}
inline std::string* Program::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.Program.version)
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Program::release_version() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.Program.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Program::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.Program.version)
}

// -------------------------------------------------------------------

// SamReaderOptions

// .nucleus.genomics.v1.ReadRequirements read_requirements = 1;
inline bool SamReaderOptions::has_read_requirements() const {
  return this != internal_default_instance() && read_requirements_ != nullptr;
}
inline void SamReaderOptions::clear_read_requirements() {
  if (GetArenaNoVirtual() == nullptr && read_requirements_ != nullptr) {
    delete read_requirements_;
  }
  read_requirements_ = nullptr;
}
inline const ::nucleus::genomics::v1::ReadRequirements& SamReaderOptions::read_requirements() const {
  const ::nucleus::genomics::v1::ReadRequirements* p = read_requirements_;
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.SamReaderOptions.read_requirements)
  return p != nullptr ? *p : *reinterpret_cast<const ::nucleus::genomics::v1::ReadRequirements*>(
      &::nucleus::genomics::v1::_ReadRequirements_default_instance_);
}
inline ::nucleus::genomics::v1::ReadRequirements* SamReaderOptions::release_read_requirements() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.SamReaderOptions.read_requirements)
  
  ::nucleus::genomics::v1::ReadRequirements* temp = read_requirements_;
  read_requirements_ = nullptr;
  return temp;
}
inline ::nucleus::genomics::v1::ReadRequirements* SamReaderOptions::mutable_read_requirements() {
  
  if (read_requirements_ == nullptr) {
    auto* p = CreateMaybeMessage<::nucleus::genomics::v1::ReadRequirements>(GetArenaNoVirtual());
    read_requirements_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.SamReaderOptions.read_requirements)
  return read_requirements_;
}
inline void SamReaderOptions::set_allocated_read_requirements(::nucleus::genomics::v1::ReadRequirements* read_requirements) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete read_requirements_;
  }
  if (read_requirements) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      read_requirements = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_requirements, submessage_arena);
    }
    
  } else {
    
  }
  read_requirements_ = read_requirements;
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.SamReaderOptions.read_requirements)
}

// .nucleus.genomics.v1.SamReaderOptions.AuxFieldHandling aux_field_handling = 3;
inline void SamReaderOptions::clear_aux_field_handling() {
  aux_field_handling_ = 0;
}
inline ::nucleus::genomics::v1::SamReaderOptions_AuxFieldHandling SamReaderOptions::aux_field_handling() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.SamReaderOptions.aux_field_handling)
  return static_cast< ::nucleus::genomics::v1::SamReaderOptions_AuxFieldHandling >(aux_field_handling_);
}
inline void SamReaderOptions::set_aux_field_handling(::nucleus::genomics::v1::SamReaderOptions_AuxFieldHandling value) {
  
  aux_field_handling_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.SamReaderOptions.aux_field_handling)
}

// int64 hts_block_size = 4;
inline void SamReaderOptions::clear_hts_block_size() {
  hts_block_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SamReaderOptions::hts_block_size() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.SamReaderOptions.hts_block_size)
  return hts_block_size_;
}
inline void SamReaderOptions::set_hts_block_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  hts_block_size_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.SamReaderOptions.hts_block_size)
}

// float downsample_fraction = 5;
inline void SamReaderOptions::clear_downsample_fraction() {
  downsample_fraction_ = 0;
}
inline float SamReaderOptions::downsample_fraction() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.SamReaderOptions.downsample_fraction)
  return downsample_fraction_;
}
inline void SamReaderOptions::set_downsample_fraction(float value) {
  
  downsample_fraction_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.SamReaderOptions.downsample_fraction)
}

// int64 random_seed = 6;
inline void SamReaderOptions::clear_random_seed() {
  random_seed_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SamReaderOptions::random_seed() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.SamReaderOptions.random_seed)
  return random_seed_;
}
inline void SamReaderOptions::set_random_seed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.SamReaderOptions.random_seed)
}

// bool use_original_base_quality_scores = 10;
inline void SamReaderOptions::clear_use_original_base_quality_scores() {
  use_original_base_quality_scores_ = false;
}
inline bool SamReaderOptions::use_original_base_quality_scores() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.SamReaderOptions.use_original_base_quality_scores)
  return use_original_base_quality_scores_;
}
inline void SamReaderOptions::set_use_original_base_quality_scores(bool value) {
  
  use_original_base_quality_scores_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.SamReaderOptions.use_original_base_quality_scores)
}

// repeated string aux_fields_to_keep = 11;
inline int SamReaderOptions::aux_fields_to_keep_size() const {
  return aux_fields_to_keep_.size();
}
inline void SamReaderOptions::clear_aux_fields_to_keep() {
  aux_fields_to_keep_.Clear();
}
inline const std::string& SamReaderOptions::aux_fields_to_keep(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.SamReaderOptions.aux_fields_to_keep)
  return aux_fields_to_keep_.Get(index);
}
inline std::string* SamReaderOptions::mutable_aux_fields_to_keep(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.SamReaderOptions.aux_fields_to_keep)
  return aux_fields_to_keep_.Mutable(index);
}
inline void SamReaderOptions::set_aux_fields_to_keep(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.SamReaderOptions.aux_fields_to_keep)
  aux_fields_to_keep_.Mutable(index)->assign(value);
}
inline void SamReaderOptions::set_aux_fields_to_keep(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.SamReaderOptions.aux_fields_to_keep)
  aux_fields_to_keep_.Mutable(index)->assign(std::move(value));
}
inline void SamReaderOptions::set_aux_fields_to_keep(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aux_fields_to_keep_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.SamReaderOptions.aux_fields_to_keep)
}
inline void SamReaderOptions::set_aux_fields_to_keep(int index, const char* value, size_t size) {
  aux_fields_to_keep_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.SamReaderOptions.aux_fields_to_keep)
}
inline std::string* SamReaderOptions::add_aux_fields_to_keep() {
  // @@protoc_insertion_point(field_add_mutable:nucleus.genomics.v1.SamReaderOptions.aux_fields_to_keep)
  return aux_fields_to_keep_.Add();
}
inline void SamReaderOptions::add_aux_fields_to_keep(const std::string& value) {
  aux_fields_to_keep_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.SamReaderOptions.aux_fields_to_keep)
}
inline void SamReaderOptions::add_aux_fields_to_keep(std::string&& value) {
  aux_fields_to_keep_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.SamReaderOptions.aux_fields_to_keep)
}
inline void SamReaderOptions::add_aux_fields_to_keep(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aux_fields_to_keep_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nucleus.genomics.v1.SamReaderOptions.aux_fields_to_keep)
}
inline void SamReaderOptions::add_aux_fields_to_keep(const char* value, size_t size) {
  aux_fields_to_keep_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nucleus.genomics.v1.SamReaderOptions.aux_fields_to_keep)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SamReaderOptions::aux_fields_to_keep() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.SamReaderOptions.aux_fields_to_keep)
  return aux_fields_to_keep_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SamReaderOptions::mutable_aux_fields_to_keep() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.SamReaderOptions.aux_fields_to_keep)
  return &aux_fields_to_keep_;
}

// -------------------------------------------------------------------

// ReadRequirements

// bool keep_duplicates = 1;
inline void ReadRequirements::clear_keep_duplicates() {
  keep_duplicates_ = false;
}
inline bool ReadRequirements::keep_duplicates() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadRequirements.keep_duplicates)
  return keep_duplicates_;
}
inline void ReadRequirements::set_keep_duplicates(bool value) {
  
  keep_duplicates_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadRequirements.keep_duplicates)
}

// bool keep_failed_vendor_quality_checks = 2;
inline void ReadRequirements::clear_keep_failed_vendor_quality_checks() {
  keep_failed_vendor_quality_checks_ = false;
}
inline bool ReadRequirements::keep_failed_vendor_quality_checks() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadRequirements.keep_failed_vendor_quality_checks)
  return keep_failed_vendor_quality_checks_;
}
inline void ReadRequirements::set_keep_failed_vendor_quality_checks(bool value) {
  
  keep_failed_vendor_quality_checks_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadRequirements.keep_failed_vendor_quality_checks)
}

// bool keep_secondary_alignments = 3;
inline void ReadRequirements::clear_keep_secondary_alignments() {
  keep_secondary_alignments_ = false;
}
inline bool ReadRequirements::keep_secondary_alignments() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadRequirements.keep_secondary_alignments)
  return keep_secondary_alignments_;
}
inline void ReadRequirements::set_keep_secondary_alignments(bool value) {
  
  keep_secondary_alignments_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadRequirements.keep_secondary_alignments)
}

// bool keep_supplementary_alignments = 4;
inline void ReadRequirements::clear_keep_supplementary_alignments() {
  keep_supplementary_alignments_ = false;
}
inline bool ReadRequirements::keep_supplementary_alignments() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadRequirements.keep_supplementary_alignments)
  return keep_supplementary_alignments_;
}
inline void ReadRequirements::set_keep_supplementary_alignments(bool value) {
  
  keep_supplementary_alignments_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadRequirements.keep_supplementary_alignments)
}

// bool keep_unaligned = 5;
inline void ReadRequirements::clear_keep_unaligned() {
  keep_unaligned_ = false;
}
inline bool ReadRequirements::keep_unaligned() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadRequirements.keep_unaligned)
  return keep_unaligned_;
}
inline void ReadRequirements::set_keep_unaligned(bool value) {
  
  keep_unaligned_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadRequirements.keep_unaligned)
}

// bool keep_improperly_placed = 6;
inline void ReadRequirements::clear_keep_improperly_placed() {
  keep_improperly_placed_ = false;
}
inline bool ReadRequirements::keep_improperly_placed() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadRequirements.keep_improperly_placed)
  return keep_improperly_placed_;
}
inline void ReadRequirements::set_keep_improperly_placed(bool value) {
  
  keep_improperly_placed_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadRequirements.keep_improperly_placed)
}

// int32 min_mapping_quality = 7;
inline void ReadRequirements::clear_min_mapping_quality() {
  min_mapping_quality_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadRequirements::min_mapping_quality() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadRequirements.min_mapping_quality)
  return min_mapping_quality_;
}
inline void ReadRequirements::set_min_mapping_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_mapping_quality_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadRequirements.min_mapping_quality)
}

// int32 min_base_quality = 8;
inline void ReadRequirements::clear_min_base_quality() {
  min_base_quality_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReadRequirements::min_base_quality() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadRequirements.min_base_quality)
  return min_base_quality_;
}
inline void ReadRequirements::set_min_base_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_base_quality_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadRequirements.min_base_quality)
}

// .nucleus.genomics.v1.ReadRequirements.MinBaseQualityMode min_base_quality_mode = 9;
inline void ReadRequirements::clear_min_base_quality_mode() {
  min_base_quality_mode_ = 0;
}
inline ::nucleus::genomics::v1::ReadRequirements_MinBaseQualityMode ReadRequirements::min_base_quality_mode() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.ReadRequirements.min_base_quality_mode)
  return static_cast< ::nucleus::genomics::v1::ReadRequirements_MinBaseQualityMode >(min_base_quality_mode_);
}
inline void ReadRequirements::set_min_base_quality_mode(::nucleus::genomics::v1::ReadRequirements_MinBaseQualityMode value) {
  
  min_base_quality_mode_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.ReadRequirements.min_base_quality_mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace genomics
}  // namespace nucleus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nucleus::genomics::v1::SamHeader_SortingOrder> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nucleus::genomics::v1::SamHeader_SortingOrder>() {
  return ::nucleus::genomics::v1::SamHeader_SortingOrder_descriptor();
}
template <> struct is_proto_enum< ::nucleus::genomics::v1::SamHeader_AlignmentGrouping> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nucleus::genomics::v1::SamHeader_AlignmentGrouping>() {
  return ::nucleus::genomics::v1::SamHeader_AlignmentGrouping_descriptor();
}
template <> struct is_proto_enum< ::nucleus::genomics::v1::SamReaderOptions_AuxFieldHandling> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nucleus::genomics::v1::SamReaderOptions_AuxFieldHandling>() {
  return ::nucleus::genomics::v1::SamReaderOptions_AuxFieldHandling_descriptor();
}
template <> struct is_proto_enum< ::nucleus::genomics::v1::ReadRequirements_MinBaseQualityMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nucleus::genomics::v1::ReadRequirements_MinBaseQualityMode>() {
  return ::nucleus::genomics::v1::ReadRequirements_MinBaseQualityMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2freads_2eproto
