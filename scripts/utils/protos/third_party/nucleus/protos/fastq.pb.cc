// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: third_party/nucleus/protos/fastq.proto

#include "third_party/nucleus/protos/fastq.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace nucleus {
namespace genomics {
namespace v1 {
class FastqRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastqRecord> _instance;
} _FastqRecord_default_instance_;
class FastqReaderOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastqReaderOptions> _instance;
} _FastqReaderOptions_default_instance_;
class FastqWriterOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastqWriterOptions> _instance;
} _FastqWriterOptions_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
static void InitDefaultsscc_info_FastqReaderOptions_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_FastqReaderOptions_default_instance_;
    new (ptr) ::nucleus::genomics::v1::FastqReaderOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::FastqReaderOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FastqReaderOptions_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FastqReaderOptions_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto}, {}};

static void InitDefaultsscc_info_FastqRecord_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_FastqRecord_default_instance_;
    new (ptr) ::nucleus::genomics::v1::FastqRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::FastqRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FastqRecord_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FastqRecord_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto}, {}};

static void InitDefaultsscc_info_FastqWriterOptions_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_FastqWriterOptions_default_instance_;
    new (ptr) ::nucleus::genomics::v1::FastqWriterOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::FastqWriterOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FastqWriterOptions_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FastqWriterOptions_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastqRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastqRecord, id_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastqRecord, description_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastqRecord, sequence_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastqRecord, quality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastqReaderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastqReaderOptions, skip_invalid_records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::FastqWriterOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nucleus::genomics::v1::FastqRecord)},
  { 9, -1, sizeof(::nucleus::genomics::v1::FastqReaderOptions)},
  { 15, -1, sizeof(::nucleus::genomics::v1::FastqWriterOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_FastqRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_FastqReaderOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_FastqWriterOptions_default_instance_),
};

const char descriptor_table_protodef_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&third_party/nucleus/protos/fastq.proto"
  "\022\023nucleus.genomics.v1\"Q\n\013FastqRecord\022\n\n\002"
  "id\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\020\n\010sequenc"
  "e\030\003 \001(\t\022\017\n\007quality\030\004 \001(\t\"8\n\022FastqReaderO"
  "ptions\022\034\n\024skip_invalid_records\030\002 \001(\010J\004\010\001"
  "\020\002\"\024\n\022FastqWriterOptionsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto_sccs[3] = {
  &scc_info_FastqReaderOptions_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto.base,
  &scc_info_FastqRecord_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto.base,
  &scc_info_FastqWriterOptions_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto_once;
static bool descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto = {
  &descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto_initialized, descriptor_table_protodef_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto, "third_party/nucleus/protos/fastq.proto", 232,
  &descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto_once, descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto_sccs, descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto::offsets,
  file_level_metadata_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto, 3, file_level_enum_descriptors_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto, file_level_service_descriptors_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto), true);
namespace nucleus {
namespace genomics {
namespace v1 {

// ===================================================================

void FastqRecord::InitAsDefaultInstance() {
}
class FastqRecord::_Internal {
 public:
};

FastqRecord::FastqRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.FastqRecord)
}
FastqRecord::FastqRecord(const FastqRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sequence().empty()) {
    sequence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.quality().empty()) {
    quality_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.quality_);
  }
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.FastqRecord)
}

void FastqRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastqRecord_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FastqRecord::~FastqRecord() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.FastqRecord)
  SharedDtor();
}

void FastqRecord::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FastqRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastqRecord& FastqRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastqRecord_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto.base);
  return *internal_default_instance();
}


void FastqRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.FastqRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quality_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FastqRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "nucleus.genomics.v1.FastqRecord.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_description(), ptr, ctx, "nucleus.genomics.v1.FastqRecord.description");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sequence(), ptr, ctx, "nucleus.genomics.v1.FastqRecord.sequence");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string quality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_quality(), ptr, ctx, "nucleus.genomics.v1.FastqRecord.quality");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FastqRecord::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.FastqRecord)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.FastqRecord.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.FastqRecord.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sequence = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), static_cast<int>(this->sequence().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.FastqRecord.sequence"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string quality = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_quality()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->quality().data(), static_cast<int>(this->quality().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.FastqRecord.quality"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.FastqRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.FastqRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FastqRecord::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.FastqRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.FastqRecord.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.FastqRecord.description");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // string sequence = 3;
  if (this->sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.FastqRecord.sequence");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sequence(), output);
  }

  // string quality = 4;
  if (this->quality().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->quality().data(), static_cast<int>(this->quality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.FastqRecord.quality");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->quality(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.FastqRecord)
}

::PROTOBUF_NAMESPACE_ID::uint8* FastqRecord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.FastqRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.FastqRecord.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.FastqRecord.description");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // string sequence = 3;
  if (this->sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.FastqRecord.sequence");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->sequence(), target);
  }

  // string quality = 4;
  if (this->quality().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->quality().data(), static_cast<int>(this->quality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.FastqRecord.quality");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->quality(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.FastqRecord)
  return target;
}

size_t FastqRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.FastqRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string sequence = 3;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // string quality = 4;
  if (this->quality().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->quality());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastqRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.FastqRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const FastqRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastqRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.FastqRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.FastqRecord)
    MergeFrom(*source);
  }
}

void FastqRecord::MergeFrom(const FastqRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.FastqRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  if (from.quality().size() > 0) {

    quality_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.quality_);
  }
}

void FastqRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.FastqRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastqRecord::CopyFrom(const FastqRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.FastqRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastqRecord::IsInitialized() const {
  return true;
}

void FastqRecord::InternalSwap(FastqRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sequence_.Swap(&other->sequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  quality_.Swap(&other->quality_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FastqRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FastqReaderOptions::InitAsDefaultInstance() {
}
class FastqReaderOptions::_Internal {
 public:
};

FastqReaderOptions::FastqReaderOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.FastqReaderOptions)
}
FastqReaderOptions::FastqReaderOptions(const FastqReaderOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skip_invalid_records_ = from.skip_invalid_records_;
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.FastqReaderOptions)
}

void FastqReaderOptions::SharedCtor() {
  skip_invalid_records_ = false;
}

FastqReaderOptions::~FastqReaderOptions() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.FastqReaderOptions)
  SharedDtor();
}

void FastqReaderOptions::SharedDtor() {
}

void FastqReaderOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastqReaderOptions& FastqReaderOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastqReaderOptions_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto.base);
  return *internal_default_instance();
}


void FastqReaderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.FastqReaderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skip_invalid_records_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FastqReaderOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool skip_invalid_records = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          skip_invalid_records_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FastqReaderOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.FastqReaderOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool skip_invalid_records = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_invalid_records_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.FastqReaderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.FastqReaderOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FastqReaderOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.FastqReaderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool skip_invalid_records = 2;
  if (this->skip_invalid_records() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->skip_invalid_records(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.FastqReaderOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* FastqReaderOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.FastqReaderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool skip_invalid_records = 2;
  if (this->skip_invalid_records() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->skip_invalid_records(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.FastqReaderOptions)
  return target;
}

size_t FastqReaderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.FastqReaderOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool skip_invalid_records = 2;
  if (this->skip_invalid_records() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastqReaderOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.FastqReaderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const FastqReaderOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastqReaderOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.FastqReaderOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.FastqReaderOptions)
    MergeFrom(*source);
  }
}

void FastqReaderOptions::MergeFrom(const FastqReaderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.FastqReaderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.skip_invalid_records() != 0) {
    set_skip_invalid_records(from.skip_invalid_records());
  }
}

void FastqReaderOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.FastqReaderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastqReaderOptions::CopyFrom(const FastqReaderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.FastqReaderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastqReaderOptions::IsInitialized() const {
  return true;
}

void FastqReaderOptions::InternalSwap(FastqReaderOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(skip_invalid_records_, other->skip_invalid_records_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastqReaderOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FastqWriterOptions::InitAsDefaultInstance() {
}
class FastqWriterOptions::_Internal {
 public:
};

FastqWriterOptions::FastqWriterOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.FastqWriterOptions)
}
FastqWriterOptions::FastqWriterOptions(const FastqWriterOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.FastqWriterOptions)
}

void FastqWriterOptions::SharedCtor() {
}

FastqWriterOptions::~FastqWriterOptions() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.FastqWriterOptions)
  SharedDtor();
}

void FastqWriterOptions::SharedDtor() {
}

void FastqWriterOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastqWriterOptions& FastqWriterOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastqWriterOptions_third_5fparty_2fnucleus_2fprotos_2ffastq_2eproto.base);
  return *internal_default_instance();
}


void FastqWriterOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.FastqWriterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FastqWriterOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FastqWriterOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.FastqWriterOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.FastqWriterOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.FastqWriterOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FastqWriterOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.FastqWriterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.FastqWriterOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* FastqWriterOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.FastqWriterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.FastqWriterOptions)
  return target;
}

size_t FastqWriterOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.FastqWriterOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastqWriterOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.FastqWriterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const FastqWriterOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastqWriterOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.FastqWriterOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.FastqWriterOptions)
    MergeFrom(*source);
  }
}

void FastqWriterOptions::MergeFrom(const FastqWriterOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.FastqWriterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FastqWriterOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.FastqWriterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastqWriterOptions::CopyFrom(const FastqWriterOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.FastqWriterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastqWriterOptions::IsInitialized() const {
  return true;
}

void FastqWriterOptions::InternalSwap(FastqWriterOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FastqWriterOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::FastqRecord* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::FastqRecord >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::FastqRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::FastqReaderOptions* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::FastqReaderOptions >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::FastqReaderOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::FastqWriterOptions* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::FastqWriterOptions >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::FastqWriterOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
