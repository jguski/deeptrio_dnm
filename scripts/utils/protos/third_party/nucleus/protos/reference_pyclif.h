//////////////////////////////////////////////////////////////////////
// This file was automatically generated by PyCLIF.
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: third_party/nucleus/protos/reference.proto

#include "third_party/nucleus/protos/reference.pb.h"
#include "clif/python/postconv.h"

namespace nucleus { namespace genomics { namespace v1 {
using namespace ::clif;

// CLIF use `::nucleus::genomics::v1::ContigInfo` as ContigInfo
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::ContigInfo* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::ContigInfo&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::ContigInfo>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::ContigInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::ContigInfo>, py::PostConv);
// CLIF use `::nucleus::genomics::v1::ReferenceSequence` as ReferenceSequence
bool Clif_PyObjAs(PyObject* input, ::nucleus::genomics::v1::ReferenceSequence* output);
PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::ReferenceSequence&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::nucleus::genomics::v1::ReferenceSequence>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::ReferenceSequence>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::ReferenceSequence>, py::PostConv);

} } }  // namespace nucleus::genomics::v1
