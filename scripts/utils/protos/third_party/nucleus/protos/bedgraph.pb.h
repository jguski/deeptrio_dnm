// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: third_party/nucleus/protos/bedgraph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2fbedgraph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2fbedgraph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2fbedgraph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_third_5fparty_2fnucleus_2fprotos_2fbedgraph_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_third_5fparty_2fnucleus_2fprotos_2fbedgraph_2eproto;
namespace nucleus {
namespace genomics {
namespace v1 {
class BedGraphRecord;
class BedGraphRecordDefaultTypeInternal;
extern BedGraphRecordDefaultTypeInternal _BedGraphRecord_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
PROTOBUF_NAMESPACE_OPEN
template<> ::nucleus::genomics::v1::BedGraphRecord* Arena::CreateMaybeMessage<::nucleus::genomics::v1::BedGraphRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nucleus {
namespace genomics {
namespace v1 {

// ===================================================================

class BedGraphRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.BedGraphRecord) */ {
 public:
  BedGraphRecord();
  virtual ~BedGraphRecord();

  BedGraphRecord(const BedGraphRecord& from);
  BedGraphRecord(BedGraphRecord&& from) noexcept
    : BedGraphRecord() {
    *this = ::std::move(from);
  }

  inline BedGraphRecord& operator=(const BedGraphRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline BedGraphRecord& operator=(BedGraphRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BedGraphRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BedGraphRecord* internal_default_instance() {
    return reinterpret_cast<const BedGraphRecord*>(
               &_BedGraphRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BedGraphRecord& a, BedGraphRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(BedGraphRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BedGraphRecord* New() const final {
    return CreateMaybeMessage<BedGraphRecord>(nullptr);
  }

  BedGraphRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BedGraphRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BedGraphRecord& from);
  void MergeFrom(const BedGraphRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BedGraphRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.BedGraphRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fbedgraph_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fbedgraph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceNameFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
    kDataValueFieldNumber = 4,
  };
  // string reference_name = 1;
  void clear_reference_name();
  const std::string& reference_name() const;
  void set_reference_name(const std::string& value);
  void set_reference_name(std::string&& value);
  void set_reference_name(const char* value);
  void set_reference_name(const char* value, size_t size);
  std::string* mutable_reference_name();
  std::string* release_reference_name();
  void set_allocated_reference_name(std::string* reference_name);

  // int64 start = 2;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 end = 3;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int64 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double data_value = 4;
  void clear_data_value();
  double data_value() const;
  void set_data_value(double value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.BedGraphRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_;
  double data_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fbedgraph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BedGraphRecord

// string reference_name = 1;
inline void BedGraphRecord::clear_reference_name() {
  reference_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BedGraphRecord::reference_name() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedGraphRecord.reference_name)
  return reference_name_.GetNoArena();
}
inline void BedGraphRecord::set_reference_name(const std::string& value) {
  
  reference_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedGraphRecord.reference_name)
}
inline void BedGraphRecord::set_reference_name(std::string&& value) {
  
  reference_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.BedGraphRecord.reference_name)
}
inline void BedGraphRecord::set_reference_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.BedGraphRecord.reference_name)
}
inline void BedGraphRecord::set_reference_name(const char* value, size_t size) {
  
  reference_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.BedGraphRecord.reference_name)
}
inline std::string* BedGraphRecord::mutable_reference_name() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.BedGraphRecord.reference_name)
  return reference_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BedGraphRecord::release_reference_name() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.BedGraphRecord.reference_name)
  
  return reference_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BedGraphRecord::set_allocated_reference_name(std::string* reference_name) {
  if (reference_name != nullptr) {
    
  } else {
    
  }
  reference_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_name);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.BedGraphRecord.reference_name)
}

// int64 start = 2;
inline void BedGraphRecord::clear_start() {
  start_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BedGraphRecord::start() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedGraphRecord.start)
  return start_;
}
inline void BedGraphRecord::set_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedGraphRecord.start)
}

// int64 end = 3;
inline void BedGraphRecord::clear_end() {
  end_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BedGraphRecord::end() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedGraphRecord.end)
  return end_;
}
inline void BedGraphRecord::set_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedGraphRecord.end)
}

// double data_value = 4;
inline void BedGraphRecord::clear_data_value() {
  data_value_ = 0;
}
inline double BedGraphRecord::data_value() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.BedGraphRecord.data_value)
  return data_value_;
}
inline void BedGraphRecord::set_data_value(double value) {
  
  data_value_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.BedGraphRecord.data_value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace genomics
}  // namespace nucleus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2fbedgraph_2eproto
