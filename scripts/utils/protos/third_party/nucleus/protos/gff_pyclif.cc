//////////////////////////////////////////////////////////////////////
// This file was automatically generated by PyCLIF.
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: third_party/nucleus/protos/gff.proto

#include "clif/python/runtime.h"
#include "clif/python/types.h"
#include "third_party/nucleus/protos/gff_pyclif.h"

namespace nucleus { namespace genomics { namespace v1 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// GffRecord to/from ::nucleus::genomics::v1::GffRecord conversion

bool Clif_PyObjAs(PyObject* py, ::nucleus::genomics::v1::GffRecord* c) {
  CHECK(c != nullptr);
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffRecord");
  if (!::clif::proto::TypeCheck(py, type, "", "GffRecord") ) {
    return ::clif::proto::InGeneratedPool(py, c);
  }
  if (const proto2::Message* cpb = ::clif::proto::GetCProto(py)) {
    c->CopyFrom(*cpb);
    return true;
  }
  PyObject* ser = ::clif::proto::Serialize(py);
  if (ser == nullptr) return false;
  bool ok = c->ParsePartialFromArray(PyBytes_AS_STRING(ser), static_cast<int>(PyBytes_GET_SIZE(ser)));
  Py_DECREF(ser);
  if (!ok) PyErr_SetString(PyExc_ValueError, "Serialized bytes can't be parsed into C++ proto");
  return ok;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::nucleus::genomics::v1::GffRecord>* c) {
  CHECK(c != nullptr);
  if (!*c) c->reset(new ::nucleus::genomics::v1::GffRecord);
  return Clif_PyObjAs(py, c->get());
}

PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::GffRecord& c, py::PostConv) {
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffRecord");
  return ::clif::proto::PyProtoFrom(&c, type, "");
}

PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::GffRecord> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffRecord");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::GffRecord> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffRecord");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

// GffHeader to/from ::nucleus::genomics::v1::GffHeader conversion

bool Clif_PyObjAs(PyObject* py, ::nucleus::genomics::v1::GffHeader* c) {
  CHECK(c != nullptr);
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffHeader");
  if (!::clif::proto::TypeCheck(py, type, "", "GffHeader") ) {
    return ::clif::proto::InGeneratedPool(py, c);
  }
  if (const proto2::Message* cpb = ::clif::proto::GetCProto(py)) {
    c->CopyFrom(*cpb);
    return true;
  }
  PyObject* ser = ::clif::proto::Serialize(py);
  if (ser == nullptr) return false;
  bool ok = c->ParsePartialFromArray(PyBytes_AS_STRING(ser), static_cast<int>(PyBytes_GET_SIZE(ser)));
  Py_DECREF(ser);
  if (!ok) PyErr_SetString(PyExc_ValueError, "Serialized bytes can't be parsed into C++ proto");
  return ok;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::nucleus::genomics::v1::GffHeader>* c) {
  CHECK(c != nullptr);
  if (!*c) c->reset(new ::nucleus::genomics::v1::GffHeader);
  return Clif_PyObjAs(py, c->get());
}

PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::GffHeader& c, py::PostConv) {
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffHeader");
  return ::clif::proto::PyProtoFrom(&c, type, "");
}

PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::GffHeader> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffHeader");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::GffHeader> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffHeader");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

// GffHeader.OntologyDirective to/from ::nucleus::genomics::v1::GffHeader::OntologyDirective conversion

bool Clif_PyObjAs(PyObject* py, ::nucleus::genomics::v1::GffHeader::OntologyDirective* c) {
  CHECK(c != nullptr);
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffHeader");
  if (!::clif::proto::TypeCheck(py, type, "OntologyDirective", "GffHeader.OntologyDirective") ) {
    return ::clif::proto::InGeneratedPool(py, c);
  }
  if (const proto2::Message* cpb = ::clif::proto::GetCProto(py)) {
    c->CopyFrom(*cpb);
    return true;
  }
  PyObject* ser = ::clif::proto::Serialize(py);
  if (ser == nullptr) return false;
  bool ok = c->ParsePartialFromArray(PyBytes_AS_STRING(ser), static_cast<int>(PyBytes_GET_SIZE(ser)));
  Py_DECREF(ser);
  if (!ok) PyErr_SetString(PyExc_ValueError, "Serialized bytes can't be parsed into C++ proto");
  return ok;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::nucleus::genomics::v1::GffHeader::OntologyDirective>* c) {
  CHECK(c != nullptr);
  if (!*c) c->reset(new ::nucleus::genomics::v1::GffHeader::OntologyDirective);
  return Clif_PyObjAs(py, c->get());
}

PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::GffHeader::OntologyDirective& c, py::PostConv) {
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffHeader");
  return ::clif::proto::PyProtoFrom(&c, type, "OntologyDirective");
}

PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::GffHeader::OntologyDirective> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffHeader");
  return ::clif::proto::PyProtoFrom(c.get(), type, "OntologyDirective");
}

PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::GffHeader::OntologyDirective> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffHeader");
  return ::clif::proto::PyProtoFrom(c.get(), type, "OntologyDirective");
}

// GffHeader.GenomeBuildDirective to/from ::nucleus::genomics::v1::GffHeader::GenomeBuildDirective conversion

bool Clif_PyObjAs(PyObject* py, ::nucleus::genomics::v1::GffHeader::GenomeBuildDirective* c) {
  CHECK(c != nullptr);
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffHeader");
  if (!::clif::proto::TypeCheck(py, type, "GenomeBuildDirective", "GffHeader.GenomeBuildDirective") ) {
    return ::clif::proto::InGeneratedPool(py, c);
  }
  if (const proto2::Message* cpb = ::clif::proto::GetCProto(py)) {
    c->CopyFrom(*cpb);
    return true;
  }
  PyObject* ser = ::clif::proto::Serialize(py);
  if (ser == nullptr) return false;
  bool ok = c->ParsePartialFromArray(PyBytes_AS_STRING(ser), static_cast<int>(PyBytes_GET_SIZE(ser)));
  Py_DECREF(ser);
  if (!ok) PyErr_SetString(PyExc_ValueError, "Serialized bytes can't be parsed into C++ proto");
  return ok;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::nucleus::genomics::v1::GffHeader::GenomeBuildDirective>* c) {
  CHECK(c != nullptr);
  if (!*c) c->reset(new ::nucleus::genomics::v1::GffHeader::GenomeBuildDirective);
  return Clif_PyObjAs(py, c->get());
}

PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::GffHeader::GenomeBuildDirective& c, py::PostConv) {
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffHeader");
  return ::clif::proto::PyProtoFrom(&c, type, "GenomeBuildDirective");
}

PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::GffHeader::GenomeBuildDirective> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffHeader");
  return ::clif::proto::PyProtoFrom(c.get(), type, "GenomeBuildDirective");
}

PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::GffHeader::GenomeBuildDirective> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffHeader");
  return ::clif::proto::PyProtoFrom(c.get(), type, "GenomeBuildDirective");
}

// GffReaderOptions to/from ::nucleus::genomics::v1::GffReaderOptions conversion

bool Clif_PyObjAs(PyObject* py, ::nucleus::genomics::v1::GffReaderOptions* c) {
  CHECK(c != nullptr);
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffReaderOptions");
  if (!::clif::proto::TypeCheck(py, type, "", "GffReaderOptions") ) {
    return ::clif::proto::InGeneratedPool(py, c);
  }
  if (const proto2::Message* cpb = ::clif::proto::GetCProto(py)) {
    c->CopyFrom(*cpb);
    return true;
  }
  PyObject* ser = ::clif::proto::Serialize(py);
  if (ser == nullptr) return false;
  bool ok = c->ParsePartialFromArray(PyBytes_AS_STRING(ser), static_cast<int>(PyBytes_GET_SIZE(ser)));
  Py_DECREF(ser);
  if (!ok) PyErr_SetString(PyExc_ValueError, "Serialized bytes can't be parsed into C++ proto");
  return ok;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::nucleus::genomics::v1::GffReaderOptions>* c) {
  CHECK(c != nullptr);
  if (!*c) c->reset(new ::nucleus::genomics::v1::GffReaderOptions);
  return Clif_PyObjAs(py, c->get());
}

PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::GffReaderOptions& c, py::PostConv) {
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffReaderOptions");
  return ::clif::proto::PyProtoFrom(&c, type, "");
}

PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::GffReaderOptions> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffReaderOptions");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::GffReaderOptions> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffReaderOptions");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

// GffWriterOptions to/from ::nucleus::genomics::v1::GffWriterOptions conversion

bool Clif_PyObjAs(PyObject* py, ::nucleus::genomics::v1::GffWriterOptions* c) {
  CHECK(c != nullptr);
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffWriterOptions");
  if (!::clif::proto::TypeCheck(py, type, "", "GffWriterOptions") ) {
    return ::clif::proto::InGeneratedPool(py, c);
  }
  if (const proto2::Message* cpb = ::clif::proto::GetCProto(py)) {
    c->CopyFrom(*cpb);
    return true;
  }
  PyObject* ser = ::clif::proto::Serialize(py);
  if (ser == nullptr) return false;
  bool ok = c->ParsePartialFromArray(PyBytes_AS_STRING(ser), static_cast<int>(PyBytes_GET_SIZE(ser)));
  Py_DECREF(ser);
  if (!ok) PyErr_SetString(PyExc_ValueError, "Serialized bytes can't be parsed into C++ proto");
  return ok;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::nucleus::genomics::v1::GffWriterOptions>* c) {
  CHECK(c != nullptr);
  if (!*c) c->reset(new ::nucleus::genomics::v1::GffWriterOptions);
  return Clif_PyObjAs(py, c->get());
}

PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::GffWriterOptions& c, py::PostConv) {
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffWriterOptions");
  return ::clif::proto::PyProtoFrom(&c, type, "");
}

PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::GffWriterOptions> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffWriterOptions");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::GffWriterOptions> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.gff_pb2.GffWriterOptions");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

// GffRecord.Strand to/from enum ::nucleus::genomics::v1::GffRecord::Strand conversion
bool Clif_PyObjAs(PyObject* py, ::nucleus::genomics::v1::GffRecord::Strand* c) {
  CHECK(c != nullptr);
  int v;
  if (!Clif_PyObjAs(py, &v)) return false;
  *c = static_cast<::nucleus::genomics::v1::GffRecord::Strand>(v);
  return true;
}
PyObject* Clif_PyObjFrom(::nucleus::genomics::v1::GffRecord::Strand c, py::PostConv pc) {
  return Clif_PyObjFrom(static_cast<int>(c), pc);
}

} } }  // namespace nucleus::genomics::v1
