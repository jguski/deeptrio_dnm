// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: third_party/nucleus/protos/cigar.proto

#include "third_party/nucleus/protos/cigar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace nucleus {
namespace genomics {
namespace v1 {
class CigarUnitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CigarUnit> _instance;
} _CigarUnit_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
static void InitDefaultsscc_info_CigarUnit_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_CigarUnit_default_instance_;
    new (ptr) ::nucleus::genomics::v1::CigarUnit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::CigarUnit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CigarUnit_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CigarUnit_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::CigarUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::CigarUnit, operation_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::CigarUnit, operation_length_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::CigarUnit, reference_sequence_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nucleus::genomics::v1::CigarUnit)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_CigarUnit_default_instance_),
};

const char descriptor_table_protodef_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&third_party/nucleus/protos/cigar.proto"
  "\022\023nucleus.genomics.v1\"\260\002\n\tCigarUnit\022;\n\to"
  "peration\030\001 \001(\0162(.nucleus.genomics.v1.Cig"
  "arUnit.Operation\022\030\n\020operation_length\030\002 \001"
  "(\003\022\032\n\022reference_sequence\030\003 \001(\t\"\257\001\n\tOpera"
  "tion\022\031\n\025OPERATION_UNSPECIFIED\020\000\022\023\n\017ALIGN"
  "MENT_MATCH\020\001\022\n\n\006INSERT\020\002\022\n\n\006DELETE\020\003\022\010\n\004"
  "SKIP\020\004\022\r\n\tCLIP_SOFT\020\005\022\r\n\tCLIP_HARD\020\006\022\007\n\003"
  "PAD\020\007\022\022\n\016SEQUENCE_MATCH\020\010\022\025\n\021SEQUENCE_MI"
  "SMATCH\020\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto_sccs[1] = {
  &scc_info_CigarUnit_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto_once;
static bool descriptor_table_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto = {
  &descriptor_table_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto_initialized, descriptor_table_protodef_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto, "third_party/nucleus/protos/cigar.proto", 376,
  &descriptor_table_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto_once, descriptor_table_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto_sccs, descriptor_table_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto::offsets,
  file_level_metadata_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto, 1, file_level_enum_descriptors_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto, file_level_service_descriptors_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto), true);
namespace nucleus {
namespace genomics {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CigarUnit_Operation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto);
  return file_level_enum_descriptors_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto[0];
}
bool CigarUnit_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CigarUnit_Operation CigarUnit::OPERATION_UNSPECIFIED;
constexpr CigarUnit_Operation CigarUnit::ALIGNMENT_MATCH;
constexpr CigarUnit_Operation CigarUnit::INSERT;
constexpr CigarUnit_Operation CigarUnit::DELETE;
constexpr CigarUnit_Operation CigarUnit::SKIP;
constexpr CigarUnit_Operation CigarUnit::CLIP_SOFT;
constexpr CigarUnit_Operation CigarUnit::CLIP_HARD;
constexpr CigarUnit_Operation CigarUnit::PAD;
constexpr CigarUnit_Operation CigarUnit::SEQUENCE_MATCH;
constexpr CigarUnit_Operation CigarUnit::SEQUENCE_MISMATCH;
constexpr CigarUnit_Operation CigarUnit::Operation_MIN;
constexpr CigarUnit_Operation CigarUnit::Operation_MAX;
constexpr int CigarUnit::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void CigarUnit::InitAsDefaultInstance() {
}
class CigarUnit::_Internal {
 public:
};

CigarUnit::CigarUnit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.CigarUnit)
}
CigarUnit::CigarUnit(const CigarUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.reference_sequence().empty()) {
    reference_sequence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_sequence_);
  }
  ::memcpy(&operation_length_, &from.operation_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&operation_length_)) + sizeof(operation_));
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.CigarUnit)
}

void CigarUnit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CigarUnit_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto.base);
  reference_sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&operation_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_) -
      reinterpret_cast<char*>(&operation_length_)) + sizeof(operation_));
}

CigarUnit::~CigarUnit() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.CigarUnit)
  SharedDtor();
}

void CigarUnit::SharedDtor() {
  reference_sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CigarUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CigarUnit& CigarUnit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CigarUnit_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto.base);
  return *internal_default_instance();
}


void CigarUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.CigarUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_sequence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&operation_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_) -
      reinterpret_cast<char*>(&operation_length_)) + sizeof(operation_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CigarUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nucleus.genomics.v1.CigarUnit.Operation operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_operation(static_cast<::nucleus::genomics::v1::CigarUnit_Operation>(val));
        } else goto handle_unusual;
        continue;
      // int64 operation_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          operation_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference_sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_reference_sequence(), ptr, ctx, "nucleus.genomics.v1.CigarUnit.reference_sequence");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CigarUnit::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.CigarUnit)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nucleus.genomics.v1.CigarUnit.Operation operation = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operation(static_cast< ::nucleus::genomics::v1::CigarUnit_Operation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 operation_length = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &operation_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reference_sequence = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_sequence()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->reference_sequence().data(), static_cast<int>(this->reference_sequence().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.CigarUnit.reference_sequence"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.CigarUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.CigarUnit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CigarUnit::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.CigarUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nucleus.genomics.v1.CigarUnit.Operation operation = 1;
  if (this->operation() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->operation(), output);
  }

  // int64 operation_length = 2;
  if (this->operation_length() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->operation_length(), output);
  }

  // string reference_sequence = 3;
  if (this->reference_sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reference_sequence().data(), static_cast<int>(this->reference_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.CigarUnit.reference_sequence");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reference_sequence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.CigarUnit)
}

::PROTOBUF_NAMESPACE_ID::uint8* CigarUnit::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.CigarUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nucleus.genomics.v1.CigarUnit.Operation operation = 1;
  if (this->operation() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->operation(), target);
  }

  // int64 operation_length = 2;
  if (this->operation_length() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->operation_length(), target);
  }

  // string reference_sequence = 3;
  if (this->reference_sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reference_sequence().data(), static_cast<int>(this->reference_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.CigarUnit.reference_sequence");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->reference_sequence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.CigarUnit)
  return target;
}

size_t CigarUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.CigarUnit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reference_sequence = 3;
  if (this->reference_sequence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->reference_sequence());
  }

  // int64 operation_length = 2;
  if (this->operation_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->operation_length());
  }

  // .nucleus.genomics.v1.CigarUnit.Operation operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->operation());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CigarUnit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.CigarUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const CigarUnit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CigarUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.CigarUnit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.CigarUnit)
    MergeFrom(*source);
  }
}

void CigarUnit::MergeFrom(const CigarUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.CigarUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reference_sequence().size() > 0) {

    reference_sequence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reference_sequence_);
  }
  if (from.operation_length() != 0) {
    set_operation_length(from.operation_length());
  }
  if (from.operation() != 0) {
    set_operation(from.operation());
  }
}

void CigarUnit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.CigarUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CigarUnit::CopyFrom(const CigarUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.CigarUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CigarUnit::IsInitialized() const {
  return true;
}

void CigarUnit::InternalSwap(CigarUnit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reference_sequence_.Swap(&other->reference_sequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(operation_length_, other->operation_length_);
  swap(operation_, other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CigarUnit::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::CigarUnit* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::CigarUnit >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::CigarUnit >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
