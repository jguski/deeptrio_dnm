// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: third_party/nucleus/protos/gff.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "third_party/nucleus/protos/range.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto;
namespace nucleus {
namespace genomics {
namespace v1 {
class GffHeader;
class GffHeaderDefaultTypeInternal;
extern GffHeaderDefaultTypeInternal _GffHeader_default_instance_;
class GffHeader_GenomeBuildDirective;
class GffHeader_GenomeBuildDirectiveDefaultTypeInternal;
extern GffHeader_GenomeBuildDirectiveDefaultTypeInternal _GffHeader_GenomeBuildDirective_default_instance_;
class GffHeader_OntologyDirective;
class GffHeader_OntologyDirectiveDefaultTypeInternal;
extern GffHeader_OntologyDirectiveDefaultTypeInternal _GffHeader_OntologyDirective_default_instance_;
class GffReaderOptions;
class GffReaderOptionsDefaultTypeInternal;
extern GffReaderOptionsDefaultTypeInternal _GffReaderOptions_default_instance_;
class GffRecord;
class GffRecordDefaultTypeInternal;
extern GffRecordDefaultTypeInternal _GffRecord_default_instance_;
class GffRecord_AttributesEntry_DoNotUse;
class GffRecord_AttributesEntry_DoNotUseDefaultTypeInternal;
extern GffRecord_AttributesEntry_DoNotUseDefaultTypeInternal _GffRecord_AttributesEntry_DoNotUse_default_instance_;
class GffWriterOptions;
class GffWriterOptionsDefaultTypeInternal;
extern GffWriterOptionsDefaultTypeInternal _GffWriterOptions_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
PROTOBUF_NAMESPACE_OPEN
template<> ::nucleus::genomics::v1::GffHeader* Arena::CreateMaybeMessage<::nucleus::genomics::v1::GffHeader>(Arena*);
template<> ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective* Arena::CreateMaybeMessage<::nucleus::genomics::v1::GffHeader_GenomeBuildDirective>(Arena*);
template<> ::nucleus::genomics::v1::GffHeader_OntologyDirective* Arena::CreateMaybeMessage<::nucleus::genomics::v1::GffHeader_OntologyDirective>(Arena*);
template<> ::nucleus::genomics::v1::GffReaderOptions* Arena::CreateMaybeMessage<::nucleus::genomics::v1::GffReaderOptions>(Arena*);
template<> ::nucleus::genomics::v1::GffRecord* Arena::CreateMaybeMessage<::nucleus::genomics::v1::GffRecord>(Arena*);
template<> ::nucleus::genomics::v1::GffRecord_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage<::nucleus::genomics::v1::GffRecord_AttributesEntry_DoNotUse>(Arena*);
template<> ::nucleus::genomics::v1::GffWriterOptions* Arena::CreateMaybeMessage<::nucleus::genomics::v1::GffWriterOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nucleus {
namespace genomics {
namespace v1 {

enum GffRecord_Strand : int {
  GffRecord_Strand_UNSPECIFIED_STRAND = 0,
  GffRecord_Strand_FORWARD_STRAND = 1,
  GffRecord_Strand_REVERSE_STRAND = 2,
  GffRecord_Strand_GffRecord_Strand_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GffRecord_Strand_GffRecord_Strand_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GffRecord_Strand_IsValid(int value);
constexpr GffRecord_Strand GffRecord_Strand_Strand_MIN = GffRecord_Strand_UNSPECIFIED_STRAND;
constexpr GffRecord_Strand GffRecord_Strand_Strand_MAX = GffRecord_Strand_REVERSE_STRAND;
constexpr int GffRecord_Strand_Strand_ARRAYSIZE = GffRecord_Strand_Strand_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GffRecord_Strand_descriptor();
template<typename T>
inline const std::string& GffRecord_Strand_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GffRecord_Strand>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GffRecord_Strand_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GffRecord_Strand_descriptor(), enum_t_value);
}
inline bool GffRecord_Strand_Parse(
    const std::string& name, GffRecord_Strand* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GffRecord_Strand>(
    GffRecord_Strand_descriptor(), name, value);
}
// ===================================================================

class GffRecord_AttributesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GffRecord_AttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GffRecord_AttributesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GffRecord_AttributesEntry_DoNotUse();
  GffRecord_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GffRecord_AttributesEntry_DoNotUse& other);
  static const GffRecord_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GffRecord_AttributesEntry_DoNotUse*>(&_GffRecord_AttributesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nucleus.genomics.v1.GffRecord.AttributesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "nucleus.genomics.v1.GffRecord.AttributesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class GffRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.GffRecord) */ {
 public:
  GffRecord();
  virtual ~GffRecord();

  GffRecord(const GffRecord& from);
  GffRecord(GffRecord&& from) noexcept
    : GffRecord() {
    *this = ::std::move(from);
  }

  inline GffRecord& operator=(const GffRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline GffRecord& operator=(GffRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GffRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GffRecord* internal_default_instance() {
    return reinterpret_cast<const GffRecord*>(
               &_GffRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GffRecord& a, GffRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(GffRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GffRecord* New() const final {
    return CreateMaybeMessage<GffRecord>(nullptr);
  }

  GffRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GffRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GffRecord& from);
  void MergeFrom(const GffRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GffRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.GffRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef GffRecord_Strand Strand;
  static constexpr Strand UNSPECIFIED_STRAND =
    GffRecord_Strand_UNSPECIFIED_STRAND;
  static constexpr Strand FORWARD_STRAND =
    GffRecord_Strand_FORWARD_STRAND;
  static constexpr Strand REVERSE_STRAND =
    GffRecord_Strand_REVERSE_STRAND;
  static inline bool Strand_IsValid(int value) {
    return GffRecord_Strand_IsValid(value);
  }
  static constexpr Strand Strand_MIN =
    GffRecord_Strand_Strand_MIN;
  static constexpr Strand Strand_MAX =
    GffRecord_Strand_Strand_MAX;
  static constexpr int Strand_ARRAYSIZE =
    GffRecord_Strand_Strand_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Strand_descriptor() {
    return GffRecord_Strand_descriptor();
  }
  template<typename T>
  static inline const std::string& Strand_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Strand>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Strand_Name.");
    return GffRecord_Strand_Name(enum_t_value);
  }
  static inline bool Strand_Parse(const std::string& name,
      Strand* value) {
    return GffRecord_Strand_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 7,
    kSourceFieldNumber = 2,
    kTypeFieldNumber = 3,
    kRangeFieldNumber = 1,
    kScoreFieldNumber = 4,
    kStrandFieldNumber = 5,
    kPhaseFieldNumber = 6,
  };
  // map<string, string> attributes = 7;
  int attributes_size() const;
  void clear_attributes();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      attributes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_attributes();

  // string source = 2;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // .nucleus.genomics.v1.Range range = 1;
  bool has_range() const;
  void clear_range();
  const ::nucleus::genomics::v1::Range& range() const;
  ::nucleus::genomics::v1::Range* release_range();
  ::nucleus::genomics::v1::Range* mutable_range();
  void set_allocated_range(::nucleus::genomics::v1::Range* range);

  // double score = 4;
  void clear_score();
  double score() const;
  void set_score(double value);

  // .nucleus.genomics.v1.GffRecord.Strand strand = 5;
  void clear_strand();
  ::nucleus::genomics::v1::GffRecord_Strand strand() const;
  void set_strand(::nucleus::genomics::v1::GffRecord_Strand value);

  // int32 phase = 6;
  void clear_phase();
  ::PROTOBUF_NAMESPACE_ID::int32 phase() const;
  void set_phase(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.GffRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GffRecord_AttributesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > attributes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::nucleus::genomics::v1::Range* range_;
  double score_;
  int strand_;
  ::PROTOBUF_NAMESPACE_ID::int32 phase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto;
};
// -------------------------------------------------------------------

class GffHeader_OntologyDirective :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.GffHeader.OntologyDirective) */ {
 public:
  GffHeader_OntologyDirective();
  virtual ~GffHeader_OntologyDirective();

  GffHeader_OntologyDirective(const GffHeader_OntologyDirective& from);
  GffHeader_OntologyDirective(GffHeader_OntologyDirective&& from) noexcept
    : GffHeader_OntologyDirective() {
    *this = ::std::move(from);
  }

  inline GffHeader_OntologyDirective& operator=(const GffHeader_OntologyDirective& from) {
    CopyFrom(from);
    return *this;
  }
  inline GffHeader_OntologyDirective& operator=(GffHeader_OntologyDirective&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GffHeader_OntologyDirective& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GffHeader_OntologyDirective* internal_default_instance() {
    return reinterpret_cast<const GffHeader_OntologyDirective*>(
               &_GffHeader_OntologyDirective_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GffHeader_OntologyDirective& a, GffHeader_OntologyDirective& b) {
    a.Swap(&b);
  }
  inline void Swap(GffHeader_OntologyDirective* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GffHeader_OntologyDirective* New() const final {
    return CreateMaybeMessage<GffHeader_OntologyDirective>(nullptr);
  }

  GffHeader_OntologyDirective* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GffHeader_OntologyDirective>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GffHeader_OntologyDirective& from);
  void MergeFrom(const GffHeader_OntologyDirective& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GffHeader_OntologyDirective* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.GffHeader.OntologyDirective";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.GffHeader.OntologyDirective)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto;
};
// -------------------------------------------------------------------

class GffHeader_GenomeBuildDirective :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.GffHeader.GenomeBuildDirective) */ {
 public:
  GffHeader_GenomeBuildDirective();
  virtual ~GffHeader_GenomeBuildDirective();

  GffHeader_GenomeBuildDirective(const GffHeader_GenomeBuildDirective& from);
  GffHeader_GenomeBuildDirective(GffHeader_GenomeBuildDirective&& from) noexcept
    : GffHeader_GenomeBuildDirective() {
    *this = ::std::move(from);
  }

  inline GffHeader_GenomeBuildDirective& operator=(const GffHeader_GenomeBuildDirective& from) {
    CopyFrom(from);
    return *this;
  }
  inline GffHeader_GenomeBuildDirective& operator=(GffHeader_GenomeBuildDirective&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GffHeader_GenomeBuildDirective& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GffHeader_GenomeBuildDirective* internal_default_instance() {
    return reinterpret_cast<const GffHeader_GenomeBuildDirective*>(
               &_GffHeader_GenomeBuildDirective_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GffHeader_GenomeBuildDirective& a, GffHeader_GenomeBuildDirective& b) {
    a.Swap(&b);
  }
  inline void Swap(GffHeader_GenomeBuildDirective* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GffHeader_GenomeBuildDirective* New() const final {
    return CreateMaybeMessage<GffHeader_GenomeBuildDirective>(nullptr);
  }

  GffHeader_GenomeBuildDirective* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GffHeader_GenomeBuildDirective>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GffHeader_GenomeBuildDirective& from);
  void MergeFrom(const GffHeader_GenomeBuildDirective& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GffHeader_GenomeBuildDirective* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.GffHeader.GenomeBuildDirective";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string source = 1;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto;
};
// -------------------------------------------------------------------

class GffHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.GffHeader) */ {
 public:
  GffHeader();
  virtual ~GffHeader();

  GffHeader(const GffHeader& from);
  GffHeader(GffHeader&& from) noexcept
    : GffHeader() {
    *this = ::std::move(from);
  }

  inline GffHeader& operator=(const GffHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline GffHeader& operator=(GffHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GffHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GffHeader* internal_default_instance() {
    return reinterpret_cast<const GffHeader*>(
               &_GffHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GffHeader& a, GffHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(GffHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GffHeader* New() const final {
    return CreateMaybeMessage<GffHeader>(nullptr);
  }

  GffHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GffHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GffHeader& from);
  void MergeFrom(const GffHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GffHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.GffHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GffHeader_OntologyDirective OntologyDirective;
  typedef GffHeader_GenomeBuildDirective GenomeBuildDirective;

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceRegionsFieldNumber = 2,
    kFeatureOntologiesFieldNumber = 3,
    kAttributeOntologiesFieldNumber = 4,
    kSourceOntologiesFieldNumber = 5,
    kGffVersionFieldNumber = 1,
    kSpeciesFieldNumber = 6,
    kGenomeBuildFieldNumber = 7,
  };
  // repeated .nucleus.genomics.v1.Range sequence_regions = 2;
  int sequence_regions_size() const;
  void clear_sequence_regions();
  ::nucleus::genomics::v1::Range* mutable_sequence_regions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::Range >*
      mutable_sequence_regions();
  const ::nucleus::genomics::v1::Range& sequence_regions(int index) const;
  ::nucleus::genomics::v1::Range* add_sequence_regions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::Range >&
      sequence_regions() const;

  // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective feature_ontologies = 3;
  int feature_ontologies_size() const;
  void clear_feature_ontologies();
  ::nucleus::genomics::v1::GffHeader_OntologyDirective* mutable_feature_ontologies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::GffHeader_OntologyDirective >*
      mutable_feature_ontologies();
  const ::nucleus::genomics::v1::GffHeader_OntologyDirective& feature_ontologies(int index) const;
  ::nucleus::genomics::v1::GffHeader_OntologyDirective* add_feature_ontologies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::GffHeader_OntologyDirective >&
      feature_ontologies() const;

  // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective attribute_ontologies = 4;
  int attribute_ontologies_size() const;
  void clear_attribute_ontologies();
  ::nucleus::genomics::v1::GffHeader_OntologyDirective* mutable_attribute_ontologies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::GffHeader_OntologyDirective >*
      mutable_attribute_ontologies();
  const ::nucleus::genomics::v1::GffHeader_OntologyDirective& attribute_ontologies(int index) const;
  ::nucleus::genomics::v1::GffHeader_OntologyDirective* add_attribute_ontologies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::GffHeader_OntologyDirective >&
      attribute_ontologies() const;

  // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective source_ontologies = 5;
  int source_ontologies_size() const;
  void clear_source_ontologies();
  ::nucleus::genomics::v1::GffHeader_OntologyDirective* mutable_source_ontologies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::GffHeader_OntologyDirective >*
      mutable_source_ontologies();
  const ::nucleus::genomics::v1::GffHeader_OntologyDirective& source_ontologies(int index) const;
  ::nucleus::genomics::v1::GffHeader_OntologyDirective* add_source_ontologies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::GffHeader_OntologyDirective >&
      source_ontologies() const;

  // string gff_version = 1;
  void clear_gff_version();
  const std::string& gff_version() const;
  void set_gff_version(const std::string& value);
  void set_gff_version(std::string&& value);
  void set_gff_version(const char* value);
  void set_gff_version(const char* value, size_t size);
  std::string* mutable_gff_version();
  std::string* release_gff_version();
  void set_allocated_gff_version(std::string* gff_version);

  // string species = 6;
  void clear_species();
  const std::string& species() const;
  void set_species(const std::string& value);
  void set_species(std::string&& value);
  void set_species(const char* value);
  void set_species(const char* value, size_t size);
  std::string* mutable_species();
  std::string* release_species();
  void set_allocated_species(std::string* species);

  // .nucleus.genomics.v1.GffHeader.GenomeBuildDirective genome_build = 7;
  bool has_genome_build() const;
  void clear_genome_build();
  const ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective& genome_build() const;
  ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective* release_genome_build();
  ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective* mutable_genome_build();
  void set_allocated_genome_build(::nucleus::genomics::v1::GffHeader_GenomeBuildDirective* genome_build);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.GffHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::Range > sequence_regions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::GffHeader_OntologyDirective > feature_ontologies_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::GffHeader_OntologyDirective > attribute_ontologies_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::GffHeader_OntologyDirective > source_ontologies_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gff_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr species_;
  ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective* genome_build_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto;
};
// -------------------------------------------------------------------

class GffReaderOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.GffReaderOptions) */ {
 public:
  GffReaderOptions();
  virtual ~GffReaderOptions();

  GffReaderOptions(const GffReaderOptions& from);
  GffReaderOptions(GffReaderOptions&& from) noexcept
    : GffReaderOptions() {
    *this = ::std::move(from);
  }

  inline GffReaderOptions& operator=(const GffReaderOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GffReaderOptions& operator=(GffReaderOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GffReaderOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GffReaderOptions* internal_default_instance() {
    return reinterpret_cast<const GffReaderOptions*>(
               &_GffReaderOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GffReaderOptions& a, GffReaderOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GffReaderOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GffReaderOptions* New() const final {
    return CreateMaybeMessage<GffReaderOptions>(nullptr);
  }

  GffReaderOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GffReaderOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GffReaderOptions& from);
  void MergeFrom(const GffReaderOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GffReaderOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.GffReaderOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.GffReaderOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto;
};
// -------------------------------------------------------------------

class GffWriterOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.GffWriterOptions) */ {
 public:
  GffWriterOptions();
  virtual ~GffWriterOptions();

  GffWriterOptions(const GffWriterOptions& from);
  GffWriterOptions(GffWriterOptions&& from) noexcept
    : GffWriterOptions() {
    *this = ::std::move(from);
  }

  inline GffWriterOptions& operator=(const GffWriterOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GffWriterOptions& operator=(GffWriterOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GffWriterOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GffWriterOptions* internal_default_instance() {
    return reinterpret_cast<const GffWriterOptions*>(
               &_GffWriterOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GffWriterOptions& a, GffWriterOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(GffWriterOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GffWriterOptions* New() const final {
    return CreateMaybeMessage<GffWriterOptions>(nullptr);
  }

  GffWriterOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GffWriterOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GffWriterOptions& from);
  void MergeFrom(const GffWriterOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GffWriterOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.GffWriterOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.GffWriterOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GffRecord

// .nucleus.genomics.v1.Range range = 1;
inline bool GffRecord::has_range() const {
  return this != internal_default_instance() && range_ != nullptr;
}
inline const ::nucleus::genomics::v1::Range& GffRecord::range() const {
  const ::nucleus::genomics::v1::Range* p = range_;
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.GffRecord.range)
  return p != nullptr ? *p : *reinterpret_cast<const ::nucleus::genomics::v1::Range*>(
      &::nucleus::genomics::v1::_Range_default_instance_);
}
inline ::nucleus::genomics::v1::Range* GffRecord::release_range() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.GffRecord.range)
  
  ::nucleus::genomics::v1::Range* temp = range_;
  range_ = nullptr;
  return temp;
}
inline ::nucleus::genomics::v1::Range* GffRecord::mutable_range() {
  
  if (range_ == nullptr) {
    auto* p = CreateMaybeMessage<::nucleus::genomics::v1::Range>(GetArenaNoVirtual());
    range_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.GffRecord.range)
  return range_;
}
inline void GffRecord::set_allocated_range(::nucleus::genomics::v1::Range* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(range_);
  }
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    
  } else {
    
  }
  range_ = range;
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.GffRecord.range)
}

// string source = 2;
inline void GffRecord::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GffRecord::source() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.GffRecord.source)
  return source_.GetNoArena();
}
inline void GffRecord::set_source(const std::string& value) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.GffRecord.source)
}
inline void GffRecord::set_source(std::string&& value) {
  
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.GffRecord.source)
}
inline void GffRecord::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.GffRecord.source)
}
inline void GffRecord::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.GffRecord.source)
}
inline std::string* GffRecord::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.GffRecord.source)
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GffRecord::release_source() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.GffRecord.source)
  
  return source_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GffRecord::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.GffRecord.source)
}

// string type = 3;
inline void GffRecord::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GffRecord::type() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.GffRecord.type)
  return type_.GetNoArena();
}
inline void GffRecord::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.GffRecord.type)
}
inline void GffRecord::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.GffRecord.type)
}
inline void GffRecord::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.GffRecord.type)
}
inline void GffRecord::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.GffRecord.type)
}
inline std::string* GffRecord::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.GffRecord.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GffRecord::release_type() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.GffRecord.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GffRecord::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.GffRecord.type)
}

// double score = 4;
inline void GffRecord::clear_score() {
  score_ = 0;
}
inline double GffRecord::score() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.GffRecord.score)
  return score_;
}
inline void GffRecord::set_score(double value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.GffRecord.score)
}

// .nucleus.genomics.v1.GffRecord.Strand strand = 5;
inline void GffRecord::clear_strand() {
  strand_ = 0;
}
inline ::nucleus::genomics::v1::GffRecord_Strand GffRecord::strand() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.GffRecord.strand)
  return static_cast< ::nucleus::genomics::v1::GffRecord_Strand >(strand_);
}
inline void GffRecord::set_strand(::nucleus::genomics::v1::GffRecord_Strand value) {
  
  strand_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.GffRecord.strand)
}

// int32 phase = 6;
inline void GffRecord::clear_phase() {
  phase_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GffRecord::phase() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.GffRecord.phase)
  return phase_;
}
inline void GffRecord::set_phase(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.GffRecord.phase)
}

// map<string, string> attributes = 7;
inline int GffRecord::attributes_size() const {
  return attributes_.size();
}
inline void GffRecord::clear_attributes() {
  attributes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
GffRecord::attributes() const {
  // @@protoc_insertion_point(field_map:nucleus.genomics.v1.GffRecord.attributes)
  return attributes_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
GffRecord::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:nucleus.genomics.v1.GffRecord.attributes)
  return attributes_.MutableMap();
}

// -------------------------------------------------------------------

// GffHeader_OntologyDirective

// string uri = 1;
inline void GffHeader_OntologyDirective::clear_uri() {
  uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GffHeader_OntologyDirective::uri() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.GffHeader.OntologyDirective.uri)
  return uri_.GetNoArena();
}
inline void GffHeader_OntologyDirective::set_uri(const std::string& value) {
  
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.GffHeader.OntologyDirective.uri)
}
inline void GffHeader_OntologyDirective::set_uri(std::string&& value) {
  
  uri_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.GffHeader.OntologyDirective.uri)
}
inline void GffHeader_OntologyDirective::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.GffHeader.OntologyDirective.uri)
}
inline void GffHeader_OntologyDirective::set_uri(const char* value, size_t size) {
  
  uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.GffHeader.OntologyDirective.uri)
}
inline std::string* GffHeader_OntologyDirective::mutable_uri() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.GffHeader.OntologyDirective.uri)
  return uri_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GffHeader_OntologyDirective::release_uri() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.GffHeader.OntologyDirective.uri)
  
  return uri_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GffHeader_OntologyDirective::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.GffHeader.OntologyDirective.uri)
}

// -------------------------------------------------------------------

// GffHeader_GenomeBuildDirective

// string source = 1;
inline void GffHeader_GenomeBuildDirective::clear_source() {
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GffHeader_GenomeBuildDirective::source() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.GffHeader.GenomeBuildDirective.source)
  return source_.GetNoArena();
}
inline void GffHeader_GenomeBuildDirective::set_source(const std::string& value) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.GffHeader.GenomeBuildDirective.source)
}
inline void GffHeader_GenomeBuildDirective::set_source(std::string&& value) {
  
  source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.GffHeader.GenomeBuildDirective.source)
}
inline void GffHeader_GenomeBuildDirective::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.GffHeader.GenomeBuildDirective.source)
}
inline void GffHeader_GenomeBuildDirective::set_source(const char* value, size_t size) {
  
  source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.GffHeader.GenomeBuildDirective.source)
}
inline std::string* GffHeader_GenomeBuildDirective::mutable_source() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.GffHeader.GenomeBuildDirective.source)
  return source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GffHeader_GenomeBuildDirective::release_source() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.GffHeader.GenomeBuildDirective.source)
  
  return source_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GffHeader_GenomeBuildDirective::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.GffHeader.GenomeBuildDirective.source)
}

// string name = 2;
inline void GffHeader_GenomeBuildDirective::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GffHeader_GenomeBuildDirective::name() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.GffHeader.GenomeBuildDirective.name)
  return name_.GetNoArena();
}
inline void GffHeader_GenomeBuildDirective::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.GffHeader.GenomeBuildDirective.name)
}
inline void GffHeader_GenomeBuildDirective::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.GffHeader.GenomeBuildDirective.name)
}
inline void GffHeader_GenomeBuildDirective::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.GffHeader.GenomeBuildDirective.name)
}
inline void GffHeader_GenomeBuildDirective::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.GffHeader.GenomeBuildDirective.name)
}
inline std::string* GffHeader_GenomeBuildDirective::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.GffHeader.GenomeBuildDirective.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GffHeader_GenomeBuildDirective::release_name() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.GffHeader.GenomeBuildDirective.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GffHeader_GenomeBuildDirective::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.GffHeader.GenomeBuildDirective.name)
}

// -------------------------------------------------------------------

// GffHeader

// string gff_version = 1;
inline void GffHeader::clear_gff_version() {
  gff_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GffHeader::gff_version() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.GffHeader.gff_version)
  return gff_version_.GetNoArena();
}
inline void GffHeader::set_gff_version(const std::string& value) {
  
  gff_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.GffHeader.gff_version)
}
inline void GffHeader::set_gff_version(std::string&& value) {
  
  gff_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.GffHeader.gff_version)
}
inline void GffHeader::set_gff_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gff_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.GffHeader.gff_version)
}
inline void GffHeader::set_gff_version(const char* value, size_t size) {
  
  gff_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.GffHeader.gff_version)
}
inline std::string* GffHeader::mutable_gff_version() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.GffHeader.gff_version)
  return gff_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GffHeader::release_gff_version() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.GffHeader.gff_version)
  
  return gff_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GffHeader::set_allocated_gff_version(std::string* gff_version) {
  if (gff_version != nullptr) {
    
  } else {
    
  }
  gff_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gff_version);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.GffHeader.gff_version)
}

// repeated .nucleus.genomics.v1.Range sequence_regions = 2;
inline int GffHeader::sequence_regions_size() const {
  return sequence_regions_.size();
}
inline ::nucleus::genomics::v1::Range* GffHeader::mutable_sequence_regions(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.GffHeader.sequence_regions)
  return sequence_regions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::Range >*
GffHeader::mutable_sequence_regions() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.GffHeader.sequence_regions)
  return &sequence_regions_;
}
inline const ::nucleus::genomics::v1::Range& GffHeader::sequence_regions(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.GffHeader.sequence_regions)
  return sequence_regions_.Get(index);
}
inline ::nucleus::genomics::v1::Range* GffHeader::add_sequence_regions() {
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.GffHeader.sequence_regions)
  return sequence_regions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::Range >&
GffHeader::sequence_regions() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.GffHeader.sequence_regions)
  return sequence_regions_;
}

// repeated .nucleus.genomics.v1.GffHeader.OntologyDirective feature_ontologies = 3;
inline int GffHeader::feature_ontologies_size() const {
  return feature_ontologies_.size();
}
inline void GffHeader::clear_feature_ontologies() {
  feature_ontologies_.Clear();
}
inline ::nucleus::genomics::v1::GffHeader_OntologyDirective* GffHeader::mutable_feature_ontologies(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.GffHeader.feature_ontologies)
  return feature_ontologies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::GffHeader_OntologyDirective >*
GffHeader::mutable_feature_ontologies() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.GffHeader.feature_ontologies)
  return &feature_ontologies_;
}
inline const ::nucleus::genomics::v1::GffHeader_OntologyDirective& GffHeader::feature_ontologies(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.GffHeader.feature_ontologies)
  return feature_ontologies_.Get(index);
}
inline ::nucleus::genomics::v1::GffHeader_OntologyDirective* GffHeader::add_feature_ontologies() {
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.GffHeader.feature_ontologies)
  return feature_ontologies_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::GffHeader_OntologyDirective >&
GffHeader::feature_ontologies() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.GffHeader.feature_ontologies)
  return feature_ontologies_;
}

// repeated .nucleus.genomics.v1.GffHeader.OntologyDirective attribute_ontologies = 4;
inline int GffHeader::attribute_ontologies_size() const {
  return attribute_ontologies_.size();
}
inline void GffHeader::clear_attribute_ontologies() {
  attribute_ontologies_.Clear();
}
inline ::nucleus::genomics::v1::GffHeader_OntologyDirective* GffHeader::mutable_attribute_ontologies(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.GffHeader.attribute_ontologies)
  return attribute_ontologies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::GffHeader_OntologyDirective >*
GffHeader::mutable_attribute_ontologies() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.GffHeader.attribute_ontologies)
  return &attribute_ontologies_;
}
inline const ::nucleus::genomics::v1::GffHeader_OntologyDirective& GffHeader::attribute_ontologies(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.GffHeader.attribute_ontologies)
  return attribute_ontologies_.Get(index);
}
inline ::nucleus::genomics::v1::GffHeader_OntologyDirective* GffHeader::add_attribute_ontologies() {
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.GffHeader.attribute_ontologies)
  return attribute_ontologies_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::GffHeader_OntologyDirective >&
GffHeader::attribute_ontologies() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.GffHeader.attribute_ontologies)
  return attribute_ontologies_;
}

// repeated .nucleus.genomics.v1.GffHeader.OntologyDirective source_ontologies = 5;
inline int GffHeader::source_ontologies_size() const {
  return source_ontologies_.size();
}
inline void GffHeader::clear_source_ontologies() {
  source_ontologies_.Clear();
}
inline ::nucleus::genomics::v1::GffHeader_OntologyDirective* GffHeader::mutable_source_ontologies(int index) {
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.GffHeader.source_ontologies)
  return source_ontologies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::GffHeader_OntologyDirective >*
GffHeader::mutable_source_ontologies() {
  // @@protoc_insertion_point(field_mutable_list:nucleus.genomics.v1.GffHeader.source_ontologies)
  return &source_ontologies_;
}
inline const ::nucleus::genomics::v1::GffHeader_OntologyDirective& GffHeader::source_ontologies(int index) const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.GffHeader.source_ontologies)
  return source_ontologies_.Get(index);
}
inline ::nucleus::genomics::v1::GffHeader_OntologyDirective* GffHeader::add_source_ontologies() {
  // @@protoc_insertion_point(field_add:nucleus.genomics.v1.GffHeader.source_ontologies)
  return source_ontologies_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nucleus::genomics::v1::GffHeader_OntologyDirective >&
GffHeader::source_ontologies() const {
  // @@protoc_insertion_point(field_list:nucleus.genomics.v1.GffHeader.source_ontologies)
  return source_ontologies_;
}

// string species = 6;
inline void GffHeader::clear_species() {
  species_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GffHeader::species() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.GffHeader.species)
  return species_.GetNoArena();
}
inline void GffHeader::set_species(const std::string& value) {
  
  species_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.GffHeader.species)
}
inline void GffHeader::set_species(std::string&& value) {
  
  species_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.GffHeader.species)
}
inline void GffHeader::set_species(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  species_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.GffHeader.species)
}
inline void GffHeader::set_species(const char* value, size_t size) {
  
  species_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.GffHeader.species)
}
inline std::string* GffHeader::mutable_species() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.GffHeader.species)
  return species_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GffHeader::release_species() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.GffHeader.species)
  
  return species_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GffHeader::set_allocated_species(std::string* species) {
  if (species != nullptr) {
    
  } else {
    
  }
  species_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), species);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.GffHeader.species)
}

// .nucleus.genomics.v1.GffHeader.GenomeBuildDirective genome_build = 7;
inline bool GffHeader::has_genome_build() const {
  return this != internal_default_instance() && genome_build_ != nullptr;
}
inline void GffHeader::clear_genome_build() {
  if (GetArenaNoVirtual() == nullptr && genome_build_ != nullptr) {
    delete genome_build_;
  }
  genome_build_ = nullptr;
}
inline const ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective& GffHeader::genome_build() const {
  const ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective* p = genome_build_;
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.GffHeader.genome_build)
  return p != nullptr ? *p : *reinterpret_cast<const ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective*>(
      &::nucleus::genomics::v1::_GffHeader_GenomeBuildDirective_default_instance_);
}
inline ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective* GffHeader::release_genome_build() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.GffHeader.genome_build)
  
  ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective* temp = genome_build_;
  genome_build_ = nullptr;
  return temp;
}
inline ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective* GffHeader::mutable_genome_build() {
  
  if (genome_build_ == nullptr) {
    auto* p = CreateMaybeMessage<::nucleus::genomics::v1::GffHeader_GenomeBuildDirective>(GetArenaNoVirtual());
    genome_build_ = p;
  }
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.GffHeader.genome_build)
  return genome_build_;
}
inline void GffHeader::set_allocated_genome_build(::nucleus::genomics::v1::GffHeader_GenomeBuildDirective* genome_build) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete genome_build_;
  }
  if (genome_build) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      genome_build = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, genome_build, submessage_arena);
    }
    
  } else {
    
  }
  genome_build_ = genome_build;
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.GffHeader.genome_build)
}

// -------------------------------------------------------------------

// GffReaderOptions

// -------------------------------------------------------------------

// GffWriterOptions

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace genomics
}  // namespace nucleus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nucleus::genomics::v1::GffRecord_Strand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nucleus::genomics::v1::GffRecord_Strand>() {
  return ::nucleus::genomics::v1::GffRecord_Strand_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto
