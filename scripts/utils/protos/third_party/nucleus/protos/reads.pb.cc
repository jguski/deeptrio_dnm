// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: third_party/nucleus/protos/reads.proto

#include "third_party/nucleus/protos/reads.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CigarUnit_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2freference_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContigInfo_third_5fparty_2fnucleus_2fprotos_2freference_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2freads_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LinearAlignment_third_5fparty_2fnucleus_2fprotos_2freads_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_third_5fparty_2fnucleus_2fprotos_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2fposition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_third_5fparty_2fnucleus_2fprotos_2fposition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2freads_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Program_third_5fparty_2fnucleus_2fprotos_2freads_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2freads_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Read_InfoEntry_DoNotUse_third_5fparty_2fnucleus_2fprotos_2freads_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2freads_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadGroup_third_5fparty_2fnucleus_2fprotos_2freads_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2freads_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadRequirements_third_5fparty_2fnucleus_2fprotos_2freads_2eproto;
namespace nucleus {
namespace genomics {
namespace v1 {
class LinearAlignmentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinearAlignment> _instance;
} _LinearAlignment_default_instance_;
class Read_InfoEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Read_InfoEntry_DoNotUse> _instance;
} _Read_InfoEntry_DoNotUse_default_instance_;
class ReadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Read> _instance;
} _Read_default_instance_;
class SamHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SamHeader> _instance;
} _SamHeader_default_instance_;
class ReadGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadGroup> _instance;
} _ReadGroup_default_instance_;
class ProgramDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Program> _instance;
} _Program_default_instance_;
class SamReaderOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SamReaderOptions> _instance;
} _SamReaderOptions_default_instance_;
class ReadRequirementsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadRequirements> _instance;
} _ReadRequirements_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
static void InitDefaultsscc_info_LinearAlignment_third_5fparty_2fnucleus_2fprotos_2freads_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_LinearAlignment_default_instance_;
    new (ptr) ::nucleus::genomics::v1::LinearAlignment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::LinearAlignment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LinearAlignment_third_5fparty_2fnucleus_2fprotos_2freads_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_LinearAlignment_third_5fparty_2fnucleus_2fprotos_2freads_2eproto}, {
      &scc_info_Position_third_5fparty_2fnucleus_2fprotos_2fposition_2eproto.base,
      &scc_info_CigarUnit_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto.base,}};

static void InitDefaultsscc_info_Program_third_5fparty_2fnucleus_2fprotos_2freads_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_Program_default_instance_;
    new (ptr) ::nucleus::genomics::v1::Program();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::Program::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Program_third_5fparty_2fnucleus_2fprotos_2freads_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Program_third_5fparty_2fnucleus_2fprotos_2freads_2eproto}, {}};

static void InitDefaultsscc_info_Read_third_5fparty_2fnucleus_2fprotos_2freads_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_Read_default_instance_;
    new (ptr) ::nucleus::genomics::v1::Read();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::Read::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Read_third_5fparty_2fnucleus_2fprotos_2freads_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Read_third_5fparty_2fnucleus_2fprotos_2freads_2eproto}, {
      &scc_info_LinearAlignment_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base,
      &scc_info_Position_third_5fparty_2fnucleus_2fprotos_2fposition_2eproto.base,
      &scc_info_Read_InfoEntry_DoNotUse_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base,}};

static void InitDefaultsscc_info_Read_InfoEntry_DoNotUse_third_5fparty_2fnucleus_2fprotos_2freads_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_Read_InfoEntry_DoNotUse_default_instance_;
    new (ptr) ::nucleus::genomics::v1::Read_InfoEntry_DoNotUse();
  }
  ::nucleus::genomics::v1::Read_InfoEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Read_InfoEntry_DoNotUse_third_5fparty_2fnucleus_2fprotos_2freads_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Read_InfoEntry_DoNotUse_third_5fparty_2fnucleus_2fprotos_2freads_2eproto}, {
      &scc_info_ListValue_third_5fparty_2fnucleus_2fprotos_2fstruct_2eproto.base,}};

static void InitDefaultsscc_info_ReadGroup_third_5fparty_2fnucleus_2fprotos_2freads_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_ReadGroup_default_instance_;
    new (ptr) ::nucleus::genomics::v1::ReadGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::ReadGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadGroup_third_5fparty_2fnucleus_2fprotos_2freads_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReadGroup_third_5fparty_2fnucleus_2fprotos_2freads_2eproto}, {}};

static void InitDefaultsscc_info_ReadRequirements_third_5fparty_2fnucleus_2fprotos_2freads_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_ReadRequirements_default_instance_;
    new (ptr) ::nucleus::genomics::v1::ReadRequirements();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::ReadRequirements::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadRequirements_third_5fparty_2fnucleus_2fprotos_2freads_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReadRequirements_third_5fparty_2fnucleus_2fprotos_2freads_2eproto}, {}};

static void InitDefaultsscc_info_SamHeader_third_5fparty_2fnucleus_2fprotos_2freads_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_SamHeader_default_instance_;
    new (ptr) ::nucleus::genomics::v1::SamHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::SamHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SamHeader_third_5fparty_2fnucleus_2fprotos_2freads_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_SamHeader_third_5fparty_2fnucleus_2fprotos_2freads_2eproto}, {
      &scc_info_ContigInfo_third_5fparty_2fnucleus_2fprotos_2freference_2eproto.base,
      &scc_info_ReadGroup_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base,
      &scc_info_Program_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base,}};

static void InitDefaultsscc_info_SamReaderOptions_third_5fparty_2fnucleus_2fprotos_2freads_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_SamReaderOptions_default_instance_;
    new (ptr) ::nucleus::genomics::v1::SamReaderOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::SamReaderOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SamReaderOptions_third_5fparty_2fnucleus_2fprotos_2freads_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SamReaderOptions_third_5fparty_2fnucleus_2fprotos_2freads_2eproto}, {
      &scc_info_ReadRequirements_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_third_5fparty_2fnucleus_2fprotos_2freads_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_third_5fparty_2fnucleus_2fprotos_2freads_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_third_5fparty_2fnucleus_2fprotos_2freads_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_third_5fparty_2fnucleus_2fprotos_2freads_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::LinearAlignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::LinearAlignment, position_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::LinearAlignment, mapping_quality_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::LinearAlignment, cigar_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read_InfoEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read_InfoEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read_InfoEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read_InfoEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, id_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, read_group_id_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, read_group_set_id_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, fragment_name_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, proper_placement_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, duplicate_fragment_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, fragment_length_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, read_number_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, number_reads_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, failed_vendor_quality_checks_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, alignment_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, secondary_alignment_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, supplementary_alignment_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, aligned_sequence_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, aligned_quality_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, next_mate_position_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, info_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Read, cached_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::SamHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::SamHeader, format_version_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::SamHeader, sorting_order_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::SamHeader, alignment_grouping_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::SamHeader, contigs_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::SamHeader, read_groups_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::SamHeader, programs_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::SamHeader, comments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadGroup, name_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadGroup, sequencing_center_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadGroup, description_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadGroup, date_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadGroup, flow_order_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadGroup, key_sequence_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadGroup, library_id_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadGroup, program_ids_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadGroup, predicted_insert_size_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadGroup, platform_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadGroup, platform_model_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadGroup, platform_unit_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadGroup, sample_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Program, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Program, id_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Program, name_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Program, command_line_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Program, prev_program_id_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Program, description_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::Program, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::SamReaderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::SamReaderOptions, read_requirements_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::SamReaderOptions, aux_field_handling_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::SamReaderOptions, hts_block_size_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::SamReaderOptions, downsample_fraction_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::SamReaderOptions, random_seed_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::SamReaderOptions, use_original_base_quality_scores_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::SamReaderOptions, aux_fields_to_keep_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadRequirements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadRequirements, keep_duplicates_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadRequirements, keep_failed_vendor_quality_checks_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadRequirements, keep_secondary_alignments_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadRequirements, keep_supplementary_alignments_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadRequirements, keep_unaligned_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadRequirements, keep_improperly_placed_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadRequirements, min_mapping_quality_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadRequirements, min_base_quality_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::ReadRequirements, min_base_quality_mode_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::nucleus::genomics::v1::LinearAlignment)},
  { 8, 15, sizeof(::nucleus::genomics::v1::Read_InfoEntry_DoNotUse)},
  { 17, -1, sizeof(::nucleus::genomics::v1::Read)},
  { 40, -1, sizeof(::nucleus::genomics::v1::SamHeader)},
  { 52, -1, sizeof(::nucleus::genomics::v1::ReadGroup)},
  { 70, -1, sizeof(::nucleus::genomics::v1::Program)},
  { 81, -1, sizeof(::nucleus::genomics::v1::SamReaderOptions)},
  { 93, -1, sizeof(::nucleus::genomics::v1::ReadRequirements)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_LinearAlignment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_Read_InfoEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_Read_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_SamHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_ReadGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_Program_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_SamReaderOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_ReadRequirements_default_instance_),
};

const char descriptor_table_protodef_third_5fparty_2fnucleus_2fprotos_2freads_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&third_party/nucleus/protos/reads.proto"
  "\022\023nucleus.genomics.v1\032&third_party/nucle"
  "us/protos/cigar.proto\032)third_party/nucle"
  "us/protos/position.proto\032*third_party/nu"
  "cleus/protos/reference.proto\032\'third_part"
  "y/nucleus/protos/struct.proto\"\212\001\n\017Linear"
  "Alignment\022/\n\010position\030\001 \001(\0132\035.nucleus.ge"
  "nomics.v1.Position\022\027\n\017mapping_quality\030\002 "
  "\001(\005\022-\n\005cigar\030\003 \003(\0132\036.nucleus.genomics.v1"
  ".CigarUnit\"\364\004\n\004Read\022\n\n\002id\030\001 \001(\t\022\025\n\rread_"
  "group_id\030\002 \001(\t\022\031\n\021read_group_set_id\030\003 \001("
  "\t\022\025\n\rfragment_name\030\004 \001(\t\022\030\n\020proper_place"
  "ment\030\005 \001(\010\022\032\n\022duplicate_fragment\030\006 \001(\010\022\027"
  "\n\017fragment_length\030\007 \001(\005\022\023\n\013read_number\030\010"
  " \001(\005\022\024\n\014number_reads\030\t \001(\005\022$\n\034failed_ven"
  "dor_quality_checks\030\n \001(\010\0227\n\talignment\030\013 "
  "\001(\0132$.nucleus.genomics.v1.LinearAlignmen"
  "t\022\033\n\023secondary_alignment\030\014 \001(\010\022\037\n\027supple"
  "mentary_alignment\030\r \001(\010\022\030\n\020aligned_seque"
  "nce\030\016 \001(\t\022\027\n\017aligned_quality\030\017 \003(\005\0229\n\022ne"
  "xt_mate_position\030\020 \001(\0132\035.nucleus.genomic"
  "s.v1.Position\0221\n\004info\030\021 \003(\0132#.nucleus.ge"
  "nomics.v1.Read.InfoEntry\022\022\n\ncached_end\030\022"
  " \001(\003\032K\n\tInfoEntry\022\013\n\003key\030\001 \001(\t\022-\n\005value\030"
  "\002 \001(\0132\036.nucleus.genomics.v1.ListValue:\0028"
  "\001\"\341\003\n\tSamHeader\022\026\n\016format_version\030\001 \001(\t\022"
  "B\n\rsorting_order\030\002 \001(\0162+.nucleus.genomic"
  "s.v1.SamHeader.SortingOrder\022L\n\022alignment"
  "_grouping\030\003 \001(\01620.nucleus.genomics.v1.Sa"
  "mHeader.AlignmentGrouping\0220\n\007contigs\030\004 \003"
  "(\0132\037.nucleus.genomics.v1.ContigInfo\0223\n\013r"
  "ead_groups\030\005 \003(\0132\036.nucleus.genomics.v1.R"
  "eadGroup\022.\n\010programs\030\006 \003(\0132\034.nucleus.gen"
  "omics.v1.Program\022\020\n\010comments\030\007 \003(\t\"H\n\014So"
  "rtingOrder\022\013\n\007UNKNOWN\020\000\022\014\n\010UNSORTED\020\001\022\r\n"
  "\tQUERYNAME\020\002\022\016\n\nCOORDINATE\020\003\"7\n\021Alignmen"
  "tGrouping\022\010\n\004NONE\020\000\022\t\n\005QUERY\020\001\022\r\n\tREFERE"
  "NCE\020\002\"\235\002\n\tReadGroup\022\014\n\004name\030\001 \001(\t\022\031\n\021seq"
  "uencing_center\030\002 \001(\t\022\023\n\013description\030\003 \001("
  "\t\022\014\n\004date\030\004 \001(\t\022\022\n\nflow_order\030\005 \001(\t\022\024\n\014k"
  "ey_sequence\030\006 \001(\t\022\022\n\nlibrary_id\030\007 \001(\t\022\023\n"
  "\013program_ids\030\010 \003(\t\022\035\n\025predicted_insert_s"
  "ize\030\t \001(\005\022\020\n\010platform\030\n \001(\t\022\026\n\016platform_"
  "model\030\013 \001(\t\022\025\n\rplatform_unit\030\014 \001(\t\022\021\n\tsa"
  "mple_id\030\r \001(\t\"x\n\007Program\022\n\n\002id\030\002 \001(\t\022\014\n\004"
  "name\030\003 \001(\t\022\024\n\014command_line\030\001 \001(\t\022\027\n\017prev"
  "_program_id\030\004 \001(\t\022\023\n\013description\030\006 \001(\t\022\017"
  "\n\007version\030\005 \001(\t\"\214\003\n\020SamReaderOptions\022@\n\021"
  "read_requirements\030\001 \001(\0132%.nucleus.genomi"
  "cs.v1.ReadRequirements\022R\n\022aux_field_hand"
  "ling\030\003 \001(\01626.nucleus.genomics.v1.SamRead"
  "erOptions.AuxFieldHandling\022\026\n\016hts_block_"
  "size\030\004 \001(\003\022\033\n\023downsample_fraction\030\005 \001(\002\022"
  "\023\n\013random_seed\030\006 \001(\003\022(\n use_original_bas"
  "e_quality_scores\030\n \001(\010\022\032\n\022aux_fields_to_"
  "keep\030\013 \003(\t\"R\n\020AuxFieldHandling\022\017\n\013UNSPEC"
  "IFIED\020\000\022\023\n\017SKIP_AUX_FIELDS\020\001\022\030\n\024PARSE_AL"
  "L_AUX_FIELDS\020\002\"\247\003\n\020ReadRequirements\022\027\n\017k"
  "eep_duplicates\030\001 \001(\010\022)\n!keep_failed_vend"
  "or_quality_checks\030\002 \001(\010\022!\n\031keep_secondar"
  "y_alignments\030\003 \001(\010\022%\n\035keep_supplementary"
  "_alignments\030\004 \001(\010\022\026\n\016keep_unaligned\030\005 \001("
  "\010\022\036\n\026keep_improperly_placed\030\006 \001(\010\022\033\n\023min"
  "_mapping_quality\030\007 \001(\005\022\030\n\020min_base_quali"
  "ty\030\010 \001(\005\022W\n\025min_base_quality_mode\030\t \001(\0162"
  "8.nucleus.genomics.v1.ReadRequirements.M"
  "inBaseQualityMode\"=\n\022MinBaseQualityMode\022"
  "\017\n\013UNSPECIFIED\020\000\022\026\n\022ENFORCED_BY_CLIENT\020\001"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto_deps[4] = {
  &::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto,
  &::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fposition_2eproto,
  &::descriptor_table_third_5fparty_2fnucleus_2fprotos_2freference_2eproto,
  &::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto_sccs[8] = {
  &scc_info_LinearAlignment_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base,
  &scc_info_Program_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base,
  &scc_info_Read_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base,
  &scc_info_Read_InfoEntry_DoNotUse_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base,
  &scc_info_ReadGroup_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base,
  &scc_info_ReadRequirements_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base,
  &scc_info_SamHeader_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base,
  &scc_info_SamReaderOptions_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto_once;
static bool descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto = {
  &descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto_initialized, descriptor_table_protodef_third_5fparty_2fnucleus_2fprotos_2freads_2eproto, "third_party/nucleus/protos/reads.proto", 2728,
  &descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto_once, descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto_sccs, descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto_deps, 8, 4,
  schemas, file_default_instances, TableStruct_third_5fparty_2fnucleus_2fprotos_2freads_2eproto::offsets,
  file_level_metadata_third_5fparty_2fnucleus_2fprotos_2freads_2eproto, 8, file_level_enum_descriptors_third_5fparty_2fnucleus_2fprotos_2freads_2eproto, file_level_service_descriptors_third_5fparty_2fnucleus_2fprotos_2freads_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_third_5fparty_2fnucleus_2fprotos_2freads_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto), true);
namespace nucleus {
namespace genomics {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SamHeader_SortingOrder_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto);
  return file_level_enum_descriptors_third_5fparty_2fnucleus_2fprotos_2freads_2eproto[0];
}
bool SamHeader_SortingOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SamHeader_SortingOrder SamHeader::UNKNOWN;
constexpr SamHeader_SortingOrder SamHeader::UNSORTED;
constexpr SamHeader_SortingOrder SamHeader::QUERYNAME;
constexpr SamHeader_SortingOrder SamHeader::COORDINATE;
constexpr SamHeader_SortingOrder SamHeader::SortingOrder_MIN;
constexpr SamHeader_SortingOrder SamHeader::SortingOrder_MAX;
constexpr int SamHeader::SortingOrder_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SamHeader_AlignmentGrouping_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto);
  return file_level_enum_descriptors_third_5fparty_2fnucleus_2fprotos_2freads_2eproto[1];
}
bool SamHeader_AlignmentGrouping_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SamHeader_AlignmentGrouping SamHeader::NONE;
constexpr SamHeader_AlignmentGrouping SamHeader::QUERY;
constexpr SamHeader_AlignmentGrouping SamHeader::REFERENCE;
constexpr SamHeader_AlignmentGrouping SamHeader::AlignmentGrouping_MIN;
constexpr SamHeader_AlignmentGrouping SamHeader::AlignmentGrouping_MAX;
constexpr int SamHeader::AlignmentGrouping_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SamReaderOptions_AuxFieldHandling_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto);
  return file_level_enum_descriptors_third_5fparty_2fnucleus_2fprotos_2freads_2eproto[2];
}
bool SamReaderOptions_AuxFieldHandling_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SamReaderOptions_AuxFieldHandling SamReaderOptions::UNSPECIFIED;
constexpr SamReaderOptions_AuxFieldHandling SamReaderOptions::SKIP_AUX_FIELDS;
constexpr SamReaderOptions_AuxFieldHandling SamReaderOptions::PARSE_ALL_AUX_FIELDS;
constexpr SamReaderOptions_AuxFieldHandling SamReaderOptions::AuxFieldHandling_MIN;
constexpr SamReaderOptions_AuxFieldHandling SamReaderOptions::AuxFieldHandling_MAX;
constexpr int SamReaderOptions::AuxFieldHandling_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadRequirements_MinBaseQualityMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_third_5fparty_2fnucleus_2fprotos_2freads_2eproto);
  return file_level_enum_descriptors_third_5fparty_2fnucleus_2fprotos_2freads_2eproto[3];
}
bool ReadRequirements_MinBaseQualityMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReadRequirements_MinBaseQualityMode ReadRequirements::UNSPECIFIED;
constexpr ReadRequirements_MinBaseQualityMode ReadRequirements::ENFORCED_BY_CLIENT;
constexpr ReadRequirements_MinBaseQualityMode ReadRequirements::MinBaseQualityMode_MIN;
constexpr ReadRequirements_MinBaseQualityMode ReadRequirements::MinBaseQualityMode_MAX;
constexpr int ReadRequirements::MinBaseQualityMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void LinearAlignment::InitAsDefaultInstance() {
  ::nucleus::genomics::v1::_LinearAlignment_default_instance_._instance.get_mutable()->position_ = const_cast< ::nucleus::genomics::v1::Position*>(
      ::nucleus::genomics::v1::Position::internal_default_instance());
}
class LinearAlignment::_Internal {
 public:
  static const ::nucleus::genomics::v1::Position& position(const LinearAlignment* msg);
};

const ::nucleus::genomics::v1::Position&
LinearAlignment::_Internal::position(const LinearAlignment* msg) {
  return *msg->position_;
}
void LinearAlignment::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void LinearAlignment::clear_cigar() {
  cigar_.Clear();
}
LinearAlignment::LinearAlignment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.LinearAlignment)
}
LinearAlignment::LinearAlignment(const LinearAlignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cigar_(from.cigar_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::nucleus::genomics::v1::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  mapping_quality_ = from.mapping_quality_;
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.LinearAlignment)
}

void LinearAlignment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinearAlignment_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mapping_quality_) -
      reinterpret_cast<char*>(&position_)) + sizeof(mapping_quality_));
}

LinearAlignment::~LinearAlignment() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.LinearAlignment)
  SharedDtor();
}

void LinearAlignment::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void LinearAlignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinearAlignment& LinearAlignment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinearAlignment_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base);
  return *internal_default_instance();
}


void LinearAlignment::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.LinearAlignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cigar_.Clear();
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  mapping_quality_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LinearAlignment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nucleus.genomics.v1.Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mapping_quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mapping_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nucleus.genomics.v1.CigarUnit cigar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_cigar(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LinearAlignment::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.LinearAlignment)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nucleus.genomics.v1.Position position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mapping_quality = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapping_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nucleus.genomics.v1.CigarUnit cigar = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cigar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.LinearAlignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.LinearAlignment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LinearAlignment::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.LinearAlignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nucleus.genomics.v1.Position position = 1;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::position(this), output);
  }

  // int32 mapping_quality = 2;
  if (this->mapping_quality() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->mapping_quality(), output);
  }

  // repeated .nucleus.genomics.v1.CigarUnit cigar = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cigar_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->cigar(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.LinearAlignment)
}

::PROTOBUF_NAMESPACE_ID::uint8* LinearAlignment::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.LinearAlignment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nucleus.genomics.v1.Position position = 1;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::position(this), target);
  }

  // int32 mapping_quality = 2;
  if (this->mapping_quality() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->mapping_quality(), target);
  }

  // repeated .nucleus.genomics.v1.CigarUnit cigar = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cigar_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->cigar(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.LinearAlignment)
  return target;
}

size_t LinearAlignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.LinearAlignment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nucleus.genomics.v1.CigarUnit cigar = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->cigar_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cigar(static_cast<int>(i)));
    }
  }

  // .nucleus.genomics.v1.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 mapping_quality = 2;
  if (this->mapping_quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mapping_quality());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinearAlignment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.LinearAlignment)
  GOOGLE_DCHECK_NE(&from, this);
  const LinearAlignment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinearAlignment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.LinearAlignment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.LinearAlignment)
    MergeFrom(*source);
  }
}

void LinearAlignment::MergeFrom(const LinearAlignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.LinearAlignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cigar_.MergeFrom(from.cigar_);
  if (from.has_position()) {
    mutable_position()->::nucleus::genomics::v1::Position::MergeFrom(from.position());
  }
  if (from.mapping_quality() != 0) {
    set_mapping_quality(from.mapping_quality());
  }
}

void LinearAlignment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.LinearAlignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearAlignment::CopyFrom(const LinearAlignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.LinearAlignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearAlignment::IsInitialized() const {
  return true;
}

void LinearAlignment::InternalSwap(LinearAlignment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&cigar_)->InternalSwap(CastToBase(&other->cigar_));
  swap(position_, other->position_);
  swap(mapping_quality_, other->mapping_quality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearAlignment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Read_InfoEntry_DoNotUse::Read_InfoEntry_DoNotUse() {}
Read_InfoEntry_DoNotUse::Read_InfoEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Read_InfoEntry_DoNotUse::MergeFrom(const Read_InfoEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Read_InfoEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Read_InfoEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Read::InitAsDefaultInstance() {
  ::nucleus::genomics::v1::_Read_default_instance_._instance.get_mutable()->alignment_ = const_cast< ::nucleus::genomics::v1::LinearAlignment*>(
      ::nucleus::genomics::v1::LinearAlignment::internal_default_instance());
  ::nucleus::genomics::v1::_Read_default_instance_._instance.get_mutable()->next_mate_position_ = const_cast< ::nucleus::genomics::v1::Position*>(
      ::nucleus::genomics::v1::Position::internal_default_instance());
}
class Read::_Internal {
 public:
  static const ::nucleus::genomics::v1::LinearAlignment& alignment(const Read* msg);
  static const ::nucleus::genomics::v1::Position& next_mate_position(const Read* msg);
};

const ::nucleus::genomics::v1::LinearAlignment&
Read::_Internal::alignment(const Read* msg) {
  return *msg->alignment_;
}
const ::nucleus::genomics::v1::Position&
Read::_Internal::next_mate_position(const Read* msg) {
  return *msg->next_mate_position_;
}
void Read::clear_next_mate_position() {
  if (GetArenaNoVirtual() == nullptr && next_mate_position_ != nullptr) {
    delete next_mate_position_;
  }
  next_mate_position_ = nullptr;
}
void Read::clear_info() {
  info_.Clear();
}
Read::Read()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.Read)
}
Read::Read(const Read& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      aligned_quality_(from.aligned_quality_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  info_.MergeFrom(from.info_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  read_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.read_group_id().empty()) {
    read_group_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.read_group_id_);
  }
  read_group_set_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.read_group_set_id().empty()) {
    read_group_set_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.read_group_set_id_);
  }
  fragment_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.fragment_name().empty()) {
    fragment_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fragment_name_);
  }
  aligned_sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.aligned_sequence().empty()) {
    aligned_sequence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aligned_sequence_);
  }
  if (from.has_alignment()) {
    alignment_ = new ::nucleus::genomics::v1::LinearAlignment(*from.alignment_);
  } else {
    alignment_ = nullptr;
  }
  if (from.has_next_mate_position()) {
    next_mate_position_ = new ::nucleus::genomics::v1::Position(*from.next_mate_position_);
  } else {
    next_mate_position_ = nullptr;
  }
  ::memcpy(&fragment_length_, &from.fragment_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&supplementary_alignment_) -
    reinterpret_cast<char*>(&fragment_length_)) + sizeof(supplementary_alignment_));
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.Read)
}

void Read::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Read_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  read_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  read_group_set_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fragment_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aligned_sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&alignment_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&supplementary_alignment_) -
      reinterpret_cast<char*>(&alignment_)) + sizeof(supplementary_alignment_));
}

Read::~Read() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.Read)
  SharedDtor();
}

void Read::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  read_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  read_group_set_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fragment_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aligned_sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete alignment_;
  if (this != internal_default_instance()) delete next_mate_position_;
}

void Read::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Read& Read::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Read_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base);
  return *internal_default_instance();
}


void Read::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.Read)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aligned_quality_.Clear();
  info_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  read_group_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  read_group_set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fragment_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aligned_sequence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && alignment_ != nullptr) {
    delete alignment_;
  }
  alignment_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && next_mate_position_ != nullptr) {
    delete next_mate_position_;
  }
  next_mate_position_ = nullptr;
  ::memset(&fragment_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&supplementary_alignment_) -
      reinterpret_cast<char*>(&fragment_length_)) + sizeof(supplementary_alignment_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Read::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "nucleus.genomics.v1.Read.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string read_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_read_group_id(), ptr, ctx, "nucleus.genomics.v1.Read.read_group_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string read_group_set_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_read_group_set_id(), ptr, ctx, "nucleus.genomics.v1.Read.read_group_set_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fragment_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fragment_name(), ptr, ctx, "nucleus.genomics.v1.Read.fragment_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool proper_placement = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          proper_placement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool duplicate_fragment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          duplicate_fragment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 fragment_length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          fragment_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 read_number = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          read_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 number_reads = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          number_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool failed_vendor_quality_checks = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          failed_vendor_quality_checks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nucleus.genomics.v1.LinearAlignment alignment = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_alignment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool secondary_alignment = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          secondary_alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool supplementary_alignment = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          supplementary_alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string aligned_sequence = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_aligned_sequence(), ptr, ctx, "nucleus.genomics.v1.Read.aligned_sequence");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 aligned_quality = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_aligned_quality(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          add_aligned_quality(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nucleus.genomics.v1.Position next_mate_position = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_next_mate_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .nucleus.genomics.v1.ListValue> info = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&info_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 394);
        } else goto handle_unusual;
        continue;
      // int64 cached_end = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          cached_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Read::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.Read)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.Read.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string read_group_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_read_group_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->read_group_id().data(), static_cast<int>(this->read_group_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.Read.read_group_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string read_group_set_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_read_group_set_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->read_group_set_id().data(), static_cast<int>(this->read_group_set_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.Read.read_group_set_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fragment_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fragment_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fragment_name().data(), static_cast<int>(this->fragment_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.Read.fragment_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool proper_placement = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &proper_placement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool duplicate_fragment = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &duplicate_fragment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fragment_length = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &fragment_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 read_number = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &read_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 number_reads = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_reads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool failed_vendor_quality_checks = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &failed_vendor_quality_checks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nucleus.genomics.v1.LinearAlignment alignment = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alignment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool secondary_alignment = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secondary_alignment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool supplementary_alignment = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supplementary_alignment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string aligned_sequence = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_aligned_sequence()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->aligned_sequence().data(), static_cast<int>(this->aligned_sequence().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.Read.aligned_sequence"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 aligned_quality = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_aligned_quality())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 122u, input, this->mutable_aligned_quality())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nucleus.genomics.v1.Position next_mate_position = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_next_mate_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .nucleus.genomics.v1.ListValue> info = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          Read_InfoEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Read_InfoEntry_DoNotUse,
              std::string, ::nucleus::genomics::v1::ListValue,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue > > parser(&info_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.Read.InfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cached_end = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &cached_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.Read)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.Read)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Read::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.Read)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Read.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string read_group_id = 2;
  if (this->read_group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_id().data(), static_cast<int>(this->read_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Read.read_group_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->read_group_id(), output);
  }

  // string read_group_set_id = 3;
  if (this->read_group_set_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_id().data(), static_cast<int>(this->read_group_set_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Read.read_group_set_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->read_group_set_id(), output);
  }

  // string fragment_name = 4;
  if (this->fragment_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fragment_name().data(), static_cast<int>(this->fragment_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Read.fragment_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fragment_name(), output);
  }

  // bool proper_placement = 5;
  if (this->proper_placement() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->proper_placement(), output);
  }

  // bool duplicate_fragment = 6;
  if (this->duplicate_fragment() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->duplicate_fragment(), output);
  }

  // int32 fragment_length = 7;
  if (this->fragment_length() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->fragment_length(), output);
  }

  // int32 read_number = 8;
  if (this->read_number() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->read_number(), output);
  }

  // int32 number_reads = 9;
  if (this->number_reads() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->number_reads(), output);
  }

  // bool failed_vendor_quality_checks = 10;
  if (this->failed_vendor_quality_checks() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->failed_vendor_quality_checks(), output);
  }

  // .nucleus.genomics.v1.LinearAlignment alignment = 11;
  if (this->has_alignment()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::alignment(this), output);
  }

  // bool secondary_alignment = 12;
  if (this->secondary_alignment() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->secondary_alignment(), output);
  }

  // bool supplementary_alignment = 13;
  if (this->supplementary_alignment() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->supplementary_alignment(), output);
  }

  // string aligned_sequence = 14;
  if (this->aligned_sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aligned_sequence().data(), static_cast<int>(this->aligned_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Read.aligned_sequence");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->aligned_sequence(), output);
  }

  // repeated int32 aligned_quality = 15;
  if (this->aligned_quality_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(15, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_aligned_quality_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->aligned_quality_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->aligned_quality(i), output);
  }

  // .nucleus.genomics.v1.Position next_mate_position = 16;
  if (this->has_next_mate_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, _Internal::next_mate_position(this), output);
  }

  // map<string, .nucleus.genomics.v1.ListValue> info = 17;
  if (!this->info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nucleus.genomics.v1.Read.InfoEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Read_InfoEntry_DoNotUse::Funcs::SerializeToCodedStream(17, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        Read_InfoEntry_DoNotUse::Funcs::SerializeToCodedStream(17, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int64 cached_end = 18;
  if (this->cached_end() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(18, this->cached_end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.Read)
}

::PROTOBUF_NAMESPACE_ID::uint8* Read::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.Read)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Read.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string read_group_id = 2;
  if (this->read_group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_id().data(), static_cast<int>(this->read_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Read.read_group_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->read_group_id(), target);
  }

  // string read_group_set_id = 3;
  if (this->read_group_set_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->read_group_set_id().data(), static_cast<int>(this->read_group_set_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Read.read_group_set_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->read_group_set_id(), target);
  }

  // string fragment_name = 4;
  if (this->fragment_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fragment_name().data(), static_cast<int>(this->fragment_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Read.fragment_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->fragment_name(), target);
  }

  // bool proper_placement = 5;
  if (this->proper_placement() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->proper_placement(), target);
  }

  // bool duplicate_fragment = 6;
  if (this->duplicate_fragment() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->duplicate_fragment(), target);
  }

  // int32 fragment_length = 7;
  if (this->fragment_length() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->fragment_length(), target);
  }

  // int32 read_number = 8;
  if (this->read_number() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->read_number(), target);
  }

  // int32 number_reads = 9;
  if (this->number_reads() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->number_reads(), target);
  }

  // bool failed_vendor_quality_checks = 10;
  if (this->failed_vendor_quality_checks() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->failed_vendor_quality_checks(), target);
  }

  // .nucleus.genomics.v1.LinearAlignment alignment = 11;
  if (this->has_alignment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::alignment(this), target);
  }

  // bool secondary_alignment = 12;
  if (this->secondary_alignment() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->secondary_alignment(), target);
  }

  // bool supplementary_alignment = 13;
  if (this->supplementary_alignment() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->supplementary_alignment(), target);
  }

  // string aligned_sequence = 14;
  if (this->aligned_sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aligned_sequence().data(), static_cast<int>(this->aligned_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Read.aligned_sequence");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->aligned_sequence(), target);
  }

  // repeated int32 aligned_quality = 15;
  if (this->aligned_quality_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      15,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _aligned_quality_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->aligned_quality_, target);
  }

  // .nucleus.genomics.v1.Position next_mate_position = 16;
  if (this->has_next_mate_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::next_mate_position(this), target);
  }

  // map<string, .nucleus.genomics.v1.ListValue> info = 17;
  if (!this->info().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nucleus.genomics.v1.Read.InfoEntry.key");
      }
    };

    if (false &&
        this->info().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->info().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Read_InfoEntry_DoNotUse::Funcs::SerializeToArray(17, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >::const_iterator
          it = this->info().begin();
          it != this->info().end(); ++it) {
        target = Read_InfoEntry_DoNotUse::Funcs::SerializeToArray(17, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int64 cached_end = 18;
  if (this->cached_end() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->cached_end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.Read)
  return target;
}

size_t Read::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.Read)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 aligned_quality = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->aligned_quality_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _aligned_quality_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, .nucleus.genomics.v1.ListValue> info = 17;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->info_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::nucleus::genomics::v1::ListValue >::const_iterator
      it = this->info().begin();
      it != this->info().end(); ++it) {
    total_size += Read_InfoEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string read_group_id = 2;
  if (this->read_group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->read_group_id());
  }

  // string read_group_set_id = 3;
  if (this->read_group_set_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->read_group_set_id());
  }

  // string fragment_name = 4;
  if (this->fragment_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fragment_name());
  }

  // string aligned_sequence = 14;
  if (this->aligned_sequence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->aligned_sequence());
  }

  // .nucleus.genomics.v1.LinearAlignment alignment = 11;
  if (this->has_alignment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *alignment_);
  }

  // .nucleus.genomics.v1.Position next_mate_position = 16;
  if (this->has_next_mate_position()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *next_mate_position_);
  }

  // int32 fragment_length = 7;
  if (this->fragment_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->fragment_length());
  }

  // int32 read_number = 8;
  if (this->read_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->read_number());
  }

  // bool proper_placement = 5;
  if (this->proper_placement() != 0) {
    total_size += 1 + 1;
  }

  // bool duplicate_fragment = 6;
  if (this->duplicate_fragment() != 0) {
    total_size += 1 + 1;
  }

  // bool failed_vendor_quality_checks = 10;
  if (this->failed_vendor_quality_checks() != 0) {
    total_size += 1 + 1;
  }

  // bool secondary_alignment = 12;
  if (this->secondary_alignment() != 0) {
    total_size += 1 + 1;
  }

  // int32 number_reads = 9;
  if (this->number_reads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->number_reads());
  }

  // int64 cached_end = 18;
  if (this->cached_end() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->cached_end());
  }

  // bool supplementary_alignment = 13;
  if (this->supplementary_alignment() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Read::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.Read)
  GOOGLE_DCHECK_NE(&from, this);
  const Read* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Read>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.Read)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.Read)
    MergeFrom(*source);
  }
}

void Read::MergeFrom(const Read& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.Read)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aligned_quality_.MergeFrom(from.aligned_quality_);
  info_.MergeFrom(from.info_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.read_group_id().size() > 0) {

    read_group_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.read_group_id_);
  }
  if (from.read_group_set_id().size() > 0) {

    read_group_set_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.read_group_set_id_);
  }
  if (from.fragment_name().size() > 0) {

    fragment_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fragment_name_);
  }
  if (from.aligned_sequence().size() > 0) {

    aligned_sequence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.aligned_sequence_);
  }
  if (from.has_alignment()) {
    mutable_alignment()->::nucleus::genomics::v1::LinearAlignment::MergeFrom(from.alignment());
  }
  if (from.has_next_mate_position()) {
    mutable_next_mate_position()->::nucleus::genomics::v1::Position::MergeFrom(from.next_mate_position());
  }
  if (from.fragment_length() != 0) {
    set_fragment_length(from.fragment_length());
  }
  if (from.read_number() != 0) {
    set_read_number(from.read_number());
  }
  if (from.proper_placement() != 0) {
    set_proper_placement(from.proper_placement());
  }
  if (from.duplicate_fragment() != 0) {
    set_duplicate_fragment(from.duplicate_fragment());
  }
  if (from.failed_vendor_quality_checks() != 0) {
    set_failed_vendor_quality_checks(from.failed_vendor_quality_checks());
  }
  if (from.secondary_alignment() != 0) {
    set_secondary_alignment(from.secondary_alignment());
  }
  if (from.number_reads() != 0) {
    set_number_reads(from.number_reads());
  }
  if (from.cached_end() != 0) {
    set_cached_end(from.cached_end());
  }
  if (from.supplementary_alignment() != 0) {
    set_supplementary_alignment(from.supplementary_alignment());
  }
}

void Read::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.Read)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Read::CopyFrom(const Read& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.Read)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Read::IsInitialized() const {
  return true;
}

void Read::InternalSwap(Read* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  aligned_quality_.InternalSwap(&other->aligned_quality_);
  info_.Swap(&other->info_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  read_group_id_.Swap(&other->read_group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  read_group_set_id_.Swap(&other->read_group_set_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fragment_name_.Swap(&other->fragment_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  aligned_sequence_.Swap(&other->aligned_sequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(alignment_, other->alignment_);
  swap(next_mate_position_, other->next_mate_position_);
  swap(fragment_length_, other->fragment_length_);
  swap(read_number_, other->read_number_);
  swap(proper_placement_, other->proper_placement_);
  swap(duplicate_fragment_, other->duplicate_fragment_);
  swap(failed_vendor_quality_checks_, other->failed_vendor_quality_checks_);
  swap(secondary_alignment_, other->secondary_alignment_);
  swap(number_reads_, other->number_reads_);
  swap(cached_end_, other->cached_end_);
  swap(supplementary_alignment_, other->supplementary_alignment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Read::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SamHeader::InitAsDefaultInstance() {
}
class SamHeader::_Internal {
 public:
};

void SamHeader::clear_contigs() {
  contigs_.Clear();
}
SamHeader::SamHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.SamHeader)
}
SamHeader::SamHeader(const SamHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      contigs_(from.contigs_),
      read_groups_(from.read_groups_),
      programs_(from.programs_),
      comments_(from.comments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  format_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.format_version().empty()) {
    format_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.format_version_);
  }
  ::memcpy(&sorting_order_, &from.sorting_order_,
    static_cast<size_t>(reinterpret_cast<char*>(&alignment_grouping_) -
    reinterpret_cast<char*>(&sorting_order_)) + sizeof(alignment_grouping_));
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.SamHeader)
}

void SamHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SamHeader_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base);
  format_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sorting_order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alignment_grouping_) -
      reinterpret_cast<char*>(&sorting_order_)) + sizeof(alignment_grouping_));
}

SamHeader::~SamHeader() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.SamHeader)
  SharedDtor();
}

void SamHeader::SharedDtor() {
  format_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SamHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SamHeader& SamHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SamHeader_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base);
  return *internal_default_instance();
}


void SamHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.SamHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contigs_.Clear();
  read_groups_.Clear();
  programs_.Clear();
  comments_.Clear();
  format_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sorting_order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alignment_grouping_) -
      reinterpret_cast<char*>(&sorting_order_)) + sizeof(alignment_grouping_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SamHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string format_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_format_version(), ptr, ctx, "nucleus.genomics.v1.SamHeader.format_version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nucleus.genomics.v1.SamHeader.SortingOrder sorting_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_sorting_order(static_cast<::nucleus::genomics::v1::SamHeader_SortingOrder>(val));
        } else goto handle_unusual;
        continue;
      // .nucleus.genomics.v1.SamHeader.AlignmentGrouping alignment_grouping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_alignment_grouping(static_cast<::nucleus::genomics::v1::SamHeader_AlignmentGrouping>(val));
        } else goto handle_unusual;
        continue;
      // repeated .nucleus.genomics.v1.ContigInfo contigs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_contigs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .nucleus.genomics.v1.ReadGroup read_groups = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_read_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .nucleus.genomics.v1.Program programs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_programs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated string comments = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_comments(), ptr, ctx, "nucleus.genomics.v1.SamHeader.comments");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SamHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.SamHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string format_version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_format_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->format_version().data(), static_cast<int>(this->format_version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.SamHeader.format_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nucleus.genomics.v1.SamHeader.SortingOrder sorting_order = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sorting_order(static_cast< ::nucleus::genomics::v1::SamHeader_SortingOrder >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nucleus.genomics.v1.SamHeader.AlignmentGrouping alignment_grouping = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_alignment_grouping(static_cast< ::nucleus::genomics::v1::SamHeader_AlignmentGrouping >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nucleus.genomics.v1.ContigInfo contigs = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_contigs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nucleus.genomics.v1.ReadGroup read_groups = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_read_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nucleus.genomics.v1.Program programs = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_programs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string comments = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_comments()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->comments(this->comments_size() - 1).data(),
            static_cast<int>(this->comments(this->comments_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.SamHeader.comments"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.SamHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.SamHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SamHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.SamHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string format_version = 1;
  if (this->format_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->format_version().data(), static_cast<int>(this->format_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.SamHeader.format_version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->format_version(), output);
  }

  // .nucleus.genomics.v1.SamHeader.SortingOrder sorting_order = 2;
  if (this->sorting_order() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->sorting_order(), output);
  }

  // .nucleus.genomics.v1.SamHeader.AlignmentGrouping alignment_grouping = 3;
  if (this->alignment_grouping() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->alignment_grouping(), output);
  }

  // repeated .nucleus.genomics.v1.ContigInfo contigs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contigs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->contigs(static_cast<int>(i)),
      output);
  }

  // repeated .nucleus.genomics.v1.ReadGroup read_groups = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->read_groups_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->read_groups(static_cast<int>(i)),
      output);
  }

  // repeated .nucleus.genomics.v1.Program programs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->programs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->programs(static_cast<int>(i)),
      output);
  }

  // repeated string comments = 7;
  for (int i = 0, n = this->comments_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comments(i).data(), static_cast<int>(this->comments(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.SamHeader.comments");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      7, this->comments(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.SamHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* SamHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.SamHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string format_version = 1;
  if (this->format_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->format_version().data(), static_cast<int>(this->format_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.SamHeader.format_version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->format_version(), target);
  }

  // .nucleus.genomics.v1.SamHeader.SortingOrder sorting_order = 2;
  if (this->sorting_order() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->sorting_order(), target);
  }

  // .nucleus.genomics.v1.SamHeader.AlignmentGrouping alignment_grouping = 3;
  if (this->alignment_grouping() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->alignment_grouping(), target);
  }

  // repeated .nucleus.genomics.v1.ContigInfo contigs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contigs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->contigs(static_cast<int>(i)), target);
  }

  // repeated .nucleus.genomics.v1.ReadGroup read_groups = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->read_groups_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->read_groups(static_cast<int>(i)), target);
  }

  // repeated .nucleus.genomics.v1.Program programs = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->programs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->programs(static_cast<int>(i)), target);
  }

  // repeated string comments = 7;
  for (int i = 0, n = this->comments_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->comments(i).data(), static_cast<int>(this->comments(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.SamHeader.comments");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(7, this->comments(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.SamHeader)
  return target;
}

size_t SamHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.SamHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nucleus.genomics.v1.ContigInfo contigs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->contigs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->contigs(static_cast<int>(i)));
    }
  }

  // repeated .nucleus.genomics.v1.ReadGroup read_groups = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->read_groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->read_groups(static_cast<int>(i)));
    }
  }

  // repeated .nucleus.genomics.v1.Program programs = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->programs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->programs(static_cast<int>(i)));
    }
  }

  // repeated string comments = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->comments_size());
  for (int i = 0, n = this->comments_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->comments(i));
  }

  // string format_version = 1;
  if (this->format_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->format_version());
  }

  // .nucleus.genomics.v1.SamHeader.SortingOrder sorting_order = 2;
  if (this->sorting_order() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->sorting_order());
  }

  // .nucleus.genomics.v1.SamHeader.AlignmentGrouping alignment_grouping = 3;
  if (this->alignment_grouping() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->alignment_grouping());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SamHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.SamHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const SamHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SamHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.SamHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.SamHeader)
    MergeFrom(*source);
  }
}

void SamHeader::MergeFrom(const SamHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.SamHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contigs_.MergeFrom(from.contigs_);
  read_groups_.MergeFrom(from.read_groups_);
  programs_.MergeFrom(from.programs_);
  comments_.MergeFrom(from.comments_);
  if (from.format_version().size() > 0) {

    format_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.format_version_);
  }
  if (from.sorting_order() != 0) {
    set_sorting_order(from.sorting_order());
  }
  if (from.alignment_grouping() != 0) {
    set_alignment_grouping(from.alignment_grouping());
  }
}

void SamHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.SamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SamHeader::CopyFrom(const SamHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.SamHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamHeader::IsInitialized() const {
  return true;
}

void SamHeader::InternalSwap(SamHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&contigs_)->InternalSwap(CastToBase(&other->contigs_));
  CastToBase(&read_groups_)->InternalSwap(CastToBase(&other->read_groups_));
  CastToBase(&programs_)->InternalSwap(CastToBase(&other->programs_));
  comments_.InternalSwap(CastToBase(&other->comments_));
  format_version_.Swap(&other->format_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sorting_order_, other->sorting_order_);
  swap(alignment_grouping_, other->alignment_grouping_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SamHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadGroup::InitAsDefaultInstance() {
}
class ReadGroup::_Internal {
 public:
};

ReadGroup::ReadGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.ReadGroup)
}
ReadGroup::ReadGroup(const ReadGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      program_ids_(from.program_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  sequencing_center_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sequencing_center().empty()) {
    sequencing_center_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sequencing_center_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.date().empty()) {
    date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  flow_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.flow_order().empty()) {
    flow_order_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.flow_order_);
  }
  key_sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.key_sequence().empty()) {
    key_sequence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_sequence_);
  }
  library_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.library_id().empty()) {
    library_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.library_id_);
  }
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.platform().empty()) {
    platform_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.platform_);
  }
  platform_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.platform_model().empty()) {
    platform_model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.platform_model_);
  }
  platform_unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.platform_unit().empty()) {
    platform_unit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.platform_unit_);
  }
  sample_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sample_id().empty()) {
    sample_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sample_id_);
  }
  predicted_insert_size_ = from.predicted_insert_size_;
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.ReadGroup)
}

void ReadGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadGroup_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequencing_center_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flow_order_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  library_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predicted_insert_size_ = 0;
}

ReadGroup::~ReadGroup() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.ReadGroup)
  SharedDtor();
}

void ReadGroup::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequencing_center_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flow_order_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  library_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadGroup& ReadGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadGroup_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base);
  return *internal_default_instance();
}


void ReadGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.ReadGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  program_ids_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequencing_center_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flow_order_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_sequence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  library_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_model_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  platform_unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predicted_insert_size_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReadGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "nucleus.genomics.v1.ReadGroup.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sequencing_center = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sequencing_center(), ptr, ctx, "nucleus.genomics.v1.ReadGroup.sequencing_center");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_description(), ptr, ctx, "nucleus.genomics.v1.ReadGroup.description");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_date(), ptr, ctx, "nucleus.genomics.v1.ReadGroup.date");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string flow_order = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_flow_order(), ptr, ctx, "nucleus.genomics.v1.ReadGroup.flow_order");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key_sequence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_key_sequence(), ptr, ctx, "nucleus.genomics.v1.ReadGroup.key_sequence");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string library_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_library_id(), ptr, ctx, "nucleus.genomics.v1.ReadGroup.library_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string program_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_program_ids(), ptr, ctx, "nucleus.genomics.v1.ReadGroup.program_ids");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // int32 predicted_insert_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          predicted_insert_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string platform = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_platform(), ptr, ctx, "nucleus.genomics.v1.ReadGroup.platform");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string platform_model = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_platform_model(), ptr, ctx, "nucleus.genomics.v1.ReadGroup.platform_model");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string platform_unit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_platform_unit(), ptr, ctx, "nucleus.genomics.v1.ReadGroup.platform_unit");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sample_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sample_id(), ptr, ctx, "nucleus.genomics.v1.ReadGroup.sample_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReadGroup::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.ReadGroup)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.ReadGroup.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sequencing_center = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sequencing_center()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sequencing_center().data(), static_cast<int>(this->sequencing_center().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.ReadGroup.sequencing_center"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.ReadGroup.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string date = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), static_cast<int>(this->date().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.ReadGroup.date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string flow_order = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_flow_order()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->flow_order().data(), static_cast<int>(this->flow_order().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.ReadGroup.flow_order"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key_sequence = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key_sequence()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->key_sequence().data(), static_cast<int>(this->key_sequence().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.ReadGroup.key_sequence"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string library_id = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_library_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->library_id().data(), static_cast<int>(this->library_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.ReadGroup.library_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string program_ids = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_program_ids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->program_ids(this->program_ids_size() - 1).data(),
            static_cast<int>(this->program_ids(this->program_ids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.ReadGroup.program_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 predicted_insert_size = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &predicted_insert_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string platform = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->platform().data(), static_cast<int>(this->platform().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.ReadGroup.platform"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string platform_model = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_platform_model()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->platform_model().data(), static_cast<int>(this->platform_model().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.ReadGroup.platform_model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string platform_unit = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_platform_unit()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->platform_unit().data(), static_cast<int>(this->platform_unit().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.ReadGroup.platform_unit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sample_id = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sample_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sample_id().data(), static_cast<int>(this->sample_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.ReadGroup.sample_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.ReadGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.ReadGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReadGroup::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.ReadGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string sequencing_center = 2;
  if (this->sequencing_center().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sequencing_center().data(), static_cast<int>(this->sequencing_center().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.sequencing_center");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sequencing_center(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.description");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // string date = 4;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.date");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->date(), output);
  }

  // string flow_order = 5;
  if (this->flow_order().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->flow_order().data(), static_cast<int>(this->flow_order().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.flow_order");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->flow_order(), output);
  }

  // string key_sequence = 6;
  if (this->key_sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key_sequence().data(), static_cast<int>(this->key_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.key_sequence");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->key_sequence(), output);
  }

  // string library_id = 7;
  if (this->library_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->library_id().data(), static_cast<int>(this->library_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.library_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->library_id(), output);
  }

  // repeated string program_ids = 8;
  for (int i = 0, n = this->program_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->program_ids(i).data(), static_cast<int>(this->program_ids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.program_ids");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      8, this->program_ids(i), output);
  }

  // int32 predicted_insert_size = 9;
  if (this->predicted_insert_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->predicted_insert_size(), output);
  }

  // string platform = 10;
  if (this->platform().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.platform");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->platform(), output);
  }

  // string platform_model = 11;
  if (this->platform_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->platform_model().data(), static_cast<int>(this->platform_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.platform_model");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->platform_model(), output);
  }

  // string platform_unit = 12;
  if (this->platform_unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->platform_unit().data(), static_cast<int>(this->platform_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.platform_unit");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->platform_unit(), output);
  }

  // string sample_id = 13;
  if (this->sample_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sample_id().data(), static_cast<int>(this->sample_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.sample_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->sample_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.ReadGroup)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadGroup::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.ReadGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string sequencing_center = 2;
  if (this->sequencing_center().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sequencing_center().data(), static_cast<int>(this->sequencing_center().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.sequencing_center");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->sequencing_center(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.description");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // string date = 4;
  if (this->date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), static_cast<int>(this->date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.date");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->date(), target);
  }

  // string flow_order = 5;
  if (this->flow_order().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->flow_order().data(), static_cast<int>(this->flow_order().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.flow_order");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->flow_order(), target);
  }

  // string key_sequence = 6;
  if (this->key_sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key_sequence().data(), static_cast<int>(this->key_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.key_sequence");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->key_sequence(), target);
  }

  // string library_id = 7;
  if (this->library_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->library_id().data(), static_cast<int>(this->library_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.library_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->library_id(), target);
  }

  // repeated string program_ids = 8;
  for (int i = 0, n = this->program_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->program_ids(i).data(), static_cast<int>(this->program_ids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.program_ids");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(8, this->program_ids(i), target);
  }

  // int32 predicted_insert_size = 9;
  if (this->predicted_insert_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->predicted_insert_size(), target);
  }

  // string platform = 10;
  if (this->platform().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->platform().data(), static_cast<int>(this->platform().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.platform");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->platform(), target);
  }

  // string platform_model = 11;
  if (this->platform_model().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->platform_model().data(), static_cast<int>(this->platform_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.platform_model");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->platform_model(), target);
  }

  // string platform_unit = 12;
  if (this->platform_unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->platform_unit().data(), static_cast<int>(this->platform_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.platform_unit");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->platform_unit(), target);
  }

  // string sample_id = 13;
  if (this->sample_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sample_id().data(), static_cast<int>(this->sample_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.ReadGroup.sample_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        13, this->sample_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.ReadGroup)
  return target;
}

size_t ReadGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.ReadGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string program_ids = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->program_ids_size());
  for (int i = 0, n = this->program_ids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->program_ids(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string sequencing_center = 2;
  if (this->sequencing_center().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sequencing_center());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string date = 4;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->date());
  }

  // string flow_order = 5;
  if (this->flow_order().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->flow_order());
  }

  // string key_sequence = 6;
  if (this->key_sequence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->key_sequence());
  }

  // string library_id = 7;
  if (this->library_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->library_id());
  }

  // string platform = 10;
  if (this->platform().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->platform());
  }

  // string platform_model = 11;
  if (this->platform_model().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->platform_model());
  }

  // string platform_unit = 12;
  if (this->platform_unit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->platform_unit());
  }

  // string sample_id = 13;
  if (this->sample_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sample_id());
  }

  // int32 predicted_insert_size = 9;
  if (this->predicted_insert_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->predicted_insert_size());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.ReadGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.ReadGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.ReadGroup)
    MergeFrom(*source);
  }
}

void ReadGroup::MergeFrom(const ReadGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.ReadGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  program_ids_.MergeFrom(from.program_ids_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.sequencing_center().size() > 0) {

    sequencing_center_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sequencing_center_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  if (from.flow_order().size() > 0) {

    flow_order_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.flow_order_);
  }
  if (from.key_sequence().size() > 0) {

    key_sequence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_sequence_);
  }
  if (from.library_id().size() > 0) {

    library_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.library_id_);
  }
  if (from.platform().size() > 0) {

    platform_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.platform_);
  }
  if (from.platform_model().size() > 0) {

    platform_model_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.platform_model_);
  }
  if (from.platform_unit().size() > 0) {

    platform_unit_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.platform_unit_);
  }
  if (from.sample_id().size() > 0) {

    sample_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sample_id_);
  }
  if (from.predicted_insert_size() != 0) {
    set_predicted_insert_size(from.predicted_insert_size());
  }
}

void ReadGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.ReadGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadGroup::CopyFrom(const ReadGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.ReadGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadGroup::IsInitialized() const {
  return true;
}

void ReadGroup::InternalSwap(ReadGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  program_ids_.InternalSwap(CastToBase(&other->program_ids_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sequencing_center_.Swap(&other->sequencing_center_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  flow_order_.Swap(&other->flow_order_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  key_sequence_.Swap(&other->key_sequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  library_id_.Swap(&other->library_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  platform_.Swap(&other->platform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  platform_model_.Swap(&other->platform_model_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  platform_unit_.Swap(&other->platform_unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sample_id_.Swap(&other->sample_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(predicted_insert_size_, other->predicted_insert_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Program::InitAsDefaultInstance() {
}
class Program::_Internal {
 public:
};

Program::Program()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.Program)
}
Program::Program(const Program& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.command_line().empty()) {
    command_line_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_line_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  prev_program_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.prev_program_id().empty()) {
    prev_program_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prev_program_id_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.Program)
}

void Program::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Program_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base);
  command_line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_program_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Program::~Program() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.Program)
  SharedDtor();
}

void Program::SharedDtor() {
  command_line_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_program_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Program::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Program& Program::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Program_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base);
  return *internal_default_instance();
}


void Program::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.Program)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_line_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prev_program_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Program::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string command_line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_command_line(), ptr, ctx, "nucleus.genomics.v1.Program.command_line");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "nucleus.genomics.v1.Program.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "nucleus.genomics.v1.Program.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string prev_program_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_prev_program_id(), ptr, ctx, "nucleus.genomics.v1.Program.prev_program_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_version(), ptr, ctx, "nucleus.genomics.v1.Program.version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_description(), ptr, ctx, "nucleus.genomics.v1.Program.description");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Program::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.Program)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string command_line = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_command_line()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->command_line().data(), static_cast<int>(this->command_line().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.Program.command_line"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.Program.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.Program.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prev_program_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_prev_program_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->prev_program_id().data(), static_cast<int>(this->prev_program_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.Program.prev_program_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), static_cast<int>(this->version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.Program.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.Program.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.Program)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.Program)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Program::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.Program)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string command_line = 1;
  if (this->command_line().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->command_line().data(), static_cast<int>(this->command_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Program.command_line");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->command_line(), output);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Program.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Program.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // string prev_program_id = 4;
  if (this->prev_program_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->prev_program_id().data(), static_cast<int>(this->prev_program_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Program.prev_program_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->prev_program_id(), output);
  }

  // string version = 5;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Program.version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->version(), output);
  }

  // string description = 6;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Program.description");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.Program)
}

::PROTOBUF_NAMESPACE_ID::uint8* Program::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.Program)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string command_line = 1;
  if (this->command_line().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->command_line().data(), static_cast<int>(this->command_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Program.command_line");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->command_line(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Program.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->id(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Program.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // string prev_program_id = 4;
  if (this->prev_program_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->prev_program_id().data(), static_cast<int>(this->prev_program_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Program.prev_program_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->prev_program_id(), target);
  }

  // string version = 5;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), static_cast<int>(this->version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Program.version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->version(), target);
  }

  // string description = 6;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.Program.description");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.Program)
  return target;
}

size_t Program::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.Program)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string command_line = 1;
  if (this->command_line().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->command_line());
  }

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string prev_program_id = 4;
  if (this->prev_program_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->prev_program_id());
  }

  // string version = 5;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string description = 6;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->description());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Program::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.Program)
  GOOGLE_DCHECK_NE(&from, this);
  const Program* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Program>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.Program)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.Program)
    MergeFrom(*source);
  }
}

void Program::MergeFrom(const Program& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.Program)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.command_line().size() > 0) {

    command_line_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.command_line_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.prev_program_id().size() > 0) {

    prev_program_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.prev_program_id_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void Program::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.Program)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Program::CopyFrom(const Program& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.Program)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Program::IsInitialized() const {
  return true;
}

void Program::InternalSwap(Program* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  command_line_.Swap(&other->command_line_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prev_program_id_.Swap(&other->prev_program_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Program::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SamReaderOptions::InitAsDefaultInstance() {
  ::nucleus::genomics::v1::_SamReaderOptions_default_instance_._instance.get_mutable()->read_requirements_ = const_cast< ::nucleus::genomics::v1::ReadRequirements*>(
      ::nucleus::genomics::v1::ReadRequirements::internal_default_instance());
}
class SamReaderOptions::_Internal {
 public:
  static const ::nucleus::genomics::v1::ReadRequirements& read_requirements(const SamReaderOptions* msg);
};

const ::nucleus::genomics::v1::ReadRequirements&
SamReaderOptions::_Internal::read_requirements(const SamReaderOptions* msg) {
  return *msg->read_requirements_;
}
SamReaderOptions::SamReaderOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.SamReaderOptions)
}
SamReaderOptions::SamReaderOptions(const SamReaderOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      aux_fields_to_keep_(from.aux_fields_to_keep_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_read_requirements()) {
    read_requirements_ = new ::nucleus::genomics::v1::ReadRequirements(*from.read_requirements_);
  } else {
    read_requirements_ = nullptr;
  }
  ::memcpy(&hts_block_size_, &from.hts_block_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_original_base_quality_scores_) -
    reinterpret_cast<char*>(&hts_block_size_)) + sizeof(use_original_base_quality_scores_));
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.SamReaderOptions)
}

void SamReaderOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SamReaderOptions_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base);
  ::memset(&read_requirements_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_original_base_quality_scores_) -
      reinterpret_cast<char*>(&read_requirements_)) + sizeof(use_original_base_quality_scores_));
}

SamReaderOptions::~SamReaderOptions() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.SamReaderOptions)
  SharedDtor();
}

void SamReaderOptions::SharedDtor() {
  if (this != internal_default_instance()) delete read_requirements_;
}

void SamReaderOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SamReaderOptions& SamReaderOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SamReaderOptions_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base);
  return *internal_default_instance();
}


void SamReaderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.SamReaderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  aux_fields_to_keep_.Clear();
  if (GetArenaNoVirtual() == nullptr && read_requirements_ != nullptr) {
    delete read_requirements_;
  }
  read_requirements_ = nullptr;
  ::memset(&hts_block_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_original_base_quality_scores_) -
      reinterpret_cast<char*>(&hts_block_size_)) + sizeof(use_original_base_quality_scores_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SamReaderOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nucleus.genomics.v1.ReadRequirements read_requirements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_read_requirements(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nucleus.genomics.v1.SamReaderOptions.AuxFieldHandling aux_field_handling = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_aux_field_handling(static_cast<::nucleus::genomics::v1::SamReaderOptions_AuxFieldHandling>(val));
        } else goto handle_unusual;
        continue;
      // int64 hts_block_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hts_block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float downsample_fraction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          downsample_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 random_seed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_original_base_quality_scores = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          use_original_base_quality_scores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string aux_fields_to_keep = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_aux_fields_to_keep(), ptr, ctx, "nucleus.genomics.v1.SamReaderOptions.aux_fields_to_keep");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SamReaderOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.SamReaderOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nucleus.genomics.v1.ReadRequirements read_requirements = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_read_requirements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nucleus.genomics.v1.SamReaderOptions.AuxFieldHandling aux_field_handling = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_aux_field_handling(static_cast< ::nucleus::genomics::v1::SamReaderOptions_AuxFieldHandling >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 hts_block_size = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &hts_block_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float downsample_fraction = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &downsample_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 random_seed = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &random_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool use_original_base_quality_scores = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_original_base_quality_scores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string aux_fields_to_keep = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_aux_fields_to_keep()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->aux_fields_to_keep(this->aux_fields_to_keep_size() - 1).data(),
            static_cast<int>(this->aux_fields_to_keep(this->aux_fields_to_keep_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.SamReaderOptions.aux_fields_to_keep"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.SamReaderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.SamReaderOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SamReaderOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.SamReaderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nucleus.genomics.v1.ReadRequirements read_requirements = 1;
  if (this->has_read_requirements()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::read_requirements(this), output);
  }

  // .nucleus.genomics.v1.SamReaderOptions.AuxFieldHandling aux_field_handling = 3;
  if (this->aux_field_handling() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->aux_field_handling(), output);
  }

  // int64 hts_block_size = 4;
  if (this->hts_block_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->hts_block_size(), output);
  }

  // float downsample_fraction = 5;
  if (!(this->downsample_fraction() <= 0 && this->downsample_fraction() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->downsample_fraction(), output);
  }

  // int64 random_seed = 6;
  if (this->random_seed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->random_seed(), output);
  }

  // bool use_original_base_quality_scores = 10;
  if (this->use_original_base_quality_scores() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->use_original_base_quality_scores(), output);
  }

  // repeated string aux_fields_to_keep = 11;
  for (int i = 0, n = this->aux_fields_to_keep_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aux_fields_to_keep(i).data(), static_cast<int>(this->aux_fields_to_keep(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.SamReaderOptions.aux_fields_to_keep");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      11, this->aux_fields_to_keep(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.SamReaderOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* SamReaderOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.SamReaderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nucleus.genomics.v1.ReadRequirements read_requirements = 1;
  if (this->has_read_requirements()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::read_requirements(this), target);
  }

  // .nucleus.genomics.v1.SamReaderOptions.AuxFieldHandling aux_field_handling = 3;
  if (this->aux_field_handling() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->aux_field_handling(), target);
  }

  // int64 hts_block_size = 4;
  if (this->hts_block_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->hts_block_size(), target);
  }

  // float downsample_fraction = 5;
  if (!(this->downsample_fraction() <= 0 && this->downsample_fraction() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->downsample_fraction(), target);
  }

  // int64 random_seed = 6;
  if (this->random_seed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->random_seed(), target);
  }

  // bool use_original_base_quality_scores = 10;
  if (this->use_original_base_quality_scores() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->use_original_base_quality_scores(), target);
  }

  // repeated string aux_fields_to_keep = 11;
  for (int i = 0, n = this->aux_fields_to_keep_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->aux_fields_to_keep(i).data(), static_cast<int>(this->aux_fields_to_keep(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.SamReaderOptions.aux_fields_to_keep");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(11, this->aux_fields_to_keep(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.SamReaderOptions)
  return target;
}

size_t SamReaderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.SamReaderOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string aux_fields_to_keep = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->aux_fields_to_keep_size());
  for (int i = 0, n = this->aux_fields_to_keep_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->aux_fields_to_keep(i));
  }

  // .nucleus.genomics.v1.ReadRequirements read_requirements = 1;
  if (this->has_read_requirements()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *read_requirements_);
  }

  // int64 hts_block_size = 4;
  if (this->hts_block_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->hts_block_size());
  }

  // .nucleus.genomics.v1.SamReaderOptions.AuxFieldHandling aux_field_handling = 3;
  if (this->aux_field_handling() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->aux_field_handling());
  }

  // float downsample_fraction = 5;
  if (!(this->downsample_fraction() <= 0 && this->downsample_fraction() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 random_seed = 6;
  if (this->random_seed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->random_seed());
  }

  // bool use_original_base_quality_scores = 10;
  if (this->use_original_base_quality_scores() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SamReaderOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.SamReaderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const SamReaderOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SamReaderOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.SamReaderOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.SamReaderOptions)
    MergeFrom(*source);
  }
}

void SamReaderOptions::MergeFrom(const SamReaderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.SamReaderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  aux_fields_to_keep_.MergeFrom(from.aux_fields_to_keep_);
  if (from.has_read_requirements()) {
    mutable_read_requirements()->::nucleus::genomics::v1::ReadRequirements::MergeFrom(from.read_requirements());
  }
  if (from.hts_block_size() != 0) {
    set_hts_block_size(from.hts_block_size());
  }
  if (from.aux_field_handling() != 0) {
    set_aux_field_handling(from.aux_field_handling());
  }
  if (!(from.downsample_fraction() <= 0 && from.downsample_fraction() >= 0)) {
    set_downsample_fraction(from.downsample_fraction());
  }
  if (from.random_seed() != 0) {
    set_random_seed(from.random_seed());
  }
  if (from.use_original_base_quality_scores() != 0) {
    set_use_original_base_quality_scores(from.use_original_base_quality_scores());
  }
}

void SamReaderOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.SamReaderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SamReaderOptions::CopyFrom(const SamReaderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.SamReaderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamReaderOptions::IsInitialized() const {
  return true;
}

void SamReaderOptions::InternalSwap(SamReaderOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  aux_fields_to_keep_.InternalSwap(CastToBase(&other->aux_fields_to_keep_));
  swap(read_requirements_, other->read_requirements_);
  swap(hts_block_size_, other->hts_block_size_);
  swap(aux_field_handling_, other->aux_field_handling_);
  swap(downsample_fraction_, other->downsample_fraction_);
  swap(random_seed_, other->random_seed_);
  swap(use_original_base_quality_scores_, other->use_original_base_quality_scores_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SamReaderOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadRequirements::InitAsDefaultInstance() {
}
class ReadRequirements::_Internal {
 public:
};

ReadRequirements::ReadRequirements()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.ReadRequirements)
}
ReadRequirements::ReadRequirements(const ReadRequirements& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&keep_duplicates_, &from.keep_duplicates_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_base_quality_mode_) -
    reinterpret_cast<char*>(&keep_duplicates_)) + sizeof(min_base_quality_mode_));
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.ReadRequirements)
}

void ReadRequirements::SharedCtor() {
  ::memset(&keep_duplicates_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_base_quality_mode_) -
      reinterpret_cast<char*>(&keep_duplicates_)) + sizeof(min_base_quality_mode_));
}

ReadRequirements::~ReadRequirements() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.ReadRequirements)
  SharedDtor();
}

void ReadRequirements::SharedDtor() {
}

void ReadRequirements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadRequirements& ReadRequirements::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadRequirements_third_5fparty_2fnucleus_2fprotos_2freads_2eproto.base);
  return *internal_default_instance();
}


void ReadRequirements::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.ReadRequirements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&keep_duplicates_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_base_quality_mode_) -
      reinterpret_cast<char*>(&keep_duplicates_)) + sizeof(min_base_quality_mode_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReadRequirements::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool keep_duplicates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          keep_duplicates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool keep_failed_vendor_quality_checks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          keep_failed_vendor_quality_checks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool keep_secondary_alignments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          keep_secondary_alignments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool keep_supplementary_alignments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          keep_supplementary_alignments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool keep_unaligned = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          keep_unaligned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool keep_improperly_placed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          keep_improperly_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_mapping_quality = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          min_mapping_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_base_quality = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          min_base_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nucleus.genomics.v1.ReadRequirements.MinBaseQualityMode min_base_quality_mode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_min_base_quality_mode(static_cast<::nucleus::genomics::v1::ReadRequirements_MinBaseQualityMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReadRequirements::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.ReadRequirements)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool keep_duplicates = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_duplicates_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool keep_failed_vendor_quality_checks = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_failed_vendor_quality_checks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool keep_secondary_alignments = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_secondary_alignments_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool keep_supplementary_alignments = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_supplementary_alignments_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool keep_unaligned = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_unaligned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool keep_improperly_placed = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_improperly_placed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_mapping_quality = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_mapping_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_base_quality = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_base_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nucleus.genomics.v1.ReadRequirements.MinBaseQualityMode min_base_quality_mode = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_min_base_quality_mode(static_cast< ::nucleus::genomics::v1::ReadRequirements_MinBaseQualityMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.ReadRequirements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.ReadRequirements)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReadRequirements::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.ReadRequirements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool keep_duplicates = 1;
  if (this->keep_duplicates() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->keep_duplicates(), output);
  }

  // bool keep_failed_vendor_quality_checks = 2;
  if (this->keep_failed_vendor_quality_checks() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->keep_failed_vendor_quality_checks(), output);
  }

  // bool keep_secondary_alignments = 3;
  if (this->keep_secondary_alignments() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->keep_secondary_alignments(), output);
  }

  // bool keep_supplementary_alignments = 4;
  if (this->keep_supplementary_alignments() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->keep_supplementary_alignments(), output);
  }

  // bool keep_unaligned = 5;
  if (this->keep_unaligned() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->keep_unaligned(), output);
  }

  // bool keep_improperly_placed = 6;
  if (this->keep_improperly_placed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->keep_improperly_placed(), output);
  }

  // int32 min_mapping_quality = 7;
  if (this->min_mapping_quality() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->min_mapping_quality(), output);
  }

  // int32 min_base_quality = 8;
  if (this->min_base_quality() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->min_base_quality(), output);
  }

  // .nucleus.genomics.v1.ReadRequirements.MinBaseQualityMode min_base_quality_mode = 9;
  if (this->min_base_quality_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->min_base_quality_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.ReadRequirements)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadRequirements::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.ReadRequirements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool keep_duplicates = 1;
  if (this->keep_duplicates() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->keep_duplicates(), target);
  }

  // bool keep_failed_vendor_quality_checks = 2;
  if (this->keep_failed_vendor_quality_checks() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->keep_failed_vendor_quality_checks(), target);
  }

  // bool keep_secondary_alignments = 3;
  if (this->keep_secondary_alignments() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->keep_secondary_alignments(), target);
  }

  // bool keep_supplementary_alignments = 4;
  if (this->keep_supplementary_alignments() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->keep_supplementary_alignments(), target);
  }

  // bool keep_unaligned = 5;
  if (this->keep_unaligned() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->keep_unaligned(), target);
  }

  // bool keep_improperly_placed = 6;
  if (this->keep_improperly_placed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->keep_improperly_placed(), target);
  }

  // int32 min_mapping_quality = 7;
  if (this->min_mapping_quality() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->min_mapping_quality(), target);
  }

  // int32 min_base_quality = 8;
  if (this->min_base_quality() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->min_base_quality(), target);
  }

  // .nucleus.genomics.v1.ReadRequirements.MinBaseQualityMode min_base_quality_mode = 9;
  if (this->min_base_quality_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->min_base_quality_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.ReadRequirements)
  return target;
}

size_t ReadRequirements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.ReadRequirements)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool keep_duplicates = 1;
  if (this->keep_duplicates() != 0) {
    total_size += 1 + 1;
  }

  // bool keep_failed_vendor_quality_checks = 2;
  if (this->keep_failed_vendor_quality_checks() != 0) {
    total_size += 1 + 1;
  }

  // bool keep_secondary_alignments = 3;
  if (this->keep_secondary_alignments() != 0) {
    total_size += 1 + 1;
  }

  // bool keep_supplementary_alignments = 4;
  if (this->keep_supplementary_alignments() != 0) {
    total_size += 1 + 1;
  }

  // bool keep_unaligned = 5;
  if (this->keep_unaligned() != 0) {
    total_size += 1 + 1;
  }

  // bool keep_improperly_placed = 6;
  if (this->keep_improperly_placed() != 0) {
    total_size += 1 + 1;
  }

  // int32 min_mapping_quality = 7;
  if (this->min_mapping_quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_mapping_quality());
  }

  // int32 min_base_quality = 8;
  if (this->min_base_quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_base_quality());
  }

  // .nucleus.genomics.v1.ReadRequirements.MinBaseQualityMode min_base_quality_mode = 9;
  if (this->min_base_quality_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->min_base_quality_mode());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadRequirements::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.ReadRequirements)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRequirements* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadRequirements>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.ReadRequirements)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.ReadRequirements)
    MergeFrom(*source);
  }
}

void ReadRequirements::MergeFrom(const ReadRequirements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.ReadRequirements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.keep_duplicates() != 0) {
    set_keep_duplicates(from.keep_duplicates());
  }
  if (from.keep_failed_vendor_quality_checks() != 0) {
    set_keep_failed_vendor_quality_checks(from.keep_failed_vendor_quality_checks());
  }
  if (from.keep_secondary_alignments() != 0) {
    set_keep_secondary_alignments(from.keep_secondary_alignments());
  }
  if (from.keep_supplementary_alignments() != 0) {
    set_keep_supplementary_alignments(from.keep_supplementary_alignments());
  }
  if (from.keep_unaligned() != 0) {
    set_keep_unaligned(from.keep_unaligned());
  }
  if (from.keep_improperly_placed() != 0) {
    set_keep_improperly_placed(from.keep_improperly_placed());
  }
  if (from.min_mapping_quality() != 0) {
    set_min_mapping_quality(from.min_mapping_quality());
  }
  if (from.min_base_quality() != 0) {
    set_min_base_quality(from.min_base_quality());
  }
  if (from.min_base_quality_mode() != 0) {
    set_min_base_quality_mode(from.min_base_quality_mode());
  }
}

void ReadRequirements::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.ReadRequirements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRequirements::CopyFrom(const ReadRequirements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.ReadRequirements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRequirements::IsInitialized() const {
  return true;
}

void ReadRequirements::InternalSwap(ReadRequirements* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(keep_duplicates_, other->keep_duplicates_);
  swap(keep_failed_vendor_quality_checks_, other->keep_failed_vendor_quality_checks_);
  swap(keep_secondary_alignments_, other->keep_secondary_alignments_);
  swap(keep_supplementary_alignments_, other->keep_supplementary_alignments_);
  swap(keep_unaligned_, other->keep_unaligned_);
  swap(keep_improperly_placed_, other->keep_improperly_placed_);
  swap(min_mapping_quality_, other->min_mapping_quality_);
  swap(min_base_quality_, other->min_base_quality_);
  swap(min_base_quality_mode_, other->min_base_quality_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadRequirements::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::LinearAlignment* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::LinearAlignment >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::LinearAlignment >(arena);
}
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::Read_InfoEntry_DoNotUse* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::Read_InfoEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::Read_InfoEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::Read* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::Read >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::Read >(arena);
}
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::SamHeader* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::SamHeader >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::SamHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::ReadGroup* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::ReadGroup >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::ReadGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::Program* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::Program >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::Program >(arena);
}
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::SamReaderOptions* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::SamReaderOptions >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::SamReaderOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::ReadRequirements* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::ReadRequirements >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::ReadRequirements >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
