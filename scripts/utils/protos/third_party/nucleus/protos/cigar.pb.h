// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: third_party/nucleus/protos/cigar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto;
namespace nucleus {
namespace genomics {
namespace v1 {
class CigarUnit;
class CigarUnitDefaultTypeInternal;
extern CigarUnitDefaultTypeInternal _CigarUnit_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
PROTOBUF_NAMESPACE_OPEN
template<> ::nucleus::genomics::v1::CigarUnit* Arena::CreateMaybeMessage<::nucleus::genomics::v1::CigarUnit>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace nucleus {
namespace genomics {
namespace v1 {

enum CigarUnit_Operation : int {
  CigarUnit_Operation_OPERATION_UNSPECIFIED = 0,
  CigarUnit_Operation_ALIGNMENT_MATCH = 1,
  CigarUnit_Operation_INSERT = 2,
  CigarUnit_Operation_DELETE = 3,
  CigarUnit_Operation_SKIP = 4,
  CigarUnit_Operation_CLIP_SOFT = 5,
  CigarUnit_Operation_CLIP_HARD = 6,
  CigarUnit_Operation_PAD = 7,
  CigarUnit_Operation_SEQUENCE_MATCH = 8,
  CigarUnit_Operation_SEQUENCE_MISMATCH = 9,
  CigarUnit_Operation_CigarUnit_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CigarUnit_Operation_CigarUnit_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CigarUnit_Operation_IsValid(int value);
constexpr CigarUnit_Operation CigarUnit_Operation_Operation_MIN = CigarUnit_Operation_OPERATION_UNSPECIFIED;
constexpr CigarUnit_Operation CigarUnit_Operation_Operation_MAX = CigarUnit_Operation_SEQUENCE_MISMATCH;
constexpr int CigarUnit_Operation_Operation_ARRAYSIZE = CigarUnit_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CigarUnit_Operation_descriptor();
template<typename T>
inline const std::string& CigarUnit_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CigarUnit_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CigarUnit_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CigarUnit_Operation_descriptor(), enum_t_value);
}
inline bool CigarUnit_Operation_Parse(
    const std::string& name, CigarUnit_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CigarUnit_Operation>(
    CigarUnit_Operation_descriptor(), name, value);
}
// ===================================================================

class CigarUnit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:nucleus.genomics.v1.CigarUnit) */ {
 public:
  CigarUnit();
  virtual ~CigarUnit();

  CigarUnit(const CigarUnit& from);
  CigarUnit(CigarUnit&& from) noexcept
    : CigarUnit() {
    *this = ::std::move(from);
  }

  inline CigarUnit& operator=(const CigarUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline CigarUnit& operator=(CigarUnit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CigarUnit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CigarUnit* internal_default_instance() {
    return reinterpret_cast<const CigarUnit*>(
               &_CigarUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CigarUnit& a, CigarUnit& b) {
    a.Swap(&b);
  }
  inline void Swap(CigarUnit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CigarUnit* New() const final {
    return CreateMaybeMessage<CigarUnit>(nullptr);
  }

  CigarUnit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CigarUnit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CigarUnit& from);
  void MergeFrom(const CigarUnit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CigarUnit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "nucleus.genomics.v1.CigarUnit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto);
    return ::descriptor_table_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CigarUnit_Operation Operation;
  static constexpr Operation OPERATION_UNSPECIFIED =
    CigarUnit_Operation_OPERATION_UNSPECIFIED;
  static constexpr Operation ALIGNMENT_MATCH =
    CigarUnit_Operation_ALIGNMENT_MATCH;
  static constexpr Operation INSERT =
    CigarUnit_Operation_INSERT;
  static constexpr Operation DELETE =
    CigarUnit_Operation_DELETE;
  static constexpr Operation SKIP =
    CigarUnit_Operation_SKIP;
  static constexpr Operation CLIP_SOFT =
    CigarUnit_Operation_CLIP_SOFT;
  static constexpr Operation CLIP_HARD =
    CigarUnit_Operation_CLIP_HARD;
  static constexpr Operation PAD =
    CigarUnit_Operation_PAD;
  static constexpr Operation SEQUENCE_MATCH =
    CigarUnit_Operation_SEQUENCE_MATCH;
  static constexpr Operation SEQUENCE_MISMATCH =
    CigarUnit_Operation_SEQUENCE_MISMATCH;
  static inline bool Operation_IsValid(int value) {
    return CigarUnit_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    CigarUnit_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    CigarUnit_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    CigarUnit_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return CigarUnit_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return CigarUnit_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(const std::string& name,
      Operation* value) {
    return CigarUnit_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceSequenceFieldNumber = 3,
    kOperationLengthFieldNumber = 2,
    kOperationFieldNumber = 1,
  };
  // string reference_sequence = 3;
  void clear_reference_sequence();
  const std::string& reference_sequence() const;
  void set_reference_sequence(const std::string& value);
  void set_reference_sequence(std::string&& value);
  void set_reference_sequence(const char* value);
  void set_reference_sequence(const char* value, size_t size);
  std::string* mutable_reference_sequence();
  std::string* release_reference_sequence();
  void set_allocated_reference_sequence(std::string* reference_sequence);

  // int64 operation_length = 2;
  void clear_operation_length();
  ::PROTOBUF_NAMESPACE_ID::int64 operation_length() const;
  void set_operation_length(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .nucleus.genomics.v1.CigarUnit.Operation operation = 1;
  void clear_operation();
  ::nucleus::genomics::v1::CigarUnit_Operation operation() const;
  void set_operation(::nucleus::genomics::v1::CigarUnit_Operation value);

  // @@protoc_insertion_point(class_scope:nucleus.genomics.v1.CigarUnit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_sequence_;
  ::PROTOBUF_NAMESPACE_ID::int64 operation_length_;
  int operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CigarUnit

// .nucleus.genomics.v1.CigarUnit.Operation operation = 1;
inline void CigarUnit::clear_operation() {
  operation_ = 0;
}
inline ::nucleus::genomics::v1::CigarUnit_Operation CigarUnit::operation() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.CigarUnit.operation)
  return static_cast< ::nucleus::genomics::v1::CigarUnit_Operation >(operation_);
}
inline void CigarUnit::set_operation(::nucleus::genomics::v1::CigarUnit_Operation value) {
  
  operation_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.CigarUnit.operation)
}

// int64 operation_length = 2;
inline void CigarUnit::clear_operation_length() {
  operation_length_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CigarUnit::operation_length() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.CigarUnit.operation_length)
  return operation_length_;
}
inline void CigarUnit::set_operation_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  operation_length_ = value;
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.CigarUnit.operation_length)
}

// string reference_sequence = 3;
inline void CigarUnit::clear_reference_sequence() {
  reference_sequence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CigarUnit::reference_sequence() const {
  // @@protoc_insertion_point(field_get:nucleus.genomics.v1.CigarUnit.reference_sequence)
  return reference_sequence_.GetNoArena();
}
inline void CigarUnit::set_reference_sequence(const std::string& value) {
  
  reference_sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nucleus.genomics.v1.CigarUnit.reference_sequence)
}
inline void CigarUnit::set_reference_sequence(std::string&& value) {
  
  reference_sequence_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nucleus.genomics.v1.CigarUnit.reference_sequence)
}
inline void CigarUnit::set_reference_sequence(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nucleus.genomics.v1.CigarUnit.reference_sequence)
}
inline void CigarUnit::set_reference_sequence(const char* value, size_t size) {
  
  reference_sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nucleus.genomics.v1.CigarUnit.reference_sequence)
}
inline std::string* CigarUnit::mutable_reference_sequence() {
  
  // @@protoc_insertion_point(field_mutable:nucleus.genomics.v1.CigarUnit.reference_sequence)
  return reference_sequence_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CigarUnit::release_reference_sequence() {
  // @@protoc_insertion_point(field_release:nucleus.genomics.v1.CigarUnit.reference_sequence)
  
  return reference_sequence_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CigarUnit::set_allocated_reference_sequence(std::string* reference_sequence) {
  if (reference_sequence != nullptr) {
    
  } else {
    
  }
  reference_sequence_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_sequence);
  // @@protoc_insertion_point(field_set_allocated:nucleus.genomics.v1.CigarUnit.reference_sequence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace genomics
}  // namespace nucleus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::nucleus::genomics::v1::CigarUnit_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nucleus::genomics::v1::CigarUnit_Operation>() {
  return ::nucleus::genomics::v1::CigarUnit_Operation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_third_5fparty_2fnucleus_2fprotos_2fcigar_2eproto
