//////////////////////////////////////////////////////////////////////
// This file was automatically generated by PyCLIF.
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: third_party/nucleus/protos/reference.proto

#include "clif/python/runtime.h"
#include "clif/python/types.h"
#include "third_party/nucleus/protos/reference_pyclif.h"

namespace nucleus { namespace genomics { namespace v1 {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// ContigInfo to/from ::nucleus::genomics::v1::ContigInfo conversion

bool Clif_PyObjAs(PyObject* py, ::nucleus::genomics::v1::ContigInfo* c) {
  CHECK(c != nullptr);
  PyObject* type = ImportFQName("third_party.nucleus.protos.reference_pb2.ContigInfo");
  if (!::clif::proto::TypeCheck(py, type, "", "ContigInfo") ) {
    return ::clif::proto::InGeneratedPool(py, c);
  }
  if (const proto2::Message* cpb = ::clif::proto::GetCProto(py)) {
    c->CopyFrom(*cpb);
    return true;
  }
  PyObject* ser = ::clif::proto::Serialize(py);
  if (ser == nullptr) return false;
  bool ok = c->ParsePartialFromArray(PyBytes_AS_STRING(ser), static_cast<int>(PyBytes_GET_SIZE(ser)));
  Py_DECREF(ser);
  if (!ok) PyErr_SetString(PyExc_ValueError, "Serialized bytes can't be parsed into C++ proto");
  return ok;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::nucleus::genomics::v1::ContigInfo>* c) {
  CHECK(c != nullptr);
  if (!*c) c->reset(new ::nucleus::genomics::v1::ContigInfo);
  return Clif_PyObjAs(py, c->get());
}

PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::ContigInfo& c, py::PostConv) {
  PyObject* type = ImportFQName("third_party.nucleus.protos.reference_pb2.ContigInfo");
  return ::clif::proto::PyProtoFrom(&c, type, "");
}

PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::ContigInfo> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.reference_pb2.ContigInfo");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::ContigInfo> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.reference_pb2.ContigInfo");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

// ReferenceSequence to/from ::nucleus::genomics::v1::ReferenceSequence conversion

bool Clif_PyObjAs(PyObject* py, ::nucleus::genomics::v1::ReferenceSequence* c) {
  CHECK(c != nullptr);
  PyObject* type = ImportFQName("third_party.nucleus.protos.reference_pb2.ReferenceSequence");
  if (!::clif::proto::TypeCheck(py, type, "", "ReferenceSequence") ) {
    return ::clif::proto::InGeneratedPool(py, c);
  }
  if (const proto2::Message* cpb = ::clif::proto::GetCProto(py)) {
    c->CopyFrom(*cpb);
    return true;
  }
  PyObject* ser = ::clif::proto::Serialize(py);
  if (ser == nullptr) return false;
  bool ok = c->ParsePartialFromArray(PyBytes_AS_STRING(ser), static_cast<int>(PyBytes_GET_SIZE(ser)));
  Py_DECREF(ser);
  if (!ok) PyErr_SetString(PyExc_ValueError, "Serialized bytes can't be parsed into C++ proto");
  return ok;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::nucleus::genomics::v1::ReferenceSequence>* c) {
  CHECK(c != nullptr);
  if (!*c) c->reset(new ::nucleus::genomics::v1::ReferenceSequence);
  return Clif_PyObjAs(py, c->get());
}

PyObject* Clif_PyObjFrom(const ::nucleus::genomics::v1::ReferenceSequence& c, py::PostConv) {
  PyObject* type = ImportFQName("third_party.nucleus.protos.reference_pb2.ReferenceSequence");
  return ::clif::proto::PyProtoFrom(&c, type, "");
}

PyObject* Clif_PyObjFrom(std::unique_ptr<const ::nucleus::genomics::v1::ReferenceSequence> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.reference_pb2.ReferenceSequence");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

PyObject* Clif_PyObjFrom(std::shared_ptr<const ::nucleus::genomics::v1::ReferenceSequence> c, py::PostConv) {
  if (!c) Py_RETURN_NONE;
  PyObject* type = ImportFQName("third_party.nucleus.protos.reference_pb2.ReferenceSequence");
  return ::clif::proto::PyProtoFrom(c.get(), type, "");
}

} } }  // namespace nucleus::genomics::v1
