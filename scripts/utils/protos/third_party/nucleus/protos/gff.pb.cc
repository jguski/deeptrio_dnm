// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: third_party/nucleus/protos/gff.proto

#include "third_party/nucleus/protos/gff.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GffHeader_GenomeBuildDirective_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GffHeader_OntologyDirective_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GffRecord_AttributesEntry_DoNotUse_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2frange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Range_third_5fparty_2fnucleus_2fprotos_2frange_2eproto;
namespace nucleus {
namespace genomics {
namespace v1 {
class GffRecord_AttributesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GffRecord_AttributesEntry_DoNotUse> _instance;
} _GffRecord_AttributesEntry_DoNotUse_default_instance_;
class GffRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GffRecord> _instance;
} _GffRecord_default_instance_;
class GffHeader_OntologyDirectiveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GffHeader_OntologyDirective> _instance;
} _GffHeader_OntologyDirective_default_instance_;
class GffHeader_GenomeBuildDirectiveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GffHeader_GenomeBuildDirective> _instance;
} _GffHeader_GenomeBuildDirective_default_instance_;
class GffHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GffHeader> _instance;
} _GffHeader_default_instance_;
class GffReaderOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GffReaderOptions> _instance;
} _GffReaderOptions_default_instance_;
class GffWriterOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GffWriterOptions> _instance;
} _GffWriterOptions_default_instance_;
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
static void InitDefaultsscc_info_GffHeader_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_GffHeader_default_instance_;
    new (ptr) ::nucleus::genomics::v1::GffHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::GffHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GffHeader_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_GffHeader_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto}, {
      &scc_info_Range_third_5fparty_2fnucleus_2fprotos_2frange_2eproto.base,
      &scc_info_GffHeader_OntologyDirective_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base,
      &scc_info_GffHeader_GenomeBuildDirective_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base,}};

static void InitDefaultsscc_info_GffHeader_GenomeBuildDirective_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_GffHeader_GenomeBuildDirective_default_instance_;
    new (ptr) ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GffHeader_GenomeBuildDirective_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GffHeader_GenomeBuildDirective_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto}, {}};

static void InitDefaultsscc_info_GffHeader_OntologyDirective_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_GffHeader_OntologyDirective_default_instance_;
    new (ptr) ::nucleus::genomics::v1::GffHeader_OntologyDirective();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::GffHeader_OntologyDirective::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GffHeader_OntologyDirective_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GffHeader_OntologyDirective_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto}, {}};

static void InitDefaultsscc_info_GffReaderOptions_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_GffReaderOptions_default_instance_;
    new (ptr) ::nucleus::genomics::v1::GffReaderOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::GffReaderOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GffReaderOptions_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GffReaderOptions_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto}, {}};

static void InitDefaultsscc_info_GffRecord_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_GffRecord_default_instance_;
    new (ptr) ::nucleus::genomics::v1::GffRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::GffRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GffRecord_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GffRecord_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto}, {
      &scc_info_Range_third_5fparty_2fnucleus_2fprotos_2frange_2eproto.base,
      &scc_info_GffRecord_AttributesEntry_DoNotUse_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base,}};

static void InitDefaultsscc_info_GffRecord_AttributesEntry_DoNotUse_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_GffRecord_AttributesEntry_DoNotUse_default_instance_;
    new (ptr) ::nucleus::genomics::v1::GffRecord_AttributesEntry_DoNotUse();
  }
  ::nucleus::genomics::v1::GffRecord_AttributesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GffRecord_AttributesEntry_DoNotUse_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GffRecord_AttributesEntry_DoNotUse_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto}, {}};

static void InitDefaultsscc_info_GffWriterOptions_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::nucleus::genomics::v1::_GffWriterOptions_default_instance_;
    new (ptr) ::nucleus::genomics::v1::GffWriterOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::nucleus::genomics::v1::GffWriterOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GffWriterOptions_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GffWriterOptions_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffRecord_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffRecord_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffRecord_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffRecord_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffRecord, range_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffRecord, source_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffRecord, type_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffRecord, score_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffRecord, strand_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffRecord, phase_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffRecord, attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffHeader_OntologyDirective, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffHeader_OntologyDirective, uri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffHeader_GenomeBuildDirective, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffHeader_GenomeBuildDirective, source_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffHeader_GenomeBuildDirective, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffHeader, gff_version_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffHeader, sequence_regions_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffHeader, feature_ontologies_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffHeader, attribute_ontologies_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffHeader, source_ontologies_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffHeader, species_),
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffHeader, genome_build_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffReaderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::nucleus::genomics::v1::GffWriterOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::nucleus::genomics::v1::GffRecord_AttributesEntry_DoNotUse)},
  { 9, -1, sizeof(::nucleus::genomics::v1::GffRecord)},
  { 21, -1, sizeof(::nucleus::genomics::v1::GffHeader_OntologyDirective)},
  { 27, -1, sizeof(::nucleus::genomics::v1::GffHeader_GenomeBuildDirective)},
  { 34, -1, sizeof(::nucleus::genomics::v1::GffHeader)},
  { 46, -1, sizeof(::nucleus::genomics::v1::GffReaderOptions)},
  { 51, -1, sizeof(::nucleus::genomics::v1::GffWriterOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_GffRecord_AttributesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_GffRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_GffHeader_OntologyDirective_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_GffHeader_GenomeBuildDirective_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_GffHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_GffReaderOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::nucleus::genomics::v1::_GffWriterOptions_default_instance_),
};

const char descriptor_table_protodef_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$third_party/nucleus/protos/gff.proto\022\023"
  "nucleus.genomics.v1\032&third_party/nucleus"
  "/protos/range.proto\"\352\002\n\tGffRecord\022)\n\005ran"
  "ge\030\001 \001(\0132\032.nucleus.genomics.v1.Range\022\016\n\006"
  "source\030\002 \001(\t\022\014\n\004type\030\003 \001(\t\022\r\n\005score\030\004 \001("
  "\001\0225\n\006strand\030\005 \001(\0162%.nucleus.genomics.v1."
  "GffRecord.Strand\022\r\n\005phase\030\006 \001(\005\022B\n\nattri"
  "butes\030\007 \003(\0132..nucleus.genomics.v1.GffRec"
  "ord.AttributesEntry\0321\n\017AttributesEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"H\n\006Strand"
  "\022\026\n\022UNSPECIFIED_STRAND\020\000\022\022\n\016FORWARD_STRA"
  "ND\020\001\022\022\n\016REVERSE_STRAND\020\002\"\365\003\n\tGffHeader\022\023"
  "\n\013gff_version\030\001 \001(\t\0224\n\020sequence_regions\030"
  "\002 \003(\0132\032.nucleus.genomics.v1.Range\022L\n\022fea"
  "ture_ontologies\030\003 \003(\01320.nucleus.genomics"
  ".v1.GffHeader.OntologyDirective\022N\n\024attri"
  "bute_ontologies\030\004 \003(\01320.nucleus.genomics"
  ".v1.GffHeader.OntologyDirective\022K\n\021sourc"
  "e_ontologies\030\005 \003(\01320.nucleus.genomics.v1"
  ".GffHeader.OntologyDirective\022\017\n\007species\030"
  "\006 \001(\t\022I\n\014genome_build\030\007 \001(\01323.nucleus.ge"
  "nomics.v1.GffHeader.GenomeBuildDirective"
  "\032 \n\021OntologyDirective\022\013\n\003uri\030\001 \001(\t\0324\n\024Ge"
  "nomeBuildDirective\022\016\n\006source\030\001 \001(\t\022\014\n\004na"
  "me\030\002 \001(\t\"\022\n\020GffReaderOptions\"\022\n\020GffWrite"
  "rOptionsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto_deps[1] = {
  &::descriptor_table_third_5fparty_2fnucleus_2fprotos_2frange_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto_sccs[7] = {
  &scc_info_GffHeader_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base,
  &scc_info_GffHeader_GenomeBuildDirective_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base,
  &scc_info_GffHeader_OntologyDirective_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base,
  &scc_info_GffReaderOptions_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base,
  &scc_info_GffRecord_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base,
  &scc_info_GffRecord_AttributesEntry_DoNotUse_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base,
  &scc_info_GffWriterOptions_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto_once;
static bool descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto = {
  &descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto_initialized, descriptor_table_protodef_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto, "third_party/nucleus/protos/gff.proto", 1016,
  &descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto_once, descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto_sccs, descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto::offsets,
  file_level_metadata_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto, 7, file_level_enum_descriptors_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto, file_level_service_descriptors_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto), true);
namespace nucleus {
namespace genomics {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GffRecord_Strand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto);
  return file_level_enum_descriptors_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto[0];
}
bool GffRecord_Strand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GffRecord_Strand GffRecord::UNSPECIFIED_STRAND;
constexpr GffRecord_Strand GffRecord::FORWARD_STRAND;
constexpr GffRecord_Strand GffRecord::REVERSE_STRAND;
constexpr GffRecord_Strand GffRecord::Strand_MIN;
constexpr GffRecord_Strand GffRecord::Strand_MAX;
constexpr int GffRecord::Strand_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

GffRecord_AttributesEntry_DoNotUse::GffRecord_AttributesEntry_DoNotUse() {}
GffRecord_AttributesEntry_DoNotUse::GffRecord_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GffRecord_AttributesEntry_DoNotUse::MergeFrom(const GffRecord_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GffRecord_AttributesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GffRecord_AttributesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GffRecord::InitAsDefaultInstance() {
  ::nucleus::genomics::v1::_GffRecord_default_instance_._instance.get_mutable()->range_ = const_cast< ::nucleus::genomics::v1::Range*>(
      ::nucleus::genomics::v1::Range::internal_default_instance());
}
class GffRecord::_Internal {
 public:
  static const ::nucleus::genomics::v1::Range& range(const GffRecord* msg);
};

const ::nucleus::genomics::v1::Range&
GffRecord::_Internal::range(const GffRecord* msg) {
  return *msg->range_;
}
void GffRecord::clear_range() {
  if (GetArenaNoVirtual() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
}
GffRecord::GffRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.GffRecord)
}
GffRecord::GffRecord(const GffRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attributes_.MergeFrom(from.attributes_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.source().empty()) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.type().empty()) {
    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_range()) {
    range_ = new ::nucleus::genomics::v1::Range(*from.range_);
  } else {
    range_ = nullptr;
  }
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_) -
    reinterpret_cast<char*>(&score_)) + sizeof(phase_));
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.GffRecord)
}

void GffRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GffRecord_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_) -
      reinterpret_cast<char*>(&range_)) + sizeof(phase_));
}

GffRecord::~GffRecord() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.GffRecord)
  SharedDtor();
}

void GffRecord::SharedDtor() {
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete range_;
}

void GffRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GffRecord& GffRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GffRecord_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base);
  return *internal_default_instance();
}


void GffRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.GffRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_) -
      reinterpret_cast<char*>(&score_)) + sizeof(phase_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GffRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nucleus.genomics.v1.Range range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_source(), ptr, ctx, "nucleus.genomics.v1.GffRecord.source");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_type(), ptr, ctx, "nucleus.genomics.v1.GffRecord.type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .nucleus.genomics.v1.GffRecord.Strand strand = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_strand(static_cast<::nucleus::genomics::v1::GffRecord_Strand>(val));
        } else goto handle_unusual;
        continue;
      // int32 phase = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> attributes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GffRecord::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.GffRecord)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nucleus.genomics.v1.Range range = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), static_cast<int>(this->source().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.GffRecord.source"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), static_cast<int>(this->type().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.GffRecord.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double score = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nucleus.genomics.v1.GffRecord.Strand strand = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_strand(static_cast< ::nucleus::genomics::v1::GffRecord_Strand >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 phase = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &phase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> attributes = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          GffRecord_AttributesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              GffRecord_AttributesEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&attributes_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.GffRecord.AttributesEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.GffRecord.AttributesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.GffRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.GffRecord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GffRecord::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.GffRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nucleus.genomics.v1.Range range = 1;
  if (this->has_range()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::range(this), output);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.GffRecord.source");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source(), output);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.GffRecord.type");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // double score = 4;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->score(), output);
  }

  // .nucleus.genomics.v1.GffRecord.Strand strand = 5;
  if (this->strand() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->strand(), output);
  }

  // int32 phase = 6;
  if (this->phase() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->phase(), output);
  }

  // map<string, string> attributes = 7;
  if (!this->attributes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nucleus.genomics.v1.GffRecord.AttributesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nucleus.genomics.v1.GffRecord.AttributesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attributes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->attributes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        GffRecord_AttributesEntry_DoNotUse::Funcs::SerializeToCodedStream(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        GffRecord_AttributesEntry_DoNotUse::Funcs::SerializeToCodedStream(7, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.GffRecord)
}

::PROTOBUF_NAMESPACE_ID::uint8* GffRecord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.GffRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nucleus.genomics.v1.Range range = 1;
  if (this->has_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::range(this), target);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.GffRecord.source");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->source(), target);
  }

  // string type = 3;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), static_cast<int>(this->type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.GffRecord.type");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // double score = 4;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->score(), target);
  }

  // .nucleus.genomics.v1.GffRecord.Strand strand = 5;
  if (this->strand() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->strand(), target);
  }

  // int32 phase = 6;
  if (this->phase() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->phase(), target);
  }

  // map<string, string> attributes = 7;
  if (!this->attributes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nucleus.genomics.v1.GffRecord.AttributesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "nucleus.genomics.v1.GffRecord.AttributesEntry.value");
      }
    };

    if (false &&
        this->attributes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->attributes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GffRecord_AttributesEntry_DoNotUse::Funcs::SerializeToArray(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        target = GffRecord_AttributesEntry_DoNotUse::Funcs::SerializeToArray(7, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.GffRecord)
  return target;
}

size_t GffRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.GffRecord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> attributes = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->attributes().begin();
      it != this->attributes().end(); ++it) {
    total_size += GffRecord_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->source());
  }

  // string type = 3;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->type());
  }

  // .nucleus.genomics.v1.Range range = 1;
  if (this->has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  // double score = 4;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    total_size += 1 + 8;
  }

  // .nucleus.genomics.v1.GffRecord.Strand strand = 5;
  if (this->strand() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->strand());
  }

  // int32 phase = 6;
  if (this->phase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->phase());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GffRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.GffRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const GffRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GffRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.GffRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.GffRecord)
    MergeFrom(*source);
  }
}

void GffRecord::MergeFrom(const GffRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.GffRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.has_range()) {
    mutable_range()->::nucleus::genomics::v1::Range::MergeFrom(from.range());
  }
  if (!(from.score() <= 0 && from.score() >= 0)) {
    set_score(from.score());
  }
  if (from.strand() != 0) {
    set_strand(from.strand());
  }
  if (from.phase() != 0) {
    set_phase(from.phase());
  }
}

void GffRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.GffRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GffRecord::CopyFrom(const GffRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.GffRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GffRecord::IsInitialized() const {
  return true;
}

void GffRecord::InternalSwap(GffRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attributes_.Swap(&other->attributes_);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(range_, other->range_);
  swap(score_, other->score_);
  swap(strand_, other->strand_);
  swap(phase_, other->phase_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GffRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GffHeader_OntologyDirective::InitAsDefaultInstance() {
}
class GffHeader_OntologyDirective::_Internal {
 public:
};

GffHeader_OntologyDirective::GffHeader_OntologyDirective()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.GffHeader.OntologyDirective)
}
GffHeader_OntologyDirective::GffHeader_OntologyDirective(const GffHeader_OntologyDirective& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.uri().empty()) {
    uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.GffHeader.OntologyDirective)
}

void GffHeader_OntologyDirective::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GffHeader_OntologyDirective_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GffHeader_OntologyDirective::~GffHeader_OntologyDirective() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.GffHeader.OntologyDirective)
  SharedDtor();
}

void GffHeader_OntologyDirective::SharedDtor() {
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GffHeader_OntologyDirective::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GffHeader_OntologyDirective& GffHeader_OntologyDirective::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GffHeader_OntologyDirective_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base);
  return *internal_default_instance();
}


void GffHeader_OntologyDirective::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.GffHeader.OntologyDirective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GffHeader_OntologyDirective::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_uri(), ptr, ctx, "nucleus.genomics.v1.GffHeader.OntologyDirective.uri");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GffHeader_OntologyDirective::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.GffHeader.OntologyDirective)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string uri = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->uri().data(), static_cast<int>(this->uri().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.GffHeader.OntologyDirective.uri"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.GffHeader.OntologyDirective)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.GffHeader.OntologyDirective)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GffHeader_OntologyDirective::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.GffHeader.OntologyDirective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.GffHeader.OntologyDirective.uri");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.GffHeader.OntologyDirective)
}

::PROTOBUF_NAMESPACE_ID::uint8* GffHeader_OntologyDirective::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.GffHeader.OntologyDirective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->uri().data(), static_cast<int>(this->uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.GffHeader.OntologyDirective.uri");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->uri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.GffHeader.OntologyDirective)
  return target;
}

size_t GffHeader_OntologyDirective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.GffHeader.OntologyDirective)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->uri());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GffHeader_OntologyDirective::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.GffHeader.OntologyDirective)
  GOOGLE_DCHECK_NE(&from, this);
  const GffHeader_OntologyDirective* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GffHeader_OntologyDirective>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.GffHeader.OntologyDirective)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.GffHeader.OntologyDirective)
    MergeFrom(*source);
  }
}

void GffHeader_OntologyDirective::MergeFrom(const GffHeader_OntologyDirective& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.GffHeader.OntologyDirective)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {

    uri_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.uri_);
  }
}

void GffHeader_OntologyDirective::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.GffHeader.OntologyDirective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GffHeader_OntologyDirective::CopyFrom(const GffHeader_OntologyDirective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.GffHeader.OntologyDirective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GffHeader_OntologyDirective::IsInitialized() const {
  return true;
}

void GffHeader_OntologyDirective::InternalSwap(GffHeader_OntologyDirective* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GffHeader_OntologyDirective::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GffHeader_GenomeBuildDirective::InitAsDefaultInstance() {
}
class GffHeader_GenomeBuildDirective::_Internal {
 public:
};

GffHeader_GenomeBuildDirective::GffHeader_GenomeBuildDirective()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
}
GffHeader_GenomeBuildDirective::GffHeader_GenomeBuildDirective(const GffHeader_GenomeBuildDirective& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.source().empty()) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
}

void GffHeader_GenomeBuildDirective::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GffHeader_GenomeBuildDirective_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GffHeader_GenomeBuildDirective::~GffHeader_GenomeBuildDirective() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
  SharedDtor();
}

void GffHeader_GenomeBuildDirective::SharedDtor() {
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GffHeader_GenomeBuildDirective::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GffHeader_GenomeBuildDirective& GffHeader_GenomeBuildDirective::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GffHeader_GenomeBuildDirective_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base);
  return *internal_default_instance();
}


void GffHeader_GenomeBuildDirective::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GffHeader_GenomeBuildDirective::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_source(), ptr, ctx, "nucleus.genomics.v1.GffHeader.GenomeBuildDirective.source");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "nucleus.genomics.v1.GffHeader.GenomeBuildDirective.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GffHeader_GenomeBuildDirective::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string source = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->source().data(), static_cast<int>(this->source().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.GffHeader.GenomeBuildDirective.source"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.GffHeader.GenomeBuildDirective.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GffHeader_GenomeBuildDirective::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source = 1;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.GffHeader.GenomeBuildDirective.source");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.GffHeader.GenomeBuildDirective.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
}

::PROTOBUF_NAMESPACE_ID::uint8* GffHeader_GenomeBuildDirective::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source = 1;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source().data(), static_cast<int>(this->source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.GffHeader.GenomeBuildDirective.source");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.GffHeader.GenomeBuildDirective.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
  return target;
}

size_t GffHeader_GenomeBuildDirective::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source = 1;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->source());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GffHeader_GenomeBuildDirective::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
  GOOGLE_DCHECK_NE(&from, this);
  const GffHeader_GenomeBuildDirective* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GffHeader_GenomeBuildDirective>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
    MergeFrom(*source);
  }
}

void GffHeader_GenomeBuildDirective::MergeFrom(const GffHeader_GenomeBuildDirective& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source().size() > 0) {

    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void GffHeader_GenomeBuildDirective::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GffHeader_GenomeBuildDirective::CopyFrom(const GffHeader_GenomeBuildDirective& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.GffHeader.GenomeBuildDirective)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GffHeader_GenomeBuildDirective::IsInitialized() const {
  return true;
}

void GffHeader_GenomeBuildDirective::InternalSwap(GffHeader_GenomeBuildDirective* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GffHeader_GenomeBuildDirective::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GffHeader::InitAsDefaultInstance() {
  ::nucleus::genomics::v1::_GffHeader_default_instance_._instance.get_mutable()->genome_build_ = const_cast< ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective*>(
      ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective::internal_default_instance());
}
class GffHeader::_Internal {
 public:
  static const ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective& genome_build(const GffHeader* msg);
};

const ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective&
GffHeader::_Internal::genome_build(const GffHeader* msg) {
  return *msg->genome_build_;
}
void GffHeader::clear_sequence_regions() {
  sequence_regions_.Clear();
}
GffHeader::GffHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.GffHeader)
}
GffHeader::GffHeader(const GffHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sequence_regions_(from.sequence_regions_),
      feature_ontologies_(from.feature_ontologies_),
      attribute_ontologies_(from.attribute_ontologies_),
      source_ontologies_(from.source_ontologies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gff_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.gff_version().empty()) {
    gff_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gff_version_);
  }
  species_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.species().empty()) {
    species_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.species_);
  }
  if (from.has_genome_build()) {
    genome_build_ = new ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective(*from.genome_build_);
  } else {
    genome_build_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.GffHeader)
}

void GffHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GffHeader_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base);
  gff_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  species_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  genome_build_ = nullptr;
}

GffHeader::~GffHeader() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.GffHeader)
  SharedDtor();
}

void GffHeader::SharedDtor() {
  gff_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  species_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete genome_build_;
}

void GffHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GffHeader& GffHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GffHeader_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base);
  return *internal_default_instance();
}


void GffHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.GffHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_regions_.Clear();
  feature_ontologies_.Clear();
  attribute_ontologies_.Clear();
  source_ontologies_.Clear();
  gff_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  species_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && genome_build_ != nullptr) {
    delete genome_build_;
  }
  genome_build_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GffHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string gff_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_gff_version(), ptr, ctx, "nucleus.genomics.v1.GffHeader.gff_version");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .nucleus.genomics.v1.Range sequence_regions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sequence_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective feature_ontologies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_feature_ontologies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective attribute_ontologies = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_attribute_ontologies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective source_ontologies = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_source_ontologies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // string species = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_species(), ptr, ctx, "nucleus.genomics.v1.GffHeader.species");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .nucleus.genomics.v1.GffHeader.GenomeBuildDirective genome_build = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_genome_build(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GffHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.GffHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string gff_version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_gff_version()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->gff_version().data(), static_cast<int>(this->gff_version().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.GffHeader.gff_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nucleus.genomics.v1.Range sequence_regions = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sequence_regions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective feature_ontologies = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_feature_ontologies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective attribute_ontologies = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_attribute_ontologies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective source_ontologies = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_source_ontologies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string species = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_species()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->species().data(), static_cast<int>(this->species().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "nucleus.genomics.v1.GffHeader.species"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .nucleus.genomics.v1.GffHeader.GenomeBuildDirective genome_build = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_genome_build()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.GffHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.GffHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GffHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.GffHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gff_version = 1;
  if (this->gff_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gff_version().data(), static_cast<int>(this->gff_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.GffHeader.gff_version");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gff_version(), output);
  }

  // repeated .nucleus.genomics.v1.Range sequence_regions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sequence_regions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->sequence_regions(static_cast<int>(i)),
      output);
  }

  // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective feature_ontologies = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->feature_ontologies_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->feature_ontologies(static_cast<int>(i)),
      output);
  }

  // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective attribute_ontologies = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_ontologies_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->attribute_ontologies(static_cast<int>(i)),
      output);
  }

  // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective source_ontologies = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_ontologies_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->source_ontologies(static_cast<int>(i)),
      output);
  }

  // string species = 6;
  if (this->species().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->species().data(), static_cast<int>(this->species().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.GffHeader.species");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->species(), output);
  }

  // .nucleus.genomics.v1.GffHeader.GenomeBuildDirective genome_build = 7;
  if (this->has_genome_build()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::genome_build(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.GffHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* GffHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.GffHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string gff_version = 1;
  if (this->gff_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->gff_version().data(), static_cast<int>(this->gff_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.GffHeader.gff_version");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->gff_version(), target);
  }

  // repeated .nucleus.genomics.v1.Range sequence_regions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sequence_regions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->sequence_regions(static_cast<int>(i)), target);
  }

  // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective feature_ontologies = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->feature_ontologies_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->feature_ontologies(static_cast<int>(i)), target);
  }

  // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective attribute_ontologies = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_ontologies_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->attribute_ontologies(static_cast<int>(i)), target);
  }

  // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective source_ontologies = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_ontologies_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->source_ontologies(static_cast<int>(i)), target);
  }

  // string species = 6;
  if (this->species().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->species().data(), static_cast<int>(this->species().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "nucleus.genomics.v1.GffHeader.species");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->species(), target);
  }

  // .nucleus.genomics.v1.GffHeader.GenomeBuildDirective genome_build = 7;
  if (this->has_genome_build()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::genome_build(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.GffHeader)
  return target;
}

size_t GffHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.GffHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nucleus.genomics.v1.Range sequence_regions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sequence_regions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sequence_regions(static_cast<int>(i)));
    }
  }

  // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective feature_ontologies = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->feature_ontologies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->feature_ontologies(static_cast<int>(i)));
    }
  }

  // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective attribute_ontologies = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->attribute_ontologies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->attribute_ontologies(static_cast<int>(i)));
    }
  }

  // repeated .nucleus.genomics.v1.GffHeader.OntologyDirective source_ontologies = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->source_ontologies_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->source_ontologies(static_cast<int>(i)));
    }
  }

  // string gff_version = 1;
  if (this->gff_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->gff_version());
  }

  // string species = 6;
  if (this->species().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->species());
  }

  // .nucleus.genomics.v1.GffHeader.GenomeBuildDirective genome_build = 7;
  if (this->has_genome_build()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *genome_build_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GffHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.GffHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const GffHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GffHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.GffHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.GffHeader)
    MergeFrom(*source);
  }
}

void GffHeader::MergeFrom(const GffHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.GffHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sequence_regions_.MergeFrom(from.sequence_regions_);
  feature_ontologies_.MergeFrom(from.feature_ontologies_);
  attribute_ontologies_.MergeFrom(from.attribute_ontologies_);
  source_ontologies_.MergeFrom(from.source_ontologies_);
  if (from.gff_version().size() > 0) {

    gff_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.gff_version_);
  }
  if (from.species().size() > 0) {

    species_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.species_);
  }
  if (from.has_genome_build()) {
    mutable_genome_build()->::nucleus::genomics::v1::GffHeader_GenomeBuildDirective::MergeFrom(from.genome_build());
  }
}

void GffHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.GffHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GffHeader::CopyFrom(const GffHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.GffHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GffHeader::IsInitialized() const {
  return true;
}

void GffHeader::InternalSwap(GffHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&sequence_regions_)->InternalSwap(CastToBase(&other->sequence_regions_));
  CastToBase(&feature_ontologies_)->InternalSwap(CastToBase(&other->feature_ontologies_));
  CastToBase(&attribute_ontologies_)->InternalSwap(CastToBase(&other->attribute_ontologies_));
  CastToBase(&source_ontologies_)->InternalSwap(CastToBase(&other->source_ontologies_));
  gff_version_.Swap(&other->gff_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  species_.Swap(&other->species_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(genome_build_, other->genome_build_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GffHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GffReaderOptions::InitAsDefaultInstance() {
}
class GffReaderOptions::_Internal {
 public:
};

GffReaderOptions::GffReaderOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.GffReaderOptions)
}
GffReaderOptions::GffReaderOptions(const GffReaderOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.GffReaderOptions)
}

void GffReaderOptions::SharedCtor() {
}

GffReaderOptions::~GffReaderOptions() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.GffReaderOptions)
  SharedDtor();
}

void GffReaderOptions::SharedDtor() {
}

void GffReaderOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GffReaderOptions& GffReaderOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GffReaderOptions_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base);
  return *internal_default_instance();
}


void GffReaderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.GffReaderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GffReaderOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GffReaderOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.GffReaderOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.GffReaderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.GffReaderOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GffReaderOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.GffReaderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.GffReaderOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* GffReaderOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.GffReaderOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.GffReaderOptions)
  return target;
}

size_t GffReaderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.GffReaderOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GffReaderOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.GffReaderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GffReaderOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GffReaderOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.GffReaderOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.GffReaderOptions)
    MergeFrom(*source);
  }
}

void GffReaderOptions::MergeFrom(const GffReaderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.GffReaderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GffReaderOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.GffReaderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GffReaderOptions::CopyFrom(const GffReaderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.GffReaderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GffReaderOptions::IsInitialized() const {
  return true;
}

void GffReaderOptions::InternalSwap(GffReaderOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GffReaderOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GffWriterOptions::InitAsDefaultInstance() {
}
class GffWriterOptions::_Internal {
 public:
};

GffWriterOptions::GffWriterOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nucleus.genomics.v1.GffWriterOptions)
}
GffWriterOptions::GffWriterOptions(const GffWriterOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nucleus.genomics.v1.GffWriterOptions)
}

void GffWriterOptions::SharedCtor() {
}

GffWriterOptions::~GffWriterOptions() {
  // @@protoc_insertion_point(destructor:nucleus.genomics.v1.GffWriterOptions)
  SharedDtor();
}

void GffWriterOptions::SharedDtor() {
}

void GffWriterOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GffWriterOptions& GffWriterOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GffWriterOptions_third_5fparty_2fnucleus_2fprotos_2fgff_2eproto.base);
  return *internal_default_instance();
}


void GffWriterOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:nucleus.genomics.v1.GffWriterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GffWriterOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GffWriterOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:nucleus.genomics.v1.GffWriterOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:nucleus.genomics.v1.GffWriterOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nucleus.genomics.v1.GffWriterOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GffWriterOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nucleus.genomics.v1.GffWriterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:nucleus.genomics.v1.GffWriterOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* GffWriterOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nucleus.genomics.v1.GffWriterOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nucleus.genomics.v1.GffWriterOptions)
  return target;
}

size_t GffWriterOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nucleus.genomics.v1.GffWriterOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GffWriterOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:nucleus.genomics.v1.GffWriterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const GffWriterOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GffWriterOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:nucleus.genomics.v1.GffWriterOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:nucleus.genomics.v1.GffWriterOptions)
    MergeFrom(*source);
  }
}

void GffWriterOptions::MergeFrom(const GffWriterOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:nucleus.genomics.v1.GffWriterOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GffWriterOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:nucleus.genomics.v1.GffWriterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GffWriterOptions::CopyFrom(const GffWriterOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nucleus.genomics.v1.GffWriterOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GffWriterOptions::IsInitialized() const {
  return true;
}

void GffWriterOptions::InternalSwap(GffWriterOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GffWriterOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace genomics
}  // namespace nucleus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::GffRecord_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::GffRecord_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::GffRecord_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::GffRecord* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::GffRecord >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::GffRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::GffHeader_OntologyDirective* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::GffHeader_OntologyDirective >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::GffHeader_OntologyDirective >(arena);
}
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::GffHeader_GenomeBuildDirective >(arena);
}
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::GffHeader* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::GffHeader >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::GffHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::GffReaderOptions* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::GffReaderOptions >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::GffReaderOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::nucleus::genomics::v1::GffWriterOptions* Arena::CreateMaybeMessage< ::nucleus::genomics::v1::GffWriterOptions >(Arena* arena) {
  return Arena::CreateInternal< ::nucleus::genomics::v1::GffWriterOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
