//////////////////////////////////////////////////////////////////////
// This file was automatically generated by PyCLIF.
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: third_party/nucleus/io/python/gfile.clif

#include <Python.h>
#include "absl/memory/memory.h"
#include "absl/types/optional.h"
#include "clif/python/types.h"
#include "gfile.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace third__party_nucleus_io_python_gfile_clifwrap {

using namespace clif;

static const char* ThisModuleName = "third_party.nucleus.io.python.gfile";

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes

// Exists(filename:str) -> bool
static PyObject* wrapExists(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  const char* names[] = {
      "filename",
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:Exists", const_cast<char**>(names), &a[0])) return nullptr;
  ::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("Exists", names[0], "::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    ret0 = ::nucleus::Exists(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Glob(pattern:str) -> list<str>
static PyObject* wrapGlob(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  const char* names[] = {
      "pattern",
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:Glob", const_cast<char**>(names), &a[0])) return nullptr;
  ::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("Glob", names[0], "::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::std::string> ret0;
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    ret0 = ::nucleus::Glob(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {_1});
}

namespace pyReadableFile {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::nucleus::ReadableFile> cpp;
  PyObject* instance_dict = nullptr;
  PyObject* weakrefs = nullptr;
};

static ::nucleus::ReadableFile* ThisPtr(PyObject*);

// @classmethod New(filename:str) -> ReadableFile
static PyObject* wrapNew(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  const char* names[] = {
      "filename",
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:New", const_cast<char**>(names), &a[0])) return nullptr;
  ::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("New", names[0], "::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::unique_ptr<::nucleus::ReadableFile> ret0;
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    ret0 = ::nucleus::ReadableFile::New(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Readline() -> (ok:bool, s:str)
static PyObject* wrapReadline(PyObject* self) {
  ::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>> ret1{};
  // Call actual C++ method.
  ::nucleus::ReadableFile* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    ret0 = c->Readline(&ret1);
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(2);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  if ((p=Clif_PyObjFrom(std::move(ret1), _1)) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 1, p);
  return result_tuple;
}

// close()
static PyObject* wrapClose_as_close(PyObject* self) {
  // Call actual C++ method.
  ::nucleus::ReadableFile* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// __enter__@()
static PyObject* wrapPythonEnter_as___enter__(PyObject* self) {
  // Call actual C++ method.
  ::nucleus::ReadableFile* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    c->PythonEnter();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// __exit__@()
static PyObject* wrapClose_as___exit__(PyObject* self) {
  // Call actual C++ method.
  ::nucleus::ReadableFile* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef MethodsStaticAlloc[] = {
  {"New", (PyCFunction)wrapNew, METH_VARARGS | METH_KEYWORDS | METH_CLASS, "New(filename:str) -> ReadableFile\n  Calls C++ function\n  ::std::unique_ptr<::nucleus::ReadableFile> ::nucleus::ReadableFile::New(::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>>)"},
  {"Readline", (PyCFunction)wrapReadline, METH_NOARGS, "Readline() -> (ok:bool, s:str)\n  Calls C++ function\n  bool ::nucleus::ReadableFile::Readline(::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>>*)"},
  {"close", (PyCFunction)wrapClose_as_close, METH_NOARGS, "close()\n  Calls C++ function\n  void ::nucleus::ReadableFile::Close()"},
  {"__enter__", (PyCFunction)wrapPythonEnter_as___enter__, METH_NOARGS, "__enter__@()\n  Calls C++ function\n  void ::nucleus::ReadableFile::PythonEnter()"},
  {"__exit__", (PyCFunction)wrapClose_as___exit__, METH_VARARGS | METH_KEYWORDS, "__exit__@()\n  Calls C++ function\n  void ::nucleus::ReadableFile::Close()"},
  {"__reduce_ex__", (PyCFunction)::clif::ReduceExImpl, METH_VARARGS | METH_KEYWORDS, "Helper for pickle."},
  {}
};

// ReadableFile __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ReadableFile __del__
static void _dtor(PyObject* self) {
  if (reinterpret_cast<wrapper*>(self)->weakrefs) {
    PyObject_ClearWeakRefs(self);
  }
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}

static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject* wrapper_Type = nullptr;

static PyTypeObject* _build_heap_type() {
  PyHeapTypeObject *heap_type =
      (PyHeapTypeObject *) PyType_Type.tp_alloc(&PyType_Type, 0);
  if (!heap_type)
    return nullptr;
  heap_type->ht_qualname = (PyObject *) PyUnicode_FromString(
      "ReadableFile");
  Py_INCREF(heap_type->ht_qualname);
  heap_type->ht_name = heap_type->ht_qualname;
  PyTypeObject *ty = &heap_type->ht_type;
  ty->tp_as_number = &heap_type->as_number;
  ty->tp_as_sequence = &heap_type->as_sequence;
  ty->tp_as_mapping = &heap_type->as_mapping;
#if PY_VERSION_HEX >= 0x03050000
  ty->tp_as_async = &heap_type->as_async;
#endif
  ty->tp_name = "third_party.nucleus.io.python.gfile.ReadableFile";
  ty->tp_basicsize = sizeof(wrapper);
  ty->tp_dealloc = _dtor;
  ty->tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HEAPTYPE;
  ty->tp_doc = "CLIF wrapper for ::nucleus::ReadableFile";
  ty->tp_methods = MethodsStaticAlloc;
  ty->tp_init = Clif_PyType_Inconstructible;
  ty->tp_alloc = _new;
  ty->tp_new = PyType_GenericNew;
  ty->tp_free = _del;
  ty->tp_weaklistoffset = offsetof(wrapper, weakrefs);
  return ty;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  DCHECK(nitems == 0);
  wrapper* wobj = new wrapper;
  PyObject* self = reinterpret_cast<PyObject*>(wobj);
  return PyObject_Init(self, wrapper_Type);
}

static ::nucleus::ReadableFile* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, "as_nucleus_ReadableFile", nullptr);
  if (base == nullptr) {
    PyErr_Clear();
  } else {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, "::nucleus::ReadableFile");
      if (!PyErr_Occurred()) {
        ::nucleus::ReadableFile* c = static_cast<::nucleus::ReadableFile*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(wrapper_Type))) {
    if (!base) {
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::nucleus::ReadableFile*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type->tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}

}  // namespace pyReadableFile

namespace pyWritableFile {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::nucleus::WritableFile> cpp;
  PyObject* instance_dict = nullptr;
  PyObject* weakrefs = nullptr;
};

static ::nucleus::WritableFile* ThisPtr(PyObject*);

// @classmethod New(filename:str) -> WritableFile
static PyObject* wrapNew(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  const char* names[] = {
      "filename",
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:New", const_cast<char**>(names), &a[0])) return nullptr;
  ::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("New", names[0], "::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>>", a[0]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::unique_ptr<::nucleus::WritableFile> ret0;
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    ret0 = ::nucleus::WritableFile::New(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// write(s:str) -> bool
static PyObject* wrapWrite_as_write(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  const char* names[] = {
      "s",
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:write", const_cast<char**>(names), &a[0])) return nullptr;
  ::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("write", names[0], "::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>>", a[0]);
  // Call actual C++ method.
  ::nucleus::WritableFile* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    ret0 = c->Write(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// close()
static PyObject* wrapClose_as_close(PyObject* self) {
  // Call actual C++ method.
  ::nucleus::WritableFile* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// __enter__@()
static PyObject* wrapPythonEnter_as___enter__(PyObject* self) {
  // Call actual C++ method.
  ::nucleus::WritableFile* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    c->PythonEnter();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// __exit__@()
static PyObject* wrapClose_as___exit__(PyObject* self) {
  // Call actual C++ method.
  ::nucleus::WritableFile* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

static PyMethodDef MethodsStaticAlloc[] = {
  {"New", (PyCFunction)wrapNew, METH_VARARGS | METH_KEYWORDS | METH_CLASS, "New(filename:str) -> WritableFile\n  Calls C++ function\n  ::std::unique_ptr<::nucleus::WritableFile> ::nucleus::WritableFile::New(::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>>)"},
  {"write", (PyCFunction)wrapWrite_as_write, METH_VARARGS | METH_KEYWORDS, "write(s:str) -> bool\n  Calls C++ function\n  bool ::nucleus::WritableFile::Write(::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>>)"},
  {"close", (PyCFunction)wrapClose_as_close, METH_NOARGS, "close()\n  Calls C++ function\n  void ::nucleus::WritableFile::Close()"},
  {"__enter__", (PyCFunction)wrapPythonEnter_as___enter__, METH_NOARGS, "__enter__@()\n  Calls C++ function\n  void ::nucleus::WritableFile::PythonEnter()"},
  {"__exit__", (PyCFunction)wrapClose_as___exit__, METH_VARARGS | METH_KEYWORDS, "__exit__@()\n  Calls C++ function\n  void ::nucleus::WritableFile::Close()"},
  {"__reduce_ex__", (PyCFunction)::clif::ReduceExImpl, METH_VARARGS | METH_KEYWORDS, "Helper for pickle."},
  {}
};

// WritableFile __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// WritableFile __del__
static void _dtor(PyObject* self) {
  if (reinterpret_cast<wrapper*>(self)->weakrefs) {
    PyObject_ClearWeakRefs(self);
  }
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}

static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject* wrapper_Type = nullptr;

static PyTypeObject* _build_heap_type() {
  PyHeapTypeObject *heap_type =
      (PyHeapTypeObject *) PyType_Type.tp_alloc(&PyType_Type, 0);
  if (!heap_type)
    return nullptr;
  heap_type->ht_qualname = (PyObject *) PyUnicode_FromString(
      "WritableFile");
  Py_INCREF(heap_type->ht_qualname);
  heap_type->ht_name = heap_type->ht_qualname;
  PyTypeObject *ty = &heap_type->ht_type;
  ty->tp_as_number = &heap_type->as_number;
  ty->tp_as_sequence = &heap_type->as_sequence;
  ty->tp_as_mapping = &heap_type->as_mapping;
#if PY_VERSION_HEX >= 0x03050000
  ty->tp_as_async = &heap_type->as_async;
#endif
  ty->tp_name = "third_party.nucleus.io.python.gfile.WritableFile";
  ty->tp_basicsize = sizeof(wrapper);
  ty->tp_dealloc = _dtor;
  ty->tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HEAPTYPE;
  ty->tp_doc = "CLIF wrapper for ::nucleus::WritableFile";
  ty->tp_methods = MethodsStaticAlloc;
  ty->tp_init = Clif_PyType_Inconstructible;
  ty->tp_alloc = _new;
  ty->tp_new = PyType_GenericNew;
  ty->tp_free = _del;
  ty->tp_weaklistoffset = offsetof(wrapper, weakrefs);
  return ty;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  DCHECK(nitems == 0);
  wrapper* wobj = new wrapper;
  PyObject* self = reinterpret_cast<PyObject*>(wobj);
  return PyObject_Init(self, wrapper_Type);
}

static ::nucleus::WritableFile* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, "as_nucleus_WritableFile", nullptr);
  if (base == nullptr) {
    PyErr_Clear();
  } else {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, "::nucleus::WritableFile");
      if (!PyErr_Occurred()) {
        ::nucleus::WritableFile* c = static_cast<::nucleus::WritableFile*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(wrapper_Type))) {
    if (!base) {
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::nucleus::WritableFile*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type->tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}

}  // namespace pyWritableFile

// Initialize module

static PyMethodDef MethodsStaticAlloc[] = {
  {"Exists", (PyCFunction)wrapExists, METH_VARARGS | METH_KEYWORDS, "Exists(filename:str) -> bool\n  Calls C++ function\n  bool ::nucleus::Exists(::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>>)"},
  {"Glob", (PyCFunction)wrapGlob, METH_VARARGS | METH_KEYWORDS, "Glob(pattern:str) -> list<str>\n  Calls C++ function\n  ::std::vector< ::std::string> ::nucleus::Glob(::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>>)"},
  {}
};

bool Ready() {
  pyReadableFile::wrapper_Type =
  pyReadableFile::_build_heap_type();
  if (PyType_Ready(pyReadableFile::wrapper_Type) < 0) return false;
  PyObject *modname = PyUnicode_FromString(ThisModuleName);
  if (modname == nullptr) return false;
  PyObject_SetAttrString((PyObject *) pyReadableFile::wrapper_Type, "__module__", modname);
  Py_INCREF(pyReadableFile::wrapper_Type);  // For PyModule_AddObject to steal.
  pyWritableFile::wrapper_Type =
  pyWritableFile::_build_heap_type();
  if (PyType_Ready(pyWritableFile::wrapper_Type) < 0) return false;
  PyObject_SetAttrString((PyObject *) pyWritableFile::wrapper_Type, "__module__", modname);
  Py_INCREF(pyWritableFile::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  ThisModuleName,
  "CLIF-generated module for third_party/nucleus/io/python/gfile.clif", // module doc
  -1,  // module keeps state in global variables
  MethodsStaticAlloc,
  nullptr,  // m_slots a.k.a. m_reload
  nullptr,  // m_traverse
  ClearImportCache  // m_clear
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "ReadableFile", reinterpret_cast<PyObject*>(pyReadableFile::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "WritableFile", reinterpret_cast<PyObject*>(pyWritableFile::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace third__party_nucleus_io_python_gfile_clifwrap

namespace nucleus {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// ReadableFile to/from ::nucleus::ReadableFile conversion

bool Clif_PyObjAs(PyObject* py, ::nucleus::ReadableFile** c) {
  CHECK(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::nucleus::ReadableFile* cpp = third__party_nucleus_io_python_gfile_clifwrap::pyReadableFile::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::nucleus::ReadableFile>* c) {
  CHECK(c != nullptr);
  ::nucleus::ReadableFile* cpp = third__party_nucleus_io_python_gfile_clifwrap::pyReadableFile::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<third__party_nucleus_io_python_gfile_clifwrap::pyReadableFile::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::nucleus::ReadableFile>* c) {
  CHECK(c != nullptr);
  ::nucleus::ReadableFile* cpp = third__party_nucleus_io_python_gfile_clifwrap::pyReadableFile::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<third__party_nucleus_io_python_gfile_clifwrap::pyReadableFile::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ReadableFile instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::nucleus::ReadableFile* c, py::PostConv unused) {
  CHECK(third__party_nucleus_io_python_gfile_clifwrap::pyReadableFile::wrapper_Type != nullptr) <<
    "---> Function Clif_PyObjFrom(::nucleus::ReadableFile) called before " <<
    third__party_nucleus_io_python_gfile_clifwrap::ThisModuleName  <<
    " was imported from Python.";
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(third__party_nucleus_io_python_gfile_clifwrap::pyReadableFile::wrapper_Type, NULL, NULL);
  reinterpret_cast<third__party_nucleus_io_python_gfile_clifwrap::pyReadableFile::wrapper*>(py)->cpp = ::clif::Instance<::nucleus::ReadableFile>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::nucleus::ReadableFile> c, py::PostConv unused) {
  CHECK(third__party_nucleus_io_python_gfile_clifwrap::pyReadableFile::wrapper_Type != nullptr) <<
    "---> Function Clif_PyObjFrom(::nucleus::ReadableFile) called before " <<
    third__party_nucleus_io_python_gfile_clifwrap::ThisModuleName  <<
    " was imported from Python.";
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(third__party_nucleus_io_python_gfile_clifwrap::pyReadableFile::wrapper_Type, NULL, NULL);
  reinterpret_cast<third__party_nucleus_io_python_gfile_clifwrap::pyReadableFile::wrapper*>(py)->cpp = ::clif::Instance<::nucleus::ReadableFile>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::nucleus::ReadableFile> c, py::PostConv unused) {
  CHECK(third__party_nucleus_io_python_gfile_clifwrap::pyReadableFile::wrapper_Type != nullptr) <<
    "---> Function Clif_PyObjFrom(::nucleus::ReadableFile) called before " <<
    third__party_nucleus_io_python_gfile_clifwrap::ThisModuleName  <<
    " was imported from Python.";
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(third__party_nucleus_io_python_gfile_clifwrap::pyReadableFile::wrapper_Type, NULL, NULL);
  reinterpret_cast<third__party_nucleus_io_python_gfile_clifwrap::pyReadableFile::wrapper*>(py)->cpp = ::clif::Instance<::nucleus::ReadableFile>(std::move(c));
  return py;
}

// WritableFile to/from ::nucleus::WritableFile conversion

bool Clif_PyObjAs(PyObject* py, ::nucleus::WritableFile** c) {
  CHECK(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::nucleus::WritableFile* cpp = third__party_nucleus_io_python_gfile_clifwrap::pyWritableFile::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::nucleus::WritableFile>* c) {
  CHECK(c != nullptr);
  ::nucleus::WritableFile* cpp = third__party_nucleus_io_python_gfile_clifwrap::pyWritableFile::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<third__party_nucleus_io_python_gfile_clifwrap::pyWritableFile::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::nucleus::WritableFile>* c) {
  CHECK(c != nullptr);
  ::nucleus::WritableFile* cpp = third__party_nucleus_io_python_gfile_clifwrap::pyWritableFile::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<third__party_nucleus_io_python_gfile_clifwrap::pyWritableFile::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert WritableFile instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::nucleus::WritableFile* c, py::PostConv unused) {
  CHECK(third__party_nucleus_io_python_gfile_clifwrap::pyWritableFile::wrapper_Type != nullptr) <<
    "---> Function Clif_PyObjFrom(::nucleus::WritableFile) called before " <<
    third__party_nucleus_io_python_gfile_clifwrap::ThisModuleName  <<
    " was imported from Python.";
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(third__party_nucleus_io_python_gfile_clifwrap::pyWritableFile::wrapper_Type, NULL, NULL);
  reinterpret_cast<third__party_nucleus_io_python_gfile_clifwrap::pyWritableFile::wrapper*>(py)->cpp = ::clif::Instance<::nucleus::WritableFile>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::nucleus::WritableFile> c, py::PostConv unused) {
  CHECK(third__party_nucleus_io_python_gfile_clifwrap::pyWritableFile::wrapper_Type != nullptr) <<
    "---> Function Clif_PyObjFrom(::nucleus::WritableFile) called before " <<
    third__party_nucleus_io_python_gfile_clifwrap::ThisModuleName  <<
    " was imported from Python.";
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(third__party_nucleus_io_python_gfile_clifwrap::pyWritableFile::wrapper_Type, NULL, NULL);
  reinterpret_cast<third__party_nucleus_io_python_gfile_clifwrap::pyWritableFile::wrapper*>(py)->cpp = ::clif::Instance<::nucleus::WritableFile>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::nucleus::WritableFile> c, py::PostConv unused) {
  CHECK(third__party_nucleus_io_python_gfile_clifwrap::pyWritableFile::wrapper_Type != nullptr) <<
    "---> Function Clif_PyObjFrom(::nucleus::WritableFile) called before " <<
    third__party_nucleus_io_python_gfile_clifwrap::ThisModuleName  <<
    " was imported from Python.";
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(third__party_nucleus_io_python_gfile_clifwrap::pyWritableFile::wrapper_Type, NULL, NULL);
  reinterpret_cast<third__party_nucleus_io_python_gfile_clifwrap::pyWritableFile::wrapper*>(py)->cpp = ::clif::Instance<::nucleus::WritableFile>(std::move(c));
  return py;
}

}  // namespace nucleus
