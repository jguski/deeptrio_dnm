//////////////////////////////////////////////////////////////////////
// This file was automatically generated by PyCLIF.
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: third_party/nucleus/io/python/gff_reader.clif

#include <Python.h>
#include "absl/memory/memory.h"
#include "absl/types/optional.h"
#include "clif/python/types.h"
#include "third_party/nucleus/protos/gff_pyclif.h"
#include "third_party/nucleus/util/proto_clif_converter.h"
#include "third_party/nucleus/vendor/statusor_clif_converters.h"
#include "gff_reader.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace third__party_nucleus_io_python_gff__reader_clifwrap {

using namespace clif;

static const char* ThisModuleName = "third_party.nucleus.io.python.gff_reader";

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes
#define _2 UnicodeFromBytes

namespace pyGffIterable {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>> cpp;
  PyObject* instance_dict = nullptr;
  PyObject* weakrefs = nullptr;
};

static ::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>* ThisPtr(PyObject*);

// PythonNext(gff:EmptyProtoPtr<GffRecord>) -> StatusOr<bool>
static PyObject* wrapPythonNext(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[1];
  const char* names[] = {
      "gff",
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "O:PythonNext", const_cast<char**>(names), &a[0])) return nullptr;
  ::nucleus::EmptyProtoPtr< ::nucleus::genomics::v1::GffRecord> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("PythonNext", names[0], "::nucleus::EmptyProtoPtr< ::nucleus::genomics::v1::GffRecord>", a[0]);
  // Call actual C++ method.
  ::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>* c = ThisPtr(self);
  if (!c) return nullptr;
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::nucleus::StatusOr<bool> ret0;
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    ret0 = c->PythonNext(std::move(arg1));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Release() -> Status
static PyObject* wrapRelease(PyObject* self) {
  // Call actual C++ method.
  ::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::tensorflow::Status ret0;
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    ret0 = c->Release();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __enter__@() -> Status
static PyObject* wrapPythonEnter_as___enter__(PyObject* self) {
  // Call actual C++ method.
  ::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::tensorflow::Status ret0;
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    ret0 = c->PythonEnter();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  Py_XDECREF(result_tuple);
  Py_INCREF(self);
  return self;
}

// __exit__@() -> Status
static PyObject* wrapPythonExit_as___exit__(PyObject* self) {
  // Call actual C++ method.
  ::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::tensorflow::Status ret0;
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    ret0 = c->PythonExit();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  Py_XDECREF(result_tuple);
  Py_RETURN_NONE;
}

// Implicit cast this as ::nucleus::IterableBase*
static PyObject* as_nucleus_IterableBase(PyObject* self) {
  ::nucleus::IterableBase* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, "::nucleus::IterableBase", nullptr);
}

static PyMethodDef MethodsStaticAlloc[] = {
  {"PythonNext", (PyCFunction)wrapPythonNext, METH_VARARGS | METH_KEYWORDS, "PythonNext(gff:EmptyProtoPtr<GffRecord>) -> StatusOr<bool>\n  Calls C++ function\n  ::nucleus::StatusOr<bool> ::nucleus::Iterable<nucleus::genomics::v1::GffRecord>::PythonNext(::nucleus::EmptyProtoPtr< ::nucleus::genomics::v1::GffRecord>)"},
  {"Release", (PyCFunction)wrapRelease, METH_NOARGS, "Release() -> Status\n  Calls C++ function\n  ::tensorflow::Status ::nucleus::IterableBase::Release()"},
  {"__enter__", (PyCFunction)wrapPythonEnter_as___enter__, METH_NOARGS, "__enter__@() -> Status\n  Calls C++ function\n  ::tensorflow::Status ::nucleus::IterableBase::PythonEnter()"},
  {"__exit__", (PyCFunction)wrapPythonExit_as___exit__, METH_VARARGS | METH_KEYWORDS, "__exit__@() -> Status\n  Calls C++ function\n  ::tensorflow::Status ::nucleus::IterableBase::PythonExit()"},
  {"as_nucleus_IterableBase", (PyCFunction)as_nucleus_IterableBase, METH_NOARGS, "Upcast to ::nucleus::IterableBase*"},
  {"__reduce_ex__", (PyCFunction)::clif::ReduceExImpl, METH_VARARGS | METH_KEYWORDS, "Helper for pickle."},
  {}
};

// GffIterable __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// GffIterable __del__
static void _dtor(PyObject* self) {
  if (reinterpret_cast<wrapper*>(self)->weakrefs) {
    PyObject_ClearWeakRefs(self);
  }
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}

static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject* wrapper_Type = nullptr;

static PyTypeObject* _build_heap_type() {
  PyHeapTypeObject *heap_type =
      (PyHeapTypeObject *) PyType_Type.tp_alloc(&PyType_Type, 0);
  if (!heap_type)
    return nullptr;
  heap_type->ht_qualname = (PyObject *) PyUnicode_FromString(
      "GffIterable");
  Py_INCREF(heap_type->ht_qualname);
  heap_type->ht_name = heap_type->ht_qualname;
  PyTypeObject *ty = &heap_type->ht_type;
  ty->tp_as_number = &heap_type->as_number;
  ty->tp_as_sequence = &heap_type->as_sequence;
  ty->tp_as_mapping = &heap_type->as_mapping;
#if PY_VERSION_HEX >= 0x03050000
  ty->tp_as_async = &heap_type->as_async;
#endif
  ty->tp_name = "third_party.nucleus.io.python.gff_reader.GffIterable";
  ty->tp_basicsize = sizeof(wrapper);
  ty->tp_dealloc = _dtor;
  ty->tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HEAPTYPE;
  ty->tp_doc = "CLIF wrapper for ::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>";
  ty->tp_methods = MethodsStaticAlloc;
  ty->tp_init = Clif_PyType_Inconstructible;
  ty->tp_alloc = _new;
  ty->tp_new = PyType_GenericNew;
  ty->tp_free = _del;
  ty->tp_weaklistoffset = offsetof(wrapper, weakrefs);
  return ty;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  DCHECK(nitems == 0);
  wrapper* wobj = new wrapper;
  PyObject* self = reinterpret_cast<PyObject*>(wobj);
  return PyObject_Init(self, wrapper_Type);
}

static ::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, "as_nucleus_Iterable__nucleus_genomics_v1_GffRecord", nullptr);
  if (base == nullptr) {
    PyErr_Clear();
  } else {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, "::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>");
      if (!PyErr_Occurred()) {
        ::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>* c = static_cast<::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(wrapper_Type))) {
    if (!base) {
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type->tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}

}  // namespace pyGffIterable

namespace pyGffReader {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::nucleus::GffReader> cpp;
  PyObject* instance_dict = nullptr;
  PyObject* weakrefs = nullptr;
};

static ::nucleus::GffReader* ThisPtr(PyObject*);

// @classmethod from_file(gffPath:str, options:GffReaderOptions) -> StatusOr<GffReader>
static PyObject* wrapFromFile_as_from_file(PyObject* cls, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  const char* names[] = {
      "gffPath",
      "options",
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:from_file", const_cast<char**>(names), &a[0], &a[1])) return nullptr;
  ::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>> arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("from_file", names[0], "::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>>", a[0]);
  ::nucleus::genomics::v1::GffReaderOptions arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("from_file", names[1], "::nucleus::genomics::v1::GffReaderOptions", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::nucleus::StatusOr< ::std::unique_ptr< ::nucleus::GffReader>> ret0;
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    ret0 = ::nucleus::GffReader::FromFile(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// iterate() -> StatusOr<GffIterable>
static PyObject* wrapIterate_as_iterate(PyObject* self) {
  // Call actual C++ method.
  ::nucleus::GffReader* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::nucleus::StatusOr< ::std::shared_ptr< ::nucleus::GffIterable>> ret0;
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    ret0 = c->Iterate();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  PyObject* pyproc = ImportFQName("third_party.nucleus.io.clif_postproc.WrappedGffIterable");
  if (pyproc == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  p = PyObject_CallObject(pyproc, result_tuple);
  Py_DECREF(pyproc);
  Py_CLEAR(result_tuple);
  result_tuple = p;
  return result_tuple;
}

// __enter__@()
static PyObject* wrapPythonEnter_as___enter__(PyObject* self) {
  // Call actual C++ method.
  ::nucleus::GffReader* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    c->PythonEnter();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_INCREF(self);
  return self;
}

// __exit__@() -> Status
static PyObject* wrapClose_as___exit__(PyObject* self) {
  // Call actual C++ method.
  ::nucleus::GffReader* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::tensorflow::Status ret0;
  PyObject* err_type = nullptr;
  std::string err_msg{"C++ exception"};
  try {
    ret0 = c->Close();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += std::string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  // Convert return values to Python.
  PyObject* p, * result_tuple = PyTuple_New(1);
  if (result_tuple == nullptr) return nullptr;
  if ((p=Clif_PyObjFrom(std::move(ret0), {})) == nullptr) {
    Py_DECREF(result_tuple);
    return nullptr;
  }
  PyTuple_SET_ITEM(result_tuple, 0, p);
  Py_XDECREF(result_tuple);
  Py_RETURN_NONE;
}

static PyObject* get_header(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->Header(), {});
}

static PyGetSetDef Properties[] = {
  {"header", get_header, nullptr, "C++ clif_type_16 GffReader.Header()"},
  {}
};

// Implicit cast this as ::nucleus::Reader*
static PyObject* as_nucleus_Reader(PyObject* self) {
  ::nucleus::Reader* p = ::clif::python::Get(reinterpret_cast<wrapper*>(self)->cpp);
  if (p == nullptr) return nullptr;
  return PyCapsule_New(p, "::nucleus::Reader", nullptr);
}

static PyMethodDef MethodsStaticAlloc[] = {
  {"from_file", (PyCFunction)wrapFromFile_as_from_file, METH_VARARGS | METH_KEYWORDS | METH_CLASS, "from_file(gffPath:str, options:GffReaderOptions) -> StatusOr<GffReader>\n  Calls C++ function\n  ::nucleus::StatusOr< ::std::unique_ptr< ::nucleus::GffReader>> ::nucleus::GffReader::FromFile(::std::basic_string<char, ::std::char_traits<char>, ::std::allocator<char>>, ::nucleus::genomics::v1::GffReaderOptions)"},
  {"iterate", (PyCFunction)wrapIterate_as_iterate, METH_NOARGS, "iterate() -> StatusOr<GffIterable>\n  Calls C++ function\n  ::nucleus::StatusOr< ::std::shared_ptr< ::nucleus::GffIterable>> ::nucleus::GffReader::Iterate()"},
  {"__enter__", (PyCFunction)wrapPythonEnter_as___enter__, METH_NOARGS, "__enter__@()\n  Calls C++ function\n  void ::nucleus::GffReader::PythonEnter()"},
  {"__exit__", (PyCFunction)wrapClose_as___exit__, METH_VARARGS | METH_KEYWORDS, "__exit__@() -> Status\n  Calls C++ function\n  ::tensorflow::Status ::nucleus::GffReader::Close()"},
  {"as_nucleus_Reader", (PyCFunction)as_nucleus_Reader, METH_NOARGS, "Upcast to ::nucleus::Reader*"},
  {"__reduce_ex__", (PyCFunction)::clif::ReduceExImpl, METH_VARARGS | METH_KEYWORDS, "Helper for pickle."},
  {}
};

// GffReader __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// GffReader __del__
static void _dtor(PyObject* self) {
  if (reinterpret_cast<wrapper*>(self)->weakrefs) {
    PyObject_ClearWeakRefs(self);
  }
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}

static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject* wrapper_Type = nullptr;

static PyTypeObject* _build_heap_type() {
  PyHeapTypeObject *heap_type =
      (PyHeapTypeObject *) PyType_Type.tp_alloc(&PyType_Type, 0);
  if (!heap_type)
    return nullptr;
  heap_type->ht_qualname = (PyObject *) PyUnicode_FromString(
      "GffReader");
  Py_INCREF(heap_type->ht_qualname);
  heap_type->ht_name = heap_type->ht_qualname;
  PyTypeObject *ty = &heap_type->ht_type;
  ty->tp_as_number = &heap_type->as_number;
  ty->tp_as_sequence = &heap_type->as_sequence;
  ty->tp_as_mapping = &heap_type->as_mapping;
#if PY_VERSION_HEX >= 0x03050000
  ty->tp_as_async = &heap_type->as_async;
#endif
  ty->tp_name = "third_party.nucleus.io.python.gff_reader.GffReader";
  ty->tp_basicsize = sizeof(wrapper);
  ty->tp_dealloc = _dtor;
  ty->tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HEAPTYPE;
  ty->tp_doc = "CLIF wrapper for ::nucleus::GffReader";
  ty->tp_methods = MethodsStaticAlloc;
  ty->tp_getset = Properties;
  ty->tp_init = Clif_PyType_Inconstructible;
  ty->tp_alloc = _new;
  ty->tp_new = PyType_GenericNew;
  ty->tp_free = _del;
  ty->tp_weaklistoffset = offsetof(wrapper, weakrefs);
  return ty;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  DCHECK(nitems == 0);
  wrapper* wobj = new wrapper;
  PyObject* self = reinterpret_cast<PyObject*>(wobj);
  return PyObject_Init(self, wrapper_Type);
}

static ::nucleus::GffReader* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, "as_nucleus_GffReader", nullptr);
  if (base == nullptr) {
    PyErr_Clear();
  } else {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, "::nucleus::GffReader");
      if (!PyErr_Occurred()) {
        ::nucleus::GffReader* c = static_cast<::nucleus::GffReader*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(wrapper_Type))) {
    if (!base) {
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::nucleus::GffReader*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type->tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}

}  // namespace pyGffReader

// Initialize module

bool Ready() {
  pyGffIterable::wrapper_Type =
  pyGffIterable::_build_heap_type();
  if (PyType_Ready(pyGffIterable::wrapper_Type) < 0) return false;
  PyObject *modname = PyUnicode_FromString(ThisModuleName);
  if (modname == nullptr) return false;
  PyObject_SetAttrString((PyObject *) pyGffIterable::wrapper_Type, "__module__", modname);
  Py_INCREF(pyGffIterable::wrapper_Type);  // For PyModule_AddObject to steal.
  pyGffReader::wrapper_Type =
  pyGffReader::_build_heap_type();
  if (PyType_Ready(pyGffReader::wrapper_Type) < 0) return false;
  PyObject_SetAttrString((PyObject *) pyGffReader::wrapper_Type, "__module__", modname);
  Py_INCREF(pyGffReader::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}

static struct PyModuleDef Module = {
  PyModuleDef_HEAD_INIT,
  ThisModuleName,
  "CLIF-generated module for third_party/nucleus/io/python/gff_reader.clif", // module doc
  -1,  // module keeps state in global variables
  nullptr,
  nullptr,  // m_slots a.k.a. m_reload
  nullptr,  // m_traverse
  ClearImportCache  // m_clear
};

PyObject* Init() {
  PyObject* module = PyModule_Create(&Module);
  if (!module) return nullptr;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "GffIterable", reinterpret_cast<PyObject*>(pyGffIterable::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "GffReader", reinterpret_cast<PyObject*>(pyGffReader::wrapper_Type)) < 0) goto err;
  return module;
err:
  Py_DECREF(module);
  return nullptr;
}

}  // namespace third__party_nucleus_io_python_gff__reader_clifwrap

namespace nucleus {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// GffIterable to/from ::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord> conversion

bool Clif_PyObjAs(PyObject* py, ::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>** c) {
  CHECK(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>* cpp = third__party_nucleus_io_python_gff__reader_clifwrap::pyGffIterable::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>>* c) {
  CHECK(c != nullptr);
  ::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>* cpp = third__party_nucleus_io_python_gff__reader_clifwrap::pyGffIterable::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<third__party_nucleus_io_python_gff__reader_clifwrap::pyGffIterable::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>>* c) {
  CHECK(c != nullptr);
  ::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>* cpp = third__party_nucleus_io_python_gff__reader_clifwrap::pyGffIterable::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<third__party_nucleus_io_python_gff__reader_clifwrap::pyGffIterable::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert GffIterable instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>* c, py::PostConv unused) {
  CHECK(third__party_nucleus_io_python_gff__reader_clifwrap::pyGffIterable::wrapper_Type != nullptr) <<
    "---> Function Clif_PyObjFrom(::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>) called before " <<
    third__party_nucleus_io_python_gff__reader_clifwrap::ThisModuleName  <<
    " was imported from Python.";
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(third__party_nucleus_io_python_gff__reader_clifwrap::pyGffIterable::wrapper_Type, NULL, NULL);
  reinterpret_cast<third__party_nucleus_io_python_gff__reader_clifwrap::pyGffIterable::wrapper*>(py)->cpp = ::clif::Instance<::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>> c, py::PostConv unused) {
  CHECK(third__party_nucleus_io_python_gff__reader_clifwrap::pyGffIterable::wrapper_Type != nullptr) <<
    "---> Function Clif_PyObjFrom(::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>) called before " <<
    third__party_nucleus_io_python_gff__reader_clifwrap::ThisModuleName  <<
    " was imported from Python.";
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(third__party_nucleus_io_python_gff__reader_clifwrap::pyGffIterable::wrapper_Type, NULL, NULL);
  reinterpret_cast<third__party_nucleus_io_python_gff__reader_clifwrap::pyGffIterable::wrapper*>(py)->cpp = ::clif::Instance<::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>> c, py::PostConv unused) {
  CHECK(third__party_nucleus_io_python_gff__reader_clifwrap::pyGffIterable::wrapper_Type != nullptr) <<
    "---> Function Clif_PyObjFrom(::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>) called before " <<
    third__party_nucleus_io_python_gff__reader_clifwrap::ThisModuleName  <<
    " was imported from Python.";
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(third__party_nucleus_io_python_gff__reader_clifwrap::pyGffIterable::wrapper_Type, NULL, NULL);
  reinterpret_cast<third__party_nucleus_io_python_gff__reader_clifwrap::pyGffIterable::wrapper*>(py)->cpp = ::clif::Instance<::nucleus::Iterable< ::nucleus::genomics::v1::GffRecord>>(std::move(c));
  return py;
}

// GffReader to/from ::nucleus::GffReader conversion

bool Clif_PyObjAs(PyObject* py, ::nucleus::GffReader** c) {
  CHECK(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::nucleus::GffReader* cpp = third__party_nucleus_io_python_gff__reader_clifwrap::pyGffReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::nucleus::GffReader>* c) {
  CHECK(c != nullptr);
  ::nucleus::GffReader* cpp = third__party_nucleus_io_python_gff__reader_clifwrap::pyGffReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<third__party_nucleus_io_python_gff__reader_clifwrap::pyGffReader::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::nucleus::GffReader>* c) {
  CHECK(c != nullptr);
  ::nucleus::GffReader* cpp = third__party_nucleus_io_python_gff__reader_clifwrap::pyGffReader::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<third__party_nucleus_io_python_gff__reader_clifwrap::pyGffReader::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert GffReader instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::nucleus::GffReader* c, py::PostConv unused) {
  CHECK(third__party_nucleus_io_python_gff__reader_clifwrap::pyGffReader::wrapper_Type != nullptr) <<
    "---> Function Clif_PyObjFrom(::nucleus::GffReader) called before " <<
    third__party_nucleus_io_python_gff__reader_clifwrap::ThisModuleName  <<
    " was imported from Python.";
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(third__party_nucleus_io_python_gff__reader_clifwrap::pyGffReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<third__party_nucleus_io_python_gff__reader_clifwrap::pyGffReader::wrapper*>(py)->cpp = ::clif::Instance<::nucleus::GffReader>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::nucleus::GffReader> c, py::PostConv unused) {
  CHECK(third__party_nucleus_io_python_gff__reader_clifwrap::pyGffReader::wrapper_Type != nullptr) <<
    "---> Function Clif_PyObjFrom(::nucleus::GffReader) called before " <<
    third__party_nucleus_io_python_gff__reader_clifwrap::ThisModuleName  <<
    " was imported from Python.";
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(third__party_nucleus_io_python_gff__reader_clifwrap::pyGffReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<third__party_nucleus_io_python_gff__reader_clifwrap::pyGffReader::wrapper*>(py)->cpp = ::clif::Instance<::nucleus::GffReader>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::nucleus::GffReader> c, py::PostConv unused) {
  CHECK(third__party_nucleus_io_python_gff__reader_clifwrap::pyGffReader::wrapper_Type != nullptr) <<
    "---> Function Clif_PyObjFrom(::nucleus::GffReader) called before " <<
    third__party_nucleus_io_python_gff__reader_clifwrap::ThisModuleName  <<
    " was imported from Python.";
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(third__party_nucleus_io_python_gff__reader_clifwrap::pyGffReader::wrapper_Type, NULL, NULL);
  reinterpret_cast<third__party_nucleus_io_python_gff__reader_clifwrap::pyGffReader::wrapper*>(py)->cpp = ::clif::Instance<::nucleus::GffReader>(std::move(c));
  return py;
}

}  // namespace nucleus
