// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deepvariant/protos/realigner.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_deepvariant_2fprotos_2frealigner_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_deepvariant_2fprotos_2frealigner_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "third_party/nucleus/protos/range.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2frealigner_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_deepvariant_2fprotos_2frealigner_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_deepvariant_2fprotos_2frealigner_2eproto;
namespace learning {
namespace genomics {
namespace deepvariant {
class AlignerOptions;
class AlignerOptionsDefaultTypeInternal;
extern AlignerOptionsDefaultTypeInternal _AlignerOptions_default_instance_;
class CandidateHaplotypes;
class CandidateHaplotypesDefaultTypeInternal;
extern CandidateHaplotypesDefaultTypeInternal _CandidateHaplotypes_default_instance_;
class DeBruijnGraphOptions;
class DeBruijnGraphOptionsDefaultTypeInternal;
extern DeBruijnGraphOptionsDefaultTypeInternal _DeBruijnGraphOptions_default_instance_;
class Diagnostics;
class DiagnosticsDefaultTypeInternal;
extern DiagnosticsDefaultTypeInternal _Diagnostics_default_instance_;
class RealignerOptions;
class RealignerOptionsDefaultTypeInternal;
extern RealignerOptionsDefaultTypeInternal _RealignerOptions_default_instance_;
class WindowSelectorModel;
class WindowSelectorModelDefaultTypeInternal;
extern WindowSelectorModelDefaultTypeInternal _WindowSelectorModel_default_instance_;
class WindowSelectorModel_AlleleCountLinearModel;
class WindowSelectorModel_AlleleCountLinearModelDefaultTypeInternal;
extern WindowSelectorModel_AlleleCountLinearModelDefaultTypeInternal _WindowSelectorModel_AlleleCountLinearModel_default_instance_;
class WindowSelectorModel_VariantReadsThresholdModel;
class WindowSelectorModel_VariantReadsThresholdModelDefaultTypeInternal;
extern WindowSelectorModel_VariantReadsThresholdModelDefaultTypeInternal _WindowSelectorModel_VariantReadsThresholdModel_default_instance_;
class WindowSelectorOptions;
class WindowSelectorOptionsDefaultTypeInternal;
extern WindowSelectorOptionsDefaultTypeInternal _WindowSelectorOptions_default_instance_;
}  // namespace deepvariant
}  // namespace genomics
}  // namespace learning
PROTOBUF_NAMESPACE_OPEN
template<> ::learning::genomics::deepvariant::AlignerOptions* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::AlignerOptions>(Arena*);
template<> ::learning::genomics::deepvariant::CandidateHaplotypes* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::CandidateHaplotypes>(Arena*);
template<> ::learning::genomics::deepvariant::DeBruijnGraphOptions* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::DeBruijnGraphOptions>(Arena*);
template<> ::learning::genomics::deepvariant::Diagnostics* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::Diagnostics>(Arena*);
template<> ::learning::genomics::deepvariant::RealignerOptions* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::RealignerOptions>(Arena*);
template<> ::learning::genomics::deepvariant::WindowSelectorModel* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::WindowSelectorModel>(Arena*);
template<> ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel>(Arena*);
template<> ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel>(Arena*);
template<> ::learning::genomics::deepvariant::WindowSelectorOptions* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::WindowSelectorOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace learning {
namespace genomics {
namespace deepvariant {

enum WindowSelectorModel_ModelType : int {
  WindowSelectorModel_ModelType_UNDEFINED = 0,
  WindowSelectorModel_ModelType_VARIANT_READS = 1,
  WindowSelectorModel_ModelType_ALLELE_COUNT_LINEAR = 2,
  WindowSelectorModel_ModelType_WindowSelectorModel_ModelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WindowSelectorModel_ModelType_WindowSelectorModel_ModelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WindowSelectorModel_ModelType_IsValid(int value);
constexpr WindowSelectorModel_ModelType WindowSelectorModel_ModelType_ModelType_MIN = WindowSelectorModel_ModelType_UNDEFINED;
constexpr WindowSelectorModel_ModelType WindowSelectorModel_ModelType_ModelType_MAX = WindowSelectorModel_ModelType_ALLELE_COUNT_LINEAR;
constexpr int WindowSelectorModel_ModelType_ModelType_ARRAYSIZE = WindowSelectorModel_ModelType_ModelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WindowSelectorModel_ModelType_descriptor();
template<typename T>
inline const std::string& WindowSelectorModel_ModelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WindowSelectorModel_ModelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WindowSelectorModel_ModelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WindowSelectorModel_ModelType_descriptor(), enum_t_value);
}
inline bool WindowSelectorModel_ModelType_Parse(
    const std::string& name, WindowSelectorModel_ModelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WindowSelectorModel_ModelType>(
    WindowSelectorModel_ModelType_descriptor(), name, value);
}
// ===================================================================

class CandidateHaplotypes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.CandidateHaplotypes) */ {
 public:
  CandidateHaplotypes();
  virtual ~CandidateHaplotypes();

  CandidateHaplotypes(const CandidateHaplotypes& from);
  CandidateHaplotypes(CandidateHaplotypes&& from) noexcept
    : CandidateHaplotypes() {
    *this = ::std::move(from);
  }

  inline CandidateHaplotypes& operator=(const CandidateHaplotypes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandidateHaplotypes& operator=(CandidateHaplotypes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CandidateHaplotypes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CandidateHaplotypes* internal_default_instance() {
    return reinterpret_cast<const CandidateHaplotypes*>(
               &_CandidateHaplotypes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CandidateHaplotypes& a, CandidateHaplotypes& b) {
    a.Swap(&b);
  }
  inline void Swap(CandidateHaplotypes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CandidateHaplotypes* New() const final {
    return CreateMaybeMessage<CandidateHaplotypes>(nullptr);
  }

  CandidateHaplotypes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CandidateHaplotypes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CandidateHaplotypes& from);
  void MergeFrom(const CandidateHaplotypes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CandidateHaplotypes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.CandidateHaplotypes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHaplotypesFieldNumber = 2,
    kSpanFieldNumber = 1,
  };
  // repeated string haplotypes = 2;
  int haplotypes_size() const;
  void clear_haplotypes();
  const std::string& haplotypes(int index) const;
  std::string* mutable_haplotypes(int index);
  void set_haplotypes(int index, const std::string& value);
  void set_haplotypes(int index, std::string&& value);
  void set_haplotypes(int index, const char* value);
  void set_haplotypes(int index, const char* value, size_t size);
  std::string* add_haplotypes();
  void add_haplotypes(const std::string& value);
  void add_haplotypes(std::string&& value);
  void add_haplotypes(const char* value);
  void add_haplotypes(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& haplotypes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_haplotypes();

  // .nucleus.genomics.v1.Range span = 1;
  bool has_span() const;
  void clear_span();
  const ::nucleus::genomics::v1::Range& span() const;
  ::nucleus::genomics::v1::Range* release_span();
  ::nucleus::genomics::v1::Range* mutable_span();
  void set_allocated_span(::nucleus::genomics::v1::Range* span);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.CandidateHaplotypes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> haplotypes_;
  ::nucleus::genomics::v1::Range* span_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2frealigner_2eproto;
};
// -------------------------------------------------------------------

class WindowSelectorModel_VariantReadsThresholdModel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel) */ {
 public:
  WindowSelectorModel_VariantReadsThresholdModel();
  virtual ~WindowSelectorModel_VariantReadsThresholdModel();

  WindowSelectorModel_VariantReadsThresholdModel(const WindowSelectorModel_VariantReadsThresholdModel& from);
  WindowSelectorModel_VariantReadsThresholdModel(WindowSelectorModel_VariantReadsThresholdModel&& from) noexcept
    : WindowSelectorModel_VariantReadsThresholdModel() {
    *this = ::std::move(from);
  }

  inline WindowSelectorModel_VariantReadsThresholdModel& operator=(const WindowSelectorModel_VariantReadsThresholdModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowSelectorModel_VariantReadsThresholdModel& operator=(WindowSelectorModel_VariantReadsThresholdModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowSelectorModel_VariantReadsThresholdModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowSelectorModel_VariantReadsThresholdModel* internal_default_instance() {
    return reinterpret_cast<const WindowSelectorModel_VariantReadsThresholdModel*>(
               &_WindowSelectorModel_VariantReadsThresholdModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WindowSelectorModel_VariantReadsThresholdModel& a, WindowSelectorModel_VariantReadsThresholdModel& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowSelectorModel_VariantReadsThresholdModel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowSelectorModel_VariantReadsThresholdModel* New() const final {
    return CreateMaybeMessage<WindowSelectorModel_VariantReadsThresholdModel>(nullptr);
  }

  WindowSelectorModel_VariantReadsThresholdModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowSelectorModel_VariantReadsThresholdModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowSelectorModel_VariantReadsThresholdModel& from);
  void MergeFrom(const WindowSelectorModel_VariantReadsThresholdModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowSelectorModel_VariantReadsThresholdModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinNumSupportingReadsFieldNumber = 1,
    kMaxNumSupportingReadsFieldNumber = 2,
  };
  // int32 min_num_supporting_reads = 1;
  void clear_min_num_supporting_reads();
  ::PROTOBUF_NAMESPACE_ID::int32 min_num_supporting_reads() const;
  void set_min_num_supporting_reads(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 max_num_supporting_reads = 2;
  void clear_max_num_supporting_reads();
  ::PROTOBUF_NAMESPACE_ID::int32 max_num_supporting_reads() const;
  void set_max_num_supporting_reads(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_num_supporting_reads_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_num_supporting_reads_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2frealigner_2eproto;
};
// -------------------------------------------------------------------

class WindowSelectorModel_AlleleCountLinearModel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel) */ {
 public:
  WindowSelectorModel_AlleleCountLinearModel();
  virtual ~WindowSelectorModel_AlleleCountLinearModel();

  WindowSelectorModel_AlleleCountLinearModel(const WindowSelectorModel_AlleleCountLinearModel& from);
  WindowSelectorModel_AlleleCountLinearModel(WindowSelectorModel_AlleleCountLinearModel&& from) noexcept
    : WindowSelectorModel_AlleleCountLinearModel() {
    *this = ::std::move(from);
  }

  inline WindowSelectorModel_AlleleCountLinearModel& operator=(const WindowSelectorModel_AlleleCountLinearModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowSelectorModel_AlleleCountLinearModel& operator=(WindowSelectorModel_AlleleCountLinearModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowSelectorModel_AlleleCountLinearModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowSelectorModel_AlleleCountLinearModel* internal_default_instance() {
    return reinterpret_cast<const WindowSelectorModel_AlleleCountLinearModel*>(
               &_WindowSelectorModel_AlleleCountLinearModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WindowSelectorModel_AlleleCountLinearModel& a, WindowSelectorModel_AlleleCountLinearModel& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowSelectorModel_AlleleCountLinearModel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowSelectorModel_AlleleCountLinearModel* New() const final {
    return CreateMaybeMessage<WindowSelectorModel_AlleleCountLinearModel>(nullptr);
  }

  WindowSelectorModel_AlleleCountLinearModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowSelectorModel_AlleleCountLinearModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowSelectorModel_AlleleCountLinearModel& from);
  void MergeFrom(const WindowSelectorModel_AlleleCountLinearModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowSelectorModel_AlleleCountLinearModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBiasFieldNumber = 1,
    kCoeffSoftClipFieldNumber = 2,
    kCoeffSubstitutionFieldNumber = 3,
    kCoeffInsertionFieldNumber = 4,
    kCoeffDeletionFieldNumber = 5,
    kCoeffReferenceFieldNumber = 6,
    kDecisionBoundaryFieldNumber = 7,
  };
  // float bias = 1;
  void clear_bias();
  float bias() const;
  void set_bias(float value);

  // float coeff_soft_clip = 2;
  void clear_coeff_soft_clip();
  float coeff_soft_clip() const;
  void set_coeff_soft_clip(float value);

  // float coeff_substitution = 3;
  void clear_coeff_substitution();
  float coeff_substitution() const;
  void set_coeff_substitution(float value);

  // float coeff_insertion = 4;
  void clear_coeff_insertion();
  float coeff_insertion() const;
  void set_coeff_insertion(float value);

  // float coeff_deletion = 5;
  void clear_coeff_deletion();
  float coeff_deletion() const;
  void set_coeff_deletion(float value);

  // float coeff_reference = 6;
  void clear_coeff_reference();
  float coeff_reference() const;
  void set_coeff_reference(float value);

  // float decision_boundary = 7;
  void clear_decision_boundary();
  float decision_boundary() const;
  void set_decision_boundary(float value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float bias_;
  float coeff_soft_clip_;
  float coeff_substitution_;
  float coeff_insertion_;
  float coeff_deletion_;
  float coeff_reference_;
  float decision_boundary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2frealigner_2eproto;
};
// -------------------------------------------------------------------

class WindowSelectorModel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.WindowSelectorModel) */ {
 public:
  WindowSelectorModel();
  virtual ~WindowSelectorModel();

  WindowSelectorModel(const WindowSelectorModel& from);
  WindowSelectorModel(WindowSelectorModel&& from) noexcept
    : WindowSelectorModel() {
    *this = ::std::move(from);
  }

  inline WindowSelectorModel& operator=(const WindowSelectorModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowSelectorModel& operator=(WindowSelectorModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowSelectorModel& default_instance();

  enum ModelCase {
    kVariantReadsModel = 2,
    kAlleleCountLinearModel = 3,
    MODEL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowSelectorModel* internal_default_instance() {
    return reinterpret_cast<const WindowSelectorModel*>(
               &_WindowSelectorModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WindowSelectorModel& a, WindowSelectorModel& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowSelectorModel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowSelectorModel* New() const final {
    return CreateMaybeMessage<WindowSelectorModel>(nullptr);
  }

  WindowSelectorModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowSelectorModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowSelectorModel& from);
  void MergeFrom(const WindowSelectorModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowSelectorModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.WindowSelectorModel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef WindowSelectorModel_VariantReadsThresholdModel VariantReadsThresholdModel;
  typedef WindowSelectorModel_AlleleCountLinearModel AlleleCountLinearModel;

  typedef WindowSelectorModel_ModelType ModelType;
  static constexpr ModelType UNDEFINED =
    WindowSelectorModel_ModelType_UNDEFINED;
  static constexpr ModelType VARIANT_READS =
    WindowSelectorModel_ModelType_VARIANT_READS;
  static constexpr ModelType ALLELE_COUNT_LINEAR =
    WindowSelectorModel_ModelType_ALLELE_COUNT_LINEAR;
  static inline bool ModelType_IsValid(int value) {
    return WindowSelectorModel_ModelType_IsValid(value);
  }
  static constexpr ModelType ModelType_MIN =
    WindowSelectorModel_ModelType_ModelType_MIN;
  static constexpr ModelType ModelType_MAX =
    WindowSelectorModel_ModelType_ModelType_MAX;
  static constexpr int ModelType_ARRAYSIZE =
    WindowSelectorModel_ModelType_ModelType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ModelType_descriptor() {
    return WindowSelectorModel_ModelType_descriptor();
  }
  template<typename T>
  static inline const std::string& ModelType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ModelType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ModelType_Name.");
    return WindowSelectorModel_ModelType_Name(enum_t_value);
  }
  static inline bool ModelType_Parse(const std::string& name,
      ModelType* value) {
    return WindowSelectorModel_ModelType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModelTypeFieldNumber = 1,
    kVariantReadsModelFieldNumber = 2,
    kAlleleCountLinearModelFieldNumber = 3,
  };
  // .learning.genomics.deepvariant.WindowSelectorModel.ModelType model_type = 1;
  void clear_model_type();
  ::learning::genomics::deepvariant::WindowSelectorModel_ModelType model_type() const;
  void set_model_type(::learning::genomics::deepvariant::WindowSelectorModel_ModelType value);

  // .learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel variant_reads_model = 2;
  bool has_variant_reads_model() const;
  void clear_variant_reads_model();
  const ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel& variant_reads_model() const;
  ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel* release_variant_reads_model();
  ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel* mutable_variant_reads_model();
  void set_allocated_variant_reads_model(::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel* variant_reads_model);

  // .learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel allele_count_linear_model = 3;
  bool has_allele_count_linear_model() const;
  void clear_allele_count_linear_model();
  const ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel& allele_count_linear_model() const;
  ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel* release_allele_count_linear_model();
  ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel* mutable_allele_count_linear_model();
  void set_allocated_allele_count_linear_model(::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel* allele_count_linear_model);

  void clear_model();
  ModelCase model_case() const;
  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.WindowSelectorModel)
 private:
  class _Internal;
  void set_has_variant_reads_model();
  void set_has_allele_count_linear_model();

  inline bool has_model() const;
  inline void clear_has_model();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int model_type_;
  union ModelUnion {
    ModelUnion() {}
    ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel* variant_reads_model_;
    ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel* allele_count_linear_model_;
  } model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_deepvariant_2fprotos_2frealigner_2eproto;
};
// -------------------------------------------------------------------

class WindowSelectorOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.WindowSelectorOptions) */ {
 public:
  WindowSelectorOptions();
  virtual ~WindowSelectorOptions();

  WindowSelectorOptions(const WindowSelectorOptions& from);
  WindowSelectorOptions(WindowSelectorOptions&& from) noexcept
    : WindowSelectorOptions() {
    *this = ::std::move(from);
  }

  inline WindowSelectorOptions& operator=(const WindowSelectorOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowSelectorOptions& operator=(WindowSelectorOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WindowSelectorOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowSelectorOptions* internal_default_instance() {
    return reinterpret_cast<const WindowSelectorOptions*>(
               &_WindowSelectorOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WindowSelectorOptions& a, WindowSelectorOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowSelectorOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowSelectorOptions* New() const final {
    return CreateMaybeMessage<WindowSelectorOptions>(nullptr);
  }

  WindowSelectorOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowSelectorOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WindowSelectorOptions& from);
  void MergeFrom(const WindowSelectorOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WindowSelectorOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.WindowSelectorOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowSelectorModelFieldNumber = 8,
    kMinNumSupportingReadsFieldNumber = 1,
    kMaxNumSupportingReadsFieldNumber = 2,
    kMinMapqFieldNumber = 3,
    kMinBaseQualityFieldNumber = 4,
    kMinWindowsDistanceFieldNumber = 5,
    kMaxWindowSizeFieldNumber = 6,
    kRegionExpansionInBpFieldNumber = 7,
    kKeepLegacyBehaviorFieldNumber = 9,
  };
  // .learning.genomics.deepvariant.WindowSelectorModel window_selector_model = 8;
  bool has_window_selector_model() const;
  void clear_window_selector_model();
  const ::learning::genomics::deepvariant::WindowSelectorModel& window_selector_model() const;
  ::learning::genomics::deepvariant::WindowSelectorModel* release_window_selector_model();
  ::learning::genomics::deepvariant::WindowSelectorModel* mutable_window_selector_model();
  void set_allocated_window_selector_model(::learning::genomics::deepvariant::WindowSelectorModel* window_selector_model);

  // int32 min_num_supporting_reads = 1;
  void clear_min_num_supporting_reads();
  ::PROTOBUF_NAMESPACE_ID::int32 min_num_supporting_reads() const;
  void set_min_num_supporting_reads(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 max_num_supporting_reads = 2;
  void clear_max_num_supporting_reads();
  ::PROTOBUF_NAMESPACE_ID::int32 max_num_supporting_reads() const;
  void set_max_num_supporting_reads(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 min_mapq = 3;
  void clear_min_mapq();
  ::PROTOBUF_NAMESPACE_ID::int32 min_mapq() const;
  void set_min_mapq(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 min_base_quality = 4;
  void clear_min_base_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 min_base_quality() const;
  void set_min_base_quality(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 min_windows_distance = 5;
  void clear_min_windows_distance();
  ::PROTOBUF_NAMESPACE_ID::int32 min_windows_distance() const;
  void set_min_windows_distance(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 max_window_size = 6;
  void clear_max_window_size();
  ::PROTOBUF_NAMESPACE_ID::int32 max_window_size() const;
  void set_max_window_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 region_expansion_in_bp = 7;
  void clear_region_expansion_in_bp();
  ::PROTOBUF_NAMESPACE_ID::int32 region_expansion_in_bp() const;
  void set_region_expansion_in_bp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool keep_legacy_behavior = 9;
  void clear_keep_legacy_behavior();
  bool keep_legacy_behavior() const;
  void set_keep_legacy_behavior(bool value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.WindowSelectorOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::learning::genomics::deepvariant::WindowSelectorModel* window_selector_model_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_num_supporting_reads_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_num_supporting_reads_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_mapq_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_base_quality_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_windows_distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_window_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 region_expansion_in_bp_;
  bool keep_legacy_behavior_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2frealigner_2eproto;
};
// -------------------------------------------------------------------

class DeBruijnGraphOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.DeBruijnGraphOptions) */ {
 public:
  DeBruijnGraphOptions();
  virtual ~DeBruijnGraphOptions();

  DeBruijnGraphOptions(const DeBruijnGraphOptions& from);
  DeBruijnGraphOptions(DeBruijnGraphOptions&& from) noexcept
    : DeBruijnGraphOptions() {
    *this = ::std::move(from);
  }

  inline DeBruijnGraphOptions& operator=(const DeBruijnGraphOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeBruijnGraphOptions& operator=(DeBruijnGraphOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeBruijnGraphOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeBruijnGraphOptions* internal_default_instance() {
    return reinterpret_cast<const DeBruijnGraphOptions*>(
               &_DeBruijnGraphOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeBruijnGraphOptions& a, DeBruijnGraphOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(DeBruijnGraphOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeBruijnGraphOptions* New() const final {
    return CreateMaybeMessage<DeBruijnGraphOptions>(nullptr);
  }

  DeBruijnGraphOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeBruijnGraphOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeBruijnGraphOptions& from);
  void MergeFrom(const DeBruijnGraphOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeBruijnGraphOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.DeBruijnGraphOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinKFieldNumber = 1,
    kMaxKFieldNumber = 2,
    kStepKFieldNumber = 3,
    kMinMapqFieldNumber = 4,
    kMinBaseQualityFieldNumber = 5,
    kMinEdgeWeightFieldNumber = 6,
    kMaxNumPathsFieldNumber = 7,
  };
  // int32 min_k = 1;
  void clear_min_k();
  ::PROTOBUF_NAMESPACE_ID::int32 min_k() const;
  void set_min_k(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 max_k = 2;
  void clear_max_k();
  ::PROTOBUF_NAMESPACE_ID::int32 max_k() const;
  void set_max_k(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 step_k = 3;
  void clear_step_k();
  ::PROTOBUF_NAMESPACE_ID::int32 step_k() const;
  void set_step_k(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 min_mapq = 4;
  void clear_min_mapq();
  ::PROTOBUF_NAMESPACE_ID::int32 min_mapq() const;
  void set_min_mapq(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 min_base_quality = 5;
  void clear_min_base_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 min_base_quality() const;
  void set_min_base_quality(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 min_edge_weight = 6;
  void clear_min_edge_weight();
  ::PROTOBUF_NAMESPACE_ID::int32 min_edge_weight() const;
  void set_min_edge_weight(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 max_num_paths = 7;
  void clear_max_num_paths();
  ::PROTOBUF_NAMESPACE_ID::int32 max_num_paths() const;
  void set_max_num_paths(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.DeBruijnGraphOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_k_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_k_;
  ::PROTOBUF_NAMESPACE_ID::int32 step_k_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_mapq_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_base_quality_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_edge_weight_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_num_paths_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2frealigner_2eproto;
};
// -------------------------------------------------------------------

class AlignerOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.AlignerOptions) */ {
 public:
  AlignerOptions();
  virtual ~AlignerOptions();

  AlignerOptions(const AlignerOptions& from);
  AlignerOptions(AlignerOptions&& from) noexcept
    : AlignerOptions() {
    *this = ::std::move(from);
  }

  inline AlignerOptions& operator=(const AlignerOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlignerOptions& operator=(AlignerOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlignerOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlignerOptions* internal_default_instance() {
    return reinterpret_cast<const AlignerOptions*>(
               &_AlignerOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AlignerOptions& a, AlignerOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(AlignerOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlignerOptions* New() const final {
    return CreateMaybeMessage<AlignerOptions>(nullptr);
  }

  AlignerOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlignerOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlignerOptions& from);
  void MergeFrom(const AlignerOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlignerOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.AlignerOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchFieldNumber = 1,
    kMismatchFieldNumber = 2,
    kGapOpenFieldNumber = 3,
    kGapExtendFieldNumber = 4,
    kKFieldNumber = 5,
    kErrorRateFieldNumber = 6,
    kReadSizeFieldNumber = 8,
    kKmerSizeFieldNumber = 9,
    kRealignmentSimilarityThresholdFieldNumber = 11,
    kMaxNumOfMismatchesFieldNumber = 10,
    kForceAlignmentFieldNumber = 12,
  };
  // int32 match = 1;
  void clear_match();
  ::PROTOBUF_NAMESPACE_ID::int32 match() const;
  void set_match(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 mismatch = 2;
  void clear_mismatch();
  ::PROTOBUF_NAMESPACE_ID::int32 mismatch() const;
  void set_mismatch(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 gap_open = 3;
  void clear_gap_open();
  ::PROTOBUF_NAMESPACE_ID::int32 gap_open() const;
  void set_gap_open(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 gap_extend = 4;
  void clear_gap_extend();
  ::PROTOBUF_NAMESPACE_ID::int32 gap_extend() const;
  void set_gap_extend(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 k = 5;
  void clear_k();
  ::PROTOBUF_NAMESPACE_ID::int32 k() const;
  void set_k(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float error_rate = 6;
  void clear_error_rate();
  float error_rate() const;
  void set_error_rate(float value);

  // int32 read_size = 8;
  void clear_read_size();
  ::PROTOBUF_NAMESPACE_ID::int32 read_size() const;
  void set_read_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 kmer_size = 9;
  void clear_kmer_size();
  ::PROTOBUF_NAMESPACE_ID::int32 kmer_size() const;
  void set_kmer_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double realignment_similarity_threshold = 11;
  void clear_realignment_similarity_threshold();
  double realignment_similarity_threshold() const;
  void set_realignment_similarity_threshold(double value);

  // int32 max_num_of_mismatches = 10;
  void clear_max_num_of_mismatches();
  ::PROTOBUF_NAMESPACE_ID::int32 max_num_of_mismatches() const;
  void set_max_num_of_mismatches(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool force_alignment = 12;
  void clear_force_alignment();
  bool force_alignment() const;
  void set_force_alignment(bool value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.AlignerOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 match_;
  ::PROTOBUF_NAMESPACE_ID::int32 mismatch_;
  ::PROTOBUF_NAMESPACE_ID::int32 gap_open_;
  ::PROTOBUF_NAMESPACE_ID::int32 gap_extend_;
  ::PROTOBUF_NAMESPACE_ID::int32 k_;
  float error_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 read_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 kmer_size_;
  double realignment_similarity_threshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_num_of_mismatches_;
  bool force_alignment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2frealigner_2eproto;
};
// -------------------------------------------------------------------

class Diagnostics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.Diagnostics) */ {
 public:
  Diagnostics();
  virtual ~Diagnostics();

  Diagnostics(const Diagnostics& from);
  Diagnostics(Diagnostics&& from) noexcept
    : Diagnostics() {
    *this = ::std::move(from);
  }

  inline Diagnostics& operator=(const Diagnostics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Diagnostics& operator=(Diagnostics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Diagnostics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Diagnostics* internal_default_instance() {
    return reinterpret_cast<const Diagnostics*>(
               &_Diagnostics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Diagnostics& a, Diagnostics& b) {
    a.Swap(&b);
  }
  inline void Swap(Diagnostics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Diagnostics* New() const final {
    return CreateMaybeMessage<Diagnostics>(nullptr);
  }

  Diagnostics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Diagnostics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Diagnostics& from);
  void MergeFrom(const Diagnostics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Diagnostics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.Diagnostics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputRootFieldNumber = 2,
    kEnabledFieldNumber = 1,
    kEmitRealignedReadsFieldNumber = 3,
  };
  // string output_root = 2;
  void clear_output_root();
  const std::string& output_root() const;
  void set_output_root(const std::string& value);
  void set_output_root(std::string&& value);
  void set_output_root(const char* value);
  void set_output_root(const char* value, size_t size);
  std::string* mutable_output_root();
  std::string* release_output_root();
  void set_allocated_output_root(std::string* output_root);

  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);

  // bool emit_realigned_reads = 3;
  void clear_emit_realigned_reads();
  bool emit_realigned_reads() const;
  void set_emit_realigned_reads(bool value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.Diagnostics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_root_;
  bool enabled_;
  bool emit_realigned_reads_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2frealigner_2eproto;
};
// -------------------------------------------------------------------

class RealignerOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.RealignerOptions) */ {
 public:
  RealignerOptions();
  virtual ~RealignerOptions();

  RealignerOptions(const RealignerOptions& from);
  RealignerOptions(RealignerOptions&& from) noexcept
    : RealignerOptions() {
    *this = ::std::move(from);
  }

  inline RealignerOptions& operator=(const RealignerOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline RealignerOptions& operator=(RealignerOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RealignerOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RealignerOptions* internal_default_instance() {
    return reinterpret_cast<const RealignerOptions*>(
               &_RealignerOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RealignerOptions& a, RealignerOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(RealignerOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RealignerOptions* New() const final {
    return CreateMaybeMessage<RealignerOptions>(nullptr);
  }

  RealignerOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RealignerOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RealignerOptions& from);
  void MergeFrom(const RealignerOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RealignerOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.RealignerOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2frealigner_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWsConfigFieldNumber = 1,
    kDbgConfigFieldNumber = 2,
    kAlnConfigFieldNumber = 3,
    kDiagnosticsFieldNumber = 4,
    kSplitSkipReadsFieldNumber = 5,
    kNormalizeReadsFieldNumber = 6,
  };
  // .learning.genomics.deepvariant.WindowSelectorOptions ws_config = 1;
  bool has_ws_config() const;
  void clear_ws_config();
  const ::learning::genomics::deepvariant::WindowSelectorOptions& ws_config() const;
  ::learning::genomics::deepvariant::WindowSelectorOptions* release_ws_config();
  ::learning::genomics::deepvariant::WindowSelectorOptions* mutable_ws_config();
  void set_allocated_ws_config(::learning::genomics::deepvariant::WindowSelectorOptions* ws_config);

  // .learning.genomics.deepvariant.DeBruijnGraphOptions dbg_config = 2;
  bool has_dbg_config() const;
  void clear_dbg_config();
  const ::learning::genomics::deepvariant::DeBruijnGraphOptions& dbg_config() const;
  ::learning::genomics::deepvariant::DeBruijnGraphOptions* release_dbg_config();
  ::learning::genomics::deepvariant::DeBruijnGraphOptions* mutable_dbg_config();
  void set_allocated_dbg_config(::learning::genomics::deepvariant::DeBruijnGraphOptions* dbg_config);

  // .learning.genomics.deepvariant.AlignerOptions aln_config = 3;
  bool has_aln_config() const;
  void clear_aln_config();
  const ::learning::genomics::deepvariant::AlignerOptions& aln_config() const;
  ::learning::genomics::deepvariant::AlignerOptions* release_aln_config();
  ::learning::genomics::deepvariant::AlignerOptions* mutable_aln_config();
  void set_allocated_aln_config(::learning::genomics::deepvariant::AlignerOptions* aln_config);

  // .learning.genomics.deepvariant.Diagnostics diagnostics = 4;
  bool has_diagnostics() const;
  void clear_diagnostics();
  const ::learning::genomics::deepvariant::Diagnostics& diagnostics() const;
  ::learning::genomics::deepvariant::Diagnostics* release_diagnostics();
  ::learning::genomics::deepvariant::Diagnostics* mutable_diagnostics();
  void set_allocated_diagnostics(::learning::genomics::deepvariant::Diagnostics* diagnostics);

  // bool split_skip_reads = 5;
  void clear_split_skip_reads();
  bool split_skip_reads() const;
  void set_split_skip_reads(bool value);

  // bool normalize_reads = 6;
  void clear_normalize_reads();
  bool normalize_reads() const;
  void set_normalize_reads(bool value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.RealignerOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::learning::genomics::deepvariant::WindowSelectorOptions* ws_config_;
  ::learning::genomics::deepvariant::DeBruijnGraphOptions* dbg_config_;
  ::learning::genomics::deepvariant::AlignerOptions* aln_config_;
  ::learning::genomics::deepvariant::Diagnostics* diagnostics_;
  bool split_skip_reads_;
  bool normalize_reads_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2frealigner_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CandidateHaplotypes

// .nucleus.genomics.v1.Range span = 1;
inline bool CandidateHaplotypes::has_span() const {
  return this != internal_default_instance() && span_ != nullptr;
}
inline const ::nucleus::genomics::v1::Range& CandidateHaplotypes::span() const {
  const ::nucleus::genomics::v1::Range* p = span_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.CandidateHaplotypes.span)
  return p != nullptr ? *p : *reinterpret_cast<const ::nucleus::genomics::v1::Range*>(
      &::nucleus::genomics::v1::_Range_default_instance_);
}
inline ::nucleus::genomics::v1::Range* CandidateHaplotypes::release_span() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.CandidateHaplotypes.span)
  
  ::nucleus::genomics::v1::Range* temp = span_;
  span_ = nullptr;
  return temp;
}
inline ::nucleus::genomics::v1::Range* CandidateHaplotypes::mutable_span() {
  
  if (span_ == nullptr) {
    auto* p = CreateMaybeMessage<::nucleus::genomics::v1::Range>(GetArenaNoVirtual());
    span_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.CandidateHaplotypes.span)
  return span_;
}
inline void CandidateHaplotypes::set_allocated_span(::nucleus::genomics::v1::Range* span) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(span_);
  }
  if (span) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      span = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, span, submessage_arena);
    }
    
  } else {
    
  }
  span_ = span;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.CandidateHaplotypes.span)
}

// repeated string haplotypes = 2;
inline int CandidateHaplotypes::haplotypes_size() const {
  return haplotypes_.size();
}
inline void CandidateHaplotypes::clear_haplotypes() {
  haplotypes_.Clear();
}
inline const std::string& CandidateHaplotypes::haplotypes(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.CandidateHaplotypes.haplotypes)
  return haplotypes_.Get(index);
}
inline std::string* CandidateHaplotypes::mutable_haplotypes(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.CandidateHaplotypes.haplotypes)
  return haplotypes_.Mutable(index);
}
inline void CandidateHaplotypes::set_haplotypes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.CandidateHaplotypes.haplotypes)
  haplotypes_.Mutable(index)->assign(value);
}
inline void CandidateHaplotypes::set_haplotypes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.CandidateHaplotypes.haplotypes)
  haplotypes_.Mutable(index)->assign(std::move(value));
}
inline void CandidateHaplotypes::set_haplotypes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  haplotypes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.CandidateHaplotypes.haplotypes)
}
inline void CandidateHaplotypes::set_haplotypes(int index, const char* value, size_t size) {
  haplotypes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.CandidateHaplotypes.haplotypes)
}
inline std::string* CandidateHaplotypes::add_haplotypes() {
  // @@protoc_insertion_point(field_add_mutable:learning.genomics.deepvariant.CandidateHaplotypes.haplotypes)
  return haplotypes_.Add();
}
inline void CandidateHaplotypes::add_haplotypes(const std::string& value) {
  haplotypes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.CandidateHaplotypes.haplotypes)
}
inline void CandidateHaplotypes::add_haplotypes(std::string&& value) {
  haplotypes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.CandidateHaplotypes.haplotypes)
}
inline void CandidateHaplotypes::add_haplotypes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  haplotypes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:learning.genomics.deepvariant.CandidateHaplotypes.haplotypes)
}
inline void CandidateHaplotypes::add_haplotypes(const char* value, size_t size) {
  haplotypes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:learning.genomics.deepvariant.CandidateHaplotypes.haplotypes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CandidateHaplotypes::haplotypes() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.CandidateHaplotypes.haplotypes)
  return haplotypes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CandidateHaplotypes::mutable_haplotypes() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.CandidateHaplotypes.haplotypes)
  return &haplotypes_;
}

// -------------------------------------------------------------------

// WindowSelectorModel_VariantReadsThresholdModel

// int32 min_num_supporting_reads = 1;
inline void WindowSelectorModel_VariantReadsThresholdModel::clear_min_num_supporting_reads() {
  min_num_supporting_reads_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowSelectorModel_VariantReadsThresholdModel::min_num_supporting_reads() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel.min_num_supporting_reads)
  return min_num_supporting_reads_;
}
inline void WindowSelectorModel_VariantReadsThresholdModel::set_min_num_supporting_reads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_num_supporting_reads_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel.min_num_supporting_reads)
}

// int32 max_num_supporting_reads = 2;
inline void WindowSelectorModel_VariantReadsThresholdModel::clear_max_num_supporting_reads() {
  max_num_supporting_reads_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowSelectorModel_VariantReadsThresholdModel::max_num_supporting_reads() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel.max_num_supporting_reads)
  return max_num_supporting_reads_;
}
inline void WindowSelectorModel_VariantReadsThresholdModel::set_max_num_supporting_reads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_num_supporting_reads_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel.max_num_supporting_reads)
}

// -------------------------------------------------------------------

// WindowSelectorModel_AlleleCountLinearModel

// float bias = 1;
inline void WindowSelectorModel_AlleleCountLinearModel::clear_bias() {
  bias_ = 0;
}
inline float WindowSelectorModel_AlleleCountLinearModel::bias() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel.bias)
  return bias_;
}
inline void WindowSelectorModel_AlleleCountLinearModel::set_bias(float value) {
  
  bias_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel.bias)
}

// float coeff_soft_clip = 2;
inline void WindowSelectorModel_AlleleCountLinearModel::clear_coeff_soft_clip() {
  coeff_soft_clip_ = 0;
}
inline float WindowSelectorModel_AlleleCountLinearModel::coeff_soft_clip() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel.coeff_soft_clip)
  return coeff_soft_clip_;
}
inline void WindowSelectorModel_AlleleCountLinearModel::set_coeff_soft_clip(float value) {
  
  coeff_soft_clip_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel.coeff_soft_clip)
}

// float coeff_substitution = 3;
inline void WindowSelectorModel_AlleleCountLinearModel::clear_coeff_substitution() {
  coeff_substitution_ = 0;
}
inline float WindowSelectorModel_AlleleCountLinearModel::coeff_substitution() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel.coeff_substitution)
  return coeff_substitution_;
}
inline void WindowSelectorModel_AlleleCountLinearModel::set_coeff_substitution(float value) {
  
  coeff_substitution_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel.coeff_substitution)
}

// float coeff_insertion = 4;
inline void WindowSelectorModel_AlleleCountLinearModel::clear_coeff_insertion() {
  coeff_insertion_ = 0;
}
inline float WindowSelectorModel_AlleleCountLinearModel::coeff_insertion() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel.coeff_insertion)
  return coeff_insertion_;
}
inline void WindowSelectorModel_AlleleCountLinearModel::set_coeff_insertion(float value) {
  
  coeff_insertion_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel.coeff_insertion)
}

// float coeff_deletion = 5;
inline void WindowSelectorModel_AlleleCountLinearModel::clear_coeff_deletion() {
  coeff_deletion_ = 0;
}
inline float WindowSelectorModel_AlleleCountLinearModel::coeff_deletion() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel.coeff_deletion)
  return coeff_deletion_;
}
inline void WindowSelectorModel_AlleleCountLinearModel::set_coeff_deletion(float value) {
  
  coeff_deletion_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel.coeff_deletion)
}

// float coeff_reference = 6;
inline void WindowSelectorModel_AlleleCountLinearModel::clear_coeff_reference() {
  coeff_reference_ = 0;
}
inline float WindowSelectorModel_AlleleCountLinearModel::coeff_reference() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel.coeff_reference)
  return coeff_reference_;
}
inline void WindowSelectorModel_AlleleCountLinearModel::set_coeff_reference(float value) {
  
  coeff_reference_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel.coeff_reference)
}

// float decision_boundary = 7;
inline void WindowSelectorModel_AlleleCountLinearModel::clear_decision_boundary() {
  decision_boundary_ = 0;
}
inline float WindowSelectorModel_AlleleCountLinearModel::decision_boundary() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel.decision_boundary)
  return decision_boundary_;
}
inline void WindowSelectorModel_AlleleCountLinearModel::set_decision_boundary(float value) {
  
  decision_boundary_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel.decision_boundary)
}

// -------------------------------------------------------------------

// WindowSelectorModel

// .learning.genomics.deepvariant.WindowSelectorModel.ModelType model_type = 1;
inline void WindowSelectorModel::clear_model_type() {
  model_type_ = 0;
}
inline ::learning::genomics::deepvariant::WindowSelectorModel_ModelType WindowSelectorModel::model_type() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorModel.model_type)
  return static_cast< ::learning::genomics::deepvariant::WindowSelectorModel_ModelType >(model_type_);
}
inline void WindowSelectorModel::set_model_type(::learning::genomics::deepvariant::WindowSelectorModel_ModelType value) {
  
  model_type_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorModel.model_type)
}

// .learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel variant_reads_model = 2;
inline bool WindowSelectorModel::has_variant_reads_model() const {
  return model_case() == kVariantReadsModel;
}
inline void WindowSelectorModel::set_has_variant_reads_model() {
  _oneof_case_[0] = kVariantReadsModel;
}
inline void WindowSelectorModel::clear_variant_reads_model() {
  if (has_variant_reads_model()) {
    delete model_.variant_reads_model_;
    clear_has_model();
  }
}
inline ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel* WindowSelectorModel::release_variant_reads_model() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.WindowSelectorModel.variant_reads_model)
  if (has_variant_reads_model()) {
    clear_has_model();
      ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel* temp = model_.variant_reads_model_;
    model_.variant_reads_model_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel& WindowSelectorModel::variant_reads_model() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorModel.variant_reads_model)
  return has_variant_reads_model()
      ? *model_.variant_reads_model_
      : *reinterpret_cast< ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel*>(&::learning::genomics::deepvariant::_WindowSelectorModel_VariantReadsThresholdModel_default_instance_);
}
inline ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel* WindowSelectorModel::mutable_variant_reads_model() {
  if (!has_variant_reads_model()) {
    clear_model();
    set_has_variant_reads_model();
    model_.variant_reads_model_ = CreateMaybeMessage< ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.WindowSelectorModel.variant_reads_model)
  return model_.variant_reads_model_;
}

// .learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel allele_count_linear_model = 3;
inline bool WindowSelectorModel::has_allele_count_linear_model() const {
  return model_case() == kAlleleCountLinearModel;
}
inline void WindowSelectorModel::set_has_allele_count_linear_model() {
  _oneof_case_[0] = kAlleleCountLinearModel;
}
inline void WindowSelectorModel::clear_allele_count_linear_model() {
  if (has_allele_count_linear_model()) {
    delete model_.allele_count_linear_model_;
    clear_has_model();
  }
}
inline ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel* WindowSelectorModel::release_allele_count_linear_model() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.WindowSelectorModel.allele_count_linear_model)
  if (has_allele_count_linear_model()) {
    clear_has_model();
      ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel* temp = model_.allele_count_linear_model_;
    model_.allele_count_linear_model_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel& WindowSelectorModel::allele_count_linear_model() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorModel.allele_count_linear_model)
  return has_allele_count_linear_model()
      ? *model_.allele_count_linear_model_
      : *reinterpret_cast< ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel*>(&::learning::genomics::deepvariant::_WindowSelectorModel_AlleleCountLinearModel_default_instance_);
}
inline ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel* WindowSelectorModel::mutable_allele_count_linear_model() {
  if (!has_allele_count_linear_model()) {
    clear_model();
    set_has_allele_count_linear_model();
    model_.allele_count_linear_model_ = CreateMaybeMessage< ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.WindowSelectorModel.allele_count_linear_model)
  return model_.allele_count_linear_model_;
}

inline bool WindowSelectorModel::has_model() const {
  return model_case() != MODEL_NOT_SET;
}
inline void WindowSelectorModel::clear_has_model() {
  _oneof_case_[0] = MODEL_NOT_SET;
}
inline WindowSelectorModel::ModelCase WindowSelectorModel::model_case() const {
  return WindowSelectorModel::ModelCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WindowSelectorOptions

// int32 min_num_supporting_reads = 1;
inline void WindowSelectorOptions::clear_min_num_supporting_reads() {
  min_num_supporting_reads_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowSelectorOptions::min_num_supporting_reads() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorOptions.min_num_supporting_reads)
  return min_num_supporting_reads_;
}
inline void WindowSelectorOptions::set_min_num_supporting_reads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_num_supporting_reads_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorOptions.min_num_supporting_reads)
}

// int32 max_num_supporting_reads = 2;
inline void WindowSelectorOptions::clear_max_num_supporting_reads() {
  max_num_supporting_reads_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowSelectorOptions::max_num_supporting_reads() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorOptions.max_num_supporting_reads)
  return max_num_supporting_reads_;
}
inline void WindowSelectorOptions::set_max_num_supporting_reads(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_num_supporting_reads_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorOptions.max_num_supporting_reads)
}

// int32 min_mapq = 3;
inline void WindowSelectorOptions::clear_min_mapq() {
  min_mapq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowSelectorOptions::min_mapq() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorOptions.min_mapq)
  return min_mapq_;
}
inline void WindowSelectorOptions::set_min_mapq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_mapq_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorOptions.min_mapq)
}

// int32 min_base_quality = 4;
inline void WindowSelectorOptions::clear_min_base_quality() {
  min_base_quality_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowSelectorOptions::min_base_quality() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorOptions.min_base_quality)
  return min_base_quality_;
}
inline void WindowSelectorOptions::set_min_base_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_base_quality_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorOptions.min_base_quality)
}

// int32 min_windows_distance = 5;
inline void WindowSelectorOptions::clear_min_windows_distance() {
  min_windows_distance_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowSelectorOptions::min_windows_distance() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorOptions.min_windows_distance)
  return min_windows_distance_;
}
inline void WindowSelectorOptions::set_min_windows_distance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_windows_distance_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorOptions.min_windows_distance)
}

// int32 max_window_size = 6;
inline void WindowSelectorOptions::clear_max_window_size() {
  max_window_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowSelectorOptions::max_window_size() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorOptions.max_window_size)
  return max_window_size_;
}
inline void WindowSelectorOptions::set_max_window_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_window_size_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorOptions.max_window_size)
}

// int32 region_expansion_in_bp = 7;
inline void WindowSelectorOptions::clear_region_expansion_in_bp() {
  region_expansion_in_bp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WindowSelectorOptions::region_expansion_in_bp() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorOptions.region_expansion_in_bp)
  return region_expansion_in_bp_;
}
inline void WindowSelectorOptions::set_region_expansion_in_bp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  region_expansion_in_bp_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorOptions.region_expansion_in_bp)
}

// .learning.genomics.deepvariant.WindowSelectorModel window_selector_model = 8;
inline bool WindowSelectorOptions::has_window_selector_model() const {
  return this != internal_default_instance() && window_selector_model_ != nullptr;
}
inline void WindowSelectorOptions::clear_window_selector_model() {
  if (GetArenaNoVirtual() == nullptr && window_selector_model_ != nullptr) {
    delete window_selector_model_;
  }
  window_selector_model_ = nullptr;
}
inline const ::learning::genomics::deepvariant::WindowSelectorModel& WindowSelectorOptions::window_selector_model() const {
  const ::learning::genomics::deepvariant::WindowSelectorModel* p = window_selector_model_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorOptions.window_selector_model)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::WindowSelectorModel*>(
      &::learning::genomics::deepvariant::_WindowSelectorModel_default_instance_);
}
inline ::learning::genomics::deepvariant::WindowSelectorModel* WindowSelectorOptions::release_window_selector_model() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.WindowSelectorOptions.window_selector_model)
  
  ::learning::genomics::deepvariant::WindowSelectorModel* temp = window_selector_model_;
  window_selector_model_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::WindowSelectorModel* WindowSelectorOptions::mutable_window_selector_model() {
  
  if (window_selector_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::WindowSelectorModel>(GetArenaNoVirtual());
    window_selector_model_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.WindowSelectorOptions.window_selector_model)
  return window_selector_model_;
}
inline void WindowSelectorOptions::set_allocated_window_selector_model(::learning::genomics::deepvariant::WindowSelectorModel* window_selector_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_selector_model_;
  }
  if (window_selector_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window_selector_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, window_selector_model, submessage_arena);
    }
    
  } else {
    
  }
  window_selector_model_ = window_selector_model;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.WindowSelectorOptions.window_selector_model)
}

// bool keep_legacy_behavior = 9;
inline void WindowSelectorOptions::clear_keep_legacy_behavior() {
  keep_legacy_behavior_ = false;
}
inline bool WindowSelectorOptions::keep_legacy_behavior() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.WindowSelectorOptions.keep_legacy_behavior)
  return keep_legacy_behavior_;
}
inline void WindowSelectorOptions::set_keep_legacy_behavior(bool value) {
  
  keep_legacy_behavior_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.WindowSelectorOptions.keep_legacy_behavior)
}

// -------------------------------------------------------------------

// DeBruijnGraphOptions

// int32 min_k = 1;
inline void DeBruijnGraphOptions::clear_min_k() {
  min_k_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeBruijnGraphOptions::min_k() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeBruijnGraphOptions.min_k)
  return min_k_;
}
inline void DeBruijnGraphOptions::set_min_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_k_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeBruijnGraphOptions.min_k)
}

// int32 max_k = 2;
inline void DeBruijnGraphOptions::clear_max_k() {
  max_k_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeBruijnGraphOptions::max_k() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeBruijnGraphOptions.max_k)
  return max_k_;
}
inline void DeBruijnGraphOptions::set_max_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_k_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeBruijnGraphOptions.max_k)
}

// int32 step_k = 3;
inline void DeBruijnGraphOptions::clear_step_k() {
  step_k_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeBruijnGraphOptions::step_k() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeBruijnGraphOptions.step_k)
  return step_k_;
}
inline void DeBruijnGraphOptions::set_step_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  step_k_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeBruijnGraphOptions.step_k)
}

// int32 min_mapq = 4;
inline void DeBruijnGraphOptions::clear_min_mapq() {
  min_mapq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeBruijnGraphOptions::min_mapq() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeBruijnGraphOptions.min_mapq)
  return min_mapq_;
}
inline void DeBruijnGraphOptions::set_min_mapq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_mapq_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeBruijnGraphOptions.min_mapq)
}

// int32 min_base_quality = 5;
inline void DeBruijnGraphOptions::clear_min_base_quality() {
  min_base_quality_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeBruijnGraphOptions::min_base_quality() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeBruijnGraphOptions.min_base_quality)
  return min_base_quality_;
}
inline void DeBruijnGraphOptions::set_min_base_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_base_quality_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeBruijnGraphOptions.min_base_quality)
}

// int32 min_edge_weight = 6;
inline void DeBruijnGraphOptions::clear_min_edge_weight() {
  min_edge_weight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeBruijnGraphOptions::min_edge_weight() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeBruijnGraphOptions.min_edge_weight)
  return min_edge_weight_;
}
inline void DeBruijnGraphOptions::set_min_edge_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_edge_weight_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeBruijnGraphOptions.min_edge_weight)
}

// int32 max_num_paths = 7;
inline void DeBruijnGraphOptions::clear_max_num_paths() {
  max_num_paths_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeBruijnGraphOptions::max_num_paths() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeBruijnGraphOptions.max_num_paths)
  return max_num_paths_;
}
inline void DeBruijnGraphOptions::set_max_num_paths(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_num_paths_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeBruijnGraphOptions.max_num_paths)
}

// -------------------------------------------------------------------

// AlignerOptions

// int32 match = 1;
inline void AlignerOptions::clear_match() {
  match_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlignerOptions::match() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlignerOptions.match)
  return match_;
}
inline void AlignerOptions::set_match(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  match_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlignerOptions.match)
}

// int32 mismatch = 2;
inline void AlignerOptions::clear_mismatch() {
  mismatch_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlignerOptions::mismatch() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlignerOptions.mismatch)
  return mismatch_;
}
inline void AlignerOptions::set_mismatch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mismatch_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlignerOptions.mismatch)
}

// int32 gap_open = 3;
inline void AlignerOptions::clear_gap_open() {
  gap_open_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlignerOptions::gap_open() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlignerOptions.gap_open)
  return gap_open_;
}
inline void AlignerOptions::set_gap_open(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gap_open_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlignerOptions.gap_open)
}

// int32 gap_extend = 4;
inline void AlignerOptions::clear_gap_extend() {
  gap_extend_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlignerOptions::gap_extend() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlignerOptions.gap_extend)
  return gap_extend_;
}
inline void AlignerOptions::set_gap_extend(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gap_extend_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlignerOptions.gap_extend)
}

// int32 k = 5;
inline void AlignerOptions::clear_k() {
  k_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlignerOptions::k() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlignerOptions.k)
  return k_;
}
inline void AlignerOptions::set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  k_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlignerOptions.k)
}

// float error_rate = 6;
inline void AlignerOptions::clear_error_rate() {
  error_rate_ = 0;
}
inline float AlignerOptions::error_rate() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlignerOptions.error_rate)
  return error_rate_;
}
inline void AlignerOptions::set_error_rate(float value) {
  
  error_rate_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlignerOptions.error_rate)
}

// int32 read_size = 8;
inline void AlignerOptions::clear_read_size() {
  read_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlignerOptions::read_size() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlignerOptions.read_size)
  return read_size_;
}
inline void AlignerOptions::set_read_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  read_size_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlignerOptions.read_size)
}

// int32 kmer_size = 9;
inline void AlignerOptions::clear_kmer_size() {
  kmer_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlignerOptions::kmer_size() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlignerOptions.kmer_size)
  return kmer_size_;
}
inline void AlignerOptions::set_kmer_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kmer_size_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlignerOptions.kmer_size)
}

// int32 max_num_of_mismatches = 10;
inline void AlignerOptions::clear_max_num_of_mismatches() {
  max_num_of_mismatches_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlignerOptions::max_num_of_mismatches() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlignerOptions.max_num_of_mismatches)
  return max_num_of_mismatches_;
}
inline void AlignerOptions::set_max_num_of_mismatches(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_num_of_mismatches_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlignerOptions.max_num_of_mismatches)
}

// double realignment_similarity_threshold = 11;
inline void AlignerOptions::clear_realignment_similarity_threshold() {
  realignment_similarity_threshold_ = 0;
}
inline double AlignerOptions::realignment_similarity_threshold() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlignerOptions.realignment_similarity_threshold)
  return realignment_similarity_threshold_;
}
inline void AlignerOptions::set_realignment_similarity_threshold(double value) {
  
  realignment_similarity_threshold_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlignerOptions.realignment_similarity_threshold)
}

// bool force_alignment = 12;
inline void AlignerOptions::clear_force_alignment() {
  force_alignment_ = false;
}
inline bool AlignerOptions::force_alignment() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlignerOptions.force_alignment)
  return force_alignment_;
}
inline void AlignerOptions::set_force_alignment(bool value) {
  
  force_alignment_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlignerOptions.force_alignment)
}

// -------------------------------------------------------------------

// Diagnostics

// bool enabled = 1;
inline void Diagnostics::clear_enabled() {
  enabled_ = false;
}
inline bool Diagnostics::enabled() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.Diagnostics.enabled)
  return enabled_;
}
inline void Diagnostics::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.Diagnostics.enabled)
}

// string output_root = 2;
inline void Diagnostics::clear_output_root() {
  output_root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Diagnostics::output_root() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.Diagnostics.output_root)
  return output_root_.GetNoArena();
}
inline void Diagnostics::set_output_root(const std::string& value) {
  
  output_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.Diagnostics.output_root)
}
inline void Diagnostics::set_output_root(std::string&& value) {
  
  output_root_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.Diagnostics.output_root)
}
inline void Diagnostics::set_output_root(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  output_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.Diagnostics.output_root)
}
inline void Diagnostics::set_output_root(const char* value, size_t size) {
  
  output_root_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.Diagnostics.output_root)
}
inline std::string* Diagnostics::mutable_output_root() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.Diagnostics.output_root)
  return output_root_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Diagnostics::release_output_root() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.Diagnostics.output_root)
  
  return output_root_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Diagnostics::set_allocated_output_root(std::string* output_root) {
  if (output_root != nullptr) {
    
  } else {
    
  }
  output_root_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), output_root);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.Diagnostics.output_root)
}

// bool emit_realigned_reads = 3;
inline void Diagnostics::clear_emit_realigned_reads() {
  emit_realigned_reads_ = false;
}
inline bool Diagnostics::emit_realigned_reads() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.Diagnostics.emit_realigned_reads)
  return emit_realigned_reads_;
}
inline void Diagnostics::set_emit_realigned_reads(bool value) {
  
  emit_realigned_reads_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.Diagnostics.emit_realigned_reads)
}

// -------------------------------------------------------------------

// RealignerOptions

// .learning.genomics.deepvariant.WindowSelectorOptions ws_config = 1;
inline bool RealignerOptions::has_ws_config() const {
  return this != internal_default_instance() && ws_config_ != nullptr;
}
inline void RealignerOptions::clear_ws_config() {
  if (GetArenaNoVirtual() == nullptr && ws_config_ != nullptr) {
    delete ws_config_;
  }
  ws_config_ = nullptr;
}
inline const ::learning::genomics::deepvariant::WindowSelectorOptions& RealignerOptions::ws_config() const {
  const ::learning::genomics::deepvariant::WindowSelectorOptions* p = ws_config_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.RealignerOptions.ws_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::WindowSelectorOptions*>(
      &::learning::genomics::deepvariant::_WindowSelectorOptions_default_instance_);
}
inline ::learning::genomics::deepvariant::WindowSelectorOptions* RealignerOptions::release_ws_config() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.RealignerOptions.ws_config)
  
  ::learning::genomics::deepvariant::WindowSelectorOptions* temp = ws_config_;
  ws_config_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::WindowSelectorOptions* RealignerOptions::mutable_ws_config() {
  
  if (ws_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::WindowSelectorOptions>(GetArenaNoVirtual());
    ws_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.RealignerOptions.ws_config)
  return ws_config_;
}
inline void RealignerOptions::set_allocated_ws_config(::learning::genomics::deepvariant::WindowSelectorOptions* ws_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ws_config_;
  }
  if (ws_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ws_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ws_config, submessage_arena);
    }
    
  } else {
    
  }
  ws_config_ = ws_config;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.RealignerOptions.ws_config)
}

// .learning.genomics.deepvariant.DeBruijnGraphOptions dbg_config = 2;
inline bool RealignerOptions::has_dbg_config() const {
  return this != internal_default_instance() && dbg_config_ != nullptr;
}
inline void RealignerOptions::clear_dbg_config() {
  if (GetArenaNoVirtual() == nullptr && dbg_config_ != nullptr) {
    delete dbg_config_;
  }
  dbg_config_ = nullptr;
}
inline const ::learning::genomics::deepvariant::DeBruijnGraphOptions& RealignerOptions::dbg_config() const {
  const ::learning::genomics::deepvariant::DeBruijnGraphOptions* p = dbg_config_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.RealignerOptions.dbg_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::DeBruijnGraphOptions*>(
      &::learning::genomics::deepvariant::_DeBruijnGraphOptions_default_instance_);
}
inline ::learning::genomics::deepvariant::DeBruijnGraphOptions* RealignerOptions::release_dbg_config() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.RealignerOptions.dbg_config)
  
  ::learning::genomics::deepvariant::DeBruijnGraphOptions* temp = dbg_config_;
  dbg_config_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::DeBruijnGraphOptions* RealignerOptions::mutable_dbg_config() {
  
  if (dbg_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::DeBruijnGraphOptions>(GetArenaNoVirtual());
    dbg_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.RealignerOptions.dbg_config)
  return dbg_config_;
}
inline void RealignerOptions::set_allocated_dbg_config(::learning::genomics::deepvariant::DeBruijnGraphOptions* dbg_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dbg_config_;
  }
  if (dbg_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dbg_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dbg_config, submessage_arena);
    }
    
  } else {
    
  }
  dbg_config_ = dbg_config;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.RealignerOptions.dbg_config)
}

// .learning.genomics.deepvariant.AlignerOptions aln_config = 3;
inline bool RealignerOptions::has_aln_config() const {
  return this != internal_default_instance() && aln_config_ != nullptr;
}
inline void RealignerOptions::clear_aln_config() {
  if (GetArenaNoVirtual() == nullptr && aln_config_ != nullptr) {
    delete aln_config_;
  }
  aln_config_ = nullptr;
}
inline const ::learning::genomics::deepvariant::AlignerOptions& RealignerOptions::aln_config() const {
  const ::learning::genomics::deepvariant::AlignerOptions* p = aln_config_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.RealignerOptions.aln_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::AlignerOptions*>(
      &::learning::genomics::deepvariant::_AlignerOptions_default_instance_);
}
inline ::learning::genomics::deepvariant::AlignerOptions* RealignerOptions::release_aln_config() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.RealignerOptions.aln_config)
  
  ::learning::genomics::deepvariant::AlignerOptions* temp = aln_config_;
  aln_config_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::AlignerOptions* RealignerOptions::mutable_aln_config() {
  
  if (aln_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::AlignerOptions>(GetArenaNoVirtual());
    aln_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.RealignerOptions.aln_config)
  return aln_config_;
}
inline void RealignerOptions::set_allocated_aln_config(::learning::genomics::deepvariant::AlignerOptions* aln_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete aln_config_;
  }
  if (aln_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      aln_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aln_config, submessage_arena);
    }
    
  } else {
    
  }
  aln_config_ = aln_config;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.RealignerOptions.aln_config)
}

// .learning.genomics.deepvariant.Diagnostics diagnostics = 4;
inline bool RealignerOptions::has_diagnostics() const {
  return this != internal_default_instance() && diagnostics_ != nullptr;
}
inline void RealignerOptions::clear_diagnostics() {
  if (GetArenaNoVirtual() == nullptr && diagnostics_ != nullptr) {
    delete diagnostics_;
  }
  diagnostics_ = nullptr;
}
inline const ::learning::genomics::deepvariant::Diagnostics& RealignerOptions::diagnostics() const {
  const ::learning::genomics::deepvariant::Diagnostics* p = diagnostics_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.RealignerOptions.diagnostics)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::Diagnostics*>(
      &::learning::genomics::deepvariant::_Diagnostics_default_instance_);
}
inline ::learning::genomics::deepvariant::Diagnostics* RealignerOptions::release_diagnostics() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.RealignerOptions.diagnostics)
  
  ::learning::genomics::deepvariant::Diagnostics* temp = diagnostics_;
  diagnostics_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::Diagnostics* RealignerOptions::mutable_diagnostics() {
  
  if (diagnostics_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::Diagnostics>(GetArenaNoVirtual());
    diagnostics_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.RealignerOptions.diagnostics)
  return diagnostics_;
}
inline void RealignerOptions::set_allocated_diagnostics(::learning::genomics::deepvariant::Diagnostics* diagnostics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete diagnostics_;
  }
  if (diagnostics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      diagnostics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diagnostics, submessage_arena);
    }
    
  } else {
    
  }
  diagnostics_ = diagnostics;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.RealignerOptions.diagnostics)
}

// bool split_skip_reads = 5;
inline void RealignerOptions::clear_split_skip_reads() {
  split_skip_reads_ = false;
}
inline bool RealignerOptions::split_skip_reads() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.RealignerOptions.split_skip_reads)
  return split_skip_reads_;
}
inline void RealignerOptions::set_split_skip_reads(bool value) {
  
  split_skip_reads_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.RealignerOptions.split_skip_reads)
}

// bool normalize_reads = 6;
inline void RealignerOptions::clear_normalize_reads() {
  normalize_reads_ = false;
}
inline bool RealignerOptions::normalize_reads() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.RealignerOptions.normalize_reads)
  return normalize_reads_;
}
inline void RealignerOptions::set_normalize_reads(bool value) {
  
  normalize_reads_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.RealignerOptions.normalize_reads)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace deepvariant
}  // namespace genomics
}  // namespace learning

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::learning::genomics::deepvariant::WindowSelectorModel_ModelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::learning::genomics::deepvariant::WindowSelectorModel_ModelType>() {
  return ::learning::genomics::deepvariant::WindowSelectorModel_ModelType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_deepvariant_2fprotos_2frealigner_2eproto
