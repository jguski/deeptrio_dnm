//////////////////////////////////////////////////////////////////////
// This file was automatically generated by PyCLIF.
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: deepvariant/protos/deepvariant.proto

#include "deepvariant/protos/deepvariant.pb.h"
#include "clif/python/postconv.h"

namespace learning { namespace genomics { namespace deepvariant {
using namespace ::clif;

// CLIF use `::learning::genomics::deepvariant::Allele` as Allele
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::Allele* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::Allele&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::Allele>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::Allele>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::Allele>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::AlleleCount` as AlleleCount
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::AlleleCount* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::AlleleCount&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::AlleleCount>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::AlleleCount>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::AlleleCount>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::AlleleCount::Alleles` as AlleleCount.Alleles
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::AlleleCount::Alleles* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::AlleleCount::Alleles&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::AlleleCount::Alleles>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::AlleleCount::Alleles>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::AlleleCount::Alleles>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::AlleleCountSummary` as AlleleCountSummary
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::AlleleCountSummary* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::AlleleCountSummary&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::AlleleCountSummary>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::AlleleCountSummary>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::AlleleCountSummary>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::DeepVariantCall` as DeepVariantCall
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::DeepVariantCall* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::DeepVariantCall&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::DeepVariantCall>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::DeepVariantCall>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::DeepVariantCall>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::DeepVariantCall::SupportingReads` as DeepVariantCall.SupportingReads
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::DeepVariantCall::SupportingReads* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::DeepVariantCall::SupportingReads&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::DeepVariantCall::SupportingReads>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::DeepVariantCall::SupportingReads>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::DeepVariantCall::SupportingReads>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::DeepVariantCall::ReadSupport` as DeepVariantCall.ReadSupport
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::DeepVariantCall::ReadSupport* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::DeepVariantCall::ReadSupport&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::DeepVariantCall::ReadSupport>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::DeepVariantCall::ReadSupport>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::DeepVariantCall::ReadSupport>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::DeepVariantCall::SupportingReadsExt` as DeepVariantCall.SupportingReadsExt
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::DeepVariantCall::SupportingReadsExt* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::DeepVariantCall::SupportingReadsExt&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::DeepVariantCall::SupportingReadsExt>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::DeepVariantCall::SupportingReadsExt>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::DeepVariantCall::SupportingReadsExt>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::AlleleCounterOptions` as AlleleCounterOptions
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::AlleleCounterOptions* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::AlleleCounterOptions&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::AlleleCounterOptions>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::AlleleCounterOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::AlleleCounterOptions>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::CallVariantsOutput` as CallVariantsOutput
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::CallVariantsOutput* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::CallVariantsOutput&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::CallVariantsOutput>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::CallVariantsOutput>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::CallVariantsOutput>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::CallVariantsOutput::AltAlleleIndices` as CallVariantsOutput.AltAlleleIndices
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::CallVariantsOutput::AltAlleleIndices* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::CallVariantsOutput::AltAlleleIndices&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::CallVariantsOutput::AltAlleleIndices>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::CallVariantsOutput::AltAlleleIndices>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::CallVariantsOutput::AltAlleleIndices>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::CallVariantsOutput::DebugInfo` as CallVariantsOutput.DebugInfo
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::CallVariantsOutput::DebugInfo* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::CallVariantsOutput::DebugInfo&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::CallVariantsOutput::DebugInfo>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::CallVariantsOutput::DebugInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::CallVariantsOutput::DebugInfo>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::VariantCallerOptions` as VariantCallerOptions
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::VariantCallerOptions* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::VariantCallerOptions&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::VariantCallerOptions>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::VariantCallerOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::VariantCallerOptions>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::VariantLabelerOptions` as VariantLabelerOptions
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::VariantLabelerOptions* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::VariantLabelerOptions&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::VariantLabelerOptions>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::VariantLabelerOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::VariantLabelerOptions>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::PileupImageOptions` as PileupImageOptions
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::PileupImageOptions* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::PileupImageOptions&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::PileupImageOptions>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::PileupImageOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::PileupImageOptions>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::SampleOptions` as SampleOptions
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::SampleOptions* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::SampleOptions&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::SampleOptions>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::SampleOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::SampleOptions>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::MakeExamplesOptions` as MakeExamplesOptions
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::MakeExamplesOptions* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::MakeExamplesOptions&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::MakeExamplesOptions>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::MakeExamplesOptions>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::MakeExamplesOptions>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::DeepVariantDatasetConfig` as DeepVariantDatasetConfig
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::DeepVariantDatasetConfig* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::DeepVariantDatasetConfig&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::DeepVariantDatasetConfig>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::DeepVariantDatasetConfig>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::DeepVariantDatasetConfig>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::DeepVariantInputDatasets` as DeepVariantInputDatasets
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::DeepVariantInputDatasets* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::DeepVariantInputDatasets&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::DeepVariantInputDatasets>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::DeepVariantInputDatasets>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::DeepVariantInputDatasets>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::DeepVariantInputDatasets::Dataset` as DeepVariantInputDatasets.Dataset
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::DeepVariantInputDatasets::Dataset* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::DeepVariantInputDatasets::Dataset&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::DeepVariantInputDatasets::Dataset>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::DeepVariantInputDatasets::Dataset>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::DeepVariantInputDatasets::Dataset>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::DeepVariantInputDatasetsGroup` as DeepVariantInputDatasetsGroup
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::DeepVariantInputDatasetsGroup* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::DeepVariantInputDatasetsGroup&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::DeepVariantInputDatasetsGroup>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::DeepVariantInputDatasetsGroup>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::DeepVariantInputDatasetsGroup>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::LabelingMetrics` as LabelingMetrics
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::LabelingMetrics* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::LabelingMetrics&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::LabelingMetrics>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::LabelingMetrics>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::LabelingMetrics>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::MakeExamplesStats` as MakeExamplesStats
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::MakeExamplesStats* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::MakeExamplesStats&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::MakeExamplesStats>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::MakeExamplesStats>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::MakeExamplesStats>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::MakeExamplesRunInfo` as MakeExamplesRunInfo
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::MakeExamplesRunInfo* output);
PyObject* Clif_PyObjFrom(const ::learning::genomics::deepvariant::MakeExamplesRunInfo&, py::PostConv);
bool Clif_PyObjAs(PyObject*, std::unique_ptr<::learning::genomics::deepvariant::MakeExamplesRunInfo>*);
PyObject* Clif_PyObjFrom(std::unique_ptr<const ::learning::genomics::deepvariant::MakeExamplesRunInfo>, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<const ::learning::genomics::deepvariant::MakeExamplesRunInfo>, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::PileupImageOptions::MultiAllelicMode` as PileupImageOptions.MultiAllelicMode
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::PileupImageOptions::MultiAllelicMode* output);
PyObject* Clif_PyObjFrom(::learning::genomics::deepvariant::PileupImageOptions::MultiAllelicMode, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::PileupImageOptions::SequencingType` as PileupImageOptions.SequencingType
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::PileupImageOptions::SequencingType* output);
PyObject* Clif_PyObjFrom(::learning::genomics::deepvariant::PileupImageOptions::SequencingType, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::MakeExamplesOptions::Mode` as MakeExamplesOptions.Mode
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::MakeExamplesOptions::Mode* output);
PyObject* Clif_PyObjFrom(::learning::genomics::deepvariant::MakeExamplesOptions::Mode, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::MakeExamplesOptions::LabelerAlgorithm` as MakeExamplesOptions.LabelerAlgorithm
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::MakeExamplesOptions::LabelerAlgorithm* output);
PyObject* Clif_PyObjFrom(::learning::genomics::deepvariant::MakeExamplesOptions::LabelerAlgorithm, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::MakeExamplesOptions::VariantCaller` as MakeExamplesOptions.VariantCaller
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::MakeExamplesOptions::VariantCaller* output);
PyObject* Clif_PyObjFrom(::learning::genomics::deepvariant::MakeExamplesOptions::VariantCaller, py::PostConv);
// CLIF use `::learning::genomics::deepvariant::AlleleType` as AlleleType
bool Clif_PyObjAs(PyObject* input, ::learning::genomics::deepvariant::AlleleType* output);
PyObject* Clif_PyObjFrom(::learning::genomics::deepvariant::AlleleType, py::PostConv);

} } }  // namespace learning::genomics::deepvariant
