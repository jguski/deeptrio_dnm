// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deepvariant/protos/deepvariant.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_deepvariant_2fprotos_2fdeepvariant_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_deepvariant_2fprotos_2fdeepvariant_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "deepvariant/protos/realigner.pb.h"
#include "deepvariant/protos/resources.pb.h"
#include "third_party/nucleus/protos/position.pb.h"
#include "third_party/nucleus/protos/reads.pb.h"
#include "third_party/nucleus/protos/variants.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2fdeepvariant_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[29]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto;
namespace learning {
namespace genomics {
namespace deepvariant {
class Allele;
class AlleleDefaultTypeInternal;
extern AlleleDefaultTypeInternal _Allele_default_instance_;
class AlleleCount;
class AlleleCountDefaultTypeInternal;
extern AlleleCountDefaultTypeInternal _AlleleCount_default_instance_;
class AlleleCountSummary;
class AlleleCountSummaryDefaultTypeInternal;
extern AlleleCountSummaryDefaultTypeInternal _AlleleCountSummary_default_instance_;
class AlleleCount_Alleles;
class AlleleCount_AllelesDefaultTypeInternal;
extern AlleleCount_AllelesDefaultTypeInternal _AlleleCount_Alleles_default_instance_;
class AlleleCount_ReadAllelesEntry_DoNotUse;
class AlleleCount_ReadAllelesEntry_DoNotUseDefaultTypeInternal;
extern AlleleCount_ReadAllelesEntry_DoNotUseDefaultTypeInternal _AlleleCount_ReadAllelesEntry_DoNotUse_default_instance_;
class AlleleCount_SampleAllelesEntry_DoNotUse;
class AlleleCount_SampleAllelesEntry_DoNotUseDefaultTypeInternal;
extern AlleleCount_SampleAllelesEntry_DoNotUseDefaultTypeInternal _AlleleCount_SampleAllelesEntry_DoNotUse_default_instance_;
class AlleleCounterOptions;
class AlleleCounterOptionsDefaultTypeInternal;
extern AlleleCounterOptionsDefaultTypeInternal _AlleleCounterOptions_default_instance_;
class CallVariantsOutput;
class CallVariantsOutputDefaultTypeInternal;
extern CallVariantsOutputDefaultTypeInternal _CallVariantsOutput_default_instance_;
class CallVariantsOutput_AltAlleleIndices;
class CallVariantsOutput_AltAlleleIndicesDefaultTypeInternal;
extern CallVariantsOutput_AltAlleleIndicesDefaultTypeInternal _CallVariantsOutput_AltAlleleIndices_default_instance_;
class CallVariantsOutput_DebugInfo;
class CallVariantsOutput_DebugInfoDefaultTypeInternal;
extern CallVariantsOutput_DebugInfoDefaultTypeInternal _CallVariantsOutput_DebugInfo_default_instance_;
class DeepVariantCall;
class DeepVariantCallDefaultTypeInternal;
extern DeepVariantCallDefaultTypeInternal _DeepVariantCall_default_instance_;
class DeepVariantCall_AlleleFrequencyEntry_DoNotUse;
class DeepVariantCall_AlleleFrequencyEntry_DoNotUseDefaultTypeInternal;
extern DeepVariantCall_AlleleFrequencyEntry_DoNotUseDefaultTypeInternal _DeepVariantCall_AlleleFrequencyEntry_DoNotUse_default_instance_;
class DeepVariantCall_AlleleSupportEntry_DoNotUse;
class DeepVariantCall_AlleleSupportEntry_DoNotUseDefaultTypeInternal;
extern DeepVariantCall_AlleleSupportEntry_DoNotUseDefaultTypeInternal _DeepVariantCall_AlleleSupportEntry_DoNotUse_default_instance_;
class DeepVariantCall_AlleleSupportExtEntry_DoNotUse;
class DeepVariantCall_AlleleSupportExtEntry_DoNotUseDefaultTypeInternal;
extern DeepVariantCall_AlleleSupportExtEntry_DoNotUseDefaultTypeInternal _DeepVariantCall_AlleleSupportExtEntry_DoNotUse_default_instance_;
class DeepVariantCall_ReadSupport;
class DeepVariantCall_ReadSupportDefaultTypeInternal;
extern DeepVariantCall_ReadSupportDefaultTypeInternal _DeepVariantCall_ReadSupport_default_instance_;
class DeepVariantCall_SupportingReads;
class DeepVariantCall_SupportingReadsDefaultTypeInternal;
extern DeepVariantCall_SupportingReadsDefaultTypeInternal _DeepVariantCall_SupportingReads_default_instance_;
class DeepVariantCall_SupportingReadsExt;
class DeepVariantCall_SupportingReadsExtDefaultTypeInternal;
extern DeepVariantCall_SupportingReadsExtDefaultTypeInternal _DeepVariantCall_SupportingReadsExt_default_instance_;
class DeepVariantDatasetConfig;
class DeepVariantDatasetConfigDefaultTypeInternal;
extern DeepVariantDatasetConfigDefaultTypeInternal _DeepVariantDatasetConfig_default_instance_;
class DeepVariantInputDatasets;
class DeepVariantInputDatasetsDefaultTypeInternal;
extern DeepVariantInputDatasetsDefaultTypeInternal _DeepVariantInputDatasets_default_instance_;
class DeepVariantInputDatasetsGroup;
class DeepVariantInputDatasetsGroupDefaultTypeInternal;
extern DeepVariantInputDatasetsGroupDefaultTypeInternal _DeepVariantInputDatasetsGroup_default_instance_;
class DeepVariantInputDatasets_Dataset;
class DeepVariantInputDatasets_DatasetDefaultTypeInternal;
extern DeepVariantInputDatasets_DatasetDefaultTypeInternal _DeepVariantInputDatasets_Dataset_default_instance_;
class LabelingMetrics;
class LabelingMetricsDefaultTypeInternal;
extern LabelingMetricsDefaultTypeInternal _LabelingMetrics_default_instance_;
class MakeExamplesOptions;
class MakeExamplesOptionsDefaultTypeInternal;
extern MakeExamplesOptionsDefaultTypeInternal _MakeExamplesOptions_default_instance_;
class MakeExamplesRunInfo;
class MakeExamplesRunInfoDefaultTypeInternal;
extern MakeExamplesRunInfoDefaultTypeInternal _MakeExamplesRunInfo_default_instance_;
class MakeExamplesStats;
class MakeExamplesStatsDefaultTypeInternal;
extern MakeExamplesStatsDefaultTypeInternal _MakeExamplesStats_default_instance_;
class PileupImageOptions;
class PileupImageOptionsDefaultTypeInternal;
extern PileupImageOptionsDefaultTypeInternal _PileupImageOptions_default_instance_;
class SampleOptions;
class SampleOptionsDefaultTypeInternal;
extern SampleOptionsDefaultTypeInternal _SampleOptions_default_instance_;
class VariantCallerOptions;
class VariantCallerOptionsDefaultTypeInternal;
extern VariantCallerOptionsDefaultTypeInternal _VariantCallerOptions_default_instance_;
class VariantLabelerOptions;
class VariantLabelerOptionsDefaultTypeInternal;
extern VariantLabelerOptionsDefaultTypeInternal _VariantLabelerOptions_default_instance_;
}  // namespace deepvariant
}  // namespace genomics
}  // namespace learning
PROTOBUF_NAMESPACE_OPEN
template<> ::learning::genomics::deepvariant::Allele* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::Allele>(Arena*);
template<> ::learning::genomics::deepvariant::AlleleCount* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::AlleleCount>(Arena*);
template<> ::learning::genomics::deepvariant::AlleleCountSummary* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::AlleleCountSummary>(Arena*);
template<> ::learning::genomics::deepvariant::AlleleCount_Alleles* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::AlleleCount_Alleles>(Arena*);
template<> ::learning::genomics::deepvariant::AlleleCount_ReadAllelesEntry_DoNotUse* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::AlleleCount_ReadAllelesEntry_DoNotUse>(Arena*);
template<> ::learning::genomics::deepvariant::AlleleCount_SampleAllelesEntry_DoNotUse* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::AlleleCount_SampleAllelesEntry_DoNotUse>(Arena*);
template<> ::learning::genomics::deepvariant::AlleleCounterOptions* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::AlleleCounterOptions>(Arena*);
template<> ::learning::genomics::deepvariant::CallVariantsOutput* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::CallVariantsOutput>(Arena*);
template<> ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices>(Arena*);
template<> ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo>(Arena*);
template<> ::learning::genomics::deepvariant::DeepVariantCall* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::DeepVariantCall>(Arena*);
template<> ::learning::genomics::deepvariant::DeepVariantCall_AlleleFrequencyEntry_DoNotUse* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::DeepVariantCall_AlleleFrequencyEntry_DoNotUse>(Arena*);
template<> ::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportEntry_DoNotUse* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportEntry_DoNotUse>(Arena*);
template<> ::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportExtEntry_DoNotUse* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::DeepVariantCall_AlleleSupportExtEntry_DoNotUse>(Arena*);
template<> ::learning::genomics::deepvariant::DeepVariantCall_ReadSupport* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::DeepVariantCall_ReadSupport>(Arena*);
template<> ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::DeepVariantCall_SupportingReads>(Arena*);
template<> ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt>(Arena*);
template<> ::learning::genomics::deepvariant::DeepVariantDatasetConfig* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::DeepVariantDatasetConfig>(Arena*);
template<> ::learning::genomics::deepvariant::DeepVariantInputDatasets* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::DeepVariantInputDatasets>(Arena*);
template<> ::learning::genomics::deepvariant::DeepVariantInputDatasetsGroup* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::DeepVariantInputDatasetsGroup>(Arena*);
template<> ::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset>(Arena*);
template<> ::learning::genomics::deepvariant::LabelingMetrics* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::LabelingMetrics>(Arena*);
template<> ::learning::genomics::deepvariant::MakeExamplesOptions* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::MakeExamplesOptions>(Arena*);
template<> ::learning::genomics::deepvariant::MakeExamplesRunInfo* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::MakeExamplesRunInfo>(Arena*);
template<> ::learning::genomics::deepvariant::MakeExamplesStats* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::MakeExamplesStats>(Arena*);
template<> ::learning::genomics::deepvariant::PileupImageOptions* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::PileupImageOptions>(Arena*);
template<> ::learning::genomics::deepvariant::SampleOptions* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::SampleOptions>(Arena*);
template<> ::learning::genomics::deepvariant::VariantCallerOptions* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::VariantCallerOptions>(Arena*);
template<> ::learning::genomics::deepvariant::VariantLabelerOptions* Arena::CreateMaybeMessage<::learning::genomics::deepvariant::VariantLabelerOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace learning {
namespace genomics {
namespace deepvariant {

enum PileupImageOptions_MultiAllelicMode : int {
  PileupImageOptions_MultiAllelicMode_UNSPECIFIED = 0,
  PileupImageOptions_MultiAllelicMode_ADD_HET_ALT_IMAGES = 1,
  PileupImageOptions_MultiAllelicMode_NO_HET_ALT_IMAGES = 2,
  PileupImageOptions_MultiAllelicMode_PileupImageOptions_MultiAllelicMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PileupImageOptions_MultiAllelicMode_PileupImageOptions_MultiAllelicMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PileupImageOptions_MultiAllelicMode_IsValid(int value);
constexpr PileupImageOptions_MultiAllelicMode PileupImageOptions_MultiAllelicMode_MultiAllelicMode_MIN = PileupImageOptions_MultiAllelicMode_UNSPECIFIED;
constexpr PileupImageOptions_MultiAllelicMode PileupImageOptions_MultiAllelicMode_MultiAllelicMode_MAX = PileupImageOptions_MultiAllelicMode_NO_HET_ALT_IMAGES;
constexpr int PileupImageOptions_MultiAllelicMode_MultiAllelicMode_ARRAYSIZE = PileupImageOptions_MultiAllelicMode_MultiAllelicMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PileupImageOptions_MultiAllelicMode_descriptor();
template<typename T>
inline const std::string& PileupImageOptions_MultiAllelicMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PileupImageOptions_MultiAllelicMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PileupImageOptions_MultiAllelicMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PileupImageOptions_MultiAllelicMode_descriptor(), enum_t_value);
}
inline bool PileupImageOptions_MultiAllelicMode_Parse(
    const std::string& name, PileupImageOptions_MultiAllelicMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PileupImageOptions_MultiAllelicMode>(
    PileupImageOptions_MultiAllelicMode_descriptor(), name, value);
}
enum PileupImageOptions_SequencingType : int {
  PileupImageOptions_SequencingType_UNSPECIFIED_SEQ_TYPE = 0,
  PileupImageOptions_SequencingType_WGS = 1,
  PileupImageOptions_SequencingType_WES = 2,
  PileupImageOptions_SequencingType_TRIO = 3,
  PileupImageOptions_SequencingType_PileupImageOptions_SequencingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PileupImageOptions_SequencingType_PileupImageOptions_SequencingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PileupImageOptions_SequencingType_IsValid(int value);
constexpr PileupImageOptions_SequencingType PileupImageOptions_SequencingType_SequencingType_MIN = PileupImageOptions_SequencingType_UNSPECIFIED_SEQ_TYPE;
constexpr PileupImageOptions_SequencingType PileupImageOptions_SequencingType_SequencingType_MAX = PileupImageOptions_SequencingType_TRIO;
constexpr int PileupImageOptions_SequencingType_SequencingType_ARRAYSIZE = PileupImageOptions_SequencingType_SequencingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PileupImageOptions_SequencingType_descriptor();
template<typename T>
inline const std::string& PileupImageOptions_SequencingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PileupImageOptions_SequencingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PileupImageOptions_SequencingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PileupImageOptions_SequencingType_descriptor(), enum_t_value);
}
inline bool PileupImageOptions_SequencingType_Parse(
    const std::string& name, PileupImageOptions_SequencingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PileupImageOptions_SequencingType>(
    PileupImageOptions_SequencingType_descriptor(), name, value);
}
enum MakeExamplesOptions_Mode : int {
  MakeExamplesOptions_Mode_UNSPECIFIED = 0,
  MakeExamplesOptions_Mode_CALLING = 1,
  MakeExamplesOptions_Mode_TRAINING = 2,
  MakeExamplesOptions_Mode_MakeExamplesOptions_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MakeExamplesOptions_Mode_MakeExamplesOptions_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MakeExamplesOptions_Mode_IsValid(int value);
constexpr MakeExamplesOptions_Mode MakeExamplesOptions_Mode_Mode_MIN = MakeExamplesOptions_Mode_UNSPECIFIED;
constexpr MakeExamplesOptions_Mode MakeExamplesOptions_Mode_Mode_MAX = MakeExamplesOptions_Mode_TRAINING;
constexpr int MakeExamplesOptions_Mode_Mode_ARRAYSIZE = MakeExamplesOptions_Mode_Mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MakeExamplesOptions_Mode_descriptor();
template<typename T>
inline const std::string& MakeExamplesOptions_Mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MakeExamplesOptions_Mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MakeExamplesOptions_Mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MakeExamplesOptions_Mode_descriptor(), enum_t_value);
}
inline bool MakeExamplesOptions_Mode_Parse(
    const std::string& name, MakeExamplesOptions_Mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MakeExamplesOptions_Mode>(
    MakeExamplesOptions_Mode_descriptor(), name, value);
}
enum MakeExamplesOptions_LabelerAlgorithm : int {
  MakeExamplesOptions_LabelerAlgorithm_UNSPECIFIED_LABELER_ALGORITHM = 0,
  MakeExamplesOptions_LabelerAlgorithm_POSITIONAL_LABELER = 1,
  MakeExamplesOptions_LabelerAlgorithm_HAPLOTYPE_LABELER = 2,
  MakeExamplesOptions_LabelerAlgorithm_CUSTOMIZED_CLASSES_LABELER = 3,
  MakeExamplesOptions_LabelerAlgorithm_MakeExamplesOptions_LabelerAlgorithm_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MakeExamplesOptions_LabelerAlgorithm_MakeExamplesOptions_LabelerAlgorithm_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MakeExamplesOptions_LabelerAlgorithm_IsValid(int value);
constexpr MakeExamplesOptions_LabelerAlgorithm MakeExamplesOptions_LabelerAlgorithm_LabelerAlgorithm_MIN = MakeExamplesOptions_LabelerAlgorithm_UNSPECIFIED_LABELER_ALGORITHM;
constexpr MakeExamplesOptions_LabelerAlgorithm MakeExamplesOptions_LabelerAlgorithm_LabelerAlgorithm_MAX = MakeExamplesOptions_LabelerAlgorithm_CUSTOMIZED_CLASSES_LABELER;
constexpr int MakeExamplesOptions_LabelerAlgorithm_LabelerAlgorithm_ARRAYSIZE = MakeExamplesOptions_LabelerAlgorithm_LabelerAlgorithm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MakeExamplesOptions_LabelerAlgorithm_descriptor();
template<typename T>
inline const std::string& MakeExamplesOptions_LabelerAlgorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MakeExamplesOptions_LabelerAlgorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MakeExamplesOptions_LabelerAlgorithm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MakeExamplesOptions_LabelerAlgorithm_descriptor(), enum_t_value);
}
inline bool MakeExamplesOptions_LabelerAlgorithm_Parse(
    const std::string& name, MakeExamplesOptions_LabelerAlgorithm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MakeExamplesOptions_LabelerAlgorithm>(
    MakeExamplesOptions_LabelerAlgorithm_descriptor(), name, value);
}
enum MakeExamplesOptions_VariantCaller : int {
  MakeExamplesOptions_VariantCaller_UNSPECIFIED_CALLER = 0,
  MakeExamplesOptions_VariantCaller_VERY_SENSITIVE_CALLER = 1,
  MakeExamplesOptions_VariantCaller_VCF_CANDIDATE_IMPORTER = 2,
  MakeExamplesOptions_VariantCaller_MakeExamplesOptions_VariantCaller_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MakeExamplesOptions_VariantCaller_MakeExamplesOptions_VariantCaller_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MakeExamplesOptions_VariantCaller_IsValid(int value);
constexpr MakeExamplesOptions_VariantCaller MakeExamplesOptions_VariantCaller_VariantCaller_MIN = MakeExamplesOptions_VariantCaller_UNSPECIFIED_CALLER;
constexpr MakeExamplesOptions_VariantCaller MakeExamplesOptions_VariantCaller_VariantCaller_MAX = MakeExamplesOptions_VariantCaller_VCF_CANDIDATE_IMPORTER;
constexpr int MakeExamplesOptions_VariantCaller_VariantCaller_ARRAYSIZE = MakeExamplesOptions_VariantCaller_VariantCaller_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MakeExamplesOptions_VariantCaller_descriptor();
template<typename T>
inline const std::string& MakeExamplesOptions_VariantCaller_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MakeExamplesOptions_VariantCaller>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MakeExamplesOptions_VariantCaller_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MakeExamplesOptions_VariantCaller_descriptor(), enum_t_value);
}
inline bool MakeExamplesOptions_VariantCaller_Parse(
    const std::string& name, MakeExamplesOptions_VariantCaller* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MakeExamplesOptions_VariantCaller>(
    MakeExamplesOptions_VariantCaller_descriptor(), name, value);
}
enum AlleleType : int {
  UNSPECIFIED = 0,
  REFERENCE = 1,
  SUBSTITUTION = 2,
  INSERTION = 3,
  DELETION = 4,
  SOFT_CLIP = 5,
  AlleleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AlleleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AlleleType_IsValid(int value);
constexpr AlleleType AlleleType_MIN = UNSPECIFIED;
constexpr AlleleType AlleleType_MAX = SOFT_CLIP;
constexpr int AlleleType_ARRAYSIZE = AlleleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlleleType_descriptor();
template<typename T>
inline const std::string& AlleleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AlleleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AlleleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AlleleType_descriptor(), enum_t_value);
}
inline bool AlleleType_Parse(
    const std::string& name, AlleleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AlleleType>(
    AlleleType_descriptor(), name, value);
}
// ===================================================================

class Allele :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.Allele) */ {
 public:
  Allele();
  virtual ~Allele();

  Allele(const Allele& from);
  Allele(Allele&& from) noexcept
    : Allele() {
    *this = ::std::move(from);
  }

  inline Allele& operator=(const Allele& from) {
    CopyFrom(from);
    return *this;
  }
  inline Allele& operator=(Allele&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Allele& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Allele* internal_default_instance() {
    return reinterpret_cast<const Allele*>(
               &_Allele_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Allele& a, Allele& b) {
    a.Swap(&b);
  }
  inline void Swap(Allele* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Allele* New() const final {
    return CreateMaybeMessage<Allele>(nullptr);
  }

  Allele* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Allele>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Allele& from);
  void MergeFrom(const Allele& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Allele* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.Allele";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasesFieldNumber = 1,
    kTypeFieldNumber = 2,
    kCountFieldNumber = 3,
    kIsLowQualityFieldNumber = 4,
  };
  // string bases = 1;
  void clear_bases();
  const std::string& bases() const;
  void set_bases(const std::string& value);
  void set_bases(std::string&& value);
  void set_bases(const char* value);
  void set_bases(const char* value, size_t size);
  std::string* mutable_bases();
  std::string* release_bases();
  void set_allocated_bases(std::string* bases);

  // .learning.genomics.deepvariant.AlleleType type = 2;
  void clear_type();
  ::learning::genomics::deepvariant::AlleleType type() const;
  void set_type(::learning::genomics::deepvariant::AlleleType value);

  // int32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool is_low_quality = 4;
  void clear_is_low_quality();
  bool is_low_quality() const;
  void set_is_low_quality(bool value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.Allele)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bases_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  bool is_low_quality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class AlleleCount_ReadAllelesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AlleleCount_ReadAllelesEntry_DoNotUse, 
    std::string, ::learning::genomics::deepvariant::Allele,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AlleleCount_ReadAllelesEntry_DoNotUse, 
    std::string, ::learning::genomics::deepvariant::Allele,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  AlleleCount_ReadAllelesEntry_DoNotUse();
  AlleleCount_ReadAllelesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AlleleCount_ReadAllelesEntry_DoNotUse& other);
  static const AlleleCount_ReadAllelesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AlleleCount_ReadAllelesEntry_DoNotUse*>(&_AlleleCount_ReadAllelesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "learning.genomics.deepvariant.AlleleCount.ReadAllelesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class AlleleCount_Alleles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.AlleleCount.Alleles) */ {
 public:
  AlleleCount_Alleles();
  virtual ~AlleleCount_Alleles();

  AlleleCount_Alleles(const AlleleCount_Alleles& from);
  AlleleCount_Alleles(AlleleCount_Alleles&& from) noexcept
    : AlleleCount_Alleles() {
    *this = ::std::move(from);
  }

  inline AlleleCount_Alleles& operator=(const AlleleCount_Alleles& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlleleCount_Alleles& operator=(AlleleCount_Alleles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlleleCount_Alleles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlleleCount_Alleles* internal_default_instance() {
    return reinterpret_cast<const AlleleCount_Alleles*>(
               &_AlleleCount_Alleles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AlleleCount_Alleles& a, AlleleCount_Alleles& b) {
    a.Swap(&b);
  }
  inline void Swap(AlleleCount_Alleles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlleleCount_Alleles* New() const final {
    return CreateMaybeMessage<AlleleCount_Alleles>(nullptr);
  }

  AlleleCount_Alleles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlleleCount_Alleles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlleleCount_Alleles& from);
  void MergeFrom(const AlleleCount_Alleles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlleleCount_Alleles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.AlleleCount.Alleles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllelesFieldNumber = 1,
  };
  // repeated .learning.genomics.deepvariant.Allele alleles = 1;
  int alleles_size() const;
  void clear_alleles();
  ::learning::genomics::deepvariant::Allele* mutable_alleles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::Allele >*
      mutable_alleles();
  const ::learning::genomics::deepvariant::Allele& alleles(int index) const;
  ::learning::genomics::deepvariant::Allele* add_alleles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::Allele >&
      alleles() const;

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.AlleleCount.Alleles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::Allele > alleles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class AlleleCount_SampleAllelesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AlleleCount_SampleAllelesEntry_DoNotUse, 
    std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AlleleCount_SampleAllelesEntry_DoNotUse, 
    std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  AlleleCount_SampleAllelesEntry_DoNotUse();
  AlleleCount_SampleAllelesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AlleleCount_SampleAllelesEntry_DoNotUse& other);
  static const AlleleCount_SampleAllelesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AlleleCount_SampleAllelesEntry_DoNotUse*>(&_AlleleCount_SampleAllelesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "learning.genomics.deepvariant.AlleleCount.SampleAllelesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class AlleleCount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.AlleleCount) */ {
 public:
  AlleleCount();
  virtual ~AlleleCount();

  AlleleCount(const AlleleCount& from);
  AlleleCount(AlleleCount&& from) noexcept
    : AlleleCount() {
    *this = ::std::move(from);
  }

  inline AlleleCount& operator=(const AlleleCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlleleCount& operator=(AlleleCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlleleCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlleleCount* internal_default_instance() {
    return reinterpret_cast<const AlleleCount*>(
               &_AlleleCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AlleleCount& a, AlleleCount& b) {
    a.Swap(&b);
  }
  inline void Swap(AlleleCount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlleleCount* New() const final {
    return CreateMaybeMessage<AlleleCount>(nullptr);
  }

  AlleleCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlleleCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlleleCount& from);
  void MergeFrom(const AlleleCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlleleCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.AlleleCount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AlleleCount_Alleles Alleles;

  // accessors -------------------------------------------------------

  enum : int {
    kReadAllelesFieldNumber = 4,
    kSampleAllelesFieldNumber = 6,
    kRefBaseFieldNumber = 2,
    kPositionFieldNumber = 1,
    kRefSupportingReadCountFieldNumber = 3,
    kRefNonconfidentReadCountFieldNumber = 5,
    kTrackRefReadsFieldNumber = 7,
  };
  // map<string, .learning.genomics.deepvariant.Allele> read_alleles = 4;
  int read_alleles_size() const;
  void clear_read_alleles();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::Allele >&
      read_alleles() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::Allele >*
      mutable_read_alleles();

  // map<string, .learning.genomics.deepvariant.AlleleCount.Alleles> sample_alleles = 6;
  int sample_alleles_size() const;
  void clear_sample_alleles();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles >&
      sample_alleles() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles >*
      mutable_sample_alleles();

  // string ref_base = 2;
  void clear_ref_base();
  const std::string& ref_base() const;
  void set_ref_base(const std::string& value);
  void set_ref_base(std::string&& value);
  void set_ref_base(const char* value);
  void set_ref_base(const char* value, size_t size);
  std::string* mutable_ref_base();
  std::string* release_ref_base();
  void set_allocated_ref_base(std::string* ref_base);

  // .nucleus.genomics.v1.Position position = 1;
  bool has_position() const;
  void clear_position();
  const ::nucleus::genomics::v1::Position& position() const;
  ::nucleus::genomics::v1::Position* release_position();
  ::nucleus::genomics::v1::Position* mutable_position();
  void set_allocated_position(::nucleus::genomics::v1::Position* position);

  // int32 ref_supporting_read_count = 3;
  void clear_ref_supporting_read_count();
  ::PROTOBUF_NAMESPACE_ID::int32 ref_supporting_read_count() const;
  void set_ref_supporting_read_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ref_nonconfident_read_count = 5;
  void clear_ref_nonconfident_read_count();
  ::PROTOBUF_NAMESPACE_ID::int32 ref_nonconfident_read_count() const;
  void set_ref_nonconfident_read_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool track_ref_reads = 7;
  void clear_track_ref_reads();
  bool track_ref_reads() const;
  void set_track_ref_reads(bool value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.AlleleCount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AlleleCount_ReadAllelesEntry_DoNotUse,
      std::string, ::learning::genomics::deepvariant::Allele,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > read_alleles_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AlleleCount_SampleAllelesEntry_DoNotUse,
      std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > sample_alleles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_base_;
  ::nucleus::genomics::v1::Position* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 ref_supporting_read_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 ref_nonconfident_read_count_;
  bool track_ref_reads_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class AlleleCountSummary :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.AlleleCountSummary) */ {
 public:
  AlleleCountSummary();
  virtual ~AlleleCountSummary();

  AlleleCountSummary(const AlleleCountSummary& from);
  AlleleCountSummary(AlleleCountSummary&& from) noexcept
    : AlleleCountSummary() {
    *this = ::std::move(from);
  }

  inline AlleleCountSummary& operator=(const AlleleCountSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlleleCountSummary& operator=(AlleleCountSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlleleCountSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlleleCountSummary* internal_default_instance() {
    return reinterpret_cast<const AlleleCountSummary*>(
               &_AlleleCountSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AlleleCountSummary& a, AlleleCountSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(AlleleCountSummary* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlleleCountSummary* New() const final {
    return CreateMaybeMessage<AlleleCountSummary>(nullptr);
  }

  AlleleCountSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlleleCountSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlleleCountSummary& from);
  void MergeFrom(const AlleleCountSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlleleCountSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.AlleleCountSummary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceNameFieldNumber = 1,
    kRefBaseFieldNumber = 3,
    kPositionFieldNumber = 2,
    kRefSupportingReadCountFieldNumber = 4,
    kTotalReadCountFieldNumber = 5,
    kRefNonconfidentReadCountFieldNumber = 6,
  };
  // string reference_name = 1;
  void clear_reference_name();
  const std::string& reference_name() const;
  void set_reference_name(const std::string& value);
  void set_reference_name(std::string&& value);
  void set_reference_name(const char* value);
  void set_reference_name(const char* value, size_t size);
  std::string* mutable_reference_name();
  std::string* release_reference_name();
  void set_allocated_reference_name(std::string* reference_name);

  // string ref_base = 3;
  void clear_ref_base();
  const std::string& ref_base() const;
  void set_ref_base(const std::string& value);
  void set_ref_base(std::string&& value);
  void set_ref_base(const char* value);
  void set_ref_base(const char* value, size_t size);
  std::string* mutable_ref_base();
  std::string* release_ref_base();
  void set_allocated_ref_base(std::string* ref_base);

  // int64 position = 2;
  void clear_position();
  ::PROTOBUF_NAMESPACE_ID::int64 position() const;
  void set_position(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 ref_supporting_read_count = 4;
  void clear_ref_supporting_read_count();
  ::PROTOBUF_NAMESPACE_ID::int32 ref_supporting_read_count() const;
  void set_ref_supporting_read_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 total_read_count = 5;
  void clear_total_read_count();
  ::PROTOBUF_NAMESPACE_ID::int32 total_read_count() const;
  void set_total_read_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ref_nonconfident_read_count = 6;
  void clear_ref_nonconfident_read_count();
  ::PROTOBUF_NAMESPACE_ID::int32 ref_nonconfident_read_count() const;
  void set_ref_nonconfident_read_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.AlleleCountSummary)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_base_;
  ::PROTOBUF_NAMESPACE_ID::int64 position_;
  ::PROTOBUF_NAMESPACE_ID::int32 ref_supporting_read_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_read_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 ref_nonconfident_read_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class DeepVariantCall_SupportingReads :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.DeepVariantCall.SupportingReads) */ {
 public:
  DeepVariantCall_SupportingReads();
  virtual ~DeepVariantCall_SupportingReads();

  DeepVariantCall_SupportingReads(const DeepVariantCall_SupportingReads& from);
  DeepVariantCall_SupportingReads(DeepVariantCall_SupportingReads&& from) noexcept
    : DeepVariantCall_SupportingReads() {
    *this = ::std::move(from);
  }

  inline DeepVariantCall_SupportingReads& operator=(const DeepVariantCall_SupportingReads& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeepVariantCall_SupportingReads& operator=(DeepVariantCall_SupportingReads&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeepVariantCall_SupportingReads& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeepVariantCall_SupportingReads* internal_default_instance() {
    return reinterpret_cast<const DeepVariantCall_SupportingReads*>(
               &_DeepVariantCall_SupportingReads_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeepVariantCall_SupportingReads& a, DeepVariantCall_SupportingReads& b) {
    a.Swap(&b);
  }
  inline void Swap(DeepVariantCall_SupportingReads* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeepVariantCall_SupportingReads* New() const final {
    return CreateMaybeMessage<DeepVariantCall_SupportingReads>(nullptr);
  }

  DeepVariantCall_SupportingReads* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeepVariantCall_SupportingReads>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeepVariantCall_SupportingReads& from);
  void MergeFrom(const DeepVariantCall_SupportingReads& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeepVariantCall_SupportingReads* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.DeepVariantCall.SupportingReads";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadNamesFieldNumber = 1,
  };
  // repeated string read_names = 1;
  int read_names_size() const;
  void clear_read_names();
  const std::string& read_names(int index) const;
  std::string* mutable_read_names(int index);
  void set_read_names(int index, const std::string& value);
  void set_read_names(int index, std::string&& value);
  void set_read_names(int index, const char* value);
  void set_read_names(int index, const char* value, size_t size);
  std::string* add_read_names();
  void add_read_names(const std::string& value);
  void add_read_names(std::string&& value);
  void add_read_names(const char* value);
  void add_read_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& read_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_read_names();

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.DeepVariantCall.SupportingReads)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> read_names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class DeepVariantCall_AlleleSupportEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DeepVariantCall_AlleleSupportEntry_DoNotUse, 
    std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DeepVariantCall_AlleleSupportEntry_DoNotUse, 
    std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  DeepVariantCall_AlleleSupportEntry_DoNotUse();
  DeepVariantCall_AlleleSupportEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DeepVariantCall_AlleleSupportEntry_DoNotUse& other);
  static const DeepVariantCall_AlleleSupportEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DeepVariantCall_AlleleSupportEntry_DoNotUse*>(&_DeepVariantCall_AlleleSupportEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "learning.genomics.deepvariant.DeepVariantCall.AlleleSupportEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[7];
  }

  public:
};

// -------------------------------------------------------------------

class DeepVariantCall_AlleleFrequencyEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DeepVariantCall_AlleleFrequencyEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DeepVariantCall_AlleleFrequencyEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > SuperType;
  DeepVariantCall_AlleleFrequencyEntry_DoNotUse();
  DeepVariantCall_AlleleFrequencyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DeepVariantCall_AlleleFrequencyEntry_DoNotUse& other);
  static const DeepVariantCall_AlleleFrequencyEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DeepVariantCall_AlleleFrequencyEntry_DoNotUse*>(&_DeepVariantCall_AlleleFrequencyEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "learning.genomics.deepvariant.DeepVariantCall.AlleleFrequencyEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class DeepVariantCall_ReadSupport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.DeepVariantCall.ReadSupport) */ {
 public:
  DeepVariantCall_ReadSupport();
  virtual ~DeepVariantCall_ReadSupport();

  DeepVariantCall_ReadSupport(const DeepVariantCall_ReadSupport& from);
  DeepVariantCall_ReadSupport(DeepVariantCall_ReadSupport&& from) noexcept
    : DeepVariantCall_ReadSupport() {
    *this = ::std::move(from);
  }

  inline DeepVariantCall_ReadSupport& operator=(const DeepVariantCall_ReadSupport& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeepVariantCall_ReadSupport& operator=(DeepVariantCall_ReadSupport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeepVariantCall_ReadSupport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeepVariantCall_ReadSupport* internal_default_instance() {
    return reinterpret_cast<const DeepVariantCall_ReadSupport*>(
               &_DeepVariantCall_ReadSupport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeepVariantCall_ReadSupport& a, DeepVariantCall_ReadSupport& b) {
    a.Swap(&b);
  }
  inline void Swap(DeepVariantCall_ReadSupport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeepVariantCall_ReadSupport* New() const final {
    return CreateMaybeMessage<DeepVariantCall_ReadSupport>(nullptr);
  }

  DeepVariantCall_ReadSupport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeepVariantCall_ReadSupport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeepVariantCall_ReadSupport& from);
  void MergeFrom(const DeepVariantCall_ReadSupport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeepVariantCall_ReadSupport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.DeepVariantCall.ReadSupport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadNameFieldNumber = 1,
    kIsLowQualityFieldNumber = 2,
  };
  // string read_name = 1;
  void clear_read_name();
  const std::string& read_name() const;
  void set_read_name(const std::string& value);
  void set_read_name(std::string&& value);
  void set_read_name(const char* value);
  void set_read_name(const char* value, size_t size);
  std::string* mutable_read_name();
  std::string* release_read_name();
  void set_allocated_read_name(std::string* read_name);

  // bool is_low_quality = 2;
  void clear_is_low_quality();
  bool is_low_quality() const;
  void set_is_low_quality(bool value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.DeepVariantCall.ReadSupport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr read_name_;
  bool is_low_quality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class DeepVariantCall_SupportingReadsExt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt) */ {
 public:
  DeepVariantCall_SupportingReadsExt();
  virtual ~DeepVariantCall_SupportingReadsExt();

  DeepVariantCall_SupportingReadsExt(const DeepVariantCall_SupportingReadsExt& from);
  DeepVariantCall_SupportingReadsExt(DeepVariantCall_SupportingReadsExt&& from) noexcept
    : DeepVariantCall_SupportingReadsExt() {
    *this = ::std::move(from);
  }

  inline DeepVariantCall_SupportingReadsExt& operator=(const DeepVariantCall_SupportingReadsExt& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeepVariantCall_SupportingReadsExt& operator=(DeepVariantCall_SupportingReadsExt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeepVariantCall_SupportingReadsExt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeepVariantCall_SupportingReadsExt* internal_default_instance() {
    return reinterpret_cast<const DeepVariantCall_SupportingReadsExt*>(
               &_DeepVariantCall_SupportingReadsExt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeepVariantCall_SupportingReadsExt& a, DeepVariantCall_SupportingReadsExt& b) {
    a.Swap(&b);
  }
  inline void Swap(DeepVariantCall_SupportingReadsExt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeepVariantCall_SupportingReadsExt* New() const final {
    return CreateMaybeMessage<DeepVariantCall_SupportingReadsExt>(nullptr);
  }

  DeepVariantCall_SupportingReadsExt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeepVariantCall_SupportingReadsExt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeepVariantCall_SupportingReadsExt& from);
  void MergeFrom(const DeepVariantCall_SupportingReadsExt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeepVariantCall_SupportingReadsExt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadInfosFieldNumber = 1,
  };
  // repeated .learning.genomics.deepvariant.DeepVariantCall.ReadSupport read_infos = 1;
  int read_infos_size() const;
  void clear_read_infos();
  ::learning::genomics::deepvariant::DeepVariantCall_ReadSupport* mutable_read_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::DeepVariantCall_ReadSupport >*
      mutable_read_infos();
  const ::learning::genomics::deepvariant::DeepVariantCall_ReadSupport& read_infos(int index) const;
  ::learning::genomics::deepvariant::DeepVariantCall_ReadSupport* add_read_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::DeepVariantCall_ReadSupport >&
      read_infos() const;

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::DeepVariantCall_ReadSupport > read_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class DeepVariantCall_AlleleSupportExtEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DeepVariantCall_AlleleSupportExtEntry_DoNotUse, 
    std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DeepVariantCall_AlleleSupportExtEntry_DoNotUse, 
    std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  DeepVariantCall_AlleleSupportExtEntry_DoNotUse();
  DeepVariantCall_AlleleSupportExtEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DeepVariantCall_AlleleSupportExtEntry_DoNotUse& other);
  static const DeepVariantCall_AlleleSupportExtEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DeepVariantCall_AlleleSupportExtEntry_DoNotUse*>(&_DeepVariantCall_AlleleSupportExtEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "learning.genomics.deepvariant.DeepVariantCall.AlleleSupportExtEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class DeepVariantCall :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.DeepVariantCall) */ {
 public:
  DeepVariantCall();
  virtual ~DeepVariantCall();

  DeepVariantCall(const DeepVariantCall& from);
  DeepVariantCall(DeepVariantCall&& from) noexcept
    : DeepVariantCall() {
    *this = ::std::move(from);
  }

  inline DeepVariantCall& operator=(const DeepVariantCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeepVariantCall& operator=(DeepVariantCall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeepVariantCall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeepVariantCall* internal_default_instance() {
    return reinterpret_cast<const DeepVariantCall*>(
               &_DeepVariantCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DeepVariantCall& a, DeepVariantCall& b) {
    a.Swap(&b);
  }
  inline void Swap(DeepVariantCall* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeepVariantCall* New() const final {
    return CreateMaybeMessage<DeepVariantCall>(nullptr);
  }

  DeepVariantCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeepVariantCall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeepVariantCall& from);
  void MergeFrom(const DeepVariantCall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeepVariantCall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.DeepVariantCall";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeepVariantCall_SupportingReads SupportingReads;
  typedef DeepVariantCall_ReadSupport ReadSupport;
  typedef DeepVariantCall_SupportingReadsExt SupportingReadsExt;

  // accessors -------------------------------------------------------

  enum : int {
    kAlleleSupportFieldNumber = 2,
    kAlleleFrequencyFieldNumber = 3,
    kRefSupportFieldNumber = 4,
    kAlleleSupportExtFieldNumber = 5,
    kVariantFieldNumber = 1,
    kRefSupportExtFieldNumber = 6,
  };
  // map<string, .learning.genomics.deepvariant.DeepVariantCall.SupportingReads> allele_support = 2;
  int allele_support_size() const;
  void clear_allele_support();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads >&
      allele_support() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads >*
      mutable_allele_support();

  // map<string, float> allele_frequency = 3;
  int allele_frequency_size() const;
  void clear_allele_frequency();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      allele_frequency() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_allele_frequency();

  // repeated string ref_support = 4;
  int ref_support_size() const;
  void clear_ref_support();
  const std::string& ref_support(int index) const;
  std::string* mutable_ref_support(int index);
  void set_ref_support(int index, const std::string& value);
  void set_ref_support(int index, std::string&& value);
  void set_ref_support(int index, const char* value);
  void set_ref_support(int index, const char* value, size_t size);
  std::string* add_ref_support();
  void add_ref_support(const std::string& value);
  void add_ref_support(std::string&& value);
  void add_ref_support(const char* value);
  void add_ref_support(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ref_support() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ref_support();

  // map<string, .learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt> allele_support_ext = 5;
  int allele_support_ext_size() const;
  void clear_allele_support_ext();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt >&
      allele_support_ext() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt >*
      mutable_allele_support_ext();

  // .nucleus.genomics.v1.Variant variant = 1;
  bool has_variant() const;
  void clear_variant();
  const ::nucleus::genomics::v1::Variant& variant() const;
  ::nucleus::genomics::v1::Variant* release_variant();
  ::nucleus::genomics::v1::Variant* mutable_variant();
  void set_allocated_variant(::nucleus::genomics::v1::Variant* variant);

  // .learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt ref_support_ext = 6;
  bool has_ref_support_ext() const;
  void clear_ref_support_ext();
  const ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt& ref_support_ext() const;
  ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt* release_ref_support_ext();
  ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt* mutable_ref_support_ext();
  void set_allocated_ref_support_ext(::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt* ref_support_ext);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.DeepVariantCall)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DeepVariantCall_AlleleSupportEntry_DoNotUse,
      std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > allele_support_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DeepVariantCall_AlleleFrequencyEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
      0 > allele_frequency_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ref_support_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DeepVariantCall_AlleleSupportExtEntry_DoNotUse,
      std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > allele_support_ext_;
  ::nucleus::genomics::v1::Variant* variant_;
  ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt* ref_support_ext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class AlleleCounterOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.AlleleCounterOptions) */ {
 public:
  AlleleCounterOptions();
  virtual ~AlleleCounterOptions();

  AlleleCounterOptions(const AlleleCounterOptions& from);
  AlleleCounterOptions(AlleleCounterOptions&& from) noexcept
    : AlleleCounterOptions() {
    *this = ::std::move(from);
  }

  inline AlleleCounterOptions& operator=(const AlleleCounterOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlleleCounterOptions& operator=(AlleleCounterOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlleleCounterOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlleleCounterOptions* internal_default_instance() {
    return reinterpret_cast<const AlleleCounterOptions*>(
               &_AlleleCounterOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AlleleCounterOptions& a, AlleleCounterOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(AlleleCounterOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlleleCounterOptions* New() const final {
    return CreateMaybeMessage<AlleleCounterOptions>(nullptr);
  }

  AlleleCounterOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlleleCounterOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlleleCounterOptions& from);
  void MergeFrom(const AlleleCounterOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlleleCounterOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.AlleleCounterOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadRequirementsFieldNumber = 2,
    kPartitionSizeFieldNumber = 1,
    kTrackRefReadsFieldNumber = 3,
    kNormalizeReadsFieldNumber = 4,
    kKeepLegacyBehaviorFieldNumber = 5,
  };
  // .nucleus.genomics.v1.ReadRequirements read_requirements = 2;
  bool has_read_requirements() const;
  void clear_read_requirements();
  const ::nucleus::genomics::v1::ReadRequirements& read_requirements() const;
  ::nucleus::genomics::v1::ReadRequirements* release_read_requirements();
  ::nucleus::genomics::v1::ReadRequirements* mutable_read_requirements();
  void set_allocated_read_requirements(::nucleus::genomics::v1::ReadRequirements* read_requirements);

  // int32 partition_size = 1;
  void clear_partition_size();
  ::PROTOBUF_NAMESPACE_ID::int32 partition_size() const;
  void set_partition_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool track_ref_reads = 3;
  void clear_track_ref_reads();
  bool track_ref_reads() const;
  void set_track_ref_reads(bool value);

  // bool normalize_reads = 4;
  void clear_normalize_reads();
  bool normalize_reads() const;
  void set_normalize_reads(bool value);

  // bool keep_legacy_behavior = 5;
  void clear_keep_legacy_behavior();
  bool keep_legacy_behavior() const;
  void set_keep_legacy_behavior(bool value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.AlleleCounterOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::nucleus::genomics::v1::ReadRequirements* read_requirements_;
  ::PROTOBUF_NAMESPACE_ID::int32 partition_size_;
  bool track_ref_reads_;
  bool normalize_reads_;
  bool keep_legacy_behavior_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class CallVariantsOutput_AltAlleleIndices :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices) */ {
 public:
  CallVariantsOutput_AltAlleleIndices();
  virtual ~CallVariantsOutput_AltAlleleIndices();

  CallVariantsOutput_AltAlleleIndices(const CallVariantsOutput_AltAlleleIndices& from);
  CallVariantsOutput_AltAlleleIndices(CallVariantsOutput_AltAlleleIndices&& from) noexcept
    : CallVariantsOutput_AltAlleleIndices() {
    *this = ::std::move(from);
  }

  inline CallVariantsOutput_AltAlleleIndices& operator=(const CallVariantsOutput_AltAlleleIndices& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallVariantsOutput_AltAlleleIndices& operator=(CallVariantsOutput_AltAlleleIndices&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CallVariantsOutput_AltAlleleIndices& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallVariantsOutput_AltAlleleIndices* internal_default_instance() {
    return reinterpret_cast<const CallVariantsOutput_AltAlleleIndices*>(
               &_CallVariantsOutput_AltAlleleIndices_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CallVariantsOutput_AltAlleleIndices& a, CallVariantsOutput_AltAlleleIndices& b) {
    a.Swap(&b);
  }
  inline void Swap(CallVariantsOutput_AltAlleleIndices* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CallVariantsOutput_AltAlleleIndices* New() const final {
    return CreateMaybeMessage<CallVariantsOutput_AltAlleleIndices>(nullptr);
  }

  CallVariantsOutput_AltAlleleIndices* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CallVariantsOutput_AltAlleleIndices>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CallVariantsOutput_AltAlleleIndices& from);
  void MergeFrom(const CallVariantsOutput_AltAlleleIndices& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallVariantsOutput_AltAlleleIndices* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndicesFieldNumber = 1,
  };
  // repeated int32 indices = 1;
  int indices_size() const;
  void clear_indices();
  ::PROTOBUF_NAMESPACE_ID::int32 indices(int index) const;
  void set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_indices();

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > indices_;
  mutable std::atomic<int> _indices_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class CallVariantsOutput_DebugInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo) */ {
 public:
  CallVariantsOutput_DebugInfo();
  virtual ~CallVariantsOutput_DebugInfo();

  CallVariantsOutput_DebugInfo(const CallVariantsOutput_DebugInfo& from);
  CallVariantsOutput_DebugInfo(CallVariantsOutput_DebugInfo&& from) noexcept
    : CallVariantsOutput_DebugInfo() {
    *this = ::std::move(from);
  }

  inline CallVariantsOutput_DebugInfo& operator=(const CallVariantsOutput_DebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallVariantsOutput_DebugInfo& operator=(CallVariantsOutput_DebugInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CallVariantsOutput_DebugInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallVariantsOutput_DebugInfo* internal_default_instance() {
    return reinterpret_cast<const CallVariantsOutput_DebugInfo*>(
               &_CallVariantsOutput_DebugInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CallVariantsOutput_DebugInfo& a, CallVariantsOutput_DebugInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CallVariantsOutput_DebugInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CallVariantsOutput_DebugInfo* New() const final {
    return CreateMaybeMessage<CallVariantsOutput_DebugInfo>(nullptr);
  }

  CallVariantsOutput_DebugInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CallVariantsOutput_DebugInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CallVariantsOutput_DebugInfo& from);
  void MergeFrom(const CallVariantsOutput_DebugInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallVariantsOutput_DebugInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.CallVariantsOutput.DebugInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogitsFieldNumber = 6,
    kPrelogitsFieldNumber = 7,
    kPredictedLabelFieldNumber = 1,
    kHasInsertionFieldNumber = 2,
    kHasDeletionFieldNumber = 3,
    kIsSnpFieldNumber = 4,
    kTrueLabelFieldNumber = 5,
  };
  // repeated double logits = 6;
  int logits_size() const;
  void clear_logits();
  double logits(int index) const;
  void set_logits(int index, double value);
  void add_logits(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      logits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_logits();

  // repeated double prelogits = 7;
  int prelogits_size() const;
  void clear_prelogits();
  double prelogits(int index) const;
  void set_prelogits(int index, double value);
  void add_prelogits(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      prelogits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_prelogits();

  // int32 predicted_label = 1;
  void clear_predicted_label();
  ::PROTOBUF_NAMESPACE_ID::int32 predicted_label() const;
  void set_predicted_label(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool has_insertion = 2;
  void clear_has_insertion();
  bool has_insertion() const;
  void set_has_insertion(bool value);

  // bool has_deletion = 3;
  void clear_has_deletion();
  bool has_deletion() const;
  void set_has_deletion(bool value);

  // bool is_snp = 4;
  void clear_is_snp();
  bool is_snp() const;
  void set_is_snp(bool value);

  // int32 true_label = 5;
  void clear_true_label();
  ::PROTOBUF_NAMESPACE_ID::int32 true_label() const;
  void set_true_label(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > logits_;
  mutable std::atomic<int> _logits_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > prelogits_;
  mutable std::atomic<int> _prelogits_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 predicted_label_;
  bool has_insertion_;
  bool has_deletion_;
  bool is_snp_;
  ::PROTOBUF_NAMESPACE_ID::int32 true_label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class CallVariantsOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.CallVariantsOutput) */ {
 public:
  CallVariantsOutput();
  virtual ~CallVariantsOutput();

  CallVariantsOutput(const CallVariantsOutput& from);
  CallVariantsOutput(CallVariantsOutput&& from) noexcept
    : CallVariantsOutput() {
    *this = ::std::move(from);
  }

  inline CallVariantsOutput& operator=(const CallVariantsOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallVariantsOutput& operator=(CallVariantsOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CallVariantsOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CallVariantsOutput* internal_default_instance() {
    return reinterpret_cast<const CallVariantsOutput*>(
               &_CallVariantsOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CallVariantsOutput& a, CallVariantsOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(CallVariantsOutput* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CallVariantsOutput* New() const final {
    return CreateMaybeMessage<CallVariantsOutput>(nullptr);
  }

  CallVariantsOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CallVariantsOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CallVariantsOutput& from);
  void MergeFrom(const CallVariantsOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallVariantsOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.CallVariantsOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CallVariantsOutput_AltAlleleIndices AltAlleleIndices;
  typedef CallVariantsOutput_DebugInfo DebugInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kGenotypeProbabilitiesFieldNumber = 3,
    kVariantFieldNumber = 1,
    kAltAlleleIndicesFieldNumber = 2,
    kDebugInfoFieldNumber = 4,
  };
  // repeated double genotype_probabilities = 3;
  int genotype_probabilities_size() const;
  void clear_genotype_probabilities();
  double genotype_probabilities(int index) const;
  void set_genotype_probabilities(int index, double value);
  void add_genotype_probabilities(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      genotype_probabilities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_genotype_probabilities();

  // .nucleus.genomics.v1.Variant variant = 1;
  bool has_variant() const;
  void clear_variant();
  const ::nucleus::genomics::v1::Variant& variant() const;
  ::nucleus::genomics::v1::Variant* release_variant();
  ::nucleus::genomics::v1::Variant* mutable_variant();
  void set_allocated_variant(::nucleus::genomics::v1::Variant* variant);

  // .learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices alt_allele_indices = 2;
  bool has_alt_allele_indices() const;
  void clear_alt_allele_indices();
  const ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices& alt_allele_indices() const;
  ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices* release_alt_allele_indices();
  ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices* mutable_alt_allele_indices();
  void set_allocated_alt_allele_indices(::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices* alt_allele_indices);

  // .learning.genomics.deepvariant.CallVariantsOutput.DebugInfo debug_info = 4;
  bool has_debug_info() const;
  void clear_debug_info();
  const ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo& debug_info() const;
  ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo* release_debug_info();
  ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo* mutable_debug_info();
  void set_allocated_debug_info(::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo* debug_info);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.CallVariantsOutput)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > genotype_probabilities_;
  mutable std::atomic<int> _genotype_probabilities_cached_byte_size_;
  ::nucleus::genomics::v1::Variant* variant_;
  ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices* alt_allele_indices_;
  ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo* debug_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class VariantCallerOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.VariantCallerOptions) */ {
 public:
  VariantCallerOptions();
  virtual ~VariantCallerOptions();

  VariantCallerOptions(const VariantCallerOptions& from);
  VariantCallerOptions(VariantCallerOptions&& from) noexcept
    : VariantCallerOptions() {
    *this = ::std::move(from);
  }

  inline VariantCallerOptions& operator=(const VariantCallerOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariantCallerOptions& operator=(VariantCallerOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VariantCallerOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariantCallerOptions* internal_default_instance() {
    return reinterpret_cast<const VariantCallerOptions*>(
               &_VariantCallerOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(VariantCallerOptions& a, VariantCallerOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(VariantCallerOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariantCallerOptions* New() const final {
    return CreateMaybeMessage<VariantCallerOptions>(nullptr);
  }

  VariantCallerOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariantCallerOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariantCallerOptions& from);
  void MergeFrom(const VariantCallerOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariantCallerOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.VariantCallerOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleNameFieldNumber = 7,
    kMinCountSnpsFieldNumber = 1,
    kMinCountIndelsFieldNumber = 2,
    kMinFractionSnpsFieldNumber = 3,
    kMinFractionIndelsFieldNumber = 4,
    kFractionReferenceSitesToEmitFieldNumber = 5,
    kRandomSeedFieldNumber = 6,
    kPErrorFieldNumber = 8,
    kMaxGqFieldNumber = 9,
    kGqResolutionFieldNumber = 10,
    kPloidyFieldNumber = 11,
    kMinFractionMultiplierFieldNumber = 12,
    kSkipUncalledGenotypesFieldNumber = 13,
    kTrackRefReadsFieldNumber = 14,
  };
  // string sample_name = 7;
  void clear_sample_name();
  const std::string& sample_name() const;
  void set_sample_name(const std::string& value);
  void set_sample_name(std::string&& value);
  void set_sample_name(const char* value);
  void set_sample_name(const char* value, size_t size);
  std::string* mutable_sample_name();
  std::string* release_sample_name();
  void set_allocated_sample_name(std::string* sample_name);

  // int32 min_count_snps = 1;
  void clear_min_count_snps();
  ::PROTOBUF_NAMESPACE_ID::int32 min_count_snps() const;
  void set_min_count_snps(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 min_count_indels = 2;
  void clear_min_count_indels();
  ::PROTOBUF_NAMESPACE_ID::int32 min_count_indels() const;
  void set_min_count_indels(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float min_fraction_snps = 3;
  void clear_min_fraction_snps();
  float min_fraction_snps() const;
  void set_min_fraction_snps(float value);

  // float min_fraction_indels = 4;
  void clear_min_fraction_indels();
  float min_fraction_indels() const;
  void set_min_fraction_indels(float value);

  // float fraction_reference_sites_to_emit = 5;
  void clear_fraction_reference_sites_to_emit();
  float fraction_reference_sites_to_emit() const;
  void set_fraction_reference_sites_to_emit(float value);

  // uint32 random_seed = 6;
  void clear_random_seed();
  ::PROTOBUF_NAMESPACE_ID::uint32 random_seed() const;
  void set_random_seed(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // float p_error = 8;
  void clear_p_error();
  float p_error() const;
  void set_p_error(float value);

  // int32 max_gq = 9;
  void clear_max_gq();
  ::PROTOBUF_NAMESPACE_ID::int32 max_gq() const;
  void set_max_gq(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 gq_resolution = 10;
  void clear_gq_resolution();
  ::PROTOBUF_NAMESPACE_ID::int32 gq_resolution() const;
  void set_gq_resolution(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 ploidy = 11;
  void clear_ploidy();
  ::PROTOBUF_NAMESPACE_ID::int32 ploidy() const;
  void set_ploidy(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float min_fraction_multiplier = 12;
  void clear_min_fraction_multiplier();
  float min_fraction_multiplier() const;
  void set_min_fraction_multiplier(float value);

  // bool skip_uncalled_genotypes = 13;
  void clear_skip_uncalled_genotypes();
  bool skip_uncalled_genotypes() const;
  void set_skip_uncalled_genotypes(bool value);

  // bool track_ref_reads = 14;
  void clear_track_ref_reads();
  bool track_ref_reads() const;
  void set_track_ref_reads(bool value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.VariantCallerOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sample_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_count_snps_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_count_indels_;
  float min_fraction_snps_;
  float min_fraction_indels_;
  float fraction_reference_sites_to_emit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 random_seed_;
  float p_error_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_gq_;
  ::PROTOBUF_NAMESPACE_ID::int32 gq_resolution_;
  ::PROTOBUF_NAMESPACE_ID::int32 ploidy_;
  float min_fraction_multiplier_;
  bool skip_uncalled_genotypes_;
  bool track_ref_reads_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class VariantLabelerOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.VariantLabelerOptions) */ {
 public:
  VariantLabelerOptions();
  virtual ~VariantLabelerOptions();

  VariantLabelerOptions(const VariantLabelerOptions& from);
  VariantLabelerOptions(VariantLabelerOptions&& from) noexcept
    : VariantLabelerOptions() {
    *this = ::std::move(from);
  }

  inline VariantLabelerOptions& operator=(const VariantLabelerOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariantLabelerOptions& operator=(VariantLabelerOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VariantLabelerOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VariantLabelerOptions* internal_default_instance() {
    return reinterpret_cast<const VariantLabelerOptions*>(
               &_VariantLabelerOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(VariantLabelerOptions& a, VariantLabelerOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(VariantLabelerOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariantLabelerOptions* New() const final {
    return CreateMaybeMessage<VariantLabelerOptions>(nullptr);
  }

  VariantLabelerOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariantLabelerOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariantLabelerOptions& from);
  void MergeFrom(const VariantLabelerOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariantLabelerOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.VariantLabelerOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.VariantLabelerOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class PileupImageOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.PileupImageOptions) */ {
 public:
  PileupImageOptions();
  virtual ~PileupImageOptions();

  PileupImageOptions(const PileupImageOptions& from);
  PileupImageOptions(PileupImageOptions&& from) noexcept
    : PileupImageOptions() {
    *this = ::std::move(from);
  }

  inline PileupImageOptions& operator=(const PileupImageOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline PileupImageOptions& operator=(PileupImageOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PileupImageOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PileupImageOptions* internal_default_instance() {
    return reinterpret_cast<const PileupImageOptions*>(
               &_PileupImageOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PileupImageOptions& a, PileupImageOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(PileupImageOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PileupImageOptions* New() const final {
    return CreateMaybeMessage<PileupImageOptions>(nullptr);
  }

  PileupImageOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PileupImageOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PileupImageOptions& from);
  void MergeFrom(const PileupImageOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PileupImageOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.PileupImageOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PileupImageOptions_MultiAllelicMode MultiAllelicMode;
  static constexpr MultiAllelicMode UNSPECIFIED =
    PileupImageOptions_MultiAllelicMode_UNSPECIFIED;
  static constexpr MultiAllelicMode ADD_HET_ALT_IMAGES =
    PileupImageOptions_MultiAllelicMode_ADD_HET_ALT_IMAGES;
  static constexpr MultiAllelicMode NO_HET_ALT_IMAGES =
    PileupImageOptions_MultiAllelicMode_NO_HET_ALT_IMAGES;
  static inline bool MultiAllelicMode_IsValid(int value) {
    return PileupImageOptions_MultiAllelicMode_IsValid(value);
  }
  static constexpr MultiAllelicMode MultiAllelicMode_MIN =
    PileupImageOptions_MultiAllelicMode_MultiAllelicMode_MIN;
  static constexpr MultiAllelicMode MultiAllelicMode_MAX =
    PileupImageOptions_MultiAllelicMode_MultiAllelicMode_MAX;
  static constexpr int MultiAllelicMode_ARRAYSIZE =
    PileupImageOptions_MultiAllelicMode_MultiAllelicMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MultiAllelicMode_descriptor() {
    return PileupImageOptions_MultiAllelicMode_descriptor();
  }
  template<typename T>
  static inline const std::string& MultiAllelicMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MultiAllelicMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MultiAllelicMode_Name.");
    return PileupImageOptions_MultiAllelicMode_Name(enum_t_value);
  }
  static inline bool MultiAllelicMode_Parse(const std::string& name,
      MultiAllelicMode* value) {
    return PileupImageOptions_MultiAllelicMode_Parse(name, value);
  }

  typedef PileupImageOptions_SequencingType SequencingType;
  static constexpr SequencingType UNSPECIFIED_SEQ_TYPE =
    PileupImageOptions_SequencingType_UNSPECIFIED_SEQ_TYPE;
  static constexpr SequencingType WGS =
    PileupImageOptions_SequencingType_WGS;
  static constexpr SequencingType WES =
    PileupImageOptions_SequencingType_WES;
  static constexpr SequencingType TRIO =
    PileupImageOptions_SequencingType_TRIO;
  static inline bool SequencingType_IsValid(int value) {
    return PileupImageOptions_SequencingType_IsValid(value);
  }
  static constexpr SequencingType SequencingType_MIN =
    PileupImageOptions_SequencingType_SequencingType_MIN;
  static constexpr SequencingType SequencingType_MAX =
    PileupImageOptions_SequencingType_SequencingType_MAX;
  static constexpr int SequencingType_ARRAYSIZE =
    PileupImageOptions_SequencingType_SequencingType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SequencingType_descriptor() {
    return PileupImageOptions_SequencingType_descriptor();
  }
  template<typename T>
  static inline const std::string& SequencingType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SequencingType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SequencingType_Name.");
    return PileupImageOptions_SequencingType_Name(enum_t_value);
  }
  static inline bool SequencingType_Parse(const std::string& name,
      SequencingType* value) {
    return PileupImageOptions_SequencingType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 39,
    kIndelAnchoringBaseCharFieldNumber = 13,
    kUnusedInsertBaseCharFieldNumber = 23,
    kUnusedDeleteBaseCharFieldNumber = 24,
    kAltAlignedPileupFieldNumber = 30,
    kTypesToAltAlignFieldNumber = 36,
    kReadRequirementsFieldNumber = 18,
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
    kReferenceBandHeightFieldNumber = 3,
    kBaseColorOffsetAAndGFieldNumber = 4,
    kBaseColorOffsetTAndCFieldNumber = 5,
    kBaseColorStrideFieldNumber = 6,
    kReferenceAlphaFieldNumber = 7,
    kReferenceBaseQualityFieldNumber = 8,
    kAlleleSupportingReadAlphaFieldNumber = 9,
    kAlleleUnsupportingReadAlphaFieldNumber = 10,
    kReferenceMatchingReadAlphaFieldNumber = 11,
    kReferenceMismatchingReadAlphaFieldNumber = 12,
    kPositiveStrandColorFieldNumber = 14,
    kNegativeStrandColorFieldNumber = 15,
    kBaseQualityCapFieldNumber = 16,
    kReadOverlapBufferBpFieldNumber = 17,
    kMultiAllelicModeFieldNumber = 19,
    kMappingQualityCapFieldNumber = 20,
    kRandomSeedFieldNumber = 21,
    kNumChannelsFieldNumber = 22,
    kSequencingTypeFieldNumber = 27,
    kUnusedCustomPileupImageFieldNumber = 25,
    kUnusedSequencingTypeImageFieldNumber = 26,
    kSortByHaplotypesFieldNumber = 31,
    kUseAlleleFrequencyFieldNumber = 34,
    kOtherAlleleSupportingReadAlphaFieldNumber = 32,
    kMinNonZeroAlleleFrequencyFieldNumber = 33,
    kSortByHaplotypesSampleHpTagFieldNumber = 35,
    kAddHpChannelFieldNumber = 37,
    kHpTagForAssemblyPolishingFieldNumber = 38,
  };
  // repeated string channels = 39;
  int channels_size() const;
  void clear_channels();
  const std::string& channels(int index) const;
  std::string* mutable_channels(int index);
  void set_channels(int index, const std::string& value);
  void set_channels(int index, std::string&& value);
  void set_channels(int index, const char* value);
  void set_channels(int index, const char* value, size_t size);
  std::string* add_channels();
  void add_channels(const std::string& value);
  void add_channels(std::string&& value);
  void add_channels(const char* value);
  void add_channels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_channels();

  // string indel_anchoring_base_char = 13;
  void clear_indel_anchoring_base_char();
  const std::string& indel_anchoring_base_char() const;
  void set_indel_anchoring_base_char(const std::string& value);
  void set_indel_anchoring_base_char(std::string&& value);
  void set_indel_anchoring_base_char(const char* value);
  void set_indel_anchoring_base_char(const char* value, size_t size);
  std::string* mutable_indel_anchoring_base_char();
  std::string* release_indel_anchoring_base_char();
  void set_allocated_indel_anchoring_base_char(std::string* indel_anchoring_base_char);

  // string unused_insert_base_char = 23;
  void clear_unused_insert_base_char();
  const std::string& unused_insert_base_char() const;
  void set_unused_insert_base_char(const std::string& value);
  void set_unused_insert_base_char(std::string&& value);
  void set_unused_insert_base_char(const char* value);
  void set_unused_insert_base_char(const char* value, size_t size);
  std::string* mutable_unused_insert_base_char();
  std::string* release_unused_insert_base_char();
  void set_allocated_unused_insert_base_char(std::string* unused_insert_base_char);

  // string unused_delete_base_char = 24;
  void clear_unused_delete_base_char();
  const std::string& unused_delete_base_char() const;
  void set_unused_delete_base_char(const std::string& value);
  void set_unused_delete_base_char(std::string&& value);
  void set_unused_delete_base_char(const char* value);
  void set_unused_delete_base_char(const char* value, size_t size);
  std::string* mutable_unused_delete_base_char();
  std::string* release_unused_delete_base_char();
  void set_allocated_unused_delete_base_char(std::string* unused_delete_base_char);

  // string alt_aligned_pileup = 30;
  void clear_alt_aligned_pileup();
  const std::string& alt_aligned_pileup() const;
  void set_alt_aligned_pileup(const std::string& value);
  void set_alt_aligned_pileup(std::string&& value);
  void set_alt_aligned_pileup(const char* value);
  void set_alt_aligned_pileup(const char* value, size_t size);
  std::string* mutable_alt_aligned_pileup();
  std::string* release_alt_aligned_pileup();
  void set_allocated_alt_aligned_pileup(std::string* alt_aligned_pileup);

  // string types_to_alt_align = 36;
  void clear_types_to_alt_align();
  const std::string& types_to_alt_align() const;
  void set_types_to_alt_align(const std::string& value);
  void set_types_to_alt_align(std::string&& value);
  void set_types_to_alt_align(const char* value);
  void set_types_to_alt_align(const char* value, size_t size);
  std::string* mutable_types_to_alt_align();
  std::string* release_types_to_alt_align();
  void set_allocated_types_to_alt_align(std::string* types_to_alt_align);

  // .nucleus.genomics.v1.ReadRequirements read_requirements = 18;
  bool has_read_requirements() const;
  void clear_read_requirements();
  const ::nucleus::genomics::v1::ReadRequirements& read_requirements() const;
  ::nucleus::genomics::v1::ReadRequirements* release_read_requirements();
  ::nucleus::genomics::v1::ReadRequirements* mutable_read_requirements();
  void set_allocated_read_requirements(::nucleus::genomics::v1::ReadRequirements* read_requirements);

  // int32 height = 1;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 reference_band_height = 3;
  void clear_reference_band_height();
  ::PROTOBUF_NAMESPACE_ID::int32 reference_band_height() const;
  void set_reference_band_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 base_color_offset_a_and_g = 4;
  void clear_base_color_offset_a_and_g();
  ::PROTOBUF_NAMESPACE_ID::int32 base_color_offset_a_and_g() const;
  void set_base_color_offset_a_and_g(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 base_color_offset_t_and_c = 5;
  void clear_base_color_offset_t_and_c();
  ::PROTOBUF_NAMESPACE_ID::int32 base_color_offset_t_and_c() const;
  void set_base_color_offset_t_and_c(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 base_color_stride = 6;
  void clear_base_color_stride();
  ::PROTOBUF_NAMESPACE_ID::int32 base_color_stride() const;
  void set_base_color_stride(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float reference_alpha = 7;
  void clear_reference_alpha();
  float reference_alpha() const;
  void set_reference_alpha(float value);

  // int32 reference_base_quality = 8;
  void clear_reference_base_quality();
  ::PROTOBUF_NAMESPACE_ID::int32 reference_base_quality() const;
  void set_reference_base_quality(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float allele_supporting_read_alpha = 9;
  void clear_allele_supporting_read_alpha();
  float allele_supporting_read_alpha() const;
  void set_allele_supporting_read_alpha(float value);

  // float allele_unsupporting_read_alpha = 10;
  void clear_allele_unsupporting_read_alpha();
  float allele_unsupporting_read_alpha() const;
  void set_allele_unsupporting_read_alpha(float value);

  // float reference_matching_read_alpha = 11;
  void clear_reference_matching_read_alpha();
  float reference_matching_read_alpha() const;
  void set_reference_matching_read_alpha(float value);

  // float reference_mismatching_read_alpha = 12;
  void clear_reference_mismatching_read_alpha();
  float reference_mismatching_read_alpha() const;
  void set_reference_mismatching_read_alpha(float value);

  // int32 positive_strand_color = 14;
  void clear_positive_strand_color();
  ::PROTOBUF_NAMESPACE_ID::int32 positive_strand_color() const;
  void set_positive_strand_color(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 negative_strand_color = 15;
  void clear_negative_strand_color();
  ::PROTOBUF_NAMESPACE_ID::int32 negative_strand_color() const;
  void set_negative_strand_color(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 base_quality_cap = 16;
  void clear_base_quality_cap();
  ::PROTOBUF_NAMESPACE_ID::int32 base_quality_cap() const;
  void set_base_quality_cap(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 read_overlap_buffer_bp = 17;
  void clear_read_overlap_buffer_bp();
  ::PROTOBUF_NAMESPACE_ID::int32 read_overlap_buffer_bp() const;
  void set_read_overlap_buffer_bp(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .learning.genomics.deepvariant.PileupImageOptions.MultiAllelicMode multi_allelic_mode = 19;
  void clear_multi_allelic_mode();
  ::learning::genomics::deepvariant::PileupImageOptions_MultiAllelicMode multi_allelic_mode() const;
  void set_multi_allelic_mode(::learning::genomics::deepvariant::PileupImageOptions_MultiAllelicMode value);

  // int32 mapping_quality_cap = 20;
  void clear_mapping_quality_cap();
  ::PROTOBUF_NAMESPACE_ID::int32 mapping_quality_cap() const;
  void set_mapping_quality_cap(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 random_seed = 21;
  void clear_random_seed();
  ::PROTOBUF_NAMESPACE_ID::uint32 random_seed() const;
  void set_random_seed(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 num_channels = 22;
  void clear_num_channels();
  ::PROTOBUF_NAMESPACE_ID::int32 num_channels() const;
  void set_num_channels(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .learning.genomics.deepvariant.PileupImageOptions.SequencingType sequencing_type = 27;
  void clear_sequencing_type();
  ::learning::genomics::deepvariant::PileupImageOptions_SequencingType sequencing_type() const;
  void set_sequencing_type(::learning::genomics::deepvariant::PileupImageOptions_SequencingType value);

  // bool unused_custom_pileup_image = 25;
  void clear_unused_custom_pileup_image();
  bool unused_custom_pileup_image() const;
  void set_unused_custom_pileup_image(bool value);

  // bool unused_sequencing_type_image = 26;
  void clear_unused_sequencing_type_image();
  bool unused_sequencing_type_image() const;
  void set_unused_sequencing_type_image(bool value);

  // bool sort_by_haplotypes = 31;
  void clear_sort_by_haplotypes();
  bool sort_by_haplotypes() const;
  void set_sort_by_haplotypes(bool value);

  // bool use_allele_frequency = 34;
  void clear_use_allele_frequency();
  bool use_allele_frequency() const;
  void set_use_allele_frequency(bool value);

  // float other_allele_supporting_read_alpha = 32;
  void clear_other_allele_supporting_read_alpha();
  float other_allele_supporting_read_alpha() const;
  void set_other_allele_supporting_read_alpha(float value);

  // float min_non_zero_allele_frequency = 33;
  void clear_min_non_zero_allele_frequency();
  float min_non_zero_allele_frequency() const;
  void set_min_non_zero_allele_frequency(float value);

  // int32 sort_by_haplotypes_sample_hp_tag = 35 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_sort_by_haplotypes_sample_hp_tag();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 sort_by_haplotypes_sample_hp_tag() const;
  PROTOBUF_DEPRECATED void set_sort_by_haplotypes_sample_hp_tag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool add_hp_channel = 37;
  void clear_add_hp_channel();
  bool add_hp_channel() const;
  void set_add_hp_channel(bool value);

  // int32 hp_tag_for_assembly_polishing = 38;
  void clear_hp_tag_for_assembly_polishing();
  ::PROTOBUF_NAMESPACE_ID::int32 hp_tag_for_assembly_polishing() const;
  void set_hp_tag_for_assembly_polishing(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.PileupImageOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> channels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr indel_anchoring_base_char_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unused_insert_base_char_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unused_delete_base_char_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alt_aligned_pileup_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr types_to_alt_align_;
  ::nucleus::genomics::v1::ReadRequirements* read_requirements_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 reference_band_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 base_color_offset_a_and_g_;
  ::PROTOBUF_NAMESPACE_ID::int32 base_color_offset_t_and_c_;
  ::PROTOBUF_NAMESPACE_ID::int32 base_color_stride_;
  float reference_alpha_;
  ::PROTOBUF_NAMESPACE_ID::int32 reference_base_quality_;
  float allele_supporting_read_alpha_;
  float allele_unsupporting_read_alpha_;
  float reference_matching_read_alpha_;
  float reference_mismatching_read_alpha_;
  ::PROTOBUF_NAMESPACE_ID::int32 positive_strand_color_;
  ::PROTOBUF_NAMESPACE_ID::int32 negative_strand_color_;
  ::PROTOBUF_NAMESPACE_ID::int32 base_quality_cap_;
  ::PROTOBUF_NAMESPACE_ID::int32 read_overlap_buffer_bp_;
  int multi_allelic_mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 mapping_quality_cap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 random_seed_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_channels_;
  int sequencing_type_;
  bool unused_custom_pileup_image_;
  bool unused_sequencing_type_image_;
  bool sort_by_haplotypes_;
  bool use_allele_frequency_;
  float other_allele_supporting_read_alpha_;
  float min_non_zero_allele_frequency_;
  ::PROTOBUF_NAMESPACE_ID::int32 sort_by_haplotypes_sample_hp_tag_;
  bool add_hp_channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_tag_for_assembly_polishing_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class SampleOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.SampleOptions) */ {
 public:
  SampleOptions();
  virtual ~SampleOptions();

  SampleOptions(const SampleOptions& from);
  SampleOptions(SampleOptions&& from) noexcept
    : SampleOptions() {
    *this = ::std::move(from);
  }

  inline SampleOptions& operator=(const SampleOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampleOptions& operator=(SampleOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SampleOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SampleOptions* internal_default_instance() {
    return reinterpret_cast<const SampleOptions*>(
               &_SampleOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SampleOptions& a, SampleOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(SampleOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SampleOptions* New() const final {
    return CreateMaybeMessage<SampleOptions>(nullptr);
  }

  SampleOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SampleOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SampleOptions& from);
  void MergeFrom(const SampleOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.SampleOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadsFilenamesFieldNumber = 1,
    kOrderFieldNumber = 5,
    kRoleFieldNumber = 6,
    kNameFieldNumber = 7,
    kProposedVariantsFilenameFieldNumber = 8,
    kVariantCallerOptionsFieldNumber = 3,
    kDownsampleFractionFieldNumber = 2,
    kPileupHeightFieldNumber = 4,
  };
  // repeated string reads_filenames = 1;
  int reads_filenames_size() const;
  void clear_reads_filenames();
  const std::string& reads_filenames(int index) const;
  std::string* mutable_reads_filenames(int index);
  void set_reads_filenames(int index, const std::string& value);
  void set_reads_filenames(int index, std::string&& value);
  void set_reads_filenames(int index, const char* value);
  void set_reads_filenames(int index, const char* value, size_t size);
  std::string* add_reads_filenames();
  void add_reads_filenames(const std::string& value);
  void add_reads_filenames(std::string&& value);
  void add_reads_filenames(const char* value);
  void add_reads_filenames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reads_filenames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reads_filenames();

  // repeated int32 order = 5;
  int order_size() const;
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::int32 order(int index) const;
  void set_order(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      order() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_order();

  // string role = 6;
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);

  // string name = 7;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string proposed_variants_filename = 8;
  void clear_proposed_variants_filename();
  const std::string& proposed_variants_filename() const;
  void set_proposed_variants_filename(const std::string& value);
  void set_proposed_variants_filename(std::string&& value);
  void set_proposed_variants_filename(const char* value);
  void set_proposed_variants_filename(const char* value, size_t size);
  std::string* mutable_proposed_variants_filename();
  std::string* release_proposed_variants_filename();
  void set_allocated_proposed_variants_filename(std::string* proposed_variants_filename);

  // .learning.genomics.deepvariant.VariantCallerOptions variant_caller_options = 3;
  bool has_variant_caller_options() const;
  void clear_variant_caller_options();
  const ::learning::genomics::deepvariant::VariantCallerOptions& variant_caller_options() const;
  ::learning::genomics::deepvariant::VariantCallerOptions* release_variant_caller_options();
  ::learning::genomics::deepvariant::VariantCallerOptions* mutable_variant_caller_options();
  void set_allocated_variant_caller_options(::learning::genomics::deepvariant::VariantCallerOptions* variant_caller_options);

  // float downsample_fraction = 2;
  void clear_downsample_fraction();
  float downsample_fraction() const;
  void set_downsample_fraction(float value);

  // int32 pileup_height = 4;
  void clear_pileup_height();
  ::PROTOBUF_NAMESPACE_ID::int32 pileup_height() const;
  void set_pileup_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.SampleOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reads_filenames_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > order_;
  mutable std::atomic<int> _order_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposed_variants_filename_;
  ::learning::genomics::deepvariant::VariantCallerOptions* variant_caller_options_;
  float downsample_fraction_;
  ::PROTOBUF_NAMESPACE_ID::int32 pileup_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class MakeExamplesOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.MakeExamplesOptions) */ {
 public:
  MakeExamplesOptions();
  virtual ~MakeExamplesOptions();

  MakeExamplesOptions(const MakeExamplesOptions& from);
  MakeExamplesOptions(MakeExamplesOptions&& from) noexcept
    : MakeExamplesOptions() {
    *this = ::std::move(from);
  }

  inline MakeExamplesOptions& operator=(const MakeExamplesOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline MakeExamplesOptions& operator=(MakeExamplesOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MakeExamplesOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MakeExamplesOptions* internal_default_instance() {
    return reinterpret_cast<const MakeExamplesOptions*>(
               &_MakeExamplesOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MakeExamplesOptions& a, MakeExamplesOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(MakeExamplesOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MakeExamplesOptions* New() const final {
    return CreateMaybeMessage<MakeExamplesOptions>(nullptr);
  }

  MakeExamplesOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MakeExamplesOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MakeExamplesOptions& from);
  void MergeFrom(const MakeExamplesOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MakeExamplesOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.MakeExamplesOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MakeExamplesOptions_Mode Mode;
  static constexpr Mode UNSPECIFIED =
    MakeExamplesOptions_Mode_UNSPECIFIED;
  static constexpr Mode CALLING =
    MakeExamplesOptions_Mode_CALLING;
  static constexpr Mode TRAINING =
    MakeExamplesOptions_Mode_TRAINING;
  static inline bool Mode_IsValid(int value) {
    return MakeExamplesOptions_Mode_IsValid(value);
  }
  static constexpr Mode Mode_MIN =
    MakeExamplesOptions_Mode_Mode_MIN;
  static constexpr Mode Mode_MAX =
    MakeExamplesOptions_Mode_Mode_MAX;
  static constexpr int Mode_ARRAYSIZE =
    MakeExamplesOptions_Mode_Mode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Mode_descriptor() {
    return MakeExamplesOptions_Mode_descriptor();
  }
  template<typename T>
  static inline const std::string& Mode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Mode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Mode_Name.");
    return MakeExamplesOptions_Mode_Name(enum_t_value);
  }
  static inline bool Mode_Parse(const std::string& name,
      Mode* value) {
    return MakeExamplesOptions_Mode_Parse(name, value);
  }

  typedef MakeExamplesOptions_LabelerAlgorithm LabelerAlgorithm;
  static constexpr LabelerAlgorithm UNSPECIFIED_LABELER_ALGORITHM =
    MakeExamplesOptions_LabelerAlgorithm_UNSPECIFIED_LABELER_ALGORITHM;
  static constexpr LabelerAlgorithm POSITIONAL_LABELER =
    MakeExamplesOptions_LabelerAlgorithm_POSITIONAL_LABELER;
  static constexpr LabelerAlgorithm HAPLOTYPE_LABELER =
    MakeExamplesOptions_LabelerAlgorithm_HAPLOTYPE_LABELER;
  static constexpr LabelerAlgorithm CUSTOMIZED_CLASSES_LABELER =
    MakeExamplesOptions_LabelerAlgorithm_CUSTOMIZED_CLASSES_LABELER;
  static inline bool LabelerAlgorithm_IsValid(int value) {
    return MakeExamplesOptions_LabelerAlgorithm_IsValid(value);
  }
  static constexpr LabelerAlgorithm LabelerAlgorithm_MIN =
    MakeExamplesOptions_LabelerAlgorithm_LabelerAlgorithm_MIN;
  static constexpr LabelerAlgorithm LabelerAlgorithm_MAX =
    MakeExamplesOptions_LabelerAlgorithm_LabelerAlgorithm_MAX;
  static constexpr int LabelerAlgorithm_ARRAYSIZE =
    MakeExamplesOptions_LabelerAlgorithm_LabelerAlgorithm_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LabelerAlgorithm_descriptor() {
    return MakeExamplesOptions_LabelerAlgorithm_descriptor();
  }
  template<typename T>
  static inline const std::string& LabelerAlgorithm_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LabelerAlgorithm>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LabelerAlgorithm_Name.");
    return MakeExamplesOptions_LabelerAlgorithm_Name(enum_t_value);
  }
  static inline bool LabelerAlgorithm_Parse(const std::string& name,
      LabelerAlgorithm* value) {
    return MakeExamplesOptions_LabelerAlgorithm_Parse(name, value);
  }

  typedef MakeExamplesOptions_VariantCaller VariantCaller;
  static constexpr VariantCaller UNSPECIFIED_CALLER =
    MakeExamplesOptions_VariantCaller_UNSPECIFIED_CALLER;
  static constexpr VariantCaller VERY_SENSITIVE_CALLER =
    MakeExamplesOptions_VariantCaller_VERY_SENSITIVE_CALLER;
  static constexpr VariantCaller VCF_CANDIDATE_IMPORTER =
    MakeExamplesOptions_VariantCaller_VCF_CANDIDATE_IMPORTER;
  static inline bool VariantCaller_IsValid(int value) {
    return MakeExamplesOptions_VariantCaller_IsValid(value);
  }
  static constexpr VariantCaller VariantCaller_MIN =
    MakeExamplesOptions_VariantCaller_VariantCaller_MIN;
  static constexpr VariantCaller VariantCaller_MAX =
    MakeExamplesOptions_VariantCaller_VariantCaller_MAX;
  static constexpr int VariantCaller_ARRAYSIZE =
    MakeExamplesOptions_VariantCaller_VariantCaller_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VariantCaller_descriptor() {
    return MakeExamplesOptions_VariantCaller_descriptor();
  }
  template<typename T>
  static inline const std::string& VariantCaller_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VariantCaller>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VariantCaller_Name.");
    return MakeExamplesOptions_VariantCaller_Name(enum_t_value);
  }
  static inline bool VariantCaller_Parse(const std::string& name,
      VariantCaller* value) {
    return MakeExamplesOptions_VariantCaller_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kExcludeContigsFieldNumber = 1,
    kCallingRegionsFieldNumber = 2,
    kExcludeCallingRegionsFieldNumber = 26,
    kSelectVariantTypesFieldNumber = 30,
    kDeprecatedReadsFilenamesFieldNumber = 32,
    kPopulationVcfFilenamesFieldNumber = 35,
    kSampleOptionsFieldNumber = 46,
    kAuxFieldsToKeepFieldNumber = 50,
    kReferenceFilenameFieldNumber = 10,
    kDeprecatedReadsFilenameFieldNumber = 11,
    kCandidatesFilenameFieldNumber = 12,
    kExamplesFilenameFieldNumber = 13,
    kConfidentRegionsFilenameFieldNumber = 14,
    kTruthVariantsFilenameFieldNumber = 15,
    kGvcfFilenameFieldNumber = 16,
    kModelNameFieldNumber = 17,
    kRunInfoFilenameFieldNumber = 28,
    kDeprecatedProposedVariantsFilenameFieldNumber = 33,
    kRuntimeByRegionFieldNumber = 36,
    kCustomizedClassesLabelerClassesListFieldNumber = 41,
    kCustomizedClassesLabelerInfoFieldNameFieldNumber = 42,
    kBamFnameFieldNumber = 45,
    kSampleRoleToTrainFieldNumber = 47,
    kAlleleCounterOptionsFieldNumber = 5,
    kDeprecatedVariantCallerOptionsFieldNumber = 6,
    kPicOptionsFieldNumber = 7,
    kLabelerOptionsFieldNumber = 8,
    kReadRequirementsFieldNumber = 9,
    kRealignerOptionsFieldNumber = 23,
    kRandomSeedFieldNumber = 3,
    kNCoresFieldNumber = 4,
    kModeFieldNumber = 18,
    kMinSharedContigsBasepairsFieldNumber = 19,
    kTaskIdFieldNumber = 20,
    kNumShardsFieldNumber = 21,
    kMaxReadsPerPartitionFieldNumber = 24,
    kDeprecatedDownsampleFractionFieldNumber = 25,
    kLabelerAlgorithmFieldNumber = 27,
    kVariantCallerFieldNumber = 31,
    kIncludeMedDpFieldNumber = 43,
    kRealignerEnabledFieldNumber = 22,
    kUseOriginalQualityScoresFieldNumber = 29,
    kUseAlleleFrequencyFieldNumber = 34,
    kUseRefForCramFieldNumber = 37,
    kParseSamAuxFieldsFieldNumber = 38,
    kHtsBlockSizeFieldNumber = 39,
    kLoggingEveryNCandidatesFieldNumber = 40,
    kMainSampleIndexFieldNumber = 44,
  };
  // repeated string exclude_contigs = 1;
  int exclude_contigs_size() const;
  void clear_exclude_contigs();
  const std::string& exclude_contigs(int index) const;
  std::string* mutable_exclude_contigs(int index);
  void set_exclude_contigs(int index, const std::string& value);
  void set_exclude_contigs(int index, std::string&& value);
  void set_exclude_contigs(int index, const char* value);
  void set_exclude_contigs(int index, const char* value, size_t size);
  std::string* add_exclude_contigs();
  void add_exclude_contigs(const std::string& value);
  void add_exclude_contigs(std::string&& value);
  void add_exclude_contigs(const char* value);
  void add_exclude_contigs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exclude_contigs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exclude_contigs();

  // repeated string calling_regions = 2;
  int calling_regions_size() const;
  void clear_calling_regions();
  const std::string& calling_regions(int index) const;
  std::string* mutable_calling_regions(int index);
  void set_calling_regions(int index, const std::string& value);
  void set_calling_regions(int index, std::string&& value);
  void set_calling_regions(int index, const char* value);
  void set_calling_regions(int index, const char* value, size_t size);
  std::string* add_calling_regions();
  void add_calling_regions(const std::string& value);
  void add_calling_regions(std::string&& value);
  void add_calling_regions(const char* value);
  void add_calling_regions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& calling_regions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_calling_regions();

  // repeated string exclude_calling_regions = 26;
  int exclude_calling_regions_size() const;
  void clear_exclude_calling_regions();
  const std::string& exclude_calling_regions(int index) const;
  std::string* mutable_exclude_calling_regions(int index);
  void set_exclude_calling_regions(int index, const std::string& value);
  void set_exclude_calling_regions(int index, std::string&& value);
  void set_exclude_calling_regions(int index, const char* value);
  void set_exclude_calling_regions(int index, const char* value, size_t size);
  std::string* add_exclude_calling_regions();
  void add_exclude_calling_regions(const std::string& value);
  void add_exclude_calling_regions(std::string&& value);
  void add_exclude_calling_regions(const char* value);
  void add_exclude_calling_regions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exclude_calling_regions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exclude_calling_regions();

  // repeated string select_variant_types = 30;
  int select_variant_types_size() const;
  void clear_select_variant_types();
  const std::string& select_variant_types(int index) const;
  std::string* mutable_select_variant_types(int index);
  void set_select_variant_types(int index, const std::string& value);
  void set_select_variant_types(int index, std::string&& value);
  void set_select_variant_types(int index, const char* value);
  void set_select_variant_types(int index, const char* value, size_t size);
  std::string* add_select_variant_types();
  void add_select_variant_types(const std::string& value);
  void add_select_variant_types(std::string&& value);
  void add_select_variant_types(const char* value);
  void add_select_variant_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& select_variant_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_select_variant_types();

  // repeated string deprecated_reads_filenames = 32;
  int deprecated_reads_filenames_size() const;
  void clear_deprecated_reads_filenames();
  const std::string& deprecated_reads_filenames(int index) const;
  std::string* mutable_deprecated_reads_filenames(int index);
  void set_deprecated_reads_filenames(int index, const std::string& value);
  void set_deprecated_reads_filenames(int index, std::string&& value);
  void set_deprecated_reads_filenames(int index, const char* value);
  void set_deprecated_reads_filenames(int index, const char* value, size_t size);
  std::string* add_deprecated_reads_filenames();
  void add_deprecated_reads_filenames(const std::string& value);
  void add_deprecated_reads_filenames(std::string&& value);
  void add_deprecated_reads_filenames(const char* value);
  void add_deprecated_reads_filenames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& deprecated_reads_filenames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_deprecated_reads_filenames();

  // repeated string population_vcf_filenames = 35;
  int population_vcf_filenames_size() const;
  void clear_population_vcf_filenames();
  const std::string& population_vcf_filenames(int index) const;
  std::string* mutable_population_vcf_filenames(int index);
  void set_population_vcf_filenames(int index, const std::string& value);
  void set_population_vcf_filenames(int index, std::string&& value);
  void set_population_vcf_filenames(int index, const char* value);
  void set_population_vcf_filenames(int index, const char* value, size_t size);
  std::string* add_population_vcf_filenames();
  void add_population_vcf_filenames(const std::string& value);
  void add_population_vcf_filenames(std::string&& value);
  void add_population_vcf_filenames(const char* value);
  void add_population_vcf_filenames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& population_vcf_filenames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_population_vcf_filenames();

  // repeated .learning.genomics.deepvariant.SampleOptions sample_options = 46;
  int sample_options_size() const;
  void clear_sample_options();
  ::learning::genomics::deepvariant::SampleOptions* mutable_sample_options(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::SampleOptions >*
      mutable_sample_options();
  const ::learning::genomics::deepvariant::SampleOptions& sample_options(int index) const;
  ::learning::genomics::deepvariant::SampleOptions* add_sample_options();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::SampleOptions >&
      sample_options() const;

  // repeated string aux_fields_to_keep = 50;
  int aux_fields_to_keep_size() const;
  void clear_aux_fields_to_keep();
  const std::string& aux_fields_to_keep(int index) const;
  std::string* mutable_aux_fields_to_keep(int index);
  void set_aux_fields_to_keep(int index, const std::string& value);
  void set_aux_fields_to_keep(int index, std::string&& value);
  void set_aux_fields_to_keep(int index, const char* value);
  void set_aux_fields_to_keep(int index, const char* value, size_t size);
  std::string* add_aux_fields_to_keep();
  void add_aux_fields_to_keep(const std::string& value);
  void add_aux_fields_to_keep(std::string&& value);
  void add_aux_fields_to_keep(const char* value);
  void add_aux_fields_to_keep(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aux_fields_to_keep() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aux_fields_to_keep();

  // string reference_filename = 10;
  void clear_reference_filename();
  const std::string& reference_filename() const;
  void set_reference_filename(const std::string& value);
  void set_reference_filename(std::string&& value);
  void set_reference_filename(const char* value);
  void set_reference_filename(const char* value, size_t size);
  std::string* mutable_reference_filename();
  std::string* release_reference_filename();
  void set_allocated_reference_filename(std::string* reference_filename);

  // string deprecated_reads_filename = 11;
  void clear_deprecated_reads_filename();
  const std::string& deprecated_reads_filename() const;
  void set_deprecated_reads_filename(const std::string& value);
  void set_deprecated_reads_filename(std::string&& value);
  void set_deprecated_reads_filename(const char* value);
  void set_deprecated_reads_filename(const char* value, size_t size);
  std::string* mutable_deprecated_reads_filename();
  std::string* release_deprecated_reads_filename();
  void set_allocated_deprecated_reads_filename(std::string* deprecated_reads_filename);

  // string candidates_filename = 12;
  void clear_candidates_filename();
  const std::string& candidates_filename() const;
  void set_candidates_filename(const std::string& value);
  void set_candidates_filename(std::string&& value);
  void set_candidates_filename(const char* value);
  void set_candidates_filename(const char* value, size_t size);
  std::string* mutable_candidates_filename();
  std::string* release_candidates_filename();
  void set_allocated_candidates_filename(std::string* candidates_filename);

  // string examples_filename = 13;
  void clear_examples_filename();
  const std::string& examples_filename() const;
  void set_examples_filename(const std::string& value);
  void set_examples_filename(std::string&& value);
  void set_examples_filename(const char* value);
  void set_examples_filename(const char* value, size_t size);
  std::string* mutable_examples_filename();
  std::string* release_examples_filename();
  void set_allocated_examples_filename(std::string* examples_filename);

  // string confident_regions_filename = 14;
  void clear_confident_regions_filename();
  const std::string& confident_regions_filename() const;
  void set_confident_regions_filename(const std::string& value);
  void set_confident_regions_filename(std::string&& value);
  void set_confident_regions_filename(const char* value);
  void set_confident_regions_filename(const char* value, size_t size);
  std::string* mutable_confident_regions_filename();
  std::string* release_confident_regions_filename();
  void set_allocated_confident_regions_filename(std::string* confident_regions_filename);

  // string truth_variants_filename = 15;
  void clear_truth_variants_filename();
  const std::string& truth_variants_filename() const;
  void set_truth_variants_filename(const std::string& value);
  void set_truth_variants_filename(std::string&& value);
  void set_truth_variants_filename(const char* value);
  void set_truth_variants_filename(const char* value, size_t size);
  std::string* mutable_truth_variants_filename();
  std::string* release_truth_variants_filename();
  void set_allocated_truth_variants_filename(std::string* truth_variants_filename);

  // string gvcf_filename = 16;
  void clear_gvcf_filename();
  const std::string& gvcf_filename() const;
  void set_gvcf_filename(const std::string& value);
  void set_gvcf_filename(std::string&& value);
  void set_gvcf_filename(const char* value);
  void set_gvcf_filename(const char* value, size_t size);
  std::string* mutable_gvcf_filename();
  std::string* release_gvcf_filename();
  void set_allocated_gvcf_filename(std::string* gvcf_filename);

  // string model_name = 17;
  void clear_model_name();
  const std::string& model_name() const;
  void set_model_name(const std::string& value);
  void set_model_name(std::string&& value);
  void set_model_name(const char* value);
  void set_model_name(const char* value, size_t size);
  std::string* mutable_model_name();
  std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);

  // string run_info_filename = 28;
  void clear_run_info_filename();
  const std::string& run_info_filename() const;
  void set_run_info_filename(const std::string& value);
  void set_run_info_filename(std::string&& value);
  void set_run_info_filename(const char* value);
  void set_run_info_filename(const char* value, size_t size);
  std::string* mutable_run_info_filename();
  std::string* release_run_info_filename();
  void set_allocated_run_info_filename(std::string* run_info_filename);

  // string deprecated_proposed_variants_filename = 33 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_deprecated_proposed_variants_filename();
  PROTOBUF_DEPRECATED const std::string& deprecated_proposed_variants_filename() const;
  PROTOBUF_DEPRECATED void set_deprecated_proposed_variants_filename(const std::string& value);
  PROTOBUF_DEPRECATED void set_deprecated_proposed_variants_filename(std::string&& value);
  PROTOBUF_DEPRECATED void set_deprecated_proposed_variants_filename(const char* value);
  PROTOBUF_DEPRECATED void set_deprecated_proposed_variants_filename(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_deprecated_proposed_variants_filename();
  PROTOBUF_DEPRECATED std::string* release_deprecated_proposed_variants_filename();
  PROTOBUF_DEPRECATED void set_allocated_deprecated_proposed_variants_filename(std::string* deprecated_proposed_variants_filename);

  // string runtime_by_region = 36;
  void clear_runtime_by_region();
  const std::string& runtime_by_region() const;
  void set_runtime_by_region(const std::string& value);
  void set_runtime_by_region(std::string&& value);
  void set_runtime_by_region(const char* value);
  void set_runtime_by_region(const char* value, size_t size);
  std::string* mutable_runtime_by_region();
  std::string* release_runtime_by_region();
  void set_allocated_runtime_by_region(std::string* runtime_by_region);

  // string customized_classes_labeler_classes_list = 41;
  void clear_customized_classes_labeler_classes_list();
  const std::string& customized_classes_labeler_classes_list() const;
  void set_customized_classes_labeler_classes_list(const std::string& value);
  void set_customized_classes_labeler_classes_list(std::string&& value);
  void set_customized_classes_labeler_classes_list(const char* value);
  void set_customized_classes_labeler_classes_list(const char* value, size_t size);
  std::string* mutable_customized_classes_labeler_classes_list();
  std::string* release_customized_classes_labeler_classes_list();
  void set_allocated_customized_classes_labeler_classes_list(std::string* customized_classes_labeler_classes_list);

  // string customized_classes_labeler_info_field_name = 42;
  void clear_customized_classes_labeler_info_field_name();
  const std::string& customized_classes_labeler_info_field_name() const;
  void set_customized_classes_labeler_info_field_name(const std::string& value);
  void set_customized_classes_labeler_info_field_name(std::string&& value);
  void set_customized_classes_labeler_info_field_name(const char* value);
  void set_customized_classes_labeler_info_field_name(const char* value, size_t size);
  std::string* mutable_customized_classes_labeler_info_field_name();
  std::string* release_customized_classes_labeler_info_field_name();
  void set_allocated_customized_classes_labeler_info_field_name(std::string* customized_classes_labeler_info_field_name);

  // string bam_fname = 45;
  void clear_bam_fname();
  const std::string& bam_fname() const;
  void set_bam_fname(const std::string& value);
  void set_bam_fname(std::string&& value);
  void set_bam_fname(const char* value);
  void set_bam_fname(const char* value, size_t size);
  std::string* mutable_bam_fname();
  std::string* release_bam_fname();
  void set_allocated_bam_fname(std::string* bam_fname);

  // string sample_role_to_train = 47;
  void clear_sample_role_to_train();
  const std::string& sample_role_to_train() const;
  void set_sample_role_to_train(const std::string& value);
  void set_sample_role_to_train(std::string&& value);
  void set_sample_role_to_train(const char* value);
  void set_sample_role_to_train(const char* value, size_t size);
  std::string* mutable_sample_role_to_train();
  std::string* release_sample_role_to_train();
  void set_allocated_sample_role_to_train(std::string* sample_role_to_train);

  // .learning.genomics.deepvariant.AlleleCounterOptions allele_counter_options = 5;
  bool has_allele_counter_options() const;
  void clear_allele_counter_options();
  const ::learning::genomics::deepvariant::AlleleCounterOptions& allele_counter_options() const;
  ::learning::genomics::deepvariant::AlleleCounterOptions* release_allele_counter_options();
  ::learning::genomics::deepvariant::AlleleCounterOptions* mutable_allele_counter_options();
  void set_allocated_allele_counter_options(::learning::genomics::deepvariant::AlleleCounterOptions* allele_counter_options);

  // .learning.genomics.deepvariant.VariantCallerOptions deprecated_variant_caller_options = 6;
  bool has_deprecated_variant_caller_options() const;
  void clear_deprecated_variant_caller_options();
  const ::learning::genomics::deepvariant::VariantCallerOptions& deprecated_variant_caller_options() const;
  ::learning::genomics::deepvariant::VariantCallerOptions* release_deprecated_variant_caller_options();
  ::learning::genomics::deepvariant::VariantCallerOptions* mutable_deprecated_variant_caller_options();
  void set_allocated_deprecated_variant_caller_options(::learning::genomics::deepvariant::VariantCallerOptions* deprecated_variant_caller_options);

  // .learning.genomics.deepvariant.PileupImageOptions pic_options = 7;
  bool has_pic_options() const;
  void clear_pic_options();
  const ::learning::genomics::deepvariant::PileupImageOptions& pic_options() const;
  ::learning::genomics::deepvariant::PileupImageOptions* release_pic_options();
  ::learning::genomics::deepvariant::PileupImageOptions* mutable_pic_options();
  void set_allocated_pic_options(::learning::genomics::deepvariant::PileupImageOptions* pic_options);

  // .learning.genomics.deepvariant.VariantLabelerOptions labeler_options = 8;
  bool has_labeler_options() const;
  void clear_labeler_options();
  const ::learning::genomics::deepvariant::VariantLabelerOptions& labeler_options() const;
  ::learning::genomics::deepvariant::VariantLabelerOptions* release_labeler_options();
  ::learning::genomics::deepvariant::VariantLabelerOptions* mutable_labeler_options();
  void set_allocated_labeler_options(::learning::genomics::deepvariant::VariantLabelerOptions* labeler_options);

  // .nucleus.genomics.v1.ReadRequirements read_requirements = 9;
  bool has_read_requirements() const;
  void clear_read_requirements();
  const ::nucleus::genomics::v1::ReadRequirements& read_requirements() const;
  ::nucleus::genomics::v1::ReadRequirements* release_read_requirements();
  ::nucleus::genomics::v1::ReadRequirements* mutable_read_requirements();
  void set_allocated_read_requirements(::nucleus::genomics::v1::ReadRequirements* read_requirements);

  // .learning.genomics.deepvariant.RealignerOptions realigner_options = 23;
  bool has_realigner_options() const;
  void clear_realigner_options();
  const ::learning::genomics::deepvariant::RealignerOptions& realigner_options() const;
  ::learning::genomics::deepvariant::RealignerOptions* release_realigner_options();
  ::learning::genomics::deepvariant::RealignerOptions* mutable_realigner_options();
  void set_allocated_realigner_options(::learning::genomics::deepvariant::RealignerOptions* realigner_options);

  // uint32 random_seed = 3;
  void clear_random_seed();
  ::PROTOBUF_NAMESPACE_ID::uint32 random_seed() const;
  void set_random_seed(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // int32 n_cores = 4;
  void clear_n_cores();
  ::PROTOBUF_NAMESPACE_ID::int32 n_cores() const;
  void set_n_cores(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .learning.genomics.deepvariant.MakeExamplesOptions.Mode mode = 18;
  void clear_mode();
  ::learning::genomics::deepvariant::MakeExamplesOptions_Mode mode() const;
  void set_mode(::learning::genomics::deepvariant::MakeExamplesOptions_Mode value);

  // float min_shared_contigs_basepairs = 19;
  void clear_min_shared_contigs_basepairs();
  float min_shared_contigs_basepairs() const;
  void set_min_shared_contigs_basepairs(float value);

  // int32 task_id = 20;
  void clear_task_id();
  ::PROTOBUF_NAMESPACE_ID::int32 task_id() const;
  void set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 num_shards = 21;
  void clear_num_shards();
  ::PROTOBUF_NAMESPACE_ID::int32 num_shards() const;
  void set_num_shards(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 max_reads_per_partition = 24;
  void clear_max_reads_per_partition();
  ::PROTOBUF_NAMESPACE_ID::int32 max_reads_per_partition() const;
  void set_max_reads_per_partition(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float deprecated_downsample_fraction = 25;
  void clear_deprecated_downsample_fraction();
  float deprecated_downsample_fraction() const;
  void set_deprecated_downsample_fraction(float value);

  // .learning.genomics.deepvariant.MakeExamplesOptions.LabelerAlgorithm labeler_algorithm = 27;
  void clear_labeler_algorithm();
  ::learning::genomics::deepvariant::MakeExamplesOptions_LabelerAlgorithm labeler_algorithm() const;
  void set_labeler_algorithm(::learning::genomics::deepvariant::MakeExamplesOptions_LabelerAlgorithm value);

  // .learning.genomics.deepvariant.MakeExamplesOptions.VariantCaller variant_caller = 31;
  void clear_variant_caller();
  ::learning::genomics::deepvariant::MakeExamplesOptions_VariantCaller variant_caller() const;
  void set_variant_caller(::learning::genomics::deepvariant::MakeExamplesOptions_VariantCaller value);

  // bool include_med_dp = 43;
  void clear_include_med_dp();
  bool include_med_dp() const;
  void set_include_med_dp(bool value);

  // bool realigner_enabled = 22;
  void clear_realigner_enabled();
  bool realigner_enabled() const;
  void set_realigner_enabled(bool value);

  // bool use_original_quality_scores = 29;
  void clear_use_original_quality_scores();
  bool use_original_quality_scores() const;
  void set_use_original_quality_scores(bool value);

  // bool use_allele_frequency = 34;
  void clear_use_allele_frequency();
  bool use_allele_frequency() const;
  void set_use_allele_frequency(bool value);

  // bool use_ref_for_cram = 37;
  void clear_use_ref_for_cram();
  bool use_ref_for_cram() const;
  void set_use_ref_for_cram(bool value);

  // bool parse_sam_aux_fields = 38;
  void clear_parse_sam_aux_fields();
  bool parse_sam_aux_fields() const;
  void set_parse_sam_aux_fields(bool value);

  // int32 hts_block_size = 39;
  void clear_hts_block_size();
  ::PROTOBUF_NAMESPACE_ID::int32 hts_block_size() const;
  void set_hts_block_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 logging_every_n_candidates = 40;
  void clear_logging_every_n_candidates();
  ::PROTOBUF_NAMESPACE_ID::int32 logging_every_n_candidates() const;
  void set_logging_every_n_candidates(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 main_sample_index = 44;
  void clear_main_sample_index();
  ::PROTOBUF_NAMESPACE_ID::int32 main_sample_index() const;
  void set_main_sample_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.MakeExamplesOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exclude_contigs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> calling_regions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exclude_calling_regions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> select_variant_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> deprecated_reads_filenames_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> population_vcf_filenames_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::SampleOptions > sample_options_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aux_fields_to_keep_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deprecated_reads_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidates_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr examples_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confident_regions_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr truth_variants_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gvcf_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_info_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deprecated_proposed_variants_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_by_region_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customized_classes_labeler_classes_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customized_classes_labeler_info_field_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bam_fname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sample_role_to_train_;
  ::learning::genomics::deepvariant::AlleleCounterOptions* allele_counter_options_;
  ::learning::genomics::deepvariant::VariantCallerOptions* deprecated_variant_caller_options_;
  ::learning::genomics::deepvariant::PileupImageOptions* pic_options_;
  ::learning::genomics::deepvariant::VariantLabelerOptions* labeler_options_;
  ::nucleus::genomics::v1::ReadRequirements* read_requirements_;
  ::learning::genomics::deepvariant::RealignerOptions* realigner_options_;
  ::PROTOBUF_NAMESPACE_ID::uint32 random_seed_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_cores_;
  int mode_;
  float min_shared_contigs_basepairs_;
  ::PROTOBUF_NAMESPACE_ID::int32 task_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_shards_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_reads_per_partition_;
  float deprecated_downsample_fraction_;
  int labeler_algorithm_;
  int variant_caller_;
  bool include_med_dp_;
  bool realigner_enabled_;
  bool use_original_quality_scores_;
  bool use_allele_frequency_;
  bool use_ref_for_cram_;
  bool parse_sam_aux_fields_;
  ::PROTOBUF_NAMESPACE_ID::int32 hts_block_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 logging_every_n_candidates_;
  ::PROTOBUF_NAMESPACE_ID::int32 main_sample_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class DeepVariantDatasetConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.DeepVariantDatasetConfig) */ {
 public:
  DeepVariantDatasetConfig();
  virtual ~DeepVariantDatasetConfig();

  DeepVariantDatasetConfig(const DeepVariantDatasetConfig& from);
  DeepVariantDatasetConfig(DeepVariantDatasetConfig&& from) noexcept
    : DeepVariantDatasetConfig() {
    *this = ::std::move(from);
  }

  inline DeepVariantDatasetConfig& operator=(const DeepVariantDatasetConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeepVariantDatasetConfig& operator=(DeepVariantDatasetConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeepVariantDatasetConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeepVariantDatasetConfig* internal_default_instance() {
    return reinterpret_cast<const DeepVariantDatasetConfig*>(
               &_DeepVariantDatasetConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DeepVariantDatasetConfig& a, DeepVariantDatasetConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DeepVariantDatasetConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeepVariantDatasetConfig* New() const final {
    return CreateMaybeMessage<DeepVariantDatasetConfig>(nullptr);
  }

  DeepVariantDatasetConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeepVariantDatasetConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeepVariantDatasetConfig& from);
  void MergeFrom(const DeepVariantDatasetConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeepVariantDatasetConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.DeepVariantDatasetConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTfrecordPathFieldNumber = 2,
    kNumExamplesFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string tfrecord_path = 2;
  void clear_tfrecord_path();
  const std::string& tfrecord_path() const;
  void set_tfrecord_path(const std::string& value);
  void set_tfrecord_path(std::string&& value);
  void set_tfrecord_path(const char* value);
  void set_tfrecord_path(const char* value, size_t size);
  std::string* mutable_tfrecord_path();
  std::string* release_tfrecord_path();
  void set_allocated_tfrecord_path(std::string* tfrecord_path);

  // uint32 num_examples = 3;
  void clear_num_examples();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_examples() const;
  void set_num_examples(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.DeepVariantDatasetConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tfrecord_path_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_examples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class DeepVariantInputDatasets_Dataset :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset) */ {
 public:
  DeepVariantInputDatasets_Dataset();
  virtual ~DeepVariantInputDatasets_Dataset();

  DeepVariantInputDatasets_Dataset(const DeepVariantInputDatasets_Dataset& from);
  DeepVariantInputDatasets_Dataset(DeepVariantInputDatasets_Dataset&& from) noexcept
    : DeepVariantInputDatasets_Dataset() {
    *this = ::std::move(from);
  }

  inline DeepVariantInputDatasets_Dataset& operator=(const DeepVariantInputDatasets_Dataset& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeepVariantInputDatasets_Dataset& operator=(DeepVariantInputDatasets_Dataset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeepVariantInputDatasets_Dataset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeepVariantInputDatasets_Dataset* internal_default_instance() {
    return reinterpret_cast<const DeepVariantInputDatasets_Dataset*>(
               &_DeepVariantInputDatasets_Dataset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DeepVariantInputDatasets_Dataset& a, DeepVariantInputDatasets_Dataset& b) {
    a.Swap(&b);
  }
  inline void Swap(DeepVariantInputDatasets_Dataset* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeepVariantInputDatasets_Dataset* New() const final {
    return CreateMaybeMessage<DeepVariantInputDatasets_Dataset>(nullptr);
  }

  DeepVariantInputDatasets_Dataset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeepVariantInputDatasets_Dataset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeepVariantInputDatasets_Dataset& from);
  void MergeFrom(const DeepVariantInputDatasets_Dataset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeepVariantInputDatasets_Dataset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDownsampleFractionsFieldNumber = 7,
    kConfidentRegionsFieldNumber = 1,
    kReadsFieldNumber = 2,
    kRefFieldNumber = 3,
    kTruthVariantsFieldNumber = 4,
    kRegionsFieldNumber = 5,
    kTrainingRandomEmitRefSitesFieldNumber = 6,
    kExcludeRegionsFieldNumber = 8,
    kSampleNameFieldNumber = 9,
    kSequencingTypeFieldNumber = 10,
    kPopulationVcfsFieldNumber = 11,
    kSortByHaplotypesSampleHpTagFieldNumber = 12,
    kHpTagForAssemblyPolishingFieldNumber = 13,
    kSortByHaplotypesFieldNumber = 14,
    kParseSamAuxFieldsFieldNumber = 15,
    kAddHpChannelFieldNumber = 16,
  };
  // repeated string downsample_fractions = 7;
  int downsample_fractions_size() const;
  void clear_downsample_fractions();
  const std::string& downsample_fractions(int index) const;
  std::string* mutable_downsample_fractions(int index);
  void set_downsample_fractions(int index, const std::string& value);
  void set_downsample_fractions(int index, std::string&& value);
  void set_downsample_fractions(int index, const char* value);
  void set_downsample_fractions(int index, const char* value, size_t size);
  std::string* add_downsample_fractions();
  void add_downsample_fractions(const std::string& value);
  void add_downsample_fractions(std::string&& value);
  void add_downsample_fractions(const char* value);
  void add_downsample_fractions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& downsample_fractions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_downsample_fractions();

  // string confident_regions = 1;
  void clear_confident_regions();
  const std::string& confident_regions() const;
  void set_confident_regions(const std::string& value);
  void set_confident_regions(std::string&& value);
  void set_confident_regions(const char* value);
  void set_confident_regions(const char* value, size_t size);
  std::string* mutable_confident_regions();
  std::string* release_confident_regions();
  void set_allocated_confident_regions(std::string* confident_regions);

  // string reads = 2;
  void clear_reads();
  const std::string& reads() const;
  void set_reads(const std::string& value);
  void set_reads(std::string&& value);
  void set_reads(const char* value);
  void set_reads(const char* value, size_t size);
  std::string* mutable_reads();
  std::string* release_reads();
  void set_allocated_reads(std::string* reads);

  // string ref = 3;
  void clear_ref();
  const std::string& ref() const;
  void set_ref(const std::string& value);
  void set_ref(std::string&& value);
  void set_ref(const char* value);
  void set_ref(const char* value, size_t size);
  std::string* mutable_ref();
  std::string* release_ref();
  void set_allocated_ref(std::string* ref);

  // string truth_variants = 4;
  void clear_truth_variants();
  const std::string& truth_variants() const;
  void set_truth_variants(const std::string& value);
  void set_truth_variants(std::string&& value);
  void set_truth_variants(const char* value);
  void set_truth_variants(const char* value, size_t size);
  std::string* mutable_truth_variants();
  std::string* release_truth_variants();
  void set_allocated_truth_variants(std::string* truth_variants);

  // string regions = 5;
  void clear_regions();
  const std::string& regions() const;
  void set_regions(const std::string& value);
  void set_regions(std::string&& value);
  void set_regions(const char* value);
  void set_regions(const char* value, size_t size);
  std::string* mutable_regions();
  std::string* release_regions();
  void set_allocated_regions(std::string* regions);

  // string training_random_emit_ref_sites = 6;
  void clear_training_random_emit_ref_sites();
  const std::string& training_random_emit_ref_sites() const;
  void set_training_random_emit_ref_sites(const std::string& value);
  void set_training_random_emit_ref_sites(std::string&& value);
  void set_training_random_emit_ref_sites(const char* value);
  void set_training_random_emit_ref_sites(const char* value, size_t size);
  std::string* mutable_training_random_emit_ref_sites();
  std::string* release_training_random_emit_ref_sites();
  void set_allocated_training_random_emit_ref_sites(std::string* training_random_emit_ref_sites);

  // string exclude_regions = 8;
  void clear_exclude_regions();
  const std::string& exclude_regions() const;
  void set_exclude_regions(const std::string& value);
  void set_exclude_regions(std::string&& value);
  void set_exclude_regions(const char* value);
  void set_exclude_regions(const char* value, size_t size);
  std::string* mutable_exclude_regions();
  std::string* release_exclude_regions();
  void set_allocated_exclude_regions(std::string* exclude_regions);

  // string sample_name = 9;
  void clear_sample_name();
  const std::string& sample_name() const;
  void set_sample_name(const std::string& value);
  void set_sample_name(std::string&& value);
  void set_sample_name(const char* value);
  void set_sample_name(const char* value, size_t size);
  std::string* mutable_sample_name();
  std::string* release_sample_name();
  void set_allocated_sample_name(std::string* sample_name);

  // string sequencing_type = 10;
  void clear_sequencing_type();
  const std::string& sequencing_type() const;
  void set_sequencing_type(const std::string& value);
  void set_sequencing_type(std::string&& value);
  void set_sequencing_type(const char* value);
  void set_sequencing_type(const char* value, size_t size);
  std::string* mutable_sequencing_type();
  std::string* release_sequencing_type();
  void set_allocated_sequencing_type(std::string* sequencing_type);

  // string population_vcfs = 11;
  void clear_population_vcfs();
  const std::string& population_vcfs() const;
  void set_population_vcfs(const std::string& value);
  void set_population_vcfs(std::string&& value);
  void set_population_vcfs(const char* value);
  void set_population_vcfs(const char* value, size_t size);
  std::string* mutable_population_vcfs();
  std::string* release_population_vcfs();
  void set_allocated_population_vcfs(std::string* population_vcfs);

  // int32 sort_by_haplotypes_sample_hp_tag = 12 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_sort_by_haplotypes_sample_hp_tag();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int32 sort_by_haplotypes_sample_hp_tag() const;
  PROTOBUF_DEPRECATED void set_sort_by_haplotypes_sample_hp_tag(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 hp_tag_for_assembly_polishing = 13;
  void clear_hp_tag_for_assembly_polishing();
  ::PROTOBUF_NAMESPACE_ID::int32 hp_tag_for_assembly_polishing() const;
  void set_hp_tag_for_assembly_polishing(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool sort_by_haplotypes = 14;
  void clear_sort_by_haplotypes();
  bool sort_by_haplotypes() const;
  void set_sort_by_haplotypes(bool value);

  // bool parse_sam_aux_fields = 15;
  void clear_parse_sam_aux_fields();
  bool parse_sam_aux_fields() const;
  void set_parse_sam_aux_fields(bool value);

  // bool add_hp_channel = 16;
  void clear_add_hp_channel();
  bool add_hp_channel() const;
  void set_add_hp_channel(bool value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> downsample_fractions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr confident_regions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reads_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr truth_variants_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr training_random_emit_ref_sites_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exclude_regions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sample_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequencing_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr population_vcfs_;
  ::PROTOBUF_NAMESPACE_ID::int32 sort_by_haplotypes_sample_hp_tag_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_tag_for_assembly_polishing_;
  bool sort_by_haplotypes_;
  bool parse_sam_aux_fields_;
  bool add_hp_channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class DeepVariantInputDatasets :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.DeepVariantInputDatasets) */ {
 public:
  DeepVariantInputDatasets();
  virtual ~DeepVariantInputDatasets();

  DeepVariantInputDatasets(const DeepVariantInputDatasets& from);
  DeepVariantInputDatasets(DeepVariantInputDatasets&& from) noexcept
    : DeepVariantInputDatasets() {
    *this = ::std::move(from);
  }

  inline DeepVariantInputDatasets& operator=(const DeepVariantInputDatasets& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeepVariantInputDatasets& operator=(DeepVariantInputDatasets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeepVariantInputDatasets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeepVariantInputDatasets* internal_default_instance() {
    return reinterpret_cast<const DeepVariantInputDatasets*>(
               &_DeepVariantInputDatasets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(DeepVariantInputDatasets& a, DeepVariantInputDatasets& b) {
    a.Swap(&b);
  }
  inline void Swap(DeepVariantInputDatasets* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeepVariantInputDatasets* New() const final {
    return CreateMaybeMessage<DeepVariantInputDatasets>(nullptr);
  }

  DeepVariantInputDatasets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeepVariantInputDatasets>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeepVariantInputDatasets& from);
  void MergeFrom(const DeepVariantInputDatasets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeepVariantInputDatasets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.DeepVariantInputDatasets";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeepVariantInputDatasets_Dataset Dataset;

  // accessors -------------------------------------------------------

  enum : int {
    kDatasetsFieldNumber = 1,
    kGroupNameFieldNumber = 2,
  };
  // repeated .learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset datasets = 1;
  int datasets_size() const;
  void clear_datasets();
  ::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset* mutable_datasets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset >*
      mutable_datasets();
  const ::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset& datasets(int index) const;
  ::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset* add_datasets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset >&
      datasets() const;

  // string group_name = 2;
  void clear_group_name();
  const std::string& group_name() const;
  void set_group_name(const std::string& value);
  void set_group_name(std::string&& value);
  void set_group_name(const char* value);
  void set_group_name(const char* value, size_t size);
  std::string* mutable_group_name();
  std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.DeepVariantInputDatasets)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset > datasets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class DeepVariantInputDatasetsGroup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup) */ {
 public:
  DeepVariantInputDatasetsGroup();
  virtual ~DeepVariantInputDatasetsGroup();

  DeepVariantInputDatasetsGroup(const DeepVariantInputDatasetsGroup& from);
  DeepVariantInputDatasetsGroup(DeepVariantInputDatasetsGroup&& from) noexcept
    : DeepVariantInputDatasetsGroup() {
    *this = ::std::move(from);
  }

  inline DeepVariantInputDatasetsGroup& operator=(const DeepVariantInputDatasetsGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeepVariantInputDatasetsGroup& operator=(DeepVariantInputDatasetsGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeepVariantInputDatasetsGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeepVariantInputDatasetsGroup* internal_default_instance() {
    return reinterpret_cast<const DeepVariantInputDatasetsGroup*>(
               &_DeepVariantInputDatasetsGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DeepVariantInputDatasetsGroup& a, DeepVariantInputDatasetsGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(DeepVariantInputDatasetsGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeepVariantInputDatasetsGroup* New() const final {
    return CreateMaybeMessage<DeepVariantInputDatasetsGroup>(nullptr);
  }

  DeepVariantInputDatasetsGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeepVariantInputDatasetsGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeepVariantInputDatasetsGroup& from);
  void MergeFrom(const DeepVariantInputDatasetsGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeepVariantInputDatasetsGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.DeepVariantInputDatasetsGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
  };
  // repeated .learning.genomics.deepvariant.DeepVariantInputDatasets groups = 1;
  int groups_size() const;
  void clear_groups();
  ::learning::genomics::deepvariant::DeepVariantInputDatasets* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::DeepVariantInputDatasets >*
      mutable_groups();
  const ::learning::genomics::deepvariant::DeepVariantInputDatasets& groups(int index) const;
  ::learning::genomics::deepvariant::DeepVariantInputDatasets* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::DeepVariantInputDatasets >&
      groups() const;

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::DeepVariantInputDatasets > groups_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class LabelingMetrics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.LabelingMetrics) */ {
 public:
  LabelingMetrics();
  virtual ~LabelingMetrics();

  LabelingMetrics(const LabelingMetrics& from);
  LabelingMetrics(LabelingMetrics&& from) noexcept
    : LabelingMetrics() {
    *this = ::std::move(from);
  }

  inline LabelingMetrics& operator=(const LabelingMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelingMetrics& operator=(LabelingMetrics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelingMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelingMetrics* internal_default_instance() {
    return reinterpret_cast<const LabelingMetrics*>(
               &_LabelingMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(LabelingMetrics& a, LabelingMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelingMetrics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelingMetrics* New() const final {
    return CreateMaybeMessage<LabelingMetrics>(nullptr);
  }

  LabelingMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelingMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelingMetrics& from);
  void MergeFrom(const LabelingMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelingMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.LabelingMetrics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNTruthVariantSitesFieldNumber = 1,
    kNTruthVariantAllelesFieldNumber = 2,
    kNCandidateVariantSitesFieldNumber = 3,
    kNCandidateVariantAllelesFieldNumber = 4,
    kNNonConfidentCandidateVariantSitesFieldNumber = 5,
    kNTruePositiveSitesFieldNumber = 6,
    kNTruePositiveAllelesFieldNumber = 7,
    kNFalseNegativeSitesFieldNumber = 8,
    kNFalseNegativeAllelesFieldNumber = 9,
    kNFalsePositiveSitesFieldNumber = 10,
    kNFalsePositiveAllelesFieldNumber = 11,
    kNInexactPositionMatchesFieldNumber = 12,
    kNExactPositionMatchesFieldNumber = 13,
    kNExactPositionAndAlleleMatchesFieldNumber = 14,
    kNExactPositionAndAlleleAndGenotypeMatchesFieldNumber = 15,
    kNTruthMultiallelicsSitesWithMissedAllelesFieldNumber = 16,
  };
  // int32 n_truth_variant_sites = 1;
  void clear_n_truth_variant_sites();
  ::PROTOBUF_NAMESPACE_ID::int32 n_truth_variant_sites() const;
  void set_n_truth_variant_sites(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 n_truth_variant_alleles = 2;
  void clear_n_truth_variant_alleles();
  ::PROTOBUF_NAMESPACE_ID::int32 n_truth_variant_alleles() const;
  void set_n_truth_variant_alleles(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 n_candidate_variant_sites = 3;
  void clear_n_candidate_variant_sites();
  ::PROTOBUF_NAMESPACE_ID::int32 n_candidate_variant_sites() const;
  void set_n_candidate_variant_sites(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 n_candidate_variant_alleles = 4;
  void clear_n_candidate_variant_alleles();
  ::PROTOBUF_NAMESPACE_ID::int32 n_candidate_variant_alleles() const;
  void set_n_candidate_variant_alleles(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 n_non_confident_candidate_variant_sites = 5;
  void clear_n_non_confident_candidate_variant_sites();
  ::PROTOBUF_NAMESPACE_ID::int32 n_non_confident_candidate_variant_sites() const;
  void set_n_non_confident_candidate_variant_sites(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 n_true_positive_sites = 6;
  void clear_n_true_positive_sites();
  ::PROTOBUF_NAMESPACE_ID::int32 n_true_positive_sites() const;
  void set_n_true_positive_sites(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 n_true_positive_alleles = 7;
  void clear_n_true_positive_alleles();
  ::PROTOBUF_NAMESPACE_ID::int32 n_true_positive_alleles() const;
  void set_n_true_positive_alleles(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 n_false_negative_sites = 8;
  void clear_n_false_negative_sites();
  ::PROTOBUF_NAMESPACE_ID::int32 n_false_negative_sites() const;
  void set_n_false_negative_sites(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 n_false_negative_alleles = 9;
  void clear_n_false_negative_alleles();
  ::PROTOBUF_NAMESPACE_ID::int32 n_false_negative_alleles() const;
  void set_n_false_negative_alleles(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 n_false_positive_sites = 10;
  void clear_n_false_positive_sites();
  ::PROTOBUF_NAMESPACE_ID::int32 n_false_positive_sites() const;
  void set_n_false_positive_sites(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 n_false_positive_alleles = 11;
  void clear_n_false_positive_alleles();
  ::PROTOBUF_NAMESPACE_ID::int32 n_false_positive_alleles() const;
  void set_n_false_positive_alleles(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 n_inexact_position_matches = 12;
  void clear_n_inexact_position_matches();
  ::PROTOBUF_NAMESPACE_ID::int32 n_inexact_position_matches() const;
  void set_n_inexact_position_matches(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 n_exact_position_matches = 13;
  void clear_n_exact_position_matches();
  ::PROTOBUF_NAMESPACE_ID::int32 n_exact_position_matches() const;
  void set_n_exact_position_matches(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 n_exact_position_and_allele_matches = 14;
  void clear_n_exact_position_and_allele_matches();
  ::PROTOBUF_NAMESPACE_ID::int32 n_exact_position_and_allele_matches() const;
  void set_n_exact_position_and_allele_matches(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 n_exact_position_and_allele_and_genotype_matches = 15;
  void clear_n_exact_position_and_allele_and_genotype_matches();
  ::PROTOBUF_NAMESPACE_ID::int32 n_exact_position_and_allele_and_genotype_matches() const;
  void set_n_exact_position_and_allele_and_genotype_matches(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 n_truth_multiallelics_sites_with_missed_alleles = 16;
  void clear_n_truth_multiallelics_sites_with_missed_alleles();
  ::PROTOBUF_NAMESPACE_ID::int32 n_truth_multiallelics_sites_with_missed_alleles() const;
  void set_n_truth_multiallelics_sites_with_missed_alleles(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.LabelingMetrics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_truth_variant_sites_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_truth_variant_alleles_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_candidate_variant_sites_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_candidate_variant_alleles_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_non_confident_candidate_variant_sites_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_true_positive_sites_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_true_positive_alleles_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_false_negative_sites_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_false_negative_alleles_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_false_positive_sites_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_false_positive_alleles_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_inexact_position_matches_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_exact_position_matches_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_exact_position_and_allele_matches_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_exact_position_and_allele_and_genotype_matches_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_truth_multiallelics_sites_with_missed_alleles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class MakeExamplesStats :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.MakeExamplesStats) */ {
 public:
  MakeExamplesStats();
  virtual ~MakeExamplesStats();

  MakeExamplesStats(const MakeExamplesStats& from);
  MakeExamplesStats(MakeExamplesStats&& from) noexcept
    : MakeExamplesStats() {
    *this = ::std::move(from);
  }

  inline MakeExamplesStats& operator=(const MakeExamplesStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline MakeExamplesStats& operator=(MakeExamplesStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MakeExamplesStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MakeExamplesStats* internal_default_instance() {
    return reinterpret_cast<const MakeExamplesStats*>(
               &_MakeExamplesStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MakeExamplesStats& a, MakeExamplesStats& b) {
    a.Swap(&b);
  }
  inline void Swap(MakeExamplesStats* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MakeExamplesStats* New() const final {
    return CreateMaybeMessage<MakeExamplesStats>(nullptr);
  }

  MakeExamplesStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MakeExamplesStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MakeExamplesStats& from);
  void MergeFrom(const MakeExamplesStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MakeExamplesStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.MakeExamplesStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumExamplesFieldNumber = 1,
    kNumIndelsFieldNumber = 2,
    kNumSnpsFieldNumber = 3,
    kNumClass0FieldNumber = 4,
    kNumClass1FieldNumber = 5,
    kNumClass2FieldNumber = 6,
  };
  // int32 num_examples = 1;
  void clear_num_examples();
  ::PROTOBUF_NAMESPACE_ID::int32 num_examples() const;
  void set_num_examples(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 num_indels = 2;
  void clear_num_indels();
  ::PROTOBUF_NAMESPACE_ID::int32 num_indels() const;
  void set_num_indels(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 num_snps = 3;
  void clear_num_snps();
  ::PROTOBUF_NAMESPACE_ID::int32 num_snps() const;
  void set_num_snps(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 num_class_0 = 4;
  void clear_num_class_0();
  ::PROTOBUF_NAMESPACE_ID::int32 num_class_0() const;
  void set_num_class_0(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 num_class_1 = 5;
  void clear_num_class_1();
  ::PROTOBUF_NAMESPACE_ID::int32 num_class_1() const;
  void set_num_class_1(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 num_class_2 = 6;
  void clear_num_class_2();
  ::PROTOBUF_NAMESPACE_ID::int32 num_class_2() const;
  void set_num_class_2(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.MakeExamplesStats)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_examples_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_indels_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_snps_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_class_0_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_class_1_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_class_2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// -------------------------------------------------------------------

class MakeExamplesRunInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:learning.genomics.deepvariant.MakeExamplesRunInfo) */ {
 public:
  MakeExamplesRunInfo();
  virtual ~MakeExamplesRunInfo();

  MakeExamplesRunInfo(const MakeExamplesRunInfo& from);
  MakeExamplesRunInfo(MakeExamplesRunInfo&& from) noexcept
    : MakeExamplesRunInfo() {
    *this = ::std::move(from);
  }

  inline MakeExamplesRunInfo& operator=(const MakeExamplesRunInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MakeExamplesRunInfo& operator=(MakeExamplesRunInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MakeExamplesRunInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MakeExamplesRunInfo* internal_default_instance() {
    return reinterpret_cast<const MakeExamplesRunInfo*>(
               &_MakeExamplesRunInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(MakeExamplesRunInfo& a, MakeExamplesRunInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MakeExamplesRunInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MakeExamplesRunInfo* New() const final {
    return CreateMaybeMessage<MakeExamplesRunInfo>(nullptr);
  }

  MakeExamplesRunInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MakeExamplesRunInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MakeExamplesRunInfo& from);
  void MergeFrom(const MakeExamplesRunInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MakeExamplesRunInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "learning.genomics.deepvariant.MakeExamplesRunInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto);
    return ::descriptor_table_deepvariant_2fprotos_2fdeepvariant_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionsFieldNumber = 1,
    kLabelingMetricsFieldNumber = 2,
    kResourceMetricsFieldNumber = 3,
    kStatsFieldNumber = 4,
  };
  // .learning.genomics.deepvariant.MakeExamplesOptions options = 1;
  bool has_options() const;
  void clear_options();
  const ::learning::genomics::deepvariant::MakeExamplesOptions& options() const;
  ::learning::genomics::deepvariant::MakeExamplesOptions* release_options();
  ::learning::genomics::deepvariant::MakeExamplesOptions* mutable_options();
  void set_allocated_options(::learning::genomics::deepvariant::MakeExamplesOptions* options);

  // .learning.genomics.deepvariant.LabelingMetrics labeling_metrics = 2;
  bool has_labeling_metrics() const;
  void clear_labeling_metrics();
  const ::learning::genomics::deepvariant::LabelingMetrics& labeling_metrics() const;
  ::learning::genomics::deepvariant::LabelingMetrics* release_labeling_metrics();
  ::learning::genomics::deepvariant::LabelingMetrics* mutable_labeling_metrics();
  void set_allocated_labeling_metrics(::learning::genomics::deepvariant::LabelingMetrics* labeling_metrics);

  // .learning.genomics.deepvariant.ResourceMetrics resource_metrics = 3;
  bool has_resource_metrics() const;
  void clear_resource_metrics();
  const ::learning::genomics::deepvariant::ResourceMetrics& resource_metrics() const;
  ::learning::genomics::deepvariant::ResourceMetrics* release_resource_metrics();
  ::learning::genomics::deepvariant::ResourceMetrics* mutable_resource_metrics();
  void set_allocated_resource_metrics(::learning::genomics::deepvariant::ResourceMetrics* resource_metrics);

  // .learning.genomics.deepvariant.MakeExamplesStats stats = 4;
  bool has_stats() const;
  void clear_stats();
  const ::learning::genomics::deepvariant::MakeExamplesStats& stats() const;
  ::learning::genomics::deepvariant::MakeExamplesStats* release_stats();
  ::learning::genomics::deepvariant::MakeExamplesStats* mutable_stats();
  void set_allocated_stats(::learning::genomics::deepvariant::MakeExamplesStats* stats);

  // @@protoc_insertion_point(class_scope:learning.genomics.deepvariant.MakeExamplesRunInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::learning::genomics::deepvariant::MakeExamplesOptions* options_;
  ::learning::genomics::deepvariant::LabelingMetrics* labeling_metrics_;
  ::learning::genomics::deepvariant::ResourceMetrics* resource_metrics_;
  ::learning::genomics::deepvariant::MakeExamplesStats* stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_deepvariant_2fprotos_2fdeepvariant_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Allele

// string bases = 1;
inline void Allele::clear_bases() {
  bases_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Allele::bases() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.Allele.bases)
  return bases_.GetNoArena();
}
inline void Allele::set_bases(const std::string& value) {
  
  bases_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.Allele.bases)
}
inline void Allele::set_bases(std::string&& value) {
  
  bases_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.Allele.bases)
}
inline void Allele::set_bases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bases_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.Allele.bases)
}
inline void Allele::set_bases(const char* value, size_t size) {
  
  bases_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.Allele.bases)
}
inline std::string* Allele::mutable_bases() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.Allele.bases)
  return bases_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Allele::release_bases() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.Allele.bases)
  
  return bases_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Allele::set_allocated_bases(std::string* bases) {
  if (bases != nullptr) {
    
  } else {
    
  }
  bases_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bases);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.Allele.bases)
}

// .learning.genomics.deepvariant.AlleleType type = 2;
inline void Allele::clear_type() {
  type_ = 0;
}
inline ::learning::genomics::deepvariant::AlleleType Allele::type() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.Allele.type)
  return static_cast< ::learning::genomics::deepvariant::AlleleType >(type_);
}
inline void Allele::set_type(::learning::genomics::deepvariant::AlleleType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.Allele.type)
}

// int32 count = 3;
inline void Allele::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Allele::count() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.Allele.count)
  return count_;
}
inline void Allele::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.Allele.count)
}

// bool is_low_quality = 4;
inline void Allele::clear_is_low_quality() {
  is_low_quality_ = false;
}
inline bool Allele::is_low_quality() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.Allele.is_low_quality)
  return is_low_quality_;
}
inline void Allele::set_is_low_quality(bool value) {
  
  is_low_quality_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.Allele.is_low_quality)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AlleleCount_Alleles

// repeated .learning.genomics.deepvariant.Allele alleles = 1;
inline int AlleleCount_Alleles::alleles_size() const {
  return alleles_.size();
}
inline void AlleleCount_Alleles::clear_alleles() {
  alleles_.Clear();
}
inline ::learning::genomics::deepvariant::Allele* AlleleCount_Alleles::mutable_alleles(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.AlleleCount.Alleles.alleles)
  return alleles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::Allele >*
AlleleCount_Alleles::mutable_alleles() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.AlleleCount.Alleles.alleles)
  return &alleles_;
}
inline const ::learning::genomics::deepvariant::Allele& AlleleCount_Alleles::alleles(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlleleCount.Alleles.alleles)
  return alleles_.Get(index);
}
inline ::learning::genomics::deepvariant::Allele* AlleleCount_Alleles::add_alleles() {
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.AlleleCount.Alleles.alleles)
  return alleles_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::Allele >&
AlleleCount_Alleles::alleles() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.AlleleCount.Alleles.alleles)
  return alleles_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AlleleCount

// .nucleus.genomics.v1.Position position = 1;
inline bool AlleleCount::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::nucleus::genomics::v1::Position& AlleleCount::position() const {
  const ::nucleus::genomics::v1::Position* p = position_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlleleCount.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::nucleus::genomics::v1::Position*>(
      &::nucleus::genomics::v1::_Position_default_instance_);
}
inline ::nucleus::genomics::v1::Position* AlleleCount::release_position() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.AlleleCount.position)
  
  ::nucleus::genomics::v1::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::nucleus::genomics::v1::Position* AlleleCount::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::nucleus::genomics::v1::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.AlleleCount.position)
  return position_;
}
inline void AlleleCount::set_allocated_position(::nucleus::genomics::v1::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.AlleleCount.position)
}

// string ref_base = 2;
inline void AlleleCount::clear_ref_base() {
  ref_base_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlleleCount::ref_base() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlleleCount.ref_base)
  return ref_base_.GetNoArena();
}
inline void AlleleCount::set_ref_base(const std::string& value) {
  
  ref_base_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlleleCount.ref_base)
}
inline void AlleleCount::set_ref_base(std::string&& value) {
  
  ref_base_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.AlleleCount.ref_base)
}
inline void AlleleCount::set_ref_base(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ref_base_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.AlleleCount.ref_base)
}
inline void AlleleCount::set_ref_base(const char* value, size_t size) {
  
  ref_base_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.AlleleCount.ref_base)
}
inline std::string* AlleleCount::mutable_ref_base() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.AlleleCount.ref_base)
  return ref_base_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlleleCount::release_ref_base() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.AlleleCount.ref_base)
  
  return ref_base_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlleleCount::set_allocated_ref_base(std::string* ref_base) {
  if (ref_base != nullptr) {
    
  } else {
    
  }
  ref_base_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ref_base);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.AlleleCount.ref_base)
}

// int32 ref_supporting_read_count = 3;
inline void AlleleCount::clear_ref_supporting_read_count() {
  ref_supporting_read_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlleleCount::ref_supporting_read_count() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlleleCount.ref_supporting_read_count)
  return ref_supporting_read_count_;
}
inline void AlleleCount::set_ref_supporting_read_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ref_supporting_read_count_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlleleCount.ref_supporting_read_count)
}

// map<string, .learning.genomics.deepvariant.Allele> read_alleles = 4;
inline int AlleleCount::read_alleles_size() const {
  return read_alleles_.size();
}
inline void AlleleCount::clear_read_alleles() {
  read_alleles_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::Allele >&
AlleleCount::read_alleles() const {
  // @@protoc_insertion_point(field_map:learning.genomics.deepvariant.AlleleCount.read_alleles)
  return read_alleles_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::Allele >*
AlleleCount::mutable_read_alleles() {
  // @@protoc_insertion_point(field_mutable_map:learning.genomics.deepvariant.AlleleCount.read_alleles)
  return read_alleles_.MutableMap();
}

// int32 ref_nonconfident_read_count = 5;
inline void AlleleCount::clear_ref_nonconfident_read_count() {
  ref_nonconfident_read_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlleleCount::ref_nonconfident_read_count() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlleleCount.ref_nonconfident_read_count)
  return ref_nonconfident_read_count_;
}
inline void AlleleCount::set_ref_nonconfident_read_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ref_nonconfident_read_count_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlleleCount.ref_nonconfident_read_count)
}

// map<string, .learning.genomics.deepvariant.AlleleCount.Alleles> sample_alleles = 6;
inline int AlleleCount::sample_alleles_size() const {
  return sample_alleles_.size();
}
inline void AlleleCount::clear_sample_alleles() {
  sample_alleles_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles >&
AlleleCount::sample_alleles() const {
  // @@protoc_insertion_point(field_map:learning.genomics.deepvariant.AlleleCount.sample_alleles)
  return sample_alleles_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::AlleleCount_Alleles >*
AlleleCount::mutable_sample_alleles() {
  // @@protoc_insertion_point(field_mutable_map:learning.genomics.deepvariant.AlleleCount.sample_alleles)
  return sample_alleles_.MutableMap();
}

// bool track_ref_reads = 7;
inline void AlleleCount::clear_track_ref_reads() {
  track_ref_reads_ = false;
}
inline bool AlleleCount::track_ref_reads() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlleleCount.track_ref_reads)
  return track_ref_reads_;
}
inline void AlleleCount::set_track_ref_reads(bool value) {
  
  track_ref_reads_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlleleCount.track_ref_reads)
}

// -------------------------------------------------------------------

// AlleleCountSummary

// string reference_name = 1;
inline void AlleleCountSummary::clear_reference_name() {
  reference_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlleleCountSummary::reference_name() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlleleCountSummary.reference_name)
  return reference_name_.GetNoArena();
}
inline void AlleleCountSummary::set_reference_name(const std::string& value) {
  
  reference_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlleleCountSummary.reference_name)
}
inline void AlleleCountSummary::set_reference_name(std::string&& value) {
  
  reference_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.AlleleCountSummary.reference_name)
}
inline void AlleleCountSummary::set_reference_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.AlleleCountSummary.reference_name)
}
inline void AlleleCountSummary::set_reference_name(const char* value, size_t size) {
  
  reference_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.AlleleCountSummary.reference_name)
}
inline std::string* AlleleCountSummary::mutable_reference_name() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.AlleleCountSummary.reference_name)
  return reference_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlleleCountSummary::release_reference_name() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.AlleleCountSummary.reference_name)
  
  return reference_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlleleCountSummary::set_allocated_reference_name(std::string* reference_name) {
  if (reference_name != nullptr) {
    
  } else {
    
  }
  reference_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_name);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.AlleleCountSummary.reference_name)
}

// int64 position = 2;
inline void AlleleCountSummary::clear_position() {
  position_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AlleleCountSummary::position() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlleleCountSummary.position)
  return position_;
}
inline void AlleleCountSummary::set_position(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlleleCountSummary.position)
}

// string ref_base = 3;
inline void AlleleCountSummary::clear_ref_base() {
  ref_base_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AlleleCountSummary::ref_base() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlleleCountSummary.ref_base)
  return ref_base_.GetNoArena();
}
inline void AlleleCountSummary::set_ref_base(const std::string& value) {
  
  ref_base_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlleleCountSummary.ref_base)
}
inline void AlleleCountSummary::set_ref_base(std::string&& value) {
  
  ref_base_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.AlleleCountSummary.ref_base)
}
inline void AlleleCountSummary::set_ref_base(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ref_base_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.AlleleCountSummary.ref_base)
}
inline void AlleleCountSummary::set_ref_base(const char* value, size_t size) {
  
  ref_base_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.AlleleCountSummary.ref_base)
}
inline std::string* AlleleCountSummary::mutable_ref_base() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.AlleleCountSummary.ref_base)
  return ref_base_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AlleleCountSummary::release_ref_base() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.AlleleCountSummary.ref_base)
  
  return ref_base_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AlleleCountSummary::set_allocated_ref_base(std::string* ref_base) {
  if (ref_base != nullptr) {
    
  } else {
    
  }
  ref_base_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ref_base);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.AlleleCountSummary.ref_base)
}

// int32 ref_supporting_read_count = 4;
inline void AlleleCountSummary::clear_ref_supporting_read_count() {
  ref_supporting_read_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlleleCountSummary::ref_supporting_read_count() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlleleCountSummary.ref_supporting_read_count)
  return ref_supporting_read_count_;
}
inline void AlleleCountSummary::set_ref_supporting_read_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ref_supporting_read_count_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlleleCountSummary.ref_supporting_read_count)
}

// int32 total_read_count = 5;
inline void AlleleCountSummary::clear_total_read_count() {
  total_read_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlleleCountSummary::total_read_count() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlleleCountSummary.total_read_count)
  return total_read_count_;
}
inline void AlleleCountSummary::set_total_read_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_read_count_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlleleCountSummary.total_read_count)
}

// int32 ref_nonconfident_read_count = 6;
inline void AlleleCountSummary::clear_ref_nonconfident_read_count() {
  ref_nonconfident_read_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlleleCountSummary::ref_nonconfident_read_count() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlleleCountSummary.ref_nonconfident_read_count)
  return ref_nonconfident_read_count_;
}
inline void AlleleCountSummary::set_ref_nonconfident_read_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ref_nonconfident_read_count_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlleleCountSummary.ref_nonconfident_read_count)
}

// -------------------------------------------------------------------

// DeepVariantCall_SupportingReads

// repeated string read_names = 1;
inline int DeepVariantCall_SupportingReads::read_names_size() const {
  return read_names_.size();
}
inline void DeepVariantCall_SupportingReads::clear_read_names() {
  read_names_.Clear();
}
inline const std::string& DeepVariantCall_SupportingReads::read_names(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantCall.SupportingReads.read_names)
  return read_names_.Get(index);
}
inline std::string* DeepVariantCall_SupportingReads::mutable_read_names(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantCall.SupportingReads.read_names)
  return read_names_.Mutable(index);
}
inline void DeepVariantCall_SupportingReads::set_read_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantCall.SupportingReads.read_names)
  read_names_.Mutable(index)->assign(value);
}
inline void DeepVariantCall_SupportingReads::set_read_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantCall.SupportingReads.read_names)
  read_names_.Mutable(index)->assign(std::move(value));
}
inline void DeepVariantCall_SupportingReads::set_read_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  read_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.DeepVariantCall.SupportingReads.read_names)
}
inline void DeepVariantCall_SupportingReads::set_read_names(int index, const char* value, size_t size) {
  read_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.DeepVariantCall.SupportingReads.read_names)
}
inline std::string* DeepVariantCall_SupportingReads::add_read_names() {
  // @@protoc_insertion_point(field_add_mutable:learning.genomics.deepvariant.DeepVariantCall.SupportingReads.read_names)
  return read_names_.Add();
}
inline void DeepVariantCall_SupportingReads::add_read_names(const std::string& value) {
  read_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.DeepVariantCall.SupportingReads.read_names)
}
inline void DeepVariantCall_SupportingReads::add_read_names(std::string&& value) {
  read_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.DeepVariantCall.SupportingReads.read_names)
}
inline void DeepVariantCall_SupportingReads::add_read_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  read_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:learning.genomics.deepvariant.DeepVariantCall.SupportingReads.read_names)
}
inline void DeepVariantCall_SupportingReads::add_read_names(const char* value, size_t size) {
  read_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:learning.genomics.deepvariant.DeepVariantCall.SupportingReads.read_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeepVariantCall_SupportingReads::read_names() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.DeepVariantCall.SupportingReads.read_names)
  return read_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeepVariantCall_SupportingReads::mutable_read_names() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.DeepVariantCall.SupportingReads.read_names)
  return &read_names_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DeepVariantCall_ReadSupport

// string read_name = 1;
inline void DeepVariantCall_ReadSupport::clear_read_name() {
  read_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeepVariantCall_ReadSupport::read_name() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantCall.ReadSupport.read_name)
  return read_name_.GetNoArena();
}
inline void DeepVariantCall_ReadSupport::set_read_name(const std::string& value) {
  
  read_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantCall.ReadSupport.read_name)
}
inline void DeepVariantCall_ReadSupport::set_read_name(std::string&& value) {
  
  read_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.DeepVariantCall.ReadSupport.read_name)
}
inline void DeepVariantCall_ReadSupport::set_read_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  read_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.DeepVariantCall.ReadSupport.read_name)
}
inline void DeepVariantCall_ReadSupport::set_read_name(const char* value, size_t size) {
  
  read_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.DeepVariantCall.ReadSupport.read_name)
}
inline std::string* DeepVariantCall_ReadSupport::mutable_read_name() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantCall.ReadSupport.read_name)
  return read_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeepVariantCall_ReadSupport::release_read_name() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.DeepVariantCall.ReadSupport.read_name)
  
  return read_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeepVariantCall_ReadSupport::set_allocated_read_name(std::string* read_name) {
  if (read_name != nullptr) {
    
  } else {
    
  }
  read_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), read_name);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.DeepVariantCall.ReadSupport.read_name)
}

// bool is_low_quality = 2;
inline void DeepVariantCall_ReadSupport::clear_is_low_quality() {
  is_low_quality_ = false;
}
inline bool DeepVariantCall_ReadSupport::is_low_quality() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantCall.ReadSupport.is_low_quality)
  return is_low_quality_;
}
inline void DeepVariantCall_ReadSupport::set_is_low_quality(bool value) {
  
  is_low_quality_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantCall.ReadSupport.is_low_quality)
}

// -------------------------------------------------------------------

// DeepVariantCall_SupportingReadsExt

// repeated .learning.genomics.deepvariant.DeepVariantCall.ReadSupport read_infos = 1;
inline int DeepVariantCall_SupportingReadsExt::read_infos_size() const {
  return read_infos_.size();
}
inline void DeepVariantCall_SupportingReadsExt::clear_read_infos() {
  read_infos_.Clear();
}
inline ::learning::genomics::deepvariant::DeepVariantCall_ReadSupport* DeepVariantCall_SupportingReadsExt::mutable_read_infos(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt.read_infos)
  return read_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::DeepVariantCall_ReadSupport >*
DeepVariantCall_SupportingReadsExt::mutable_read_infos() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt.read_infos)
  return &read_infos_;
}
inline const ::learning::genomics::deepvariant::DeepVariantCall_ReadSupport& DeepVariantCall_SupportingReadsExt::read_infos(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt.read_infos)
  return read_infos_.Get(index);
}
inline ::learning::genomics::deepvariant::DeepVariantCall_ReadSupport* DeepVariantCall_SupportingReadsExt::add_read_infos() {
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt.read_infos)
  return read_infos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::DeepVariantCall_ReadSupport >&
DeepVariantCall_SupportingReadsExt::read_infos() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt.read_infos)
  return read_infos_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DeepVariantCall

// .nucleus.genomics.v1.Variant variant = 1;
inline bool DeepVariantCall::has_variant() const {
  return this != internal_default_instance() && variant_ != nullptr;
}
inline const ::nucleus::genomics::v1::Variant& DeepVariantCall::variant() const {
  const ::nucleus::genomics::v1::Variant* p = variant_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantCall.variant)
  return p != nullptr ? *p : *reinterpret_cast<const ::nucleus::genomics::v1::Variant*>(
      &::nucleus::genomics::v1::_Variant_default_instance_);
}
inline ::nucleus::genomics::v1::Variant* DeepVariantCall::release_variant() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.DeepVariantCall.variant)
  
  ::nucleus::genomics::v1::Variant* temp = variant_;
  variant_ = nullptr;
  return temp;
}
inline ::nucleus::genomics::v1::Variant* DeepVariantCall::mutable_variant() {
  
  if (variant_ == nullptr) {
    auto* p = CreateMaybeMessage<::nucleus::genomics::v1::Variant>(GetArenaNoVirtual());
    variant_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantCall.variant)
  return variant_;
}
inline void DeepVariantCall::set_allocated_variant(::nucleus::genomics::v1::Variant* variant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(variant_);
  }
  if (variant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      variant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variant, submessage_arena);
    }
    
  } else {
    
  }
  variant_ = variant;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.DeepVariantCall.variant)
}

// map<string, .learning.genomics.deepvariant.DeepVariantCall.SupportingReads> allele_support = 2;
inline int DeepVariantCall::allele_support_size() const {
  return allele_support_.size();
}
inline void DeepVariantCall::clear_allele_support() {
  allele_support_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads >&
DeepVariantCall::allele_support() const {
  // @@protoc_insertion_point(field_map:learning.genomics.deepvariant.DeepVariantCall.allele_support)
  return allele_support_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReads >*
DeepVariantCall::mutable_allele_support() {
  // @@protoc_insertion_point(field_mutable_map:learning.genomics.deepvariant.DeepVariantCall.allele_support)
  return allele_support_.MutableMap();
}

// map<string, float> allele_frequency = 3;
inline int DeepVariantCall::allele_frequency_size() const {
  return allele_frequency_.size();
}
inline void DeepVariantCall::clear_allele_frequency() {
  allele_frequency_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
DeepVariantCall::allele_frequency() const {
  // @@protoc_insertion_point(field_map:learning.genomics.deepvariant.DeepVariantCall.allele_frequency)
  return allele_frequency_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
DeepVariantCall::mutable_allele_frequency() {
  // @@protoc_insertion_point(field_mutable_map:learning.genomics.deepvariant.DeepVariantCall.allele_frequency)
  return allele_frequency_.MutableMap();
}

// repeated string ref_support = 4;
inline int DeepVariantCall::ref_support_size() const {
  return ref_support_.size();
}
inline void DeepVariantCall::clear_ref_support() {
  ref_support_.Clear();
}
inline const std::string& DeepVariantCall::ref_support(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantCall.ref_support)
  return ref_support_.Get(index);
}
inline std::string* DeepVariantCall::mutable_ref_support(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantCall.ref_support)
  return ref_support_.Mutable(index);
}
inline void DeepVariantCall::set_ref_support(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantCall.ref_support)
  ref_support_.Mutable(index)->assign(value);
}
inline void DeepVariantCall::set_ref_support(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantCall.ref_support)
  ref_support_.Mutable(index)->assign(std::move(value));
}
inline void DeepVariantCall::set_ref_support(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ref_support_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.DeepVariantCall.ref_support)
}
inline void DeepVariantCall::set_ref_support(int index, const char* value, size_t size) {
  ref_support_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.DeepVariantCall.ref_support)
}
inline std::string* DeepVariantCall::add_ref_support() {
  // @@protoc_insertion_point(field_add_mutable:learning.genomics.deepvariant.DeepVariantCall.ref_support)
  return ref_support_.Add();
}
inline void DeepVariantCall::add_ref_support(const std::string& value) {
  ref_support_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.DeepVariantCall.ref_support)
}
inline void DeepVariantCall::add_ref_support(std::string&& value) {
  ref_support_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.DeepVariantCall.ref_support)
}
inline void DeepVariantCall::add_ref_support(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ref_support_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:learning.genomics.deepvariant.DeepVariantCall.ref_support)
}
inline void DeepVariantCall::add_ref_support(const char* value, size_t size) {
  ref_support_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:learning.genomics.deepvariant.DeepVariantCall.ref_support)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeepVariantCall::ref_support() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.DeepVariantCall.ref_support)
  return ref_support_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeepVariantCall::mutable_ref_support() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.DeepVariantCall.ref_support)
  return &ref_support_;
}

// map<string, .learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt> allele_support_ext = 5;
inline int DeepVariantCall::allele_support_ext_size() const {
  return allele_support_ext_.size();
}
inline void DeepVariantCall::clear_allele_support_ext() {
  allele_support_ext_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt >&
DeepVariantCall::allele_support_ext() const {
  // @@protoc_insertion_point(field_map:learning.genomics.deepvariant.DeepVariantCall.allele_support_ext)
  return allele_support_ext_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt >*
DeepVariantCall::mutable_allele_support_ext() {
  // @@protoc_insertion_point(field_mutable_map:learning.genomics.deepvariant.DeepVariantCall.allele_support_ext)
  return allele_support_ext_.MutableMap();
}

// .learning.genomics.deepvariant.DeepVariantCall.SupportingReadsExt ref_support_ext = 6;
inline bool DeepVariantCall::has_ref_support_ext() const {
  return this != internal_default_instance() && ref_support_ext_ != nullptr;
}
inline void DeepVariantCall::clear_ref_support_ext() {
  if (GetArenaNoVirtual() == nullptr && ref_support_ext_ != nullptr) {
    delete ref_support_ext_;
  }
  ref_support_ext_ = nullptr;
}
inline const ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt& DeepVariantCall::ref_support_ext() const {
  const ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt* p = ref_support_ext_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantCall.ref_support_ext)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt*>(
      &::learning::genomics::deepvariant::_DeepVariantCall_SupportingReadsExt_default_instance_);
}
inline ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt* DeepVariantCall::release_ref_support_ext() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.DeepVariantCall.ref_support_ext)
  
  ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt* temp = ref_support_ext_;
  ref_support_ext_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt* DeepVariantCall::mutable_ref_support_ext() {
  
  if (ref_support_ext_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt>(GetArenaNoVirtual());
    ref_support_ext_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantCall.ref_support_ext)
  return ref_support_ext_;
}
inline void DeepVariantCall::set_allocated_ref_support_ext(::learning::genomics::deepvariant::DeepVariantCall_SupportingReadsExt* ref_support_ext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ref_support_ext_;
  }
  if (ref_support_ext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ref_support_ext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref_support_ext, submessage_arena);
    }
    
  } else {
    
  }
  ref_support_ext_ = ref_support_ext;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.DeepVariantCall.ref_support_ext)
}

// -------------------------------------------------------------------

// AlleleCounterOptions

// int32 partition_size = 1;
inline void AlleleCounterOptions::clear_partition_size() {
  partition_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AlleleCounterOptions::partition_size() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlleleCounterOptions.partition_size)
  return partition_size_;
}
inline void AlleleCounterOptions::set_partition_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  partition_size_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlleleCounterOptions.partition_size)
}

// .nucleus.genomics.v1.ReadRequirements read_requirements = 2;
inline bool AlleleCounterOptions::has_read_requirements() const {
  return this != internal_default_instance() && read_requirements_ != nullptr;
}
inline const ::nucleus::genomics::v1::ReadRequirements& AlleleCounterOptions::read_requirements() const {
  const ::nucleus::genomics::v1::ReadRequirements* p = read_requirements_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlleleCounterOptions.read_requirements)
  return p != nullptr ? *p : *reinterpret_cast<const ::nucleus::genomics::v1::ReadRequirements*>(
      &::nucleus::genomics::v1::_ReadRequirements_default_instance_);
}
inline ::nucleus::genomics::v1::ReadRequirements* AlleleCounterOptions::release_read_requirements() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.AlleleCounterOptions.read_requirements)
  
  ::nucleus::genomics::v1::ReadRequirements* temp = read_requirements_;
  read_requirements_ = nullptr;
  return temp;
}
inline ::nucleus::genomics::v1::ReadRequirements* AlleleCounterOptions::mutable_read_requirements() {
  
  if (read_requirements_ == nullptr) {
    auto* p = CreateMaybeMessage<::nucleus::genomics::v1::ReadRequirements>(GetArenaNoVirtual());
    read_requirements_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.AlleleCounterOptions.read_requirements)
  return read_requirements_;
}
inline void AlleleCounterOptions::set_allocated_read_requirements(::nucleus::genomics::v1::ReadRequirements* read_requirements) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_requirements_);
  }
  if (read_requirements) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      read_requirements = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_requirements, submessage_arena);
    }
    
  } else {
    
  }
  read_requirements_ = read_requirements;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.AlleleCounterOptions.read_requirements)
}

// bool track_ref_reads = 3;
inline void AlleleCounterOptions::clear_track_ref_reads() {
  track_ref_reads_ = false;
}
inline bool AlleleCounterOptions::track_ref_reads() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlleleCounterOptions.track_ref_reads)
  return track_ref_reads_;
}
inline void AlleleCounterOptions::set_track_ref_reads(bool value) {
  
  track_ref_reads_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlleleCounterOptions.track_ref_reads)
}

// bool normalize_reads = 4;
inline void AlleleCounterOptions::clear_normalize_reads() {
  normalize_reads_ = false;
}
inline bool AlleleCounterOptions::normalize_reads() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlleleCounterOptions.normalize_reads)
  return normalize_reads_;
}
inline void AlleleCounterOptions::set_normalize_reads(bool value) {
  
  normalize_reads_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlleleCounterOptions.normalize_reads)
}

// bool keep_legacy_behavior = 5;
inline void AlleleCounterOptions::clear_keep_legacy_behavior() {
  keep_legacy_behavior_ = false;
}
inline bool AlleleCounterOptions::keep_legacy_behavior() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.AlleleCounterOptions.keep_legacy_behavior)
  return keep_legacy_behavior_;
}
inline void AlleleCounterOptions::set_keep_legacy_behavior(bool value) {
  
  keep_legacy_behavior_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.AlleleCounterOptions.keep_legacy_behavior)
}

// -------------------------------------------------------------------

// CallVariantsOutput_AltAlleleIndices

// repeated int32 indices = 1;
inline int CallVariantsOutput_AltAlleleIndices::indices_size() const {
  return indices_.size();
}
inline void CallVariantsOutput_AltAlleleIndices::clear_indices() {
  indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CallVariantsOutput_AltAlleleIndices::indices(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices.indices)
  return indices_.Get(index);
}
inline void CallVariantsOutput_AltAlleleIndices::set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices.indices)
}
inline void CallVariantsOutput_AltAlleleIndices::add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Add(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
CallVariantsOutput_AltAlleleIndices::indices() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices.indices)
  return indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
CallVariantsOutput_AltAlleleIndices::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices.indices)
  return &indices_;
}

// -------------------------------------------------------------------

// CallVariantsOutput_DebugInfo

// int32 predicted_label = 1;
inline void CallVariantsOutput_DebugInfo::clear_predicted_label() {
  predicted_label_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CallVariantsOutput_DebugInfo::predicted_label() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.predicted_label)
  return predicted_label_;
}
inline void CallVariantsOutput_DebugInfo::set_predicted_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  predicted_label_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.predicted_label)
}

// bool has_insertion = 2;
inline void CallVariantsOutput_DebugInfo::clear_has_insertion() {
  has_insertion_ = false;
}
inline bool CallVariantsOutput_DebugInfo::has_insertion() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.has_insertion)
  return has_insertion_;
}
inline void CallVariantsOutput_DebugInfo::set_has_insertion(bool value) {
  
  has_insertion_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.has_insertion)
}

// bool has_deletion = 3;
inline void CallVariantsOutput_DebugInfo::clear_has_deletion() {
  has_deletion_ = false;
}
inline bool CallVariantsOutput_DebugInfo::has_deletion() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.has_deletion)
  return has_deletion_;
}
inline void CallVariantsOutput_DebugInfo::set_has_deletion(bool value) {
  
  has_deletion_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.has_deletion)
}

// bool is_snp = 4;
inline void CallVariantsOutput_DebugInfo::clear_is_snp() {
  is_snp_ = false;
}
inline bool CallVariantsOutput_DebugInfo::is_snp() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.is_snp)
  return is_snp_;
}
inline void CallVariantsOutput_DebugInfo::set_is_snp(bool value) {
  
  is_snp_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.is_snp)
}

// int32 true_label = 5;
inline void CallVariantsOutput_DebugInfo::clear_true_label() {
  true_label_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CallVariantsOutput_DebugInfo::true_label() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.true_label)
  return true_label_;
}
inline void CallVariantsOutput_DebugInfo::set_true_label(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  true_label_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.true_label)
}

// repeated double logits = 6;
inline int CallVariantsOutput_DebugInfo::logits_size() const {
  return logits_.size();
}
inline void CallVariantsOutput_DebugInfo::clear_logits() {
  logits_.Clear();
}
inline double CallVariantsOutput_DebugInfo::logits(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.logits)
  return logits_.Get(index);
}
inline void CallVariantsOutput_DebugInfo::set_logits(int index, double value) {
  logits_.Set(index, value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.logits)
}
inline void CallVariantsOutput_DebugInfo::add_logits(double value) {
  logits_.Add(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.logits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CallVariantsOutput_DebugInfo::logits() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.logits)
  return logits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CallVariantsOutput_DebugInfo::mutable_logits() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.logits)
  return &logits_;
}

// repeated double prelogits = 7;
inline int CallVariantsOutput_DebugInfo::prelogits_size() const {
  return prelogits_.size();
}
inline void CallVariantsOutput_DebugInfo::clear_prelogits() {
  prelogits_.Clear();
}
inline double CallVariantsOutput_DebugInfo::prelogits(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.prelogits)
  return prelogits_.Get(index);
}
inline void CallVariantsOutput_DebugInfo::set_prelogits(int index, double value) {
  prelogits_.Set(index, value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.prelogits)
}
inline void CallVariantsOutput_DebugInfo::add_prelogits(double value) {
  prelogits_.Add(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.prelogits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CallVariantsOutput_DebugInfo::prelogits() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.prelogits)
  return prelogits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CallVariantsOutput_DebugInfo::mutable_prelogits() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.CallVariantsOutput.DebugInfo.prelogits)
  return &prelogits_;
}

// -------------------------------------------------------------------

// CallVariantsOutput

// .nucleus.genomics.v1.Variant variant = 1;
inline bool CallVariantsOutput::has_variant() const {
  return this != internal_default_instance() && variant_ != nullptr;
}
inline const ::nucleus::genomics::v1::Variant& CallVariantsOutput::variant() const {
  const ::nucleus::genomics::v1::Variant* p = variant_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.CallVariantsOutput.variant)
  return p != nullptr ? *p : *reinterpret_cast<const ::nucleus::genomics::v1::Variant*>(
      &::nucleus::genomics::v1::_Variant_default_instance_);
}
inline ::nucleus::genomics::v1::Variant* CallVariantsOutput::release_variant() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.CallVariantsOutput.variant)
  
  ::nucleus::genomics::v1::Variant* temp = variant_;
  variant_ = nullptr;
  return temp;
}
inline ::nucleus::genomics::v1::Variant* CallVariantsOutput::mutable_variant() {
  
  if (variant_ == nullptr) {
    auto* p = CreateMaybeMessage<::nucleus::genomics::v1::Variant>(GetArenaNoVirtual());
    variant_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.CallVariantsOutput.variant)
  return variant_;
}
inline void CallVariantsOutput::set_allocated_variant(::nucleus::genomics::v1::Variant* variant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(variant_);
  }
  if (variant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      variant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variant, submessage_arena);
    }
    
  } else {
    
  }
  variant_ = variant;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.CallVariantsOutput.variant)
}

// .learning.genomics.deepvariant.CallVariantsOutput.AltAlleleIndices alt_allele_indices = 2;
inline bool CallVariantsOutput::has_alt_allele_indices() const {
  return this != internal_default_instance() && alt_allele_indices_ != nullptr;
}
inline void CallVariantsOutput::clear_alt_allele_indices() {
  if (GetArenaNoVirtual() == nullptr && alt_allele_indices_ != nullptr) {
    delete alt_allele_indices_;
  }
  alt_allele_indices_ = nullptr;
}
inline const ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices& CallVariantsOutput::alt_allele_indices() const {
  const ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices* p = alt_allele_indices_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.CallVariantsOutput.alt_allele_indices)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices*>(
      &::learning::genomics::deepvariant::_CallVariantsOutput_AltAlleleIndices_default_instance_);
}
inline ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices* CallVariantsOutput::release_alt_allele_indices() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.CallVariantsOutput.alt_allele_indices)
  
  ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices* temp = alt_allele_indices_;
  alt_allele_indices_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices* CallVariantsOutput::mutable_alt_allele_indices() {
  
  if (alt_allele_indices_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices>(GetArenaNoVirtual());
    alt_allele_indices_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.CallVariantsOutput.alt_allele_indices)
  return alt_allele_indices_;
}
inline void CallVariantsOutput::set_allocated_alt_allele_indices(::learning::genomics::deepvariant::CallVariantsOutput_AltAlleleIndices* alt_allele_indices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete alt_allele_indices_;
  }
  if (alt_allele_indices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      alt_allele_indices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alt_allele_indices, submessage_arena);
    }
    
  } else {
    
  }
  alt_allele_indices_ = alt_allele_indices;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.CallVariantsOutput.alt_allele_indices)
}

// repeated double genotype_probabilities = 3;
inline int CallVariantsOutput::genotype_probabilities_size() const {
  return genotype_probabilities_.size();
}
inline void CallVariantsOutput::clear_genotype_probabilities() {
  genotype_probabilities_.Clear();
}
inline double CallVariantsOutput::genotype_probabilities(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.CallVariantsOutput.genotype_probabilities)
  return genotype_probabilities_.Get(index);
}
inline void CallVariantsOutput::set_genotype_probabilities(int index, double value) {
  genotype_probabilities_.Set(index, value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.CallVariantsOutput.genotype_probabilities)
}
inline void CallVariantsOutput::add_genotype_probabilities(double value) {
  genotype_probabilities_.Add(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.CallVariantsOutput.genotype_probabilities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CallVariantsOutput::genotype_probabilities() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.CallVariantsOutput.genotype_probabilities)
  return genotype_probabilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CallVariantsOutput::mutable_genotype_probabilities() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.CallVariantsOutput.genotype_probabilities)
  return &genotype_probabilities_;
}

// .learning.genomics.deepvariant.CallVariantsOutput.DebugInfo debug_info = 4;
inline bool CallVariantsOutput::has_debug_info() const {
  return this != internal_default_instance() && debug_info_ != nullptr;
}
inline void CallVariantsOutput::clear_debug_info() {
  if (GetArenaNoVirtual() == nullptr && debug_info_ != nullptr) {
    delete debug_info_;
  }
  debug_info_ = nullptr;
}
inline const ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo& CallVariantsOutput::debug_info() const {
  const ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo* p = debug_info_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.CallVariantsOutput.debug_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo*>(
      &::learning::genomics::deepvariant::_CallVariantsOutput_DebugInfo_default_instance_);
}
inline ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo* CallVariantsOutput::release_debug_info() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.CallVariantsOutput.debug_info)
  
  ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo* temp = debug_info_;
  debug_info_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo* CallVariantsOutput::mutable_debug_info() {
  
  if (debug_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo>(GetArenaNoVirtual());
    debug_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.CallVariantsOutput.debug_info)
  return debug_info_;
}
inline void CallVariantsOutput::set_allocated_debug_info(::learning::genomics::deepvariant::CallVariantsOutput_DebugInfo* debug_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete debug_info_;
  }
  if (debug_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      debug_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_info, submessage_arena);
    }
    
  } else {
    
  }
  debug_info_ = debug_info;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.CallVariantsOutput.debug_info)
}

// -------------------------------------------------------------------

// VariantCallerOptions

// int32 min_count_snps = 1;
inline void VariantCallerOptions::clear_min_count_snps() {
  min_count_snps_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VariantCallerOptions::min_count_snps() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.VariantCallerOptions.min_count_snps)
  return min_count_snps_;
}
inline void VariantCallerOptions::set_min_count_snps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_count_snps_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.VariantCallerOptions.min_count_snps)
}

// int32 min_count_indels = 2;
inline void VariantCallerOptions::clear_min_count_indels() {
  min_count_indels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VariantCallerOptions::min_count_indels() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.VariantCallerOptions.min_count_indels)
  return min_count_indels_;
}
inline void VariantCallerOptions::set_min_count_indels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_count_indels_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.VariantCallerOptions.min_count_indels)
}

// float min_fraction_snps = 3;
inline void VariantCallerOptions::clear_min_fraction_snps() {
  min_fraction_snps_ = 0;
}
inline float VariantCallerOptions::min_fraction_snps() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.VariantCallerOptions.min_fraction_snps)
  return min_fraction_snps_;
}
inline void VariantCallerOptions::set_min_fraction_snps(float value) {
  
  min_fraction_snps_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.VariantCallerOptions.min_fraction_snps)
}

// float min_fraction_indels = 4;
inline void VariantCallerOptions::clear_min_fraction_indels() {
  min_fraction_indels_ = 0;
}
inline float VariantCallerOptions::min_fraction_indels() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.VariantCallerOptions.min_fraction_indels)
  return min_fraction_indels_;
}
inline void VariantCallerOptions::set_min_fraction_indels(float value) {
  
  min_fraction_indels_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.VariantCallerOptions.min_fraction_indels)
}

// float min_fraction_multiplier = 12;
inline void VariantCallerOptions::clear_min_fraction_multiplier() {
  min_fraction_multiplier_ = 0;
}
inline float VariantCallerOptions::min_fraction_multiplier() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.VariantCallerOptions.min_fraction_multiplier)
  return min_fraction_multiplier_;
}
inline void VariantCallerOptions::set_min_fraction_multiplier(float value) {
  
  min_fraction_multiplier_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.VariantCallerOptions.min_fraction_multiplier)
}

// float fraction_reference_sites_to_emit = 5;
inline void VariantCallerOptions::clear_fraction_reference_sites_to_emit() {
  fraction_reference_sites_to_emit_ = 0;
}
inline float VariantCallerOptions::fraction_reference_sites_to_emit() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.VariantCallerOptions.fraction_reference_sites_to_emit)
  return fraction_reference_sites_to_emit_;
}
inline void VariantCallerOptions::set_fraction_reference_sites_to_emit(float value) {
  
  fraction_reference_sites_to_emit_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.VariantCallerOptions.fraction_reference_sites_to_emit)
}

// uint32 random_seed = 6;
inline void VariantCallerOptions::clear_random_seed() {
  random_seed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VariantCallerOptions::random_seed() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.VariantCallerOptions.random_seed)
  return random_seed_;
}
inline void VariantCallerOptions::set_random_seed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.VariantCallerOptions.random_seed)
}

// string sample_name = 7;
inline void VariantCallerOptions::clear_sample_name() {
  sample_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VariantCallerOptions::sample_name() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.VariantCallerOptions.sample_name)
  return sample_name_.GetNoArena();
}
inline void VariantCallerOptions::set_sample_name(const std::string& value) {
  
  sample_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.VariantCallerOptions.sample_name)
}
inline void VariantCallerOptions::set_sample_name(std::string&& value) {
  
  sample_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.VariantCallerOptions.sample_name)
}
inline void VariantCallerOptions::set_sample_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sample_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.VariantCallerOptions.sample_name)
}
inline void VariantCallerOptions::set_sample_name(const char* value, size_t size) {
  
  sample_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.VariantCallerOptions.sample_name)
}
inline std::string* VariantCallerOptions::mutable_sample_name() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.VariantCallerOptions.sample_name)
  return sample_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VariantCallerOptions::release_sample_name() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.VariantCallerOptions.sample_name)
  
  return sample_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VariantCallerOptions::set_allocated_sample_name(std::string* sample_name) {
  if (sample_name != nullptr) {
    
  } else {
    
  }
  sample_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sample_name);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.VariantCallerOptions.sample_name)
}

// float p_error = 8;
inline void VariantCallerOptions::clear_p_error() {
  p_error_ = 0;
}
inline float VariantCallerOptions::p_error() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.VariantCallerOptions.p_error)
  return p_error_;
}
inline void VariantCallerOptions::set_p_error(float value) {
  
  p_error_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.VariantCallerOptions.p_error)
}

// int32 max_gq = 9;
inline void VariantCallerOptions::clear_max_gq() {
  max_gq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VariantCallerOptions::max_gq() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.VariantCallerOptions.max_gq)
  return max_gq_;
}
inline void VariantCallerOptions::set_max_gq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_gq_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.VariantCallerOptions.max_gq)
}

// int32 gq_resolution = 10;
inline void VariantCallerOptions::clear_gq_resolution() {
  gq_resolution_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VariantCallerOptions::gq_resolution() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.VariantCallerOptions.gq_resolution)
  return gq_resolution_;
}
inline void VariantCallerOptions::set_gq_resolution(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gq_resolution_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.VariantCallerOptions.gq_resolution)
}

// int32 ploidy = 11;
inline void VariantCallerOptions::clear_ploidy() {
  ploidy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VariantCallerOptions::ploidy() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.VariantCallerOptions.ploidy)
  return ploidy_;
}
inline void VariantCallerOptions::set_ploidy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ploidy_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.VariantCallerOptions.ploidy)
}

// bool skip_uncalled_genotypes = 13;
inline void VariantCallerOptions::clear_skip_uncalled_genotypes() {
  skip_uncalled_genotypes_ = false;
}
inline bool VariantCallerOptions::skip_uncalled_genotypes() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.VariantCallerOptions.skip_uncalled_genotypes)
  return skip_uncalled_genotypes_;
}
inline void VariantCallerOptions::set_skip_uncalled_genotypes(bool value) {
  
  skip_uncalled_genotypes_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.VariantCallerOptions.skip_uncalled_genotypes)
}

// bool track_ref_reads = 14;
inline void VariantCallerOptions::clear_track_ref_reads() {
  track_ref_reads_ = false;
}
inline bool VariantCallerOptions::track_ref_reads() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.VariantCallerOptions.track_ref_reads)
  return track_ref_reads_;
}
inline void VariantCallerOptions::set_track_ref_reads(bool value) {
  
  track_ref_reads_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.VariantCallerOptions.track_ref_reads)
}

// -------------------------------------------------------------------

// VariantLabelerOptions

// -------------------------------------------------------------------

// PileupImageOptions

// int32 height = 1;
inline void PileupImageOptions::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PileupImageOptions::height() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.height)
  return height_;
}
inline void PileupImageOptions::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.height)
}

// int32 width = 2;
inline void PileupImageOptions::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PileupImageOptions::width() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.width)
  return width_;
}
inline void PileupImageOptions::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.width)
}

// int32 reference_band_height = 3;
inline void PileupImageOptions::clear_reference_band_height() {
  reference_band_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PileupImageOptions::reference_band_height() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.reference_band_height)
  return reference_band_height_;
}
inline void PileupImageOptions::set_reference_band_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reference_band_height_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.reference_band_height)
}

// int32 base_color_offset_a_and_g = 4;
inline void PileupImageOptions::clear_base_color_offset_a_and_g() {
  base_color_offset_a_and_g_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PileupImageOptions::base_color_offset_a_and_g() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.base_color_offset_a_and_g)
  return base_color_offset_a_and_g_;
}
inline void PileupImageOptions::set_base_color_offset_a_and_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  base_color_offset_a_and_g_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.base_color_offset_a_and_g)
}

// int32 base_color_offset_t_and_c = 5;
inline void PileupImageOptions::clear_base_color_offset_t_and_c() {
  base_color_offset_t_and_c_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PileupImageOptions::base_color_offset_t_and_c() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.base_color_offset_t_and_c)
  return base_color_offset_t_and_c_;
}
inline void PileupImageOptions::set_base_color_offset_t_and_c(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  base_color_offset_t_and_c_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.base_color_offset_t_and_c)
}

// int32 base_color_stride = 6;
inline void PileupImageOptions::clear_base_color_stride() {
  base_color_stride_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PileupImageOptions::base_color_stride() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.base_color_stride)
  return base_color_stride_;
}
inline void PileupImageOptions::set_base_color_stride(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  base_color_stride_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.base_color_stride)
}

// float reference_alpha = 7;
inline void PileupImageOptions::clear_reference_alpha() {
  reference_alpha_ = 0;
}
inline float PileupImageOptions::reference_alpha() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.reference_alpha)
  return reference_alpha_;
}
inline void PileupImageOptions::set_reference_alpha(float value) {
  
  reference_alpha_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.reference_alpha)
}

// int32 reference_base_quality = 8;
inline void PileupImageOptions::clear_reference_base_quality() {
  reference_base_quality_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PileupImageOptions::reference_base_quality() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.reference_base_quality)
  return reference_base_quality_;
}
inline void PileupImageOptions::set_reference_base_quality(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reference_base_quality_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.reference_base_quality)
}

// float allele_supporting_read_alpha = 9;
inline void PileupImageOptions::clear_allele_supporting_read_alpha() {
  allele_supporting_read_alpha_ = 0;
}
inline float PileupImageOptions::allele_supporting_read_alpha() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.allele_supporting_read_alpha)
  return allele_supporting_read_alpha_;
}
inline void PileupImageOptions::set_allele_supporting_read_alpha(float value) {
  
  allele_supporting_read_alpha_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.allele_supporting_read_alpha)
}

// float other_allele_supporting_read_alpha = 32;
inline void PileupImageOptions::clear_other_allele_supporting_read_alpha() {
  other_allele_supporting_read_alpha_ = 0;
}
inline float PileupImageOptions::other_allele_supporting_read_alpha() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.other_allele_supporting_read_alpha)
  return other_allele_supporting_read_alpha_;
}
inline void PileupImageOptions::set_other_allele_supporting_read_alpha(float value) {
  
  other_allele_supporting_read_alpha_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.other_allele_supporting_read_alpha)
}

// float allele_unsupporting_read_alpha = 10;
inline void PileupImageOptions::clear_allele_unsupporting_read_alpha() {
  allele_unsupporting_read_alpha_ = 0;
}
inline float PileupImageOptions::allele_unsupporting_read_alpha() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.allele_unsupporting_read_alpha)
  return allele_unsupporting_read_alpha_;
}
inline void PileupImageOptions::set_allele_unsupporting_read_alpha(float value) {
  
  allele_unsupporting_read_alpha_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.allele_unsupporting_read_alpha)
}

// float reference_matching_read_alpha = 11;
inline void PileupImageOptions::clear_reference_matching_read_alpha() {
  reference_matching_read_alpha_ = 0;
}
inline float PileupImageOptions::reference_matching_read_alpha() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.reference_matching_read_alpha)
  return reference_matching_read_alpha_;
}
inline void PileupImageOptions::set_reference_matching_read_alpha(float value) {
  
  reference_matching_read_alpha_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.reference_matching_read_alpha)
}

// float reference_mismatching_read_alpha = 12;
inline void PileupImageOptions::clear_reference_mismatching_read_alpha() {
  reference_mismatching_read_alpha_ = 0;
}
inline float PileupImageOptions::reference_mismatching_read_alpha() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.reference_mismatching_read_alpha)
  return reference_mismatching_read_alpha_;
}
inline void PileupImageOptions::set_reference_mismatching_read_alpha(float value) {
  
  reference_mismatching_read_alpha_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.reference_mismatching_read_alpha)
}

// string indel_anchoring_base_char = 13;
inline void PileupImageOptions::clear_indel_anchoring_base_char() {
  indel_anchoring_base_char_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PileupImageOptions::indel_anchoring_base_char() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.indel_anchoring_base_char)
  return indel_anchoring_base_char_.GetNoArena();
}
inline void PileupImageOptions::set_indel_anchoring_base_char(const std::string& value) {
  
  indel_anchoring_base_char_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.indel_anchoring_base_char)
}
inline void PileupImageOptions::set_indel_anchoring_base_char(std::string&& value) {
  
  indel_anchoring_base_char_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.PileupImageOptions.indel_anchoring_base_char)
}
inline void PileupImageOptions::set_indel_anchoring_base_char(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  indel_anchoring_base_char_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.PileupImageOptions.indel_anchoring_base_char)
}
inline void PileupImageOptions::set_indel_anchoring_base_char(const char* value, size_t size) {
  
  indel_anchoring_base_char_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.PileupImageOptions.indel_anchoring_base_char)
}
inline std::string* PileupImageOptions::mutable_indel_anchoring_base_char() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.PileupImageOptions.indel_anchoring_base_char)
  return indel_anchoring_base_char_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PileupImageOptions::release_indel_anchoring_base_char() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.PileupImageOptions.indel_anchoring_base_char)
  
  return indel_anchoring_base_char_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PileupImageOptions::set_allocated_indel_anchoring_base_char(std::string* indel_anchoring_base_char) {
  if (indel_anchoring_base_char != nullptr) {
    
  } else {
    
  }
  indel_anchoring_base_char_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), indel_anchoring_base_char);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.PileupImageOptions.indel_anchoring_base_char)
}

// int32 positive_strand_color = 14;
inline void PileupImageOptions::clear_positive_strand_color() {
  positive_strand_color_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PileupImageOptions::positive_strand_color() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.positive_strand_color)
  return positive_strand_color_;
}
inline void PileupImageOptions::set_positive_strand_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  positive_strand_color_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.positive_strand_color)
}

// int32 negative_strand_color = 15;
inline void PileupImageOptions::clear_negative_strand_color() {
  negative_strand_color_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PileupImageOptions::negative_strand_color() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.negative_strand_color)
  return negative_strand_color_;
}
inline void PileupImageOptions::set_negative_strand_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  negative_strand_color_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.negative_strand_color)
}

// int32 base_quality_cap = 16;
inline void PileupImageOptions::clear_base_quality_cap() {
  base_quality_cap_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PileupImageOptions::base_quality_cap() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.base_quality_cap)
  return base_quality_cap_;
}
inline void PileupImageOptions::set_base_quality_cap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  base_quality_cap_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.base_quality_cap)
}

// int32 read_overlap_buffer_bp = 17;
inline void PileupImageOptions::clear_read_overlap_buffer_bp() {
  read_overlap_buffer_bp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PileupImageOptions::read_overlap_buffer_bp() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.read_overlap_buffer_bp)
  return read_overlap_buffer_bp_;
}
inline void PileupImageOptions::set_read_overlap_buffer_bp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  read_overlap_buffer_bp_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.read_overlap_buffer_bp)
}

// .nucleus.genomics.v1.ReadRequirements read_requirements = 18;
inline bool PileupImageOptions::has_read_requirements() const {
  return this != internal_default_instance() && read_requirements_ != nullptr;
}
inline const ::nucleus::genomics::v1::ReadRequirements& PileupImageOptions::read_requirements() const {
  const ::nucleus::genomics::v1::ReadRequirements* p = read_requirements_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.read_requirements)
  return p != nullptr ? *p : *reinterpret_cast<const ::nucleus::genomics::v1::ReadRequirements*>(
      &::nucleus::genomics::v1::_ReadRequirements_default_instance_);
}
inline ::nucleus::genomics::v1::ReadRequirements* PileupImageOptions::release_read_requirements() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.PileupImageOptions.read_requirements)
  
  ::nucleus::genomics::v1::ReadRequirements* temp = read_requirements_;
  read_requirements_ = nullptr;
  return temp;
}
inline ::nucleus::genomics::v1::ReadRequirements* PileupImageOptions::mutable_read_requirements() {
  
  if (read_requirements_ == nullptr) {
    auto* p = CreateMaybeMessage<::nucleus::genomics::v1::ReadRequirements>(GetArenaNoVirtual());
    read_requirements_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.PileupImageOptions.read_requirements)
  return read_requirements_;
}
inline void PileupImageOptions::set_allocated_read_requirements(::nucleus::genomics::v1::ReadRequirements* read_requirements) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_requirements_);
  }
  if (read_requirements) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      read_requirements = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_requirements, submessage_arena);
    }
    
  } else {
    
  }
  read_requirements_ = read_requirements;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.PileupImageOptions.read_requirements)
}

// .learning.genomics.deepvariant.PileupImageOptions.MultiAllelicMode multi_allelic_mode = 19;
inline void PileupImageOptions::clear_multi_allelic_mode() {
  multi_allelic_mode_ = 0;
}
inline ::learning::genomics::deepvariant::PileupImageOptions_MultiAllelicMode PileupImageOptions::multi_allelic_mode() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.multi_allelic_mode)
  return static_cast< ::learning::genomics::deepvariant::PileupImageOptions_MultiAllelicMode >(multi_allelic_mode_);
}
inline void PileupImageOptions::set_multi_allelic_mode(::learning::genomics::deepvariant::PileupImageOptions_MultiAllelicMode value) {
  
  multi_allelic_mode_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.multi_allelic_mode)
}

// int32 mapping_quality_cap = 20;
inline void PileupImageOptions::clear_mapping_quality_cap() {
  mapping_quality_cap_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PileupImageOptions::mapping_quality_cap() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.mapping_quality_cap)
  return mapping_quality_cap_;
}
inline void PileupImageOptions::set_mapping_quality_cap(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mapping_quality_cap_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.mapping_quality_cap)
}

// uint32 random_seed = 21;
inline void PileupImageOptions::clear_random_seed() {
  random_seed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PileupImageOptions::random_seed() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.random_seed)
  return random_seed_;
}
inline void PileupImageOptions::set_random_seed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.random_seed)
}

// int32 num_channels = 22;
inline void PileupImageOptions::clear_num_channels() {
  num_channels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PileupImageOptions::num_channels() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.num_channels)
  return num_channels_;
}
inline void PileupImageOptions::set_num_channels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_channels_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.num_channels)
}

// string unused_insert_base_char = 23;
inline void PileupImageOptions::clear_unused_insert_base_char() {
  unused_insert_base_char_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PileupImageOptions::unused_insert_base_char() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.unused_insert_base_char)
  return unused_insert_base_char_.GetNoArena();
}
inline void PileupImageOptions::set_unused_insert_base_char(const std::string& value) {
  
  unused_insert_base_char_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.unused_insert_base_char)
}
inline void PileupImageOptions::set_unused_insert_base_char(std::string&& value) {
  
  unused_insert_base_char_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.PileupImageOptions.unused_insert_base_char)
}
inline void PileupImageOptions::set_unused_insert_base_char(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unused_insert_base_char_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.PileupImageOptions.unused_insert_base_char)
}
inline void PileupImageOptions::set_unused_insert_base_char(const char* value, size_t size) {
  
  unused_insert_base_char_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.PileupImageOptions.unused_insert_base_char)
}
inline std::string* PileupImageOptions::mutable_unused_insert_base_char() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.PileupImageOptions.unused_insert_base_char)
  return unused_insert_base_char_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PileupImageOptions::release_unused_insert_base_char() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.PileupImageOptions.unused_insert_base_char)
  
  return unused_insert_base_char_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PileupImageOptions::set_allocated_unused_insert_base_char(std::string* unused_insert_base_char) {
  if (unused_insert_base_char != nullptr) {
    
  } else {
    
  }
  unused_insert_base_char_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unused_insert_base_char);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.PileupImageOptions.unused_insert_base_char)
}

// string unused_delete_base_char = 24;
inline void PileupImageOptions::clear_unused_delete_base_char() {
  unused_delete_base_char_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PileupImageOptions::unused_delete_base_char() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.unused_delete_base_char)
  return unused_delete_base_char_.GetNoArena();
}
inline void PileupImageOptions::set_unused_delete_base_char(const std::string& value) {
  
  unused_delete_base_char_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.unused_delete_base_char)
}
inline void PileupImageOptions::set_unused_delete_base_char(std::string&& value) {
  
  unused_delete_base_char_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.PileupImageOptions.unused_delete_base_char)
}
inline void PileupImageOptions::set_unused_delete_base_char(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unused_delete_base_char_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.PileupImageOptions.unused_delete_base_char)
}
inline void PileupImageOptions::set_unused_delete_base_char(const char* value, size_t size) {
  
  unused_delete_base_char_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.PileupImageOptions.unused_delete_base_char)
}
inline std::string* PileupImageOptions::mutable_unused_delete_base_char() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.PileupImageOptions.unused_delete_base_char)
  return unused_delete_base_char_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PileupImageOptions::release_unused_delete_base_char() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.PileupImageOptions.unused_delete_base_char)
  
  return unused_delete_base_char_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PileupImageOptions::set_allocated_unused_delete_base_char(std::string* unused_delete_base_char) {
  if (unused_delete_base_char != nullptr) {
    
  } else {
    
  }
  unused_delete_base_char_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unused_delete_base_char);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.PileupImageOptions.unused_delete_base_char)
}

// bool unused_custom_pileup_image = 25;
inline void PileupImageOptions::clear_unused_custom_pileup_image() {
  unused_custom_pileup_image_ = false;
}
inline bool PileupImageOptions::unused_custom_pileup_image() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.unused_custom_pileup_image)
  return unused_custom_pileup_image_;
}
inline void PileupImageOptions::set_unused_custom_pileup_image(bool value) {
  
  unused_custom_pileup_image_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.unused_custom_pileup_image)
}

// bool unused_sequencing_type_image = 26;
inline void PileupImageOptions::clear_unused_sequencing_type_image() {
  unused_sequencing_type_image_ = false;
}
inline bool PileupImageOptions::unused_sequencing_type_image() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.unused_sequencing_type_image)
  return unused_sequencing_type_image_;
}
inline void PileupImageOptions::set_unused_sequencing_type_image(bool value) {
  
  unused_sequencing_type_image_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.unused_sequencing_type_image)
}

// .learning.genomics.deepvariant.PileupImageOptions.SequencingType sequencing_type = 27;
inline void PileupImageOptions::clear_sequencing_type() {
  sequencing_type_ = 0;
}
inline ::learning::genomics::deepvariant::PileupImageOptions_SequencingType PileupImageOptions::sequencing_type() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.sequencing_type)
  return static_cast< ::learning::genomics::deepvariant::PileupImageOptions_SequencingType >(sequencing_type_);
}
inline void PileupImageOptions::set_sequencing_type(::learning::genomics::deepvariant::PileupImageOptions_SequencingType value) {
  
  sequencing_type_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.sequencing_type)
}

// string alt_aligned_pileup = 30;
inline void PileupImageOptions::clear_alt_aligned_pileup() {
  alt_aligned_pileup_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PileupImageOptions::alt_aligned_pileup() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.alt_aligned_pileup)
  return alt_aligned_pileup_.GetNoArena();
}
inline void PileupImageOptions::set_alt_aligned_pileup(const std::string& value) {
  
  alt_aligned_pileup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.alt_aligned_pileup)
}
inline void PileupImageOptions::set_alt_aligned_pileup(std::string&& value) {
  
  alt_aligned_pileup_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.PileupImageOptions.alt_aligned_pileup)
}
inline void PileupImageOptions::set_alt_aligned_pileup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alt_aligned_pileup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.PileupImageOptions.alt_aligned_pileup)
}
inline void PileupImageOptions::set_alt_aligned_pileup(const char* value, size_t size) {
  
  alt_aligned_pileup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.PileupImageOptions.alt_aligned_pileup)
}
inline std::string* PileupImageOptions::mutable_alt_aligned_pileup() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.PileupImageOptions.alt_aligned_pileup)
  return alt_aligned_pileup_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PileupImageOptions::release_alt_aligned_pileup() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.PileupImageOptions.alt_aligned_pileup)
  
  return alt_aligned_pileup_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PileupImageOptions::set_allocated_alt_aligned_pileup(std::string* alt_aligned_pileup) {
  if (alt_aligned_pileup != nullptr) {
    
  } else {
    
  }
  alt_aligned_pileup_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alt_aligned_pileup);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.PileupImageOptions.alt_aligned_pileup)
}

// bool sort_by_haplotypes = 31;
inline void PileupImageOptions::clear_sort_by_haplotypes() {
  sort_by_haplotypes_ = false;
}
inline bool PileupImageOptions::sort_by_haplotypes() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.sort_by_haplotypes)
  return sort_by_haplotypes_;
}
inline void PileupImageOptions::set_sort_by_haplotypes(bool value) {
  
  sort_by_haplotypes_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.sort_by_haplotypes)
}

// float min_non_zero_allele_frequency = 33;
inline void PileupImageOptions::clear_min_non_zero_allele_frequency() {
  min_non_zero_allele_frequency_ = 0;
}
inline float PileupImageOptions::min_non_zero_allele_frequency() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.min_non_zero_allele_frequency)
  return min_non_zero_allele_frequency_;
}
inline void PileupImageOptions::set_min_non_zero_allele_frequency(float value) {
  
  min_non_zero_allele_frequency_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.min_non_zero_allele_frequency)
}

// bool use_allele_frequency = 34;
inline void PileupImageOptions::clear_use_allele_frequency() {
  use_allele_frequency_ = false;
}
inline bool PileupImageOptions::use_allele_frequency() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.use_allele_frequency)
  return use_allele_frequency_;
}
inline void PileupImageOptions::set_use_allele_frequency(bool value) {
  
  use_allele_frequency_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.use_allele_frequency)
}

// string types_to_alt_align = 36;
inline void PileupImageOptions::clear_types_to_alt_align() {
  types_to_alt_align_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PileupImageOptions::types_to_alt_align() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.types_to_alt_align)
  return types_to_alt_align_.GetNoArena();
}
inline void PileupImageOptions::set_types_to_alt_align(const std::string& value) {
  
  types_to_alt_align_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.types_to_alt_align)
}
inline void PileupImageOptions::set_types_to_alt_align(std::string&& value) {
  
  types_to_alt_align_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.PileupImageOptions.types_to_alt_align)
}
inline void PileupImageOptions::set_types_to_alt_align(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  types_to_alt_align_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.PileupImageOptions.types_to_alt_align)
}
inline void PileupImageOptions::set_types_to_alt_align(const char* value, size_t size) {
  
  types_to_alt_align_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.PileupImageOptions.types_to_alt_align)
}
inline std::string* PileupImageOptions::mutable_types_to_alt_align() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.PileupImageOptions.types_to_alt_align)
  return types_to_alt_align_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PileupImageOptions::release_types_to_alt_align() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.PileupImageOptions.types_to_alt_align)
  
  return types_to_alt_align_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PileupImageOptions::set_allocated_types_to_alt_align(std::string* types_to_alt_align) {
  if (types_to_alt_align != nullptr) {
    
  } else {
    
  }
  types_to_alt_align_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), types_to_alt_align);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.PileupImageOptions.types_to_alt_align)
}

// bool add_hp_channel = 37;
inline void PileupImageOptions::clear_add_hp_channel() {
  add_hp_channel_ = false;
}
inline bool PileupImageOptions::add_hp_channel() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.add_hp_channel)
  return add_hp_channel_;
}
inline void PileupImageOptions::set_add_hp_channel(bool value) {
  
  add_hp_channel_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.add_hp_channel)
}

// int32 hp_tag_for_assembly_polishing = 38;
inline void PileupImageOptions::clear_hp_tag_for_assembly_polishing() {
  hp_tag_for_assembly_polishing_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PileupImageOptions::hp_tag_for_assembly_polishing() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.hp_tag_for_assembly_polishing)
  return hp_tag_for_assembly_polishing_;
}
inline void PileupImageOptions::set_hp_tag_for_assembly_polishing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_tag_for_assembly_polishing_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.hp_tag_for_assembly_polishing)
}

// repeated string channels = 39;
inline int PileupImageOptions::channels_size() const {
  return channels_.size();
}
inline void PileupImageOptions::clear_channels() {
  channels_.Clear();
}
inline const std::string& PileupImageOptions::channels(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.channels)
  return channels_.Get(index);
}
inline std::string* PileupImageOptions::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.PileupImageOptions.channels)
  return channels_.Mutable(index);
}
inline void PileupImageOptions::set_channels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.channels)
  channels_.Mutable(index)->assign(value);
}
inline void PileupImageOptions::set_channels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.channels)
  channels_.Mutable(index)->assign(std::move(value));
}
inline void PileupImageOptions::set_channels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.PileupImageOptions.channels)
}
inline void PileupImageOptions::set_channels(int index, const char* value, size_t size) {
  channels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.PileupImageOptions.channels)
}
inline std::string* PileupImageOptions::add_channels() {
  // @@protoc_insertion_point(field_add_mutable:learning.genomics.deepvariant.PileupImageOptions.channels)
  return channels_.Add();
}
inline void PileupImageOptions::add_channels(const std::string& value) {
  channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.PileupImageOptions.channels)
}
inline void PileupImageOptions::add_channels(std::string&& value) {
  channels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.PileupImageOptions.channels)
}
inline void PileupImageOptions::add_channels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:learning.genomics.deepvariant.PileupImageOptions.channels)
}
inline void PileupImageOptions::add_channels(const char* value, size_t size) {
  channels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:learning.genomics.deepvariant.PileupImageOptions.channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PileupImageOptions::channels() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.PileupImageOptions.channels)
  return channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PileupImageOptions::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.PileupImageOptions.channels)
  return &channels_;
}

// int32 sort_by_haplotypes_sample_hp_tag = 35 [deprecated = true];
inline void PileupImageOptions::clear_sort_by_haplotypes_sample_hp_tag() {
  sort_by_haplotypes_sample_hp_tag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PileupImageOptions::sort_by_haplotypes_sample_hp_tag() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.PileupImageOptions.sort_by_haplotypes_sample_hp_tag)
  return sort_by_haplotypes_sample_hp_tag_;
}
inline void PileupImageOptions::set_sort_by_haplotypes_sample_hp_tag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sort_by_haplotypes_sample_hp_tag_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.PileupImageOptions.sort_by_haplotypes_sample_hp_tag)
}

// -------------------------------------------------------------------

// SampleOptions

// string role = 6;
inline void SampleOptions::clear_role() {
  role_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SampleOptions::role() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.SampleOptions.role)
  return role_.GetNoArena();
}
inline void SampleOptions::set_role(const std::string& value) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.SampleOptions.role)
}
inline void SampleOptions::set_role(std::string&& value) {
  
  role_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.SampleOptions.role)
}
inline void SampleOptions::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.SampleOptions.role)
}
inline void SampleOptions::set_role(const char* value, size_t size) {
  
  role_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.SampleOptions.role)
}
inline std::string* SampleOptions::mutable_role() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.SampleOptions.role)
  return role_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SampleOptions::release_role() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.SampleOptions.role)
  
  return role_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SampleOptions::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.SampleOptions.role)
}

// string name = 7;
inline void SampleOptions::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SampleOptions::name() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.SampleOptions.name)
  return name_.GetNoArena();
}
inline void SampleOptions::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.SampleOptions.name)
}
inline void SampleOptions::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.SampleOptions.name)
}
inline void SampleOptions::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.SampleOptions.name)
}
inline void SampleOptions::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.SampleOptions.name)
}
inline std::string* SampleOptions::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.SampleOptions.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SampleOptions::release_name() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.SampleOptions.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SampleOptions::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.SampleOptions.name)
}

// repeated string reads_filenames = 1;
inline int SampleOptions::reads_filenames_size() const {
  return reads_filenames_.size();
}
inline void SampleOptions::clear_reads_filenames() {
  reads_filenames_.Clear();
}
inline const std::string& SampleOptions::reads_filenames(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.SampleOptions.reads_filenames)
  return reads_filenames_.Get(index);
}
inline std::string* SampleOptions::mutable_reads_filenames(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.SampleOptions.reads_filenames)
  return reads_filenames_.Mutable(index);
}
inline void SampleOptions::set_reads_filenames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.SampleOptions.reads_filenames)
  reads_filenames_.Mutable(index)->assign(value);
}
inline void SampleOptions::set_reads_filenames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.SampleOptions.reads_filenames)
  reads_filenames_.Mutable(index)->assign(std::move(value));
}
inline void SampleOptions::set_reads_filenames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reads_filenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.SampleOptions.reads_filenames)
}
inline void SampleOptions::set_reads_filenames(int index, const char* value, size_t size) {
  reads_filenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.SampleOptions.reads_filenames)
}
inline std::string* SampleOptions::add_reads_filenames() {
  // @@protoc_insertion_point(field_add_mutable:learning.genomics.deepvariant.SampleOptions.reads_filenames)
  return reads_filenames_.Add();
}
inline void SampleOptions::add_reads_filenames(const std::string& value) {
  reads_filenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.SampleOptions.reads_filenames)
}
inline void SampleOptions::add_reads_filenames(std::string&& value) {
  reads_filenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.SampleOptions.reads_filenames)
}
inline void SampleOptions::add_reads_filenames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reads_filenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:learning.genomics.deepvariant.SampleOptions.reads_filenames)
}
inline void SampleOptions::add_reads_filenames(const char* value, size_t size) {
  reads_filenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:learning.genomics.deepvariant.SampleOptions.reads_filenames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SampleOptions::reads_filenames() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.SampleOptions.reads_filenames)
  return reads_filenames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SampleOptions::mutable_reads_filenames() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.SampleOptions.reads_filenames)
  return &reads_filenames_;
}

// float downsample_fraction = 2;
inline void SampleOptions::clear_downsample_fraction() {
  downsample_fraction_ = 0;
}
inline float SampleOptions::downsample_fraction() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.SampleOptions.downsample_fraction)
  return downsample_fraction_;
}
inline void SampleOptions::set_downsample_fraction(float value) {
  
  downsample_fraction_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.SampleOptions.downsample_fraction)
}

// .learning.genomics.deepvariant.VariantCallerOptions variant_caller_options = 3;
inline bool SampleOptions::has_variant_caller_options() const {
  return this != internal_default_instance() && variant_caller_options_ != nullptr;
}
inline void SampleOptions::clear_variant_caller_options() {
  if (GetArenaNoVirtual() == nullptr && variant_caller_options_ != nullptr) {
    delete variant_caller_options_;
  }
  variant_caller_options_ = nullptr;
}
inline const ::learning::genomics::deepvariant::VariantCallerOptions& SampleOptions::variant_caller_options() const {
  const ::learning::genomics::deepvariant::VariantCallerOptions* p = variant_caller_options_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.SampleOptions.variant_caller_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::VariantCallerOptions*>(
      &::learning::genomics::deepvariant::_VariantCallerOptions_default_instance_);
}
inline ::learning::genomics::deepvariant::VariantCallerOptions* SampleOptions::release_variant_caller_options() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.SampleOptions.variant_caller_options)
  
  ::learning::genomics::deepvariant::VariantCallerOptions* temp = variant_caller_options_;
  variant_caller_options_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::VariantCallerOptions* SampleOptions::mutable_variant_caller_options() {
  
  if (variant_caller_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::VariantCallerOptions>(GetArenaNoVirtual());
    variant_caller_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.SampleOptions.variant_caller_options)
  return variant_caller_options_;
}
inline void SampleOptions::set_allocated_variant_caller_options(::learning::genomics::deepvariant::VariantCallerOptions* variant_caller_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete variant_caller_options_;
  }
  if (variant_caller_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      variant_caller_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variant_caller_options, submessage_arena);
    }
    
  } else {
    
  }
  variant_caller_options_ = variant_caller_options;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.SampleOptions.variant_caller_options)
}

// int32 pileup_height = 4;
inline void SampleOptions::clear_pileup_height() {
  pileup_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SampleOptions::pileup_height() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.SampleOptions.pileup_height)
  return pileup_height_;
}
inline void SampleOptions::set_pileup_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pileup_height_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.SampleOptions.pileup_height)
}

// repeated int32 order = 5;
inline int SampleOptions::order_size() const {
  return order_.size();
}
inline void SampleOptions::clear_order() {
  order_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SampleOptions::order(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.SampleOptions.order)
  return order_.Get(index);
}
inline void SampleOptions::set_order(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  order_.Set(index, value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.SampleOptions.order)
}
inline void SampleOptions::add_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  order_.Add(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.SampleOptions.order)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SampleOptions::order() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.SampleOptions.order)
  return order_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SampleOptions::mutable_order() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.SampleOptions.order)
  return &order_;
}

// string proposed_variants_filename = 8;
inline void SampleOptions::clear_proposed_variants_filename() {
  proposed_variants_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SampleOptions::proposed_variants_filename() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.SampleOptions.proposed_variants_filename)
  return proposed_variants_filename_.GetNoArena();
}
inline void SampleOptions::set_proposed_variants_filename(const std::string& value) {
  
  proposed_variants_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.SampleOptions.proposed_variants_filename)
}
inline void SampleOptions::set_proposed_variants_filename(std::string&& value) {
  
  proposed_variants_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.SampleOptions.proposed_variants_filename)
}
inline void SampleOptions::set_proposed_variants_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proposed_variants_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.SampleOptions.proposed_variants_filename)
}
inline void SampleOptions::set_proposed_variants_filename(const char* value, size_t size) {
  
  proposed_variants_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.SampleOptions.proposed_variants_filename)
}
inline std::string* SampleOptions::mutable_proposed_variants_filename() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.SampleOptions.proposed_variants_filename)
  return proposed_variants_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SampleOptions::release_proposed_variants_filename() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.SampleOptions.proposed_variants_filename)
  
  return proposed_variants_filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SampleOptions::set_allocated_proposed_variants_filename(std::string* proposed_variants_filename) {
  if (proposed_variants_filename != nullptr) {
    
  } else {
    
  }
  proposed_variants_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposed_variants_filename);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.SampleOptions.proposed_variants_filename)
}

// -------------------------------------------------------------------

// MakeExamplesOptions

// repeated string exclude_contigs = 1;
inline int MakeExamplesOptions::exclude_contigs_size() const {
  return exclude_contigs_.size();
}
inline void MakeExamplesOptions::clear_exclude_contigs() {
  exclude_contigs_.Clear();
}
inline const std::string& MakeExamplesOptions::exclude_contigs(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.exclude_contigs)
  return exclude_contigs_.Get(index);
}
inline std::string* MakeExamplesOptions::mutable_exclude_contigs(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.exclude_contigs)
  return exclude_contigs_.Mutable(index);
}
inline void MakeExamplesOptions::set_exclude_contigs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.exclude_contigs)
  exclude_contigs_.Mutable(index)->assign(value);
}
inline void MakeExamplesOptions::set_exclude_contigs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.exclude_contigs)
  exclude_contigs_.Mutable(index)->assign(std::move(value));
}
inline void MakeExamplesOptions::set_exclude_contigs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exclude_contigs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.exclude_contigs)
}
inline void MakeExamplesOptions::set_exclude_contigs(int index, const char* value, size_t size) {
  exclude_contigs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.exclude_contigs)
}
inline std::string* MakeExamplesOptions::add_exclude_contigs() {
  // @@protoc_insertion_point(field_add_mutable:learning.genomics.deepvariant.MakeExamplesOptions.exclude_contigs)
  return exclude_contigs_.Add();
}
inline void MakeExamplesOptions::add_exclude_contigs(const std::string& value) {
  exclude_contigs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.MakeExamplesOptions.exclude_contigs)
}
inline void MakeExamplesOptions::add_exclude_contigs(std::string&& value) {
  exclude_contigs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.MakeExamplesOptions.exclude_contigs)
}
inline void MakeExamplesOptions::add_exclude_contigs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exclude_contigs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:learning.genomics.deepvariant.MakeExamplesOptions.exclude_contigs)
}
inline void MakeExamplesOptions::add_exclude_contigs(const char* value, size_t size) {
  exclude_contigs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:learning.genomics.deepvariant.MakeExamplesOptions.exclude_contigs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MakeExamplesOptions::exclude_contigs() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.MakeExamplesOptions.exclude_contigs)
  return exclude_contigs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MakeExamplesOptions::mutable_exclude_contigs() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.MakeExamplesOptions.exclude_contigs)
  return &exclude_contigs_;
}

// repeated string calling_regions = 2;
inline int MakeExamplesOptions::calling_regions_size() const {
  return calling_regions_.size();
}
inline void MakeExamplesOptions::clear_calling_regions() {
  calling_regions_.Clear();
}
inline const std::string& MakeExamplesOptions::calling_regions(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.calling_regions)
  return calling_regions_.Get(index);
}
inline std::string* MakeExamplesOptions::mutable_calling_regions(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.calling_regions)
  return calling_regions_.Mutable(index);
}
inline void MakeExamplesOptions::set_calling_regions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.calling_regions)
  calling_regions_.Mutable(index)->assign(value);
}
inline void MakeExamplesOptions::set_calling_regions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.calling_regions)
  calling_regions_.Mutable(index)->assign(std::move(value));
}
inline void MakeExamplesOptions::set_calling_regions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  calling_regions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.calling_regions)
}
inline void MakeExamplesOptions::set_calling_regions(int index, const char* value, size_t size) {
  calling_regions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.calling_regions)
}
inline std::string* MakeExamplesOptions::add_calling_regions() {
  // @@protoc_insertion_point(field_add_mutable:learning.genomics.deepvariant.MakeExamplesOptions.calling_regions)
  return calling_regions_.Add();
}
inline void MakeExamplesOptions::add_calling_regions(const std::string& value) {
  calling_regions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.MakeExamplesOptions.calling_regions)
}
inline void MakeExamplesOptions::add_calling_regions(std::string&& value) {
  calling_regions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.MakeExamplesOptions.calling_regions)
}
inline void MakeExamplesOptions::add_calling_regions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  calling_regions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:learning.genomics.deepvariant.MakeExamplesOptions.calling_regions)
}
inline void MakeExamplesOptions::add_calling_regions(const char* value, size_t size) {
  calling_regions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:learning.genomics.deepvariant.MakeExamplesOptions.calling_regions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MakeExamplesOptions::calling_regions() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.MakeExamplesOptions.calling_regions)
  return calling_regions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MakeExamplesOptions::mutable_calling_regions() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.MakeExamplesOptions.calling_regions)
  return &calling_regions_;
}

// uint32 random_seed = 3;
inline void MakeExamplesOptions::clear_random_seed() {
  random_seed_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MakeExamplesOptions::random_seed() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.random_seed)
  return random_seed_;
}
inline void MakeExamplesOptions::set_random_seed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.random_seed)
}

// int32 n_cores = 4;
inline void MakeExamplesOptions::clear_n_cores() {
  n_cores_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MakeExamplesOptions::n_cores() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.n_cores)
  return n_cores_;
}
inline void MakeExamplesOptions::set_n_cores(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_cores_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.n_cores)
}

// .learning.genomics.deepvariant.AlleleCounterOptions allele_counter_options = 5;
inline bool MakeExamplesOptions::has_allele_counter_options() const {
  return this != internal_default_instance() && allele_counter_options_ != nullptr;
}
inline void MakeExamplesOptions::clear_allele_counter_options() {
  if (GetArenaNoVirtual() == nullptr && allele_counter_options_ != nullptr) {
    delete allele_counter_options_;
  }
  allele_counter_options_ = nullptr;
}
inline const ::learning::genomics::deepvariant::AlleleCounterOptions& MakeExamplesOptions::allele_counter_options() const {
  const ::learning::genomics::deepvariant::AlleleCounterOptions* p = allele_counter_options_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.allele_counter_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::AlleleCounterOptions*>(
      &::learning::genomics::deepvariant::_AlleleCounterOptions_default_instance_);
}
inline ::learning::genomics::deepvariant::AlleleCounterOptions* MakeExamplesOptions::release_allele_counter_options() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.allele_counter_options)
  
  ::learning::genomics::deepvariant::AlleleCounterOptions* temp = allele_counter_options_;
  allele_counter_options_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::AlleleCounterOptions* MakeExamplesOptions::mutable_allele_counter_options() {
  
  if (allele_counter_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::AlleleCounterOptions>(GetArenaNoVirtual());
    allele_counter_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.allele_counter_options)
  return allele_counter_options_;
}
inline void MakeExamplesOptions::set_allocated_allele_counter_options(::learning::genomics::deepvariant::AlleleCounterOptions* allele_counter_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete allele_counter_options_;
  }
  if (allele_counter_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      allele_counter_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allele_counter_options, submessage_arena);
    }
    
  } else {
    
  }
  allele_counter_options_ = allele_counter_options;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.allele_counter_options)
}

// .learning.genomics.deepvariant.VariantCallerOptions deprecated_variant_caller_options = 6;
inline bool MakeExamplesOptions::has_deprecated_variant_caller_options() const {
  return this != internal_default_instance() && deprecated_variant_caller_options_ != nullptr;
}
inline void MakeExamplesOptions::clear_deprecated_variant_caller_options() {
  if (GetArenaNoVirtual() == nullptr && deprecated_variant_caller_options_ != nullptr) {
    delete deprecated_variant_caller_options_;
  }
  deprecated_variant_caller_options_ = nullptr;
}
inline const ::learning::genomics::deepvariant::VariantCallerOptions& MakeExamplesOptions::deprecated_variant_caller_options() const {
  const ::learning::genomics::deepvariant::VariantCallerOptions* p = deprecated_variant_caller_options_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_variant_caller_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::VariantCallerOptions*>(
      &::learning::genomics::deepvariant::_VariantCallerOptions_default_instance_);
}
inline ::learning::genomics::deepvariant::VariantCallerOptions* MakeExamplesOptions::release_deprecated_variant_caller_options() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_variant_caller_options)
  
  ::learning::genomics::deepvariant::VariantCallerOptions* temp = deprecated_variant_caller_options_;
  deprecated_variant_caller_options_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::VariantCallerOptions* MakeExamplesOptions::mutable_deprecated_variant_caller_options() {
  
  if (deprecated_variant_caller_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::VariantCallerOptions>(GetArenaNoVirtual());
    deprecated_variant_caller_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_variant_caller_options)
  return deprecated_variant_caller_options_;
}
inline void MakeExamplesOptions::set_allocated_deprecated_variant_caller_options(::learning::genomics::deepvariant::VariantCallerOptions* deprecated_variant_caller_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete deprecated_variant_caller_options_;
  }
  if (deprecated_variant_caller_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deprecated_variant_caller_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_variant_caller_options, submessage_arena);
    }
    
  } else {
    
  }
  deprecated_variant_caller_options_ = deprecated_variant_caller_options;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_variant_caller_options)
}

// .learning.genomics.deepvariant.PileupImageOptions pic_options = 7;
inline bool MakeExamplesOptions::has_pic_options() const {
  return this != internal_default_instance() && pic_options_ != nullptr;
}
inline void MakeExamplesOptions::clear_pic_options() {
  if (GetArenaNoVirtual() == nullptr && pic_options_ != nullptr) {
    delete pic_options_;
  }
  pic_options_ = nullptr;
}
inline const ::learning::genomics::deepvariant::PileupImageOptions& MakeExamplesOptions::pic_options() const {
  const ::learning::genomics::deepvariant::PileupImageOptions* p = pic_options_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.pic_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::PileupImageOptions*>(
      &::learning::genomics::deepvariant::_PileupImageOptions_default_instance_);
}
inline ::learning::genomics::deepvariant::PileupImageOptions* MakeExamplesOptions::release_pic_options() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.pic_options)
  
  ::learning::genomics::deepvariant::PileupImageOptions* temp = pic_options_;
  pic_options_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::PileupImageOptions* MakeExamplesOptions::mutable_pic_options() {
  
  if (pic_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::PileupImageOptions>(GetArenaNoVirtual());
    pic_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.pic_options)
  return pic_options_;
}
inline void MakeExamplesOptions::set_allocated_pic_options(::learning::genomics::deepvariant::PileupImageOptions* pic_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pic_options_;
  }
  if (pic_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pic_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pic_options, submessage_arena);
    }
    
  } else {
    
  }
  pic_options_ = pic_options;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.pic_options)
}

// .learning.genomics.deepvariant.VariantLabelerOptions labeler_options = 8;
inline bool MakeExamplesOptions::has_labeler_options() const {
  return this != internal_default_instance() && labeler_options_ != nullptr;
}
inline void MakeExamplesOptions::clear_labeler_options() {
  if (GetArenaNoVirtual() == nullptr && labeler_options_ != nullptr) {
    delete labeler_options_;
  }
  labeler_options_ = nullptr;
}
inline const ::learning::genomics::deepvariant::VariantLabelerOptions& MakeExamplesOptions::labeler_options() const {
  const ::learning::genomics::deepvariant::VariantLabelerOptions* p = labeler_options_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.labeler_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::VariantLabelerOptions*>(
      &::learning::genomics::deepvariant::_VariantLabelerOptions_default_instance_);
}
inline ::learning::genomics::deepvariant::VariantLabelerOptions* MakeExamplesOptions::release_labeler_options() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.labeler_options)
  
  ::learning::genomics::deepvariant::VariantLabelerOptions* temp = labeler_options_;
  labeler_options_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::VariantLabelerOptions* MakeExamplesOptions::mutable_labeler_options() {
  
  if (labeler_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::VariantLabelerOptions>(GetArenaNoVirtual());
    labeler_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.labeler_options)
  return labeler_options_;
}
inline void MakeExamplesOptions::set_allocated_labeler_options(::learning::genomics::deepvariant::VariantLabelerOptions* labeler_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete labeler_options_;
  }
  if (labeler_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      labeler_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, labeler_options, submessage_arena);
    }
    
  } else {
    
  }
  labeler_options_ = labeler_options;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.labeler_options)
}

// .nucleus.genomics.v1.ReadRequirements read_requirements = 9;
inline bool MakeExamplesOptions::has_read_requirements() const {
  return this != internal_default_instance() && read_requirements_ != nullptr;
}
inline const ::nucleus::genomics::v1::ReadRequirements& MakeExamplesOptions::read_requirements() const {
  const ::nucleus::genomics::v1::ReadRequirements* p = read_requirements_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.read_requirements)
  return p != nullptr ? *p : *reinterpret_cast<const ::nucleus::genomics::v1::ReadRequirements*>(
      &::nucleus::genomics::v1::_ReadRequirements_default_instance_);
}
inline ::nucleus::genomics::v1::ReadRequirements* MakeExamplesOptions::release_read_requirements() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.read_requirements)
  
  ::nucleus::genomics::v1::ReadRequirements* temp = read_requirements_;
  read_requirements_ = nullptr;
  return temp;
}
inline ::nucleus::genomics::v1::ReadRequirements* MakeExamplesOptions::mutable_read_requirements() {
  
  if (read_requirements_ == nullptr) {
    auto* p = CreateMaybeMessage<::nucleus::genomics::v1::ReadRequirements>(GetArenaNoVirtual());
    read_requirements_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.read_requirements)
  return read_requirements_;
}
inline void MakeExamplesOptions::set_allocated_read_requirements(::nucleus::genomics::v1::ReadRequirements* read_requirements) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(read_requirements_);
  }
  if (read_requirements) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      read_requirements = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_requirements, submessage_arena);
    }
    
  } else {
    
  }
  read_requirements_ = read_requirements;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.read_requirements)
}

// string reference_filename = 10;
inline void MakeExamplesOptions::clear_reference_filename() {
  reference_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MakeExamplesOptions::reference_filename() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.reference_filename)
  return reference_filename_.GetNoArena();
}
inline void MakeExamplesOptions::set_reference_filename(const std::string& value) {
  
  reference_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.reference_filename)
}
inline void MakeExamplesOptions::set_reference_filename(std::string&& value) {
  
  reference_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.MakeExamplesOptions.reference_filename)
}
inline void MakeExamplesOptions::set_reference_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.reference_filename)
}
inline void MakeExamplesOptions::set_reference_filename(const char* value, size_t size) {
  
  reference_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.reference_filename)
}
inline std::string* MakeExamplesOptions::mutable_reference_filename() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.reference_filename)
  return reference_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MakeExamplesOptions::release_reference_filename() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.reference_filename)
  
  return reference_filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MakeExamplesOptions::set_allocated_reference_filename(std::string* reference_filename) {
  if (reference_filename != nullptr) {
    
  } else {
    
  }
  reference_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference_filename);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.reference_filename)
}

// repeated string deprecated_reads_filenames = 32;
inline int MakeExamplesOptions::deprecated_reads_filenames_size() const {
  return deprecated_reads_filenames_.size();
}
inline void MakeExamplesOptions::clear_deprecated_reads_filenames() {
  deprecated_reads_filenames_.Clear();
}
inline const std::string& MakeExamplesOptions::deprecated_reads_filenames(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filenames)
  return deprecated_reads_filenames_.Get(index);
}
inline std::string* MakeExamplesOptions::mutable_deprecated_reads_filenames(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filenames)
  return deprecated_reads_filenames_.Mutable(index);
}
inline void MakeExamplesOptions::set_deprecated_reads_filenames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filenames)
  deprecated_reads_filenames_.Mutable(index)->assign(value);
}
inline void MakeExamplesOptions::set_deprecated_reads_filenames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filenames)
  deprecated_reads_filenames_.Mutable(index)->assign(std::move(value));
}
inline void MakeExamplesOptions::set_deprecated_reads_filenames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deprecated_reads_filenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filenames)
}
inline void MakeExamplesOptions::set_deprecated_reads_filenames(int index, const char* value, size_t size) {
  deprecated_reads_filenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filenames)
}
inline std::string* MakeExamplesOptions::add_deprecated_reads_filenames() {
  // @@protoc_insertion_point(field_add_mutable:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filenames)
  return deprecated_reads_filenames_.Add();
}
inline void MakeExamplesOptions::add_deprecated_reads_filenames(const std::string& value) {
  deprecated_reads_filenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filenames)
}
inline void MakeExamplesOptions::add_deprecated_reads_filenames(std::string&& value) {
  deprecated_reads_filenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filenames)
}
inline void MakeExamplesOptions::add_deprecated_reads_filenames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deprecated_reads_filenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filenames)
}
inline void MakeExamplesOptions::add_deprecated_reads_filenames(const char* value, size_t size) {
  deprecated_reads_filenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filenames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MakeExamplesOptions::deprecated_reads_filenames() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filenames)
  return deprecated_reads_filenames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MakeExamplesOptions::mutable_deprecated_reads_filenames() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filenames)
  return &deprecated_reads_filenames_;
}

// string deprecated_reads_filename = 11;
inline void MakeExamplesOptions::clear_deprecated_reads_filename() {
  deprecated_reads_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MakeExamplesOptions::deprecated_reads_filename() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filename)
  return deprecated_reads_filename_.GetNoArena();
}
inline void MakeExamplesOptions::set_deprecated_reads_filename(const std::string& value) {
  
  deprecated_reads_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filename)
}
inline void MakeExamplesOptions::set_deprecated_reads_filename(std::string&& value) {
  
  deprecated_reads_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filename)
}
inline void MakeExamplesOptions::set_deprecated_reads_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deprecated_reads_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filename)
}
inline void MakeExamplesOptions::set_deprecated_reads_filename(const char* value, size_t size) {
  
  deprecated_reads_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filename)
}
inline std::string* MakeExamplesOptions::mutable_deprecated_reads_filename() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filename)
  return deprecated_reads_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MakeExamplesOptions::release_deprecated_reads_filename() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filename)
  
  return deprecated_reads_filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MakeExamplesOptions::set_allocated_deprecated_reads_filename(std::string* deprecated_reads_filename) {
  if (deprecated_reads_filename != nullptr) {
    
  } else {
    
  }
  deprecated_reads_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deprecated_reads_filename);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_reads_filename)
}

// string candidates_filename = 12;
inline void MakeExamplesOptions::clear_candidates_filename() {
  candidates_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MakeExamplesOptions::candidates_filename() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.candidates_filename)
  return candidates_filename_.GetNoArena();
}
inline void MakeExamplesOptions::set_candidates_filename(const std::string& value) {
  
  candidates_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.candidates_filename)
}
inline void MakeExamplesOptions::set_candidates_filename(std::string&& value) {
  
  candidates_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.MakeExamplesOptions.candidates_filename)
}
inline void MakeExamplesOptions::set_candidates_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  candidates_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.candidates_filename)
}
inline void MakeExamplesOptions::set_candidates_filename(const char* value, size_t size) {
  
  candidates_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.candidates_filename)
}
inline std::string* MakeExamplesOptions::mutable_candidates_filename() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.candidates_filename)
  return candidates_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MakeExamplesOptions::release_candidates_filename() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.candidates_filename)
  
  return candidates_filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MakeExamplesOptions::set_allocated_candidates_filename(std::string* candidates_filename) {
  if (candidates_filename != nullptr) {
    
  } else {
    
  }
  candidates_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), candidates_filename);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.candidates_filename)
}

// string examples_filename = 13;
inline void MakeExamplesOptions::clear_examples_filename() {
  examples_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MakeExamplesOptions::examples_filename() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.examples_filename)
  return examples_filename_.GetNoArena();
}
inline void MakeExamplesOptions::set_examples_filename(const std::string& value) {
  
  examples_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.examples_filename)
}
inline void MakeExamplesOptions::set_examples_filename(std::string&& value) {
  
  examples_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.MakeExamplesOptions.examples_filename)
}
inline void MakeExamplesOptions::set_examples_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  examples_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.examples_filename)
}
inline void MakeExamplesOptions::set_examples_filename(const char* value, size_t size) {
  
  examples_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.examples_filename)
}
inline std::string* MakeExamplesOptions::mutable_examples_filename() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.examples_filename)
  return examples_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MakeExamplesOptions::release_examples_filename() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.examples_filename)
  
  return examples_filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MakeExamplesOptions::set_allocated_examples_filename(std::string* examples_filename) {
  if (examples_filename != nullptr) {
    
  } else {
    
  }
  examples_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), examples_filename);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.examples_filename)
}

// string confident_regions_filename = 14;
inline void MakeExamplesOptions::clear_confident_regions_filename() {
  confident_regions_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MakeExamplesOptions::confident_regions_filename() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.confident_regions_filename)
  return confident_regions_filename_.GetNoArena();
}
inline void MakeExamplesOptions::set_confident_regions_filename(const std::string& value) {
  
  confident_regions_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.confident_regions_filename)
}
inline void MakeExamplesOptions::set_confident_regions_filename(std::string&& value) {
  
  confident_regions_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.MakeExamplesOptions.confident_regions_filename)
}
inline void MakeExamplesOptions::set_confident_regions_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  confident_regions_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.confident_regions_filename)
}
inline void MakeExamplesOptions::set_confident_regions_filename(const char* value, size_t size) {
  
  confident_regions_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.confident_regions_filename)
}
inline std::string* MakeExamplesOptions::mutable_confident_regions_filename() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.confident_regions_filename)
  return confident_regions_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MakeExamplesOptions::release_confident_regions_filename() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.confident_regions_filename)
  
  return confident_regions_filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MakeExamplesOptions::set_allocated_confident_regions_filename(std::string* confident_regions_filename) {
  if (confident_regions_filename != nullptr) {
    
  } else {
    
  }
  confident_regions_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), confident_regions_filename);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.confident_regions_filename)
}

// string truth_variants_filename = 15;
inline void MakeExamplesOptions::clear_truth_variants_filename() {
  truth_variants_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MakeExamplesOptions::truth_variants_filename() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.truth_variants_filename)
  return truth_variants_filename_.GetNoArena();
}
inline void MakeExamplesOptions::set_truth_variants_filename(const std::string& value) {
  
  truth_variants_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.truth_variants_filename)
}
inline void MakeExamplesOptions::set_truth_variants_filename(std::string&& value) {
  
  truth_variants_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.MakeExamplesOptions.truth_variants_filename)
}
inline void MakeExamplesOptions::set_truth_variants_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  truth_variants_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.truth_variants_filename)
}
inline void MakeExamplesOptions::set_truth_variants_filename(const char* value, size_t size) {
  
  truth_variants_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.truth_variants_filename)
}
inline std::string* MakeExamplesOptions::mutable_truth_variants_filename() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.truth_variants_filename)
  return truth_variants_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MakeExamplesOptions::release_truth_variants_filename() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.truth_variants_filename)
  
  return truth_variants_filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MakeExamplesOptions::set_allocated_truth_variants_filename(std::string* truth_variants_filename) {
  if (truth_variants_filename != nullptr) {
    
  } else {
    
  }
  truth_variants_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), truth_variants_filename);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.truth_variants_filename)
}

// string deprecated_proposed_variants_filename = 33 [deprecated = true];
inline void MakeExamplesOptions::clear_deprecated_proposed_variants_filename() {
  deprecated_proposed_variants_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MakeExamplesOptions::deprecated_proposed_variants_filename() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_proposed_variants_filename)
  return deprecated_proposed_variants_filename_.GetNoArena();
}
inline void MakeExamplesOptions::set_deprecated_proposed_variants_filename(const std::string& value) {
  
  deprecated_proposed_variants_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_proposed_variants_filename)
}
inline void MakeExamplesOptions::set_deprecated_proposed_variants_filename(std::string&& value) {
  
  deprecated_proposed_variants_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_proposed_variants_filename)
}
inline void MakeExamplesOptions::set_deprecated_proposed_variants_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deprecated_proposed_variants_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_proposed_variants_filename)
}
inline void MakeExamplesOptions::set_deprecated_proposed_variants_filename(const char* value, size_t size) {
  
  deprecated_proposed_variants_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_proposed_variants_filename)
}
inline std::string* MakeExamplesOptions::mutable_deprecated_proposed_variants_filename() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_proposed_variants_filename)
  return deprecated_proposed_variants_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MakeExamplesOptions::release_deprecated_proposed_variants_filename() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_proposed_variants_filename)
  
  return deprecated_proposed_variants_filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MakeExamplesOptions::set_allocated_deprecated_proposed_variants_filename(std::string* deprecated_proposed_variants_filename) {
  if (deprecated_proposed_variants_filename != nullptr) {
    
  } else {
    
  }
  deprecated_proposed_variants_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deprecated_proposed_variants_filename);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_proposed_variants_filename)
}

// string gvcf_filename = 16;
inline void MakeExamplesOptions::clear_gvcf_filename() {
  gvcf_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MakeExamplesOptions::gvcf_filename() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.gvcf_filename)
  return gvcf_filename_.GetNoArena();
}
inline void MakeExamplesOptions::set_gvcf_filename(const std::string& value) {
  
  gvcf_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.gvcf_filename)
}
inline void MakeExamplesOptions::set_gvcf_filename(std::string&& value) {
  
  gvcf_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.MakeExamplesOptions.gvcf_filename)
}
inline void MakeExamplesOptions::set_gvcf_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gvcf_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.gvcf_filename)
}
inline void MakeExamplesOptions::set_gvcf_filename(const char* value, size_t size) {
  
  gvcf_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.gvcf_filename)
}
inline std::string* MakeExamplesOptions::mutable_gvcf_filename() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.gvcf_filename)
  return gvcf_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MakeExamplesOptions::release_gvcf_filename() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.gvcf_filename)
  
  return gvcf_filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MakeExamplesOptions::set_allocated_gvcf_filename(std::string* gvcf_filename) {
  if (gvcf_filename != nullptr) {
    
  } else {
    
  }
  gvcf_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gvcf_filename);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.gvcf_filename)
}

// bool include_med_dp = 43;
inline void MakeExamplesOptions::clear_include_med_dp() {
  include_med_dp_ = false;
}
inline bool MakeExamplesOptions::include_med_dp() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.include_med_dp)
  return include_med_dp_;
}
inline void MakeExamplesOptions::set_include_med_dp(bool value) {
  
  include_med_dp_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.include_med_dp)
}

// string model_name = 17;
inline void MakeExamplesOptions::clear_model_name() {
  model_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MakeExamplesOptions::model_name() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.model_name)
  return model_name_.GetNoArena();
}
inline void MakeExamplesOptions::set_model_name(const std::string& value) {
  
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.model_name)
}
inline void MakeExamplesOptions::set_model_name(std::string&& value) {
  
  model_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.MakeExamplesOptions.model_name)
}
inline void MakeExamplesOptions::set_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.model_name)
}
inline void MakeExamplesOptions::set_model_name(const char* value, size_t size) {
  
  model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.model_name)
}
inline std::string* MakeExamplesOptions::mutable_model_name() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.model_name)
  return model_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MakeExamplesOptions::release_model_name() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.model_name)
  
  return model_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MakeExamplesOptions::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  model_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_name);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.model_name)
}

// .learning.genomics.deepvariant.MakeExamplesOptions.Mode mode = 18;
inline void MakeExamplesOptions::clear_mode() {
  mode_ = 0;
}
inline ::learning::genomics::deepvariant::MakeExamplesOptions_Mode MakeExamplesOptions::mode() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.mode)
  return static_cast< ::learning::genomics::deepvariant::MakeExamplesOptions_Mode >(mode_);
}
inline void MakeExamplesOptions::set_mode(::learning::genomics::deepvariant::MakeExamplesOptions_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.mode)
}

// float min_shared_contigs_basepairs = 19;
inline void MakeExamplesOptions::clear_min_shared_contigs_basepairs() {
  min_shared_contigs_basepairs_ = 0;
}
inline float MakeExamplesOptions::min_shared_contigs_basepairs() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.min_shared_contigs_basepairs)
  return min_shared_contigs_basepairs_;
}
inline void MakeExamplesOptions::set_min_shared_contigs_basepairs(float value) {
  
  min_shared_contigs_basepairs_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.min_shared_contigs_basepairs)
}

// int32 task_id = 20;
inline void MakeExamplesOptions::clear_task_id() {
  task_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MakeExamplesOptions::task_id() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.task_id)
  return task_id_;
}
inline void MakeExamplesOptions::set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.task_id)
}

// int32 num_shards = 21;
inline void MakeExamplesOptions::clear_num_shards() {
  num_shards_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MakeExamplesOptions::num_shards() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.num_shards)
  return num_shards_;
}
inline void MakeExamplesOptions::set_num_shards(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_shards_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.num_shards)
}

// bool realigner_enabled = 22;
inline void MakeExamplesOptions::clear_realigner_enabled() {
  realigner_enabled_ = false;
}
inline bool MakeExamplesOptions::realigner_enabled() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.realigner_enabled)
  return realigner_enabled_;
}
inline void MakeExamplesOptions::set_realigner_enabled(bool value) {
  
  realigner_enabled_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.realigner_enabled)
}

// .learning.genomics.deepvariant.RealignerOptions realigner_options = 23;
inline bool MakeExamplesOptions::has_realigner_options() const {
  return this != internal_default_instance() && realigner_options_ != nullptr;
}
inline const ::learning::genomics::deepvariant::RealignerOptions& MakeExamplesOptions::realigner_options() const {
  const ::learning::genomics::deepvariant::RealignerOptions* p = realigner_options_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.realigner_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::RealignerOptions*>(
      &::learning::genomics::deepvariant::_RealignerOptions_default_instance_);
}
inline ::learning::genomics::deepvariant::RealignerOptions* MakeExamplesOptions::release_realigner_options() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.realigner_options)
  
  ::learning::genomics::deepvariant::RealignerOptions* temp = realigner_options_;
  realigner_options_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::RealignerOptions* MakeExamplesOptions::mutable_realigner_options() {
  
  if (realigner_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::RealignerOptions>(GetArenaNoVirtual());
    realigner_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.realigner_options)
  return realigner_options_;
}
inline void MakeExamplesOptions::set_allocated_realigner_options(::learning::genomics::deepvariant::RealignerOptions* realigner_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(realigner_options_);
  }
  if (realigner_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      realigner_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, realigner_options, submessage_arena);
    }
    
  } else {
    
  }
  realigner_options_ = realigner_options;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.realigner_options)
}

// int32 max_reads_per_partition = 24;
inline void MakeExamplesOptions::clear_max_reads_per_partition() {
  max_reads_per_partition_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MakeExamplesOptions::max_reads_per_partition() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.max_reads_per_partition)
  return max_reads_per_partition_;
}
inline void MakeExamplesOptions::set_max_reads_per_partition(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_reads_per_partition_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.max_reads_per_partition)
}

// float deprecated_downsample_fraction = 25;
inline void MakeExamplesOptions::clear_deprecated_downsample_fraction() {
  deprecated_downsample_fraction_ = 0;
}
inline float MakeExamplesOptions::deprecated_downsample_fraction() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_downsample_fraction)
  return deprecated_downsample_fraction_;
}
inline void MakeExamplesOptions::set_deprecated_downsample_fraction(float value) {
  
  deprecated_downsample_fraction_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.deprecated_downsample_fraction)
}

// repeated string exclude_calling_regions = 26;
inline int MakeExamplesOptions::exclude_calling_regions_size() const {
  return exclude_calling_regions_.size();
}
inline void MakeExamplesOptions::clear_exclude_calling_regions() {
  exclude_calling_regions_.Clear();
}
inline const std::string& MakeExamplesOptions::exclude_calling_regions(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.exclude_calling_regions)
  return exclude_calling_regions_.Get(index);
}
inline std::string* MakeExamplesOptions::mutable_exclude_calling_regions(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.exclude_calling_regions)
  return exclude_calling_regions_.Mutable(index);
}
inline void MakeExamplesOptions::set_exclude_calling_regions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.exclude_calling_regions)
  exclude_calling_regions_.Mutable(index)->assign(value);
}
inline void MakeExamplesOptions::set_exclude_calling_regions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.exclude_calling_regions)
  exclude_calling_regions_.Mutable(index)->assign(std::move(value));
}
inline void MakeExamplesOptions::set_exclude_calling_regions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exclude_calling_regions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.exclude_calling_regions)
}
inline void MakeExamplesOptions::set_exclude_calling_regions(int index, const char* value, size_t size) {
  exclude_calling_regions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.exclude_calling_regions)
}
inline std::string* MakeExamplesOptions::add_exclude_calling_regions() {
  // @@protoc_insertion_point(field_add_mutable:learning.genomics.deepvariant.MakeExamplesOptions.exclude_calling_regions)
  return exclude_calling_regions_.Add();
}
inline void MakeExamplesOptions::add_exclude_calling_regions(const std::string& value) {
  exclude_calling_regions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.MakeExamplesOptions.exclude_calling_regions)
}
inline void MakeExamplesOptions::add_exclude_calling_regions(std::string&& value) {
  exclude_calling_regions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.MakeExamplesOptions.exclude_calling_regions)
}
inline void MakeExamplesOptions::add_exclude_calling_regions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exclude_calling_regions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:learning.genomics.deepvariant.MakeExamplesOptions.exclude_calling_regions)
}
inline void MakeExamplesOptions::add_exclude_calling_regions(const char* value, size_t size) {
  exclude_calling_regions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:learning.genomics.deepvariant.MakeExamplesOptions.exclude_calling_regions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MakeExamplesOptions::exclude_calling_regions() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.MakeExamplesOptions.exclude_calling_regions)
  return exclude_calling_regions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MakeExamplesOptions::mutable_exclude_calling_regions() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.MakeExamplesOptions.exclude_calling_regions)
  return &exclude_calling_regions_;
}

// .learning.genomics.deepvariant.MakeExamplesOptions.LabelerAlgorithm labeler_algorithm = 27;
inline void MakeExamplesOptions::clear_labeler_algorithm() {
  labeler_algorithm_ = 0;
}
inline ::learning::genomics::deepvariant::MakeExamplesOptions_LabelerAlgorithm MakeExamplesOptions::labeler_algorithm() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.labeler_algorithm)
  return static_cast< ::learning::genomics::deepvariant::MakeExamplesOptions_LabelerAlgorithm >(labeler_algorithm_);
}
inline void MakeExamplesOptions::set_labeler_algorithm(::learning::genomics::deepvariant::MakeExamplesOptions_LabelerAlgorithm value) {
  
  labeler_algorithm_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.labeler_algorithm)
}

// string run_info_filename = 28;
inline void MakeExamplesOptions::clear_run_info_filename() {
  run_info_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MakeExamplesOptions::run_info_filename() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.run_info_filename)
  return run_info_filename_.GetNoArena();
}
inline void MakeExamplesOptions::set_run_info_filename(const std::string& value) {
  
  run_info_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.run_info_filename)
}
inline void MakeExamplesOptions::set_run_info_filename(std::string&& value) {
  
  run_info_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.MakeExamplesOptions.run_info_filename)
}
inline void MakeExamplesOptions::set_run_info_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  run_info_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.run_info_filename)
}
inline void MakeExamplesOptions::set_run_info_filename(const char* value, size_t size) {
  
  run_info_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.run_info_filename)
}
inline std::string* MakeExamplesOptions::mutable_run_info_filename() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.run_info_filename)
  return run_info_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MakeExamplesOptions::release_run_info_filename() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.run_info_filename)
  
  return run_info_filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MakeExamplesOptions::set_allocated_run_info_filename(std::string* run_info_filename) {
  if (run_info_filename != nullptr) {
    
  } else {
    
  }
  run_info_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), run_info_filename);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.run_info_filename)
}

// bool use_original_quality_scores = 29;
inline void MakeExamplesOptions::clear_use_original_quality_scores() {
  use_original_quality_scores_ = false;
}
inline bool MakeExamplesOptions::use_original_quality_scores() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.use_original_quality_scores)
  return use_original_quality_scores_;
}
inline void MakeExamplesOptions::set_use_original_quality_scores(bool value) {
  
  use_original_quality_scores_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.use_original_quality_scores)
}

// repeated string select_variant_types = 30;
inline int MakeExamplesOptions::select_variant_types_size() const {
  return select_variant_types_.size();
}
inline void MakeExamplesOptions::clear_select_variant_types() {
  select_variant_types_.Clear();
}
inline const std::string& MakeExamplesOptions::select_variant_types(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.select_variant_types)
  return select_variant_types_.Get(index);
}
inline std::string* MakeExamplesOptions::mutable_select_variant_types(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.select_variant_types)
  return select_variant_types_.Mutable(index);
}
inline void MakeExamplesOptions::set_select_variant_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.select_variant_types)
  select_variant_types_.Mutable(index)->assign(value);
}
inline void MakeExamplesOptions::set_select_variant_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.select_variant_types)
  select_variant_types_.Mutable(index)->assign(std::move(value));
}
inline void MakeExamplesOptions::set_select_variant_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  select_variant_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.select_variant_types)
}
inline void MakeExamplesOptions::set_select_variant_types(int index, const char* value, size_t size) {
  select_variant_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.select_variant_types)
}
inline std::string* MakeExamplesOptions::add_select_variant_types() {
  // @@protoc_insertion_point(field_add_mutable:learning.genomics.deepvariant.MakeExamplesOptions.select_variant_types)
  return select_variant_types_.Add();
}
inline void MakeExamplesOptions::add_select_variant_types(const std::string& value) {
  select_variant_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.MakeExamplesOptions.select_variant_types)
}
inline void MakeExamplesOptions::add_select_variant_types(std::string&& value) {
  select_variant_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.MakeExamplesOptions.select_variant_types)
}
inline void MakeExamplesOptions::add_select_variant_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  select_variant_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:learning.genomics.deepvariant.MakeExamplesOptions.select_variant_types)
}
inline void MakeExamplesOptions::add_select_variant_types(const char* value, size_t size) {
  select_variant_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:learning.genomics.deepvariant.MakeExamplesOptions.select_variant_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MakeExamplesOptions::select_variant_types() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.MakeExamplesOptions.select_variant_types)
  return select_variant_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MakeExamplesOptions::mutable_select_variant_types() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.MakeExamplesOptions.select_variant_types)
  return &select_variant_types_;
}

// .learning.genomics.deepvariant.MakeExamplesOptions.VariantCaller variant_caller = 31;
inline void MakeExamplesOptions::clear_variant_caller() {
  variant_caller_ = 0;
}
inline ::learning::genomics::deepvariant::MakeExamplesOptions_VariantCaller MakeExamplesOptions::variant_caller() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.variant_caller)
  return static_cast< ::learning::genomics::deepvariant::MakeExamplesOptions_VariantCaller >(variant_caller_);
}
inline void MakeExamplesOptions::set_variant_caller(::learning::genomics::deepvariant::MakeExamplesOptions_VariantCaller value) {
  
  variant_caller_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.variant_caller)
}

// bool use_allele_frequency = 34;
inline void MakeExamplesOptions::clear_use_allele_frequency() {
  use_allele_frequency_ = false;
}
inline bool MakeExamplesOptions::use_allele_frequency() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.use_allele_frequency)
  return use_allele_frequency_;
}
inline void MakeExamplesOptions::set_use_allele_frequency(bool value) {
  
  use_allele_frequency_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.use_allele_frequency)
}

// repeated string population_vcf_filenames = 35;
inline int MakeExamplesOptions::population_vcf_filenames_size() const {
  return population_vcf_filenames_.size();
}
inline void MakeExamplesOptions::clear_population_vcf_filenames() {
  population_vcf_filenames_.Clear();
}
inline const std::string& MakeExamplesOptions::population_vcf_filenames(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.population_vcf_filenames)
  return population_vcf_filenames_.Get(index);
}
inline std::string* MakeExamplesOptions::mutable_population_vcf_filenames(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.population_vcf_filenames)
  return population_vcf_filenames_.Mutable(index);
}
inline void MakeExamplesOptions::set_population_vcf_filenames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.population_vcf_filenames)
  population_vcf_filenames_.Mutable(index)->assign(value);
}
inline void MakeExamplesOptions::set_population_vcf_filenames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.population_vcf_filenames)
  population_vcf_filenames_.Mutable(index)->assign(std::move(value));
}
inline void MakeExamplesOptions::set_population_vcf_filenames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  population_vcf_filenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.population_vcf_filenames)
}
inline void MakeExamplesOptions::set_population_vcf_filenames(int index, const char* value, size_t size) {
  population_vcf_filenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.population_vcf_filenames)
}
inline std::string* MakeExamplesOptions::add_population_vcf_filenames() {
  // @@protoc_insertion_point(field_add_mutable:learning.genomics.deepvariant.MakeExamplesOptions.population_vcf_filenames)
  return population_vcf_filenames_.Add();
}
inline void MakeExamplesOptions::add_population_vcf_filenames(const std::string& value) {
  population_vcf_filenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.MakeExamplesOptions.population_vcf_filenames)
}
inline void MakeExamplesOptions::add_population_vcf_filenames(std::string&& value) {
  population_vcf_filenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.MakeExamplesOptions.population_vcf_filenames)
}
inline void MakeExamplesOptions::add_population_vcf_filenames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  population_vcf_filenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:learning.genomics.deepvariant.MakeExamplesOptions.population_vcf_filenames)
}
inline void MakeExamplesOptions::add_population_vcf_filenames(const char* value, size_t size) {
  population_vcf_filenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:learning.genomics.deepvariant.MakeExamplesOptions.population_vcf_filenames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MakeExamplesOptions::population_vcf_filenames() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.MakeExamplesOptions.population_vcf_filenames)
  return population_vcf_filenames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MakeExamplesOptions::mutable_population_vcf_filenames() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.MakeExamplesOptions.population_vcf_filenames)
  return &population_vcf_filenames_;
}

// string runtime_by_region = 36;
inline void MakeExamplesOptions::clear_runtime_by_region() {
  runtime_by_region_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MakeExamplesOptions::runtime_by_region() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.runtime_by_region)
  return runtime_by_region_.GetNoArena();
}
inline void MakeExamplesOptions::set_runtime_by_region(const std::string& value) {
  
  runtime_by_region_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.runtime_by_region)
}
inline void MakeExamplesOptions::set_runtime_by_region(std::string&& value) {
  
  runtime_by_region_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.MakeExamplesOptions.runtime_by_region)
}
inline void MakeExamplesOptions::set_runtime_by_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  runtime_by_region_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.runtime_by_region)
}
inline void MakeExamplesOptions::set_runtime_by_region(const char* value, size_t size) {
  
  runtime_by_region_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.runtime_by_region)
}
inline std::string* MakeExamplesOptions::mutable_runtime_by_region() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.runtime_by_region)
  return runtime_by_region_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MakeExamplesOptions::release_runtime_by_region() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.runtime_by_region)
  
  return runtime_by_region_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MakeExamplesOptions::set_allocated_runtime_by_region(std::string* runtime_by_region) {
  if (runtime_by_region != nullptr) {
    
  } else {
    
  }
  runtime_by_region_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_by_region);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.runtime_by_region)
}

// bool use_ref_for_cram = 37;
inline void MakeExamplesOptions::clear_use_ref_for_cram() {
  use_ref_for_cram_ = false;
}
inline bool MakeExamplesOptions::use_ref_for_cram() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.use_ref_for_cram)
  return use_ref_for_cram_;
}
inline void MakeExamplesOptions::set_use_ref_for_cram(bool value) {
  
  use_ref_for_cram_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.use_ref_for_cram)
}

// bool parse_sam_aux_fields = 38;
inline void MakeExamplesOptions::clear_parse_sam_aux_fields() {
  parse_sam_aux_fields_ = false;
}
inline bool MakeExamplesOptions::parse_sam_aux_fields() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.parse_sam_aux_fields)
  return parse_sam_aux_fields_;
}
inline void MakeExamplesOptions::set_parse_sam_aux_fields(bool value) {
  
  parse_sam_aux_fields_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.parse_sam_aux_fields)
}

// repeated string aux_fields_to_keep = 50;
inline int MakeExamplesOptions::aux_fields_to_keep_size() const {
  return aux_fields_to_keep_.size();
}
inline void MakeExamplesOptions::clear_aux_fields_to_keep() {
  aux_fields_to_keep_.Clear();
}
inline const std::string& MakeExamplesOptions::aux_fields_to_keep(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.aux_fields_to_keep)
  return aux_fields_to_keep_.Get(index);
}
inline std::string* MakeExamplesOptions::mutable_aux_fields_to_keep(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.aux_fields_to_keep)
  return aux_fields_to_keep_.Mutable(index);
}
inline void MakeExamplesOptions::set_aux_fields_to_keep(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.aux_fields_to_keep)
  aux_fields_to_keep_.Mutable(index)->assign(value);
}
inline void MakeExamplesOptions::set_aux_fields_to_keep(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.aux_fields_to_keep)
  aux_fields_to_keep_.Mutable(index)->assign(std::move(value));
}
inline void MakeExamplesOptions::set_aux_fields_to_keep(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aux_fields_to_keep_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.aux_fields_to_keep)
}
inline void MakeExamplesOptions::set_aux_fields_to_keep(int index, const char* value, size_t size) {
  aux_fields_to_keep_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.aux_fields_to_keep)
}
inline std::string* MakeExamplesOptions::add_aux_fields_to_keep() {
  // @@protoc_insertion_point(field_add_mutable:learning.genomics.deepvariant.MakeExamplesOptions.aux_fields_to_keep)
  return aux_fields_to_keep_.Add();
}
inline void MakeExamplesOptions::add_aux_fields_to_keep(const std::string& value) {
  aux_fields_to_keep_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.MakeExamplesOptions.aux_fields_to_keep)
}
inline void MakeExamplesOptions::add_aux_fields_to_keep(std::string&& value) {
  aux_fields_to_keep_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.MakeExamplesOptions.aux_fields_to_keep)
}
inline void MakeExamplesOptions::add_aux_fields_to_keep(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aux_fields_to_keep_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:learning.genomics.deepvariant.MakeExamplesOptions.aux_fields_to_keep)
}
inline void MakeExamplesOptions::add_aux_fields_to_keep(const char* value, size_t size) {
  aux_fields_to_keep_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:learning.genomics.deepvariant.MakeExamplesOptions.aux_fields_to_keep)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MakeExamplesOptions::aux_fields_to_keep() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.MakeExamplesOptions.aux_fields_to_keep)
  return aux_fields_to_keep_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MakeExamplesOptions::mutable_aux_fields_to_keep() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.MakeExamplesOptions.aux_fields_to_keep)
  return &aux_fields_to_keep_;
}

// int32 hts_block_size = 39;
inline void MakeExamplesOptions::clear_hts_block_size() {
  hts_block_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MakeExamplesOptions::hts_block_size() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.hts_block_size)
  return hts_block_size_;
}
inline void MakeExamplesOptions::set_hts_block_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hts_block_size_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.hts_block_size)
}

// int32 logging_every_n_candidates = 40;
inline void MakeExamplesOptions::clear_logging_every_n_candidates() {
  logging_every_n_candidates_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MakeExamplesOptions::logging_every_n_candidates() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.logging_every_n_candidates)
  return logging_every_n_candidates_;
}
inline void MakeExamplesOptions::set_logging_every_n_candidates(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  logging_every_n_candidates_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.logging_every_n_candidates)
}

// string customized_classes_labeler_classes_list = 41;
inline void MakeExamplesOptions::clear_customized_classes_labeler_classes_list() {
  customized_classes_labeler_classes_list_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MakeExamplesOptions::customized_classes_labeler_classes_list() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_classes_list)
  return customized_classes_labeler_classes_list_.GetNoArena();
}
inline void MakeExamplesOptions::set_customized_classes_labeler_classes_list(const std::string& value) {
  
  customized_classes_labeler_classes_list_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_classes_list)
}
inline void MakeExamplesOptions::set_customized_classes_labeler_classes_list(std::string&& value) {
  
  customized_classes_labeler_classes_list_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_classes_list)
}
inline void MakeExamplesOptions::set_customized_classes_labeler_classes_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customized_classes_labeler_classes_list_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_classes_list)
}
inline void MakeExamplesOptions::set_customized_classes_labeler_classes_list(const char* value, size_t size) {
  
  customized_classes_labeler_classes_list_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_classes_list)
}
inline std::string* MakeExamplesOptions::mutable_customized_classes_labeler_classes_list() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_classes_list)
  return customized_classes_labeler_classes_list_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MakeExamplesOptions::release_customized_classes_labeler_classes_list() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_classes_list)
  
  return customized_classes_labeler_classes_list_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MakeExamplesOptions::set_allocated_customized_classes_labeler_classes_list(std::string* customized_classes_labeler_classes_list) {
  if (customized_classes_labeler_classes_list != nullptr) {
    
  } else {
    
  }
  customized_classes_labeler_classes_list_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customized_classes_labeler_classes_list);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_classes_list)
}

// string customized_classes_labeler_info_field_name = 42;
inline void MakeExamplesOptions::clear_customized_classes_labeler_info_field_name() {
  customized_classes_labeler_info_field_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MakeExamplesOptions::customized_classes_labeler_info_field_name() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_info_field_name)
  return customized_classes_labeler_info_field_name_.GetNoArena();
}
inline void MakeExamplesOptions::set_customized_classes_labeler_info_field_name(const std::string& value) {
  
  customized_classes_labeler_info_field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_info_field_name)
}
inline void MakeExamplesOptions::set_customized_classes_labeler_info_field_name(std::string&& value) {
  
  customized_classes_labeler_info_field_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_info_field_name)
}
inline void MakeExamplesOptions::set_customized_classes_labeler_info_field_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customized_classes_labeler_info_field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_info_field_name)
}
inline void MakeExamplesOptions::set_customized_classes_labeler_info_field_name(const char* value, size_t size) {
  
  customized_classes_labeler_info_field_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_info_field_name)
}
inline std::string* MakeExamplesOptions::mutable_customized_classes_labeler_info_field_name() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_info_field_name)
  return customized_classes_labeler_info_field_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MakeExamplesOptions::release_customized_classes_labeler_info_field_name() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_info_field_name)
  
  return customized_classes_labeler_info_field_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MakeExamplesOptions::set_allocated_customized_classes_labeler_info_field_name(std::string* customized_classes_labeler_info_field_name) {
  if (customized_classes_labeler_info_field_name != nullptr) {
    
  } else {
    
  }
  customized_classes_labeler_info_field_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customized_classes_labeler_info_field_name);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.customized_classes_labeler_info_field_name)
}

// int32 main_sample_index = 44;
inline void MakeExamplesOptions::clear_main_sample_index() {
  main_sample_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MakeExamplesOptions::main_sample_index() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.main_sample_index)
  return main_sample_index_;
}
inline void MakeExamplesOptions::set_main_sample_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  main_sample_index_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.main_sample_index)
}

// string bam_fname = 45;
inline void MakeExamplesOptions::clear_bam_fname() {
  bam_fname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MakeExamplesOptions::bam_fname() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.bam_fname)
  return bam_fname_.GetNoArena();
}
inline void MakeExamplesOptions::set_bam_fname(const std::string& value) {
  
  bam_fname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.bam_fname)
}
inline void MakeExamplesOptions::set_bam_fname(std::string&& value) {
  
  bam_fname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.MakeExamplesOptions.bam_fname)
}
inline void MakeExamplesOptions::set_bam_fname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bam_fname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.bam_fname)
}
inline void MakeExamplesOptions::set_bam_fname(const char* value, size_t size) {
  
  bam_fname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.bam_fname)
}
inline std::string* MakeExamplesOptions::mutable_bam_fname() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.bam_fname)
  return bam_fname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MakeExamplesOptions::release_bam_fname() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.bam_fname)
  
  return bam_fname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MakeExamplesOptions::set_allocated_bam_fname(std::string* bam_fname) {
  if (bam_fname != nullptr) {
    
  } else {
    
  }
  bam_fname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bam_fname);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.bam_fname)
}

// repeated .learning.genomics.deepvariant.SampleOptions sample_options = 46;
inline int MakeExamplesOptions::sample_options_size() const {
  return sample_options_.size();
}
inline void MakeExamplesOptions::clear_sample_options() {
  sample_options_.Clear();
}
inline ::learning::genomics::deepvariant::SampleOptions* MakeExamplesOptions::mutable_sample_options(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.sample_options)
  return sample_options_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::SampleOptions >*
MakeExamplesOptions::mutable_sample_options() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.MakeExamplesOptions.sample_options)
  return &sample_options_;
}
inline const ::learning::genomics::deepvariant::SampleOptions& MakeExamplesOptions::sample_options(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.sample_options)
  return sample_options_.Get(index);
}
inline ::learning::genomics::deepvariant::SampleOptions* MakeExamplesOptions::add_sample_options() {
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.MakeExamplesOptions.sample_options)
  return sample_options_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::SampleOptions >&
MakeExamplesOptions::sample_options() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.MakeExamplesOptions.sample_options)
  return sample_options_;
}

// string sample_role_to_train = 47;
inline void MakeExamplesOptions::clear_sample_role_to_train() {
  sample_role_to_train_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MakeExamplesOptions::sample_role_to_train() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesOptions.sample_role_to_train)
  return sample_role_to_train_.GetNoArena();
}
inline void MakeExamplesOptions::set_sample_role_to_train(const std::string& value) {
  
  sample_role_to_train_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesOptions.sample_role_to_train)
}
inline void MakeExamplesOptions::set_sample_role_to_train(std::string&& value) {
  
  sample_role_to_train_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.MakeExamplesOptions.sample_role_to_train)
}
inline void MakeExamplesOptions::set_sample_role_to_train(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sample_role_to_train_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.MakeExamplesOptions.sample_role_to_train)
}
inline void MakeExamplesOptions::set_sample_role_to_train(const char* value, size_t size) {
  
  sample_role_to_train_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.MakeExamplesOptions.sample_role_to_train)
}
inline std::string* MakeExamplesOptions::mutable_sample_role_to_train() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesOptions.sample_role_to_train)
  return sample_role_to_train_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MakeExamplesOptions::release_sample_role_to_train() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesOptions.sample_role_to_train)
  
  return sample_role_to_train_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MakeExamplesOptions::set_allocated_sample_role_to_train(std::string* sample_role_to_train) {
  if (sample_role_to_train != nullptr) {
    
  } else {
    
  }
  sample_role_to_train_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sample_role_to_train);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesOptions.sample_role_to_train)
}

// -------------------------------------------------------------------

// DeepVariantDatasetConfig

// string name = 1;
inline void DeepVariantDatasetConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeepVariantDatasetConfig::name() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantDatasetConfig.name)
  return name_.GetNoArena();
}
inline void DeepVariantDatasetConfig::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantDatasetConfig.name)
}
inline void DeepVariantDatasetConfig::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.DeepVariantDatasetConfig.name)
}
inline void DeepVariantDatasetConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.DeepVariantDatasetConfig.name)
}
inline void DeepVariantDatasetConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.DeepVariantDatasetConfig.name)
}
inline std::string* DeepVariantDatasetConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantDatasetConfig.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeepVariantDatasetConfig::release_name() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.DeepVariantDatasetConfig.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeepVariantDatasetConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.DeepVariantDatasetConfig.name)
}

// string tfrecord_path = 2;
inline void DeepVariantDatasetConfig::clear_tfrecord_path() {
  tfrecord_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeepVariantDatasetConfig::tfrecord_path() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantDatasetConfig.tfrecord_path)
  return tfrecord_path_.GetNoArena();
}
inline void DeepVariantDatasetConfig::set_tfrecord_path(const std::string& value) {
  
  tfrecord_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantDatasetConfig.tfrecord_path)
}
inline void DeepVariantDatasetConfig::set_tfrecord_path(std::string&& value) {
  
  tfrecord_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.DeepVariantDatasetConfig.tfrecord_path)
}
inline void DeepVariantDatasetConfig::set_tfrecord_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tfrecord_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.DeepVariantDatasetConfig.tfrecord_path)
}
inline void DeepVariantDatasetConfig::set_tfrecord_path(const char* value, size_t size) {
  
  tfrecord_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.DeepVariantDatasetConfig.tfrecord_path)
}
inline std::string* DeepVariantDatasetConfig::mutable_tfrecord_path() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantDatasetConfig.tfrecord_path)
  return tfrecord_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeepVariantDatasetConfig::release_tfrecord_path() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.DeepVariantDatasetConfig.tfrecord_path)
  
  return tfrecord_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeepVariantDatasetConfig::set_allocated_tfrecord_path(std::string* tfrecord_path) {
  if (tfrecord_path != nullptr) {
    
  } else {
    
  }
  tfrecord_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tfrecord_path);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.DeepVariantDatasetConfig.tfrecord_path)
}

// uint32 num_examples = 3;
inline void DeepVariantDatasetConfig::clear_num_examples() {
  num_examples_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeepVariantDatasetConfig::num_examples() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantDatasetConfig.num_examples)
  return num_examples_;
}
inline void DeepVariantDatasetConfig::set_num_examples(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_examples_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantDatasetConfig.num_examples)
}

// -------------------------------------------------------------------

// DeepVariantInputDatasets_Dataset

// string confident_regions = 1;
inline void DeepVariantInputDatasets_Dataset::clear_confident_regions() {
  confident_regions_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeepVariantInputDatasets_Dataset::confident_regions() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.confident_regions)
  return confident_regions_.GetNoArena();
}
inline void DeepVariantInputDatasets_Dataset::set_confident_regions(const std::string& value) {
  
  confident_regions_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.confident_regions)
}
inline void DeepVariantInputDatasets_Dataset::set_confident_regions(std::string&& value) {
  
  confident_regions_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.confident_regions)
}
inline void DeepVariantInputDatasets_Dataset::set_confident_regions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  confident_regions_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.confident_regions)
}
inline void DeepVariantInputDatasets_Dataset::set_confident_regions(const char* value, size_t size) {
  
  confident_regions_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.confident_regions)
}
inline std::string* DeepVariantInputDatasets_Dataset::mutable_confident_regions() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.confident_regions)
  return confident_regions_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeepVariantInputDatasets_Dataset::release_confident_regions() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.confident_regions)
  
  return confident_regions_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeepVariantInputDatasets_Dataset::set_allocated_confident_regions(std::string* confident_regions) {
  if (confident_regions != nullptr) {
    
  } else {
    
  }
  confident_regions_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), confident_regions);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.confident_regions)
}

// string reads = 2;
inline void DeepVariantInputDatasets_Dataset::clear_reads() {
  reads_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeepVariantInputDatasets_Dataset::reads() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.reads)
  return reads_.GetNoArena();
}
inline void DeepVariantInputDatasets_Dataset::set_reads(const std::string& value) {
  
  reads_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.reads)
}
inline void DeepVariantInputDatasets_Dataset::set_reads(std::string&& value) {
  
  reads_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.reads)
}
inline void DeepVariantInputDatasets_Dataset::set_reads(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reads_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.reads)
}
inline void DeepVariantInputDatasets_Dataset::set_reads(const char* value, size_t size) {
  
  reads_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.reads)
}
inline std::string* DeepVariantInputDatasets_Dataset::mutable_reads() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.reads)
  return reads_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeepVariantInputDatasets_Dataset::release_reads() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.reads)
  
  return reads_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeepVariantInputDatasets_Dataset::set_allocated_reads(std::string* reads) {
  if (reads != nullptr) {
    
  } else {
    
  }
  reads_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reads);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.reads)
}

// string ref = 3;
inline void DeepVariantInputDatasets_Dataset::clear_ref() {
  ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeepVariantInputDatasets_Dataset::ref() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.ref)
  return ref_.GetNoArena();
}
inline void DeepVariantInputDatasets_Dataset::set_ref(const std::string& value) {
  
  ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.ref)
}
inline void DeepVariantInputDatasets_Dataset::set_ref(std::string&& value) {
  
  ref_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.ref)
}
inline void DeepVariantInputDatasets_Dataset::set_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.ref)
}
inline void DeepVariantInputDatasets_Dataset::set_ref(const char* value, size_t size) {
  
  ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.ref)
}
inline std::string* DeepVariantInputDatasets_Dataset::mutable_ref() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.ref)
  return ref_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeepVariantInputDatasets_Dataset::release_ref() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.ref)
  
  return ref_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeepVariantInputDatasets_Dataset::set_allocated_ref(std::string* ref) {
  if (ref != nullptr) {
    
  } else {
    
  }
  ref_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ref);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.ref)
}

// string truth_variants = 4;
inline void DeepVariantInputDatasets_Dataset::clear_truth_variants() {
  truth_variants_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeepVariantInputDatasets_Dataset::truth_variants() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.truth_variants)
  return truth_variants_.GetNoArena();
}
inline void DeepVariantInputDatasets_Dataset::set_truth_variants(const std::string& value) {
  
  truth_variants_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.truth_variants)
}
inline void DeepVariantInputDatasets_Dataset::set_truth_variants(std::string&& value) {
  
  truth_variants_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.truth_variants)
}
inline void DeepVariantInputDatasets_Dataset::set_truth_variants(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  truth_variants_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.truth_variants)
}
inline void DeepVariantInputDatasets_Dataset::set_truth_variants(const char* value, size_t size) {
  
  truth_variants_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.truth_variants)
}
inline std::string* DeepVariantInputDatasets_Dataset::mutable_truth_variants() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.truth_variants)
  return truth_variants_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeepVariantInputDatasets_Dataset::release_truth_variants() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.truth_variants)
  
  return truth_variants_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeepVariantInputDatasets_Dataset::set_allocated_truth_variants(std::string* truth_variants) {
  if (truth_variants != nullptr) {
    
  } else {
    
  }
  truth_variants_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), truth_variants);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.truth_variants)
}

// string regions = 5;
inline void DeepVariantInputDatasets_Dataset::clear_regions() {
  regions_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeepVariantInputDatasets_Dataset::regions() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.regions)
  return regions_.GetNoArena();
}
inline void DeepVariantInputDatasets_Dataset::set_regions(const std::string& value) {
  
  regions_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.regions)
}
inline void DeepVariantInputDatasets_Dataset::set_regions(std::string&& value) {
  
  regions_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.regions)
}
inline void DeepVariantInputDatasets_Dataset::set_regions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  regions_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.regions)
}
inline void DeepVariantInputDatasets_Dataset::set_regions(const char* value, size_t size) {
  
  regions_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.regions)
}
inline std::string* DeepVariantInputDatasets_Dataset::mutable_regions() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.regions)
  return regions_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeepVariantInputDatasets_Dataset::release_regions() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.regions)
  
  return regions_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeepVariantInputDatasets_Dataset::set_allocated_regions(std::string* regions) {
  if (regions != nullptr) {
    
  } else {
    
  }
  regions_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regions);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.regions)
}

// string training_random_emit_ref_sites = 6;
inline void DeepVariantInputDatasets_Dataset::clear_training_random_emit_ref_sites() {
  training_random_emit_ref_sites_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeepVariantInputDatasets_Dataset::training_random_emit_ref_sites() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.training_random_emit_ref_sites)
  return training_random_emit_ref_sites_.GetNoArena();
}
inline void DeepVariantInputDatasets_Dataset::set_training_random_emit_ref_sites(const std::string& value) {
  
  training_random_emit_ref_sites_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.training_random_emit_ref_sites)
}
inline void DeepVariantInputDatasets_Dataset::set_training_random_emit_ref_sites(std::string&& value) {
  
  training_random_emit_ref_sites_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.training_random_emit_ref_sites)
}
inline void DeepVariantInputDatasets_Dataset::set_training_random_emit_ref_sites(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  training_random_emit_ref_sites_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.training_random_emit_ref_sites)
}
inline void DeepVariantInputDatasets_Dataset::set_training_random_emit_ref_sites(const char* value, size_t size) {
  
  training_random_emit_ref_sites_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.training_random_emit_ref_sites)
}
inline std::string* DeepVariantInputDatasets_Dataset::mutable_training_random_emit_ref_sites() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.training_random_emit_ref_sites)
  return training_random_emit_ref_sites_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeepVariantInputDatasets_Dataset::release_training_random_emit_ref_sites() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.training_random_emit_ref_sites)
  
  return training_random_emit_ref_sites_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeepVariantInputDatasets_Dataset::set_allocated_training_random_emit_ref_sites(std::string* training_random_emit_ref_sites) {
  if (training_random_emit_ref_sites != nullptr) {
    
  } else {
    
  }
  training_random_emit_ref_sites_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), training_random_emit_ref_sites);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.training_random_emit_ref_sites)
}

// repeated string downsample_fractions = 7;
inline int DeepVariantInputDatasets_Dataset::downsample_fractions_size() const {
  return downsample_fractions_.size();
}
inline void DeepVariantInputDatasets_Dataset::clear_downsample_fractions() {
  downsample_fractions_.Clear();
}
inline const std::string& DeepVariantInputDatasets_Dataset::downsample_fractions(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.downsample_fractions)
  return downsample_fractions_.Get(index);
}
inline std::string* DeepVariantInputDatasets_Dataset::mutable_downsample_fractions(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.downsample_fractions)
  return downsample_fractions_.Mutable(index);
}
inline void DeepVariantInputDatasets_Dataset::set_downsample_fractions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.downsample_fractions)
  downsample_fractions_.Mutable(index)->assign(value);
}
inline void DeepVariantInputDatasets_Dataset::set_downsample_fractions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.downsample_fractions)
  downsample_fractions_.Mutable(index)->assign(std::move(value));
}
inline void DeepVariantInputDatasets_Dataset::set_downsample_fractions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  downsample_fractions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.downsample_fractions)
}
inline void DeepVariantInputDatasets_Dataset::set_downsample_fractions(int index, const char* value, size_t size) {
  downsample_fractions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.downsample_fractions)
}
inline std::string* DeepVariantInputDatasets_Dataset::add_downsample_fractions() {
  // @@protoc_insertion_point(field_add_mutable:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.downsample_fractions)
  return downsample_fractions_.Add();
}
inline void DeepVariantInputDatasets_Dataset::add_downsample_fractions(const std::string& value) {
  downsample_fractions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.downsample_fractions)
}
inline void DeepVariantInputDatasets_Dataset::add_downsample_fractions(std::string&& value) {
  downsample_fractions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.downsample_fractions)
}
inline void DeepVariantInputDatasets_Dataset::add_downsample_fractions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  downsample_fractions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.downsample_fractions)
}
inline void DeepVariantInputDatasets_Dataset::add_downsample_fractions(const char* value, size_t size) {
  downsample_fractions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.downsample_fractions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeepVariantInputDatasets_Dataset::downsample_fractions() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.downsample_fractions)
  return downsample_fractions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeepVariantInputDatasets_Dataset::mutable_downsample_fractions() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.downsample_fractions)
  return &downsample_fractions_;
}

// string exclude_regions = 8;
inline void DeepVariantInputDatasets_Dataset::clear_exclude_regions() {
  exclude_regions_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeepVariantInputDatasets_Dataset::exclude_regions() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.exclude_regions)
  return exclude_regions_.GetNoArena();
}
inline void DeepVariantInputDatasets_Dataset::set_exclude_regions(const std::string& value) {
  
  exclude_regions_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.exclude_regions)
}
inline void DeepVariantInputDatasets_Dataset::set_exclude_regions(std::string&& value) {
  
  exclude_regions_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.exclude_regions)
}
inline void DeepVariantInputDatasets_Dataset::set_exclude_regions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exclude_regions_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.exclude_regions)
}
inline void DeepVariantInputDatasets_Dataset::set_exclude_regions(const char* value, size_t size) {
  
  exclude_regions_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.exclude_regions)
}
inline std::string* DeepVariantInputDatasets_Dataset::mutable_exclude_regions() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.exclude_regions)
  return exclude_regions_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeepVariantInputDatasets_Dataset::release_exclude_regions() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.exclude_regions)
  
  return exclude_regions_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeepVariantInputDatasets_Dataset::set_allocated_exclude_regions(std::string* exclude_regions) {
  if (exclude_regions != nullptr) {
    
  } else {
    
  }
  exclude_regions_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exclude_regions);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.exclude_regions)
}

// string sample_name = 9;
inline void DeepVariantInputDatasets_Dataset::clear_sample_name() {
  sample_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeepVariantInputDatasets_Dataset::sample_name() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sample_name)
  return sample_name_.GetNoArena();
}
inline void DeepVariantInputDatasets_Dataset::set_sample_name(const std::string& value) {
  
  sample_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sample_name)
}
inline void DeepVariantInputDatasets_Dataset::set_sample_name(std::string&& value) {
  
  sample_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sample_name)
}
inline void DeepVariantInputDatasets_Dataset::set_sample_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sample_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sample_name)
}
inline void DeepVariantInputDatasets_Dataset::set_sample_name(const char* value, size_t size) {
  
  sample_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sample_name)
}
inline std::string* DeepVariantInputDatasets_Dataset::mutable_sample_name() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sample_name)
  return sample_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeepVariantInputDatasets_Dataset::release_sample_name() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sample_name)
  
  return sample_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeepVariantInputDatasets_Dataset::set_allocated_sample_name(std::string* sample_name) {
  if (sample_name != nullptr) {
    
  } else {
    
  }
  sample_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sample_name);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sample_name)
}

// string sequencing_type = 10;
inline void DeepVariantInputDatasets_Dataset::clear_sequencing_type() {
  sequencing_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeepVariantInputDatasets_Dataset::sequencing_type() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sequencing_type)
  return sequencing_type_.GetNoArena();
}
inline void DeepVariantInputDatasets_Dataset::set_sequencing_type(const std::string& value) {
  
  sequencing_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sequencing_type)
}
inline void DeepVariantInputDatasets_Dataset::set_sequencing_type(std::string&& value) {
  
  sequencing_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sequencing_type)
}
inline void DeepVariantInputDatasets_Dataset::set_sequencing_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sequencing_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sequencing_type)
}
inline void DeepVariantInputDatasets_Dataset::set_sequencing_type(const char* value, size_t size) {
  
  sequencing_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sequencing_type)
}
inline std::string* DeepVariantInputDatasets_Dataset::mutable_sequencing_type() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sequencing_type)
  return sequencing_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeepVariantInputDatasets_Dataset::release_sequencing_type() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sequencing_type)
  
  return sequencing_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeepVariantInputDatasets_Dataset::set_allocated_sequencing_type(std::string* sequencing_type) {
  if (sequencing_type != nullptr) {
    
  } else {
    
  }
  sequencing_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequencing_type);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sequencing_type)
}

// string population_vcfs = 11;
inline void DeepVariantInputDatasets_Dataset::clear_population_vcfs() {
  population_vcfs_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeepVariantInputDatasets_Dataset::population_vcfs() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.population_vcfs)
  return population_vcfs_.GetNoArena();
}
inline void DeepVariantInputDatasets_Dataset::set_population_vcfs(const std::string& value) {
  
  population_vcfs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.population_vcfs)
}
inline void DeepVariantInputDatasets_Dataset::set_population_vcfs(std::string&& value) {
  
  population_vcfs_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.population_vcfs)
}
inline void DeepVariantInputDatasets_Dataset::set_population_vcfs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  population_vcfs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.population_vcfs)
}
inline void DeepVariantInputDatasets_Dataset::set_population_vcfs(const char* value, size_t size) {
  
  population_vcfs_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.population_vcfs)
}
inline std::string* DeepVariantInputDatasets_Dataset::mutable_population_vcfs() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.population_vcfs)
  return population_vcfs_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeepVariantInputDatasets_Dataset::release_population_vcfs() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.population_vcfs)
  
  return population_vcfs_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeepVariantInputDatasets_Dataset::set_allocated_population_vcfs(std::string* population_vcfs) {
  if (population_vcfs != nullptr) {
    
  } else {
    
  }
  population_vcfs_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), population_vcfs);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.population_vcfs)
}

// int32 hp_tag_for_assembly_polishing = 13;
inline void DeepVariantInputDatasets_Dataset::clear_hp_tag_for_assembly_polishing() {
  hp_tag_for_assembly_polishing_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeepVariantInputDatasets_Dataset::hp_tag_for_assembly_polishing() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.hp_tag_for_assembly_polishing)
  return hp_tag_for_assembly_polishing_;
}
inline void DeepVariantInputDatasets_Dataset::set_hp_tag_for_assembly_polishing(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_tag_for_assembly_polishing_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.hp_tag_for_assembly_polishing)
}

// bool sort_by_haplotypes = 14;
inline void DeepVariantInputDatasets_Dataset::clear_sort_by_haplotypes() {
  sort_by_haplotypes_ = false;
}
inline bool DeepVariantInputDatasets_Dataset::sort_by_haplotypes() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sort_by_haplotypes)
  return sort_by_haplotypes_;
}
inline void DeepVariantInputDatasets_Dataset::set_sort_by_haplotypes(bool value) {
  
  sort_by_haplotypes_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sort_by_haplotypes)
}

// bool parse_sam_aux_fields = 15;
inline void DeepVariantInputDatasets_Dataset::clear_parse_sam_aux_fields() {
  parse_sam_aux_fields_ = false;
}
inline bool DeepVariantInputDatasets_Dataset::parse_sam_aux_fields() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.parse_sam_aux_fields)
  return parse_sam_aux_fields_;
}
inline void DeepVariantInputDatasets_Dataset::set_parse_sam_aux_fields(bool value) {
  
  parse_sam_aux_fields_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.parse_sam_aux_fields)
}

// bool add_hp_channel = 16;
inline void DeepVariantInputDatasets_Dataset::clear_add_hp_channel() {
  add_hp_channel_ = false;
}
inline bool DeepVariantInputDatasets_Dataset::add_hp_channel() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.add_hp_channel)
  return add_hp_channel_;
}
inline void DeepVariantInputDatasets_Dataset::set_add_hp_channel(bool value) {
  
  add_hp_channel_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.add_hp_channel)
}

// int32 sort_by_haplotypes_sample_hp_tag = 12 [deprecated = true];
inline void DeepVariantInputDatasets_Dataset::clear_sort_by_haplotypes_sample_hp_tag() {
  sort_by_haplotypes_sample_hp_tag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeepVariantInputDatasets_Dataset::sort_by_haplotypes_sample_hp_tag() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sort_by_haplotypes_sample_hp_tag)
  return sort_by_haplotypes_sample_hp_tag_;
}
inline void DeepVariantInputDatasets_Dataset::set_sort_by_haplotypes_sample_hp_tag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sort_by_haplotypes_sample_hp_tag_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset.sort_by_haplotypes_sample_hp_tag)
}

// -------------------------------------------------------------------

// DeepVariantInputDatasets

// repeated .learning.genomics.deepvariant.DeepVariantInputDatasets.Dataset datasets = 1;
inline int DeepVariantInputDatasets::datasets_size() const {
  return datasets_.size();
}
inline void DeepVariantInputDatasets::clear_datasets() {
  datasets_.Clear();
}
inline ::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset* DeepVariantInputDatasets::mutable_datasets(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantInputDatasets.datasets)
  return datasets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset >*
DeepVariantInputDatasets::mutable_datasets() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.DeepVariantInputDatasets.datasets)
  return &datasets_;
}
inline const ::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset& DeepVariantInputDatasets::datasets(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.datasets)
  return datasets_.Get(index);
}
inline ::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset* DeepVariantInputDatasets::add_datasets() {
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.DeepVariantInputDatasets.datasets)
  return datasets_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::DeepVariantInputDatasets_Dataset >&
DeepVariantInputDatasets::datasets() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.DeepVariantInputDatasets.datasets)
  return datasets_;
}

// string group_name = 2;
inline void DeepVariantInputDatasets::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeepVariantInputDatasets::group_name() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasets.group_name)
  return group_name_.GetNoArena();
}
inline void DeepVariantInputDatasets::set_group_name(const std::string& value) {
  
  group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.DeepVariantInputDatasets.group_name)
}
inline void DeepVariantInputDatasets::set_group_name(std::string&& value) {
  
  group_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:learning.genomics.deepvariant.DeepVariantInputDatasets.group_name)
}
inline void DeepVariantInputDatasets::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:learning.genomics.deepvariant.DeepVariantInputDatasets.group_name)
}
inline void DeepVariantInputDatasets::set_group_name(const char* value, size_t size) {
  
  group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:learning.genomics.deepvariant.DeepVariantInputDatasets.group_name)
}
inline std::string* DeepVariantInputDatasets::mutable_group_name() {
  
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantInputDatasets.group_name)
  return group_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeepVariantInputDatasets::release_group_name() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.DeepVariantInputDatasets.group_name)
  
  return group_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeepVariantInputDatasets::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    
  } else {
    
  }
  group_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.DeepVariantInputDatasets.group_name)
}

// -------------------------------------------------------------------

// DeepVariantInputDatasetsGroup

// repeated .learning.genomics.deepvariant.DeepVariantInputDatasets groups = 1;
inline int DeepVariantInputDatasetsGroup::groups_size() const {
  return groups_.size();
}
inline void DeepVariantInputDatasetsGroup::clear_groups() {
  groups_.Clear();
}
inline ::learning::genomics::deepvariant::DeepVariantInputDatasets* DeepVariantInputDatasetsGroup::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::DeepVariantInputDatasets >*
DeepVariantInputDatasetsGroup::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup.groups)
  return &groups_;
}
inline const ::learning::genomics::deepvariant::DeepVariantInputDatasets& DeepVariantInputDatasetsGroup::groups(int index) const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup.groups)
  return groups_.Get(index);
}
inline ::learning::genomics::deepvariant::DeepVariantInputDatasets* DeepVariantInputDatasetsGroup::add_groups() {
  // @@protoc_insertion_point(field_add:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup.groups)
  return groups_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::learning::genomics::deepvariant::DeepVariantInputDatasets >&
DeepVariantInputDatasetsGroup::groups() const {
  // @@protoc_insertion_point(field_list:learning.genomics.deepvariant.DeepVariantInputDatasetsGroup.groups)
  return groups_;
}

// -------------------------------------------------------------------

// LabelingMetrics

// int32 n_truth_variant_sites = 1;
inline void LabelingMetrics::clear_n_truth_variant_sites() {
  n_truth_variant_sites_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelingMetrics::n_truth_variant_sites() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.LabelingMetrics.n_truth_variant_sites)
  return n_truth_variant_sites_;
}
inline void LabelingMetrics::set_n_truth_variant_sites(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_truth_variant_sites_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.LabelingMetrics.n_truth_variant_sites)
}

// int32 n_truth_variant_alleles = 2;
inline void LabelingMetrics::clear_n_truth_variant_alleles() {
  n_truth_variant_alleles_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelingMetrics::n_truth_variant_alleles() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.LabelingMetrics.n_truth_variant_alleles)
  return n_truth_variant_alleles_;
}
inline void LabelingMetrics::set_n_truth_variant_alleles(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_truth_variant_alleles_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.LabelingMetrics.n_truth_variant_alleles)
}

// int32 n_candidate_variant_sites = 3;
inline void LabelingMetrics::clear_n_candidate_variant_sites() {
  n_candidate_variant_sites_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelingMetrics::n_candidate_variant_sites() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.LabelingMetrics.n_candidate_variant_sites)
  return n_candidate_variant_sites_;
}
inline void LabelingMetrics::set_n_candidate_variant_sites(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_candidate_variant_sites_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.LabelingMetrics.n_candidate_variant_sites)
}

// int32 n_candidate_variant_alleles = 4;
inline void LabelingMetrics::clear_n_candidate_variant_alleles() {
  n_candidate_variant_alleles_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelingMetrics::n_candidate_variant_alleles() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.LabelingMetrics.n_candidate_variant_alleles)
  return n_candidate_variant_alleles_;
}
inline void LabelingMetrics::set_n_candidate_variant_alleles(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_candidate_variant_alleles_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.LabelingMetrics.n_candidate_variant_alleles)
}

// int32 n_non_confident_candidate_variant_sites = 5;
inline void LabelingMetrics::clear_n_non_confident_candidate_variant_sites() {
  n_non_confident_candidate_variant_sites_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelingMetrics::n_non_confident_candidate_variant_sites() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.LabelingMetrics.n_non_confident_candidate_variant_sites)
  return n_non_confident_candidate_variant_sites_;
}
inline void LabelingMetrics::set_n_non_confident_candidate_variant_sites(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_non_confident_candidate_variant_sites_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.LabelingMetrics.n_non_confident_candidate_variant_sites)
}

// int32 n_true_positive_sites = 6;
inline void LabelingMetrics::clear_n_true_positive_sites() {
  n_true_positive_sites_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelingMetrics::n_true_positive_sites() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.LabelingMetrics.n_true_positive_sites)
  return n_true_positive_sites_;
}
inline void LabelingMetrics::set_n_true_positive_sites(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_true_positive_sites_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.LabelingMetrics.n_true_positive_sites)
}

// int32 n_true_positive_alleles = 7;
inline void LabelingMetrics::clear_n_true_positive_alleles() {
  n_true_positive_alleles_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelingMetrics::n_true_positive_alleles() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.LabelingMetrics.n_true_positive_alleles)
  return n_true_positive_alleles_;
}
inline void LabelingMetrics::set_n_true_positive_alleles(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_true_positive_alleles_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.LabelingMetrics.n_true_positive_alleles)
}

// int32 n_false_negative_sites = 8;
inline void LabelingMetrics::clear_n_false_negative_sites() {
  n_false_negative_sites_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelingMetrics::n_false_negative_sites() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.LabelingMetrics.n_false_negative_sites)
  return n_false_negative_sites_;
}
inline void LabelingMetrics::set_n_false_negative_sites(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_false_negative_sites_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.LabelingMetrics.n_false_negative_sites)
}

// int32 n_false_negative_alleles = 9;
inline void LabelingMetrics::clear_n_false_negative_alleles() {
  n_false_negative_alleles_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelingMetrics::n_false_negative_alleles() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.LabelingMetrics.n_false_negative_alleles)
  return n_false_negative_alleles_;
}
inline void LabelingMetrics::set_n_false_negative_alleles(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_false_negative_alleles_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.LabelingMetrics.n_false_negative_alleles)
}

// int32 n_false_positive_sites = 10;
inline void LabelingMetrics::clear_n_false_positive_sites() {
  n_false_positive_sites_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelingMetrics::n_false_positive_sites() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.LabelingMetrics.n_false_positive_sites)
  return n_false_positive_sites_;
}
inline void LabelingMetrics::set_n_false_positive_sites(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_false_positive_sites_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.LabelingMetrics.n_false_positive_sites)
}

// int32 n_false_positive_alleles = 11;
inline void LabelingMetrics::clear_n_false_positive_alleles() {
  n_false_positive_alleles_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelingMetrics::n_false_positive_alleles() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.LabelingMetrics.n_false_positive_alleles)
  return n_false_positive_alleles_;
}
inline void LabelingMetrics::set_n_false_positive_alleles(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_false_positive_alleles_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.LabelingMetrics.n_false_positive_alleles)
}

// int32 n_inexact_position_matches = 12;
inline void LabelingMetrics::clear_n_inexact_position_matches() {
  n_inexact_position_matches_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelingMetrics::n_inexact_position_matches() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.LabelingMetrics.n_inexact_position_matches)
  return n_inexact_position_matches_;
}
inline void LabelingMetrics::set_n_inexact_position_matches(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_inexact_position_matches_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.LabelingMetrics.n_inexact_position_matches)
}

// int32 n_exact_position_matches = 13;
inline void LabelingMetrics::clear_n_exact_position_matches() {
  n_exact_position_matches_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelingMetrics::n_exact_position_matches() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.LabelingMetrics.n_exact_position_matches)
  return n_exact_position_matches_;
}
inline void LabelingMetrics::set_n_exact_position_matches(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_exact_position_matches_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.LabelingMetrics.n_exact_position_matches)
}

// int32 n_exact_position_and_allele_matches = 14;
inline void LabelingMetrics::clear_n_exact_position_and_allele_matches() {
  n_exact_position_and_allele_matches_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelingMetrics::n_exact_position_and_allele_matches() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.LabelingMetrics.n_exact_position_and_allele_matches)
  return n_exact_position_and_allele_matches_;
}
inline void LabelingMetrics::set_n_exact_position_and_allele_matches(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_exact_position_and_allele_matches_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.LabelingMetrics.n_exact_position_and_allele_matches)
}

// int32 n_exact_position_and_allele_and_genotype_matches = 15;
inline void LabelingMetrics::clear_n_exact_position_and_allele_and_genotype_matches() {
  n_exact_position_and_allele_and_genotype_matches_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelingMetrics::n_exact_position_and_allele_and_genotype_matches() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.LabelingMetrics.n_exact_position_and_allele_and_genotype_matches)
  return n_exact_position_and_allele_and_genotype_matches_;
}
inline void LabelingMetrics::set_n_exact_position_and_allele_and_genotype_matches(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_exact_position_and_allele_and_genotype_matches_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.LabelingMetrics.n_exact_position_and_allele_and_genotype_matches)
}

// int32 n_truth_multiallelics_sites_with_missed_alleles = 16;
inline void LabelingMetrics::clear_n_truth_multiallelics_sites_with_missed_alleles() {
  n_truth_multiallelics_sites_with_missed_alleles_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LabelingMetrics::n_truth_multiallelics_sites_with_missed_alleles() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.LabelingMetrics.n_truth_multiallelics_sites_with_missed_alleles)
  return n_truth_multiallelics_sites_with_missed_alleles_;
}
inline void LabelingMetrics::set_n_truth_multiallelics_sites_with_missed_alleles(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_truth_multiallelics_sites_with_missed_alleles_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.LabelingMetrics.n_truth_multiallelics_sites_with_missed_alleles)
}

// -------------------------------------------------------------------

// MakeExamplesStats

// int32 num_examples = 1;
inline void MakeExamplesStats::clear_num_examples() {
  num_examples_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MakeExamplesStats::num_examples() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesStats.num_examples)
  return num_examples_;
}
inline void MakeExamplesStats::set_num_examples(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_examples_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesStats.num_examples)
}

// int32 num_indels = 2;
inline void MakeExamplesStats::clear_num_indels() {
  num_indels_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MakeExamplesStats::num_indels() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesStats.num_indels)
  return num_indels_;
}
inline void MakeExamplesStats::set_num_indels(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_indels_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesStats.num_indels)
}

// int32 num_snps = 3;
inline void MakeExamplesStats::clear_num_snps() {
  num_snps_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MakeExamplesStats::num_snps() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesStats.num_snps)
  return num_snps_;
}
inline void MakeExamplesStats::set_num_snps(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_snps_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesStats.num_snps)
}

// int32 num_class_0 = 4;
inline void MakeExamplesStats::clear_num_class_0() {
  num_class_0_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MakeExamplesStats::num_class_0() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesStats.num_class_0)
  return num_class_0_;
}
inline void MakeExamplesStats::set_num_class_0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_class_0_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesStats.num_class_0)
}

// int32 num_class_1 = 5;
inline void MakeExamplesStats::clear_num_class_1() {
  num_class_1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MakeExamplesStats::num_class_1() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesStats.num_class_1)
  return num_class_1_;
}
inline void MakeExamplesStats::set_num_class_1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_class_1_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesStats.num_class_1)
}

// int32 num_class_2 = 6;
inline void MakeExamplesStats::clear_num_class_2() {
  num_class_2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MakeExamplesStats::num_class_2() const {
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesStats.num_class_2)
  return num_class_2_;
}
inline void MakeExamplesStats::set_num_class_2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_class_2_ = value;
  // @@protoc_insertion_point(field_set:learning.genomics.deepvariant.MakeExamplesStats.num_class_2)
}

// -------------------------------------------------------------------

// MakeExamplesRunInfo

// .learning.genomics.deepvariant.MakeExamplesOptions options = 1;
inline bool MakeExamplesRunInfo::has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline void MakeExamplesRunInfo::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::learning::genomics::deepvariant::MakeExamplesOptions& MakeExamplesRunInfo::options() const {
  const ::learning::genomics::deepvariant::MakeExamplesOptions* p = options_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesRunInfo.options)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::MakeExamplesOptions*>(
      &::learning::genomics::deepvariant::_MakeExamplesOptions_default_instance_);
}
inline ::learning::genomics::deepvariant::MakeExamplesOptions* MakeExamplesRunInfo::release_options() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesRunInfo.options)
  
  ::learning::genomics::deepvariant::MakeExamplesOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::MakeExamplesOptions* MakeExamplesRunInfo::mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::MakeExamplesOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesRunInfo.options)
  return options_;
}
inline void MakeExamplesRunInfo::set_allocated_options(::learning::genomics::deepvariant::MakeExamplesOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesRunInfo.options)
}

// .learning.genomics.deepvariant.LabelingMetrics labeling_metrics = 2;
inline bool MakeExamplesRunInfo::has_labeling_metrics() const {
  return this != internal_default_instance() && labeling_metrics_ != nullptr;
}
inline void MakeExamplesRunInfo::clear_labeling_metrics() {
  if (GetArenaNoVirtual() == nullptr && labeling_metrics_ != nullptr) {
    delete labeling_metrics_;
  }
  labeling_metrics_ = nullptr;
}
inline const ::learning::genomics::deepvariant::LabelingMetrics& MakeExamplesRunInfo::labeling_metrics() const {
  const ::learning::genomics::deepvariant::LabelingMetrics* p = labeling_metrics_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesRunInfo.labeling_metrics)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::LabelingMetrics*>(
      &::learning::genomics::deepvariant::_LabelingMetrics_default_instance_);
}
inline ::learning::genomics::deepvariant::LabelingMetrics* MakeExamplesRunInfo::release_labeling_metrics() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesRunInfo.labeling_metrics)
  
  ::learning::genomics::deepvariant::LabelingMetrics* temp = labeling_metrics_;
  labeling_metrics_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::LabelingMetrics* MakeExamplesRunInfo::mutable_labeling_metrics() {
  
  if (labeling_metrics_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::LabelingMetrics>(GetArenaNoVirtual());
    labeling_metrics_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesRunInfo.labeling_metrics)
  return labeling_metrics_;
}
inline void MakeExamplesRunInfo::set_allocated_labeling_metrics(::learning::genomics::deepvariant::LabelingMetrics* labeling_metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete labeling_metrics_;
  }
  if (labeling_metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      labeling_metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, labeling_metrics, submessage_arena);
    }
    
  } else {
    
  }
  labeling_metrics_ = labeling_metrics;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesRunInfo.labeling_metrics)
}

// .learning.genomics.deepvariant.ResourceMetrics resource_metrics = 3;
inline bool MakeExamplesRunInfo::has_resource_metrics() const {
  return this != internal_default_instance() && resource_metrics_ != nullptr;
}
inline const ::learning::genomics::deepvariant::ResourceMetrics& MakeExamplesRunInfo::resource_metrics() const {
  const ::learning::genomics::deepvariant::ResourceMetrics* p = resource_metrics_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesRunInfo.resource_metrics)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::ResourceMetrics*>(
      &::learning::genomics::deepvariant::_ResourceMetrics_default_instance_);
}
inline ::learning::genomics::deepvariant::ResourceMetrics* MakeExamplesRunInfo::release_resource_metrics() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesRunInfo.resource_metrics)
  
  ::learning::genomics::deepvariant::ResourceMetrics* temp = resource_metrics_;
  resource_metrics_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::ResourceMetrics* MakeExamplesRunInfo::mutable_resource_metrics() {
  
  if (resource_metrics_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::ResourceMetrics>(GetArenaNoVirtual());
    resource_metrics_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesRunInfo.resource_metrics)
  return resource_metrics_;
}
inline void MakeExamplesRunInfo::set_allocated_resource_metrics(::learning::genomics::deepvariant::ResourceMetrics* resource_metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_metrics_);
  }
  if (resource_metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resource_metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_metrics, submessage_arena);
    }
    
  } else {
    
  }
  resource_metrics_ = resource_metrics;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesRunInfo.resource_metrics)
}

// .learning.genomics.deepvariant.MakeExamplesStats stats = 4;
inline bool MakeExamplesRunInfo::has_stats() const {
  return this != internal_default_instance() && stats_ != nullptr;
}
inline void MakeExamplesRunInfo::clear_stats() {
  if (GetArenaNoVirtual() == nullptr && stats_ != nullptr) {
    delete stats_;
  }
  stats_ = nullptr;
}
inline const ::learning::genomics::deepvariant::MakeExamplesStats& MakeExamplesRunInfo::stats() const {
  const ::learning::genomics::deepvariant::MakeExamplesStats* p = stats_;
  // @@protoc_insertion_point(field_get:learning.genomics.deepvariant.MakeExamplesRunInfo.stats)
  return p != nullptr ? *p : *reinterpret_cast<const ::learning::genomics::deepvariant::MakeExamplesStats*>(
      &::learning::genomics::deepvariant::_MakeExamplesStats_default_instance_);
}
inline ::learning::genomics::deepvariant::MakeExamplesStats* MakeExamplesRunInfo::release_stats() {
  // @@protoc_insertion_point(field_release:learning.genomics.deepvariant.MakeExamplesRunInfo.stats)
  
  ::learning::genomics::deepvariant::MakeExamplesStats* temp = stats_;
  stats_ = nullptr;
  return temp;
}
inline ::learning::genomics::deepvariant::MakeExamplesStats* MakeExamplesRunInfo::mutable_stats() {
  
  if (stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::learning::genomics::deepvariant::MakeExamplesStats>(GetArenaNoVirtual());
    stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:learning.genomics.deepvariant.MakeExamplesRunInfo.stats)
  return stats_;
}
inline void MakeExamplesRunInfo::set_allocated_stats(::learning::genomics::deepvariant::MakeExamplesStats* stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stats_;
  }
  if (stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.MakeExamplesRunInfo.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace deepvariant
}  // namespace genomics
}  // namespace learning

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::learning::genomics::deepvariant::PileupImageOptions_MultiAllelicMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::learning::genomics::deepvariant::PileupImageOptions_MultiAllelicMode>() {
  return ::learning::genomics::deepvariant::PileupImageOptions_MultiAllelicMode_descriptor();
}
template <> struct is_proto_enum< ::learning::genomics::deepvariant::PileupImageOptions_SequencingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::learning::genomics::deepvariant::PileupImageOptions_SequencingType>() {
  return ::learning::genomics::deepvariant::PileupImageOptions_SequencingType_descriptor();
}
template <> struct is_proto_enum< ::learning::genomics::deepvariant::MakeExamplesOptions_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::learning::genomics::deepvariant::MakeExamplesOptions_Mode>() {
  return ::learning::genomics::deepvariant::MakeExamplesOptions_Mode_descriptor();
}
template <> struct is_proto_enum< ::learning::genomics::deepvariant::MakeExamplesOptions_LabelerAlgorithm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::learning::genomics::deepvariant::MakeExamplesOptions_LabelerAlgorithm>() {
  return ::learning::genomics::deepvariant::MakeExamplesOptions_LabelerAlgorithm_descriptor();
}
template <> struct is_proto_enum< ::learning::genomics::deepvariant::MakeExamplesOptions_VariantCaller> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::learning::genomics::deepvariant::MakeExamplesOptions_VariantCaller>() {
  return ::learning::genomics::deepvariant::MakeExamplesOptions_VariantCaller_descriptor();
}
template <> struct is_proto_enum< ::learning::genomics::deepvariant::AlleleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::learning::genomics::deepvariant::AlleleType>() {
  return ::learning::genomics::deepvariant::AlleleType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_deepvariant_2fprotos_2fdeepvariant_2eproto
