// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: deepvariant/protos/realigner.proto

#include "deepvariant/protos/realigner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2frealigner_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlignerOptions_deepvariant_2fprotos_2frealigner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2frealigner_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeBruijnGraphOptions_deepvariant_2fprotos_2frealigner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2frealigner_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Diagnostics_deepvariant_2fprotos_2frealigner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2frealigner_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WindowSelectorModel_deepvariant_2fprotos_2frealigner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2frealigner_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowSelectorModel_AlleleCountLinearModel_deepvariant_2fprotos_2frealigner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2frealigner_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowSelectorModel_VariantReadsThresholdModel_deepvariant_2fprotos_2frealigner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_deepvariant_2fprotos_2frealigner_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WindowSelectorOptions_deepvariant_2fprotos_2frealigner_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_third_5fparty_2fnucleus_2fprotos_2frange_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Range_third_5fparty_2fnucleus_2fprotos_2frange_2eproto;
namespace learning {
namespace genomics {
namespace deepvariant {
class CandidateHaplotypesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CandidateHaplotypes> _instance;
} _CandidateHaplotypes_default_instance_;
class WindowSelectorModel_VariantReadsThresholdModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WindowSelectorModel_VariantReadsThresholdModel> _instance;
} _WindowSelectorModel_VariantReadsThresholdModel_default_instance_;
class WindowSelectorModel_AlleleCountLinearModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WindowSelectorModel_AlleleCountLinearModel> _instance;
} _WindowSelectorModel_AlleleCountLinearModel_default_instance_;
class WindowSelectorModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WindowSelectorModel> _instance;
  const ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel* variant_reads_model_;
  const ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel* allele_count_linear_model_;
} _WindowSelectorModel_default_instance_;
class WindowSelectorOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WindowSelectorOptions> _instance;
} _WindowSelectorOptions_default_instance_;
class DeBruijnGraphOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeBruijnGraphOptions> _instance;
} _DeBruijnGraphOptions_default_instance_;
class AlignerOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlignerOptions> _instance;
} _AlignerOptions_default_instance_;
class DiagnosticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Diagnostics> _instance;
} _Diagnostics_default_instance_;
class RealignerOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RealignerOptions> _instance;
} _RealignerOptions_default_instance_;
}  // namespace deepvariant
}  // namespace genomics
}  // namespace learning
static void InitDefaultsscc_info_AlignerOptions_deepvariant_2fprotos_2frealigner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_AlignerOptions_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::AlignerOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::AlignerOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlignerOptions_deepvariant_2fprotos_2frealigner_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AlignerOptions_deepvariant_2fprotos_2frealigner_2eproto}, {}};

static void InitDefaultsscc_info_CandidateHaplotypes_deepvariant_2fprotos_2frealigner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_CandidateHaplotypes_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::CandidateHaplotypes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::CandidateHaplotypes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CandidateHaplotypes_deepvariant_2fprotos_2frealigner_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CandidateHaplotypes_deepvariant_2fprotos_2frealigner_2eproto}, {
      &scc_info_Range_third_5fparty_2fnucleus_2fprotos_2frange_2eproto.base,}};

static void InitDefaultsscc_info_DeBruijnGraphOptions_deepvariant_2fprotos_2frealigner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_DeBruijnGraphOptions_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::DeBruijnGraphOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::DeBruijnGraphOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeBruijnGraphOptions_deepvariant_2fprotos_2frealigner_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DeBruijnGraphOptions_deepvariant_2fprotos_2frealigner_2eproto}, {}};

static void InitDefaultsscc_info_Diagnostics_deepvariant_2fprotos_2frealigner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_Diagnostics_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::Diagnostics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::Diagnostics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Diagnostics_deepvariant_2fprotos_2frealigner_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Diagnostics_deepvariant_2fprotos_2frealigner_2eproto}, {}};

static void InitDefaultsscc_info_RealignerOptions_deepvariant_2fprotos_2frealigner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_RealignerOptions_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::RealignerOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::RealignerOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RealignerOptions_deepvariant_2fprotos_2frealigner_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_RealignerOptions_deepvariant_2fprotos_2frealigner_2eproto}, {
      &scc_info_WindowSelectorOptions_deepvariant_2fprotos_2frealigner_2eproto.base,
      &scc_info_DeBruijnGraphOptions_deepvariant_2fprotos_2frealigner_2eproto.base,
      &scc_info_AlignerOptions_deepvariant_2fprotos_2frealigner_2eproto.base,
      &scc_info_Diagnostics_deepvariant_2fprotos_2frealigner_2eproto.base,}};

static void InitDefaultsscc_info_WindowSelectorModel_deepvariant_2fprotos_2frealigner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_WindowSelectorModel_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::WindowSelectorModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::WindowSelectorModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WindowSelectorModel_deepvariant_2fprotos_2frealigner_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_WindowSelectorModel_deepvariant_2fprotos_2frealigner_2eproto}, {
      &scc_info_WindowSelectorModel_VariantReadsThresholdModel_deepvariant_2fprotos_2frealigner_2eproto.base,
      &scc_info_WindowSelectorModel_AlleleCountLinearModel_deepvariant_2fprotos_2frealigner_2eproto.base,}};

static void InitDefaultsscc_info_WindowSelectorModel_AlleleCountLinearModel_deepvariant_2fprotos_2frealigner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_WindowSelectorModel_AlleleCountLinearModel_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowSelectorModel_AlleleCountLinearModel_deepvariant_2fprotos_2frealigner_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WindowSelectorModel_AlleleCountLinearModel_deepvariant_2fprotos_2frealigner_2eproto}, {}};

static void InitDefaultsscc_info_WindowSelectorModel_VariantReadsThresholdModel_deepvariant_2fprotos_2frealigner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_WindowSelectorModel_VariantReadsThresholdModel_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowSelectorModel_VariantReadsThresholdModel_deepvariant_2fprotos_2frealigner_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WindowSelectorModel_VariantReadsThresholdModel_deepvariant_2fprotos_2frealigner_2eproto}, {}};

static void InitDefaultsscc_info_WindowSelectorOptions_deepvariant_2fprotos_2frealigner_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::learning::genomics::deepvariant::_WindowSelectorOptions_default_instance_;
    new (ptr) ::learning::genomics::deepvariant::WindowSelectorOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::learning::genomics::deepvariant::WindowSelectorOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WindowSelectorOptions_deepvariant_2fprotos_2frealigner_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_WindowSelectorOptions_deepvariant_2fprotos_2frealigner_2eproto}, {
      &scc_info_WindowSelectorModel_deepvariant_2fprotos_2frealigner_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_deepvariant_2fprotos_2frealigner_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_deepvariant_2fprotos_2frealigner_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_deepvariant_2fprotos_2frealigner_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_deepvariant_2fprotos_2frealigner_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CandidateHaplotypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CandidateHaplotypes, span_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::CandidateHaplotypes, haplotypes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel, min_num_supporting_reads_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel, max_num_supporting_reads_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel, bias_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel, coeff_soft_clip_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel, coeff_substitution_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel, coeff_insertion_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel, coeff_deletion_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel, coeff_reference_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel, decision_boundary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorModel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorModel, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorModel, model_type_),
  offsetof(::learning::genomics::deepvariant::WindowSelectorModelDefaultTypeInternal, variant_reads_model_),
  offsetof(::learning::genomics::deepvariant::WindowSelectorModelDefaultTypeInternal, allele_count_linear_model_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorModel, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorOptions, min_num_supporting_reads_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorOptions, max_num_supporting_reads_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorOptions, min_mapq_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorOptions, min_base_quality_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorOptions, min_windows_distance_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorOptions, max_window_size_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorOptions, region_expansion_in_bp_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorOptions, window_selector_model_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::WindowSelectorOptions, keep_legacy_behavior_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeBruijnGraphOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeBruijnGraphOptions, min_k_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeBruijnGraphOptions, max_k_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeBruijnGraphOptions, step_k_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeBruijnGraphOptions, min_mapq_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeBruijnGraphOptions, min_base_quality_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeBruijnGraphOptions, min_edge_weight_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::DeBruijnGraphOptions, max_num_paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlignerOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlignerOptions, match_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlignerOptions, mismatch_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlignerOptions, gap_open_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlignerOptions, gap_extend_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlignerOptions, k_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlignerOptions, error_rate_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlignerOptions, read_size_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlignerOptions, kmer_size_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlignerOptions, max_num_of_mismatches_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlignerOptions, realignment_similarity_threshold_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::AlignerOptions, force_alignment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::Diagnostics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::Diagnostics, enabled_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::Diagnostics, output_root_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::Diagnostics, emit_realigned_reads_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::RealignerOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::RealignerOptions, ws_config_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::RealignerOptions, dbg_config_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::RealignerOptions, aln_config_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::RealignerOptions, diagnostics_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::RealignerOptions, split_skip_reads_),
  PROTOBUF_FIELD_OFFSET(::learning::genomics::deepvariant::RealignerOptions, normalize_reads_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::learning::genomics::deepvariant::CandidateHaplotypes)},
  { 7, -1, sizeof(::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel)},
  { 14, -1, sizeof(::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel)},
  { 26, -1, sizeof(::learning::genomics::deepvariant::WindowSelectorModel)},
  { 35, -1, sizeof(::learning::genomics::deepvariant::WindowSelectorOptions)},
  { 49, -1, sizeof(::learning::genomics::deepvariant::DeBruijnGraphOptions)},
  { 61, -1, sizeof(::learning::genomics::deepvariant::AlignerOptions)},
  { 77, -1, sizeof(::learning::genomics::deepvariant::Diagnostics)},
  { 85, -1, sizeof(::learning::genomics::deepvariant::RealignerOptions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_CandidateHaplotypes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_WindowSelectorModel_VariantReadsThresholdModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_WindowSelectorModel_AlleleCountLinearModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_WindowSelectorModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_WindowSelectorOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_DeBruijnGraphOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_AlignerOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_Diagnostics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::learning::genomics::deepvariant::_RealignerOptions_default_instance_),
};

const char descriptor_table_protodef_deepvariant_2fprotos_2frealigner_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"deepvariant/protos/realigner.proto\022\035le"
  "arning.genomics.deepvariant\032&third_party"
  "/nucleus/protos/range.proto\"S\n\023Candidate"
  "Haplotypes\022(\n\004span\030\001 \001(\0132\032.nucleus.genom"
  "ics.v1.Range\022\022\n\nhaplotypes\030\002 \003(\t\"\273\005\n\023Win"
  "dowSelectorModel\022P\n\nmodel_type\030\001 \001(\0162<.l"
  "earning.genomics.deepvariant.WindowSelec"
  "torModel.ModelType\022l\n\023variant_reads_mode"
  "l\030\002 \001(\0132M.learning.genomics.deepvariant."
  "WindowSelectorModel.VariantReadsThreshol"
  "dModelH\000\022n\n\031allele_count_linear_model\030\003 "
  "\001(\0132I.learning.genomics.deepvariant.Wind"
  "owSelectorModel.AlleleCountLinearModelH\000"
  "\032`\n\032VariantReadsThresholdModel\022 \n\030min_nu"
  "m_supporting_reads\030\001 \001(\005\022 \n\030max_num_supp"
  "orting_reads\030\002 \001(\005\032\300\001\n\026AlleleCountLinear"
  "Model\022\014\n\004bias\030\001 \001(\002\022\027\n\017coeff_soft_clip\030\002"
  " \001(\002\022\032\n\022coeff_substitution\030\003 \001(\002\022\027\n\017coef"
  "f_insertion\030\004 \001(\002\022\026\n\016coeff_deletion\030\005 \001("
  "\002\022\027\n\017coeff_reference\030\006 \001(\002\022\031\n\021decision_b"
  "oundary\030\007 \001(\002\"F\n\tModelType\022\r\n\tUNDEFINED\020"
  "\000\022\021\n\rVARIANT_READS\020\001\022\027\n\023ALLELE_COUNT_LIN"
  "EAR\020\002B\007\n\005model\"\317\002\n\025WindowSelectorOptions"
  "\022 \n\030min_num_supporting_reads\030\001 \001(\005\022 \n\030ma"
  "x_num_supporting_reads\030\002 \001(\005\022\020\n\010min_mapq"
  "\030\003 \001(\005\022\030\n\020min_base_quality\030\004 \001(\005\022\034\n\024min_"
  "windows_distance\030\005 \001(\005\022\027\n\017max_window_siz"
  "e\030\006 \001(\005\022\036\n\026region_expansion_in_bp\030\007 \001(\005\022"
  "Q\n\025window_selector_model\030\010 \001(\01322.learnin"
  "g.genomics.deepvariant.WindowSelectorMod"
  "el\022\034\n\024keep_legacy_behavior\030\t \001(\010\"\240\001\n\024DeB"
  "ruijnGraphOptions\022\r\n\005min_k\030\001 \001(\005\022\r\n\005max_"
  "k\030\002 \001(\005\022\016\n\006step_k\030\003 \001(\005\022\020\n\010min_mapq\030\004 \001("
  "\005\022\030\n\020min_base_quality\030\005 \001(\005\022\027\n\017min_edge_"
  "weight\030\006 \001(\005\022\025\n\rmax_num_paths\030\007 \001(\005\"\376\001\n\016"
  "AlignerOptions\022\r\n\005match\030\001 \001(\005\022\020\n\010mismatc"
  "h\030\002 \001(\005\022\020\n\010gap_open\030\003 \001(\005\022\022\n\ngap_extend\030"
  "\004 \001(\005\022\t\n\001k\030\005 \001(\005\022\022\n\nerror_rate\030\006 \001(\002\022\021\n\t"
  "read_size\030\010 \001(\005\022\021\n\tkmer_size\030\t \001(\005\022\035\n\025ma"
  "x_num_of_mismatches\030\n \001(\005\022(\n realignment"
  "_similarity_threshold\030\013 \001(\001\022\027\n\017force_ali"
  "gnment\030\014 \001(\010\"Q\n\013Diagnostics\022\017\n\007enabled\030\001"
  " \001(\010\022\023\n\013output_root\030\002 \001(\t\022\034\n\024emit_realig"
  "ned_reads\030\003 \001(\010\"\333\002\n\020RealignerOptions\022G\n\t"
  "ws_config\030\001 \001(\01324.learning.genomics.deep"
  "variant.WindowSelectorOptions\022G\n\ndbg_con"
  "fig\030\002 \001(\01323.learning.genomics.deepvarian"
  "t.DeBruijnGraphOptions\022A\n\naln_config\030\003 \001"
  "(\0132-.learning.genomics.deepvariant.Align"
  "erOptions\022\?\n\013diagnostics\030\004 \001(\0132*.learnin"
  "g.genomics.deepvariant.Diagnostics\022\030\n\020sp"
  "lit_skip_reads\030\005 \001(\010\022\027\n\017normalize_reads\030"
  "\006 \001(\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_deepvariant_2fprotos_2frealigner_2eproto_deps[1] = {
  &::descriptor_table_third_5fparty_2fnucleus_2fprotos_2frange_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_deepvariant_2fprotos_2frealigner_2eproto_sccs[9] = {
  &scc_info_AlignerOptions_deepvariant_2fprotos_2frealigner_2eproto.base,
  &scc_info_CandidateHaplotypes_deepvariant_2fprotos_2frealigner_2eproto.base,
  &scc_info_DeBruijnGraphOptions_deepvariant_2fprotos_2frealigner_2eproto.base,
  &scc_info_Diagnostics_deepvariant_2fprotos_2frealigner_2eproto.base,
  &scc_info_RealignerOptions_deepvariant_2fprotos_2frealigner_2eproto.base,
  &scc_info_WindowSelectorModel_deepvariant_2fprotos_2frealigner_2eproto.base,
  &scc_info_WindowSelectorModel_AlleleCountLinearModel_deepvariant_2fprotos_2frealigner_2eproto.base,
  &scc_info_WindowSelectorModel_VariantReadsThresholdModel_deepvariant_2fprotos_2frealigner_2eproto.base,
  &scc_info_WindowSelectorOptions_deepvariant_2fprotos_2frealigner_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_deepvariant_2fprotos_2frealigner_2eproto_once;
static bool descriptor_table_deepvariant_2fprotos_2frealigner_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_deepvariant_2fprotos_2frealigner_2eproto = {
  &descriptor_table_deepvariant_2fprotos_2frealigner_2eproto_initialized, descriptor_table_protodef_deepvariant_2fprotos_2frealigner_2eproto, "deepvariant/protos/realigner.proto", 2093,
  &descriptor_table_deepvariant_2fprotos_2frealigner_2eproto_once, descriptor_table_deepvariant_2fprotos_2frealigner_2eproto_sccs, descriptor_table_deepvariant_2fprotos_2frealigner_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_deepvariant_2fprotos_2frealigner_2eproto::offsets,
  file_level_metadata_deepvariant_2fprotos_2frealigner_2eproto, 9, file_level_enum_descriptors_deepvariant_2fprotos_2frealigner_2eproto, file_level_service_descriptors_deepvariant_2fprotos_2frealigner_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_deepvariant_2fprotos_2frealigner_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_deepvariant_2fprotos_2frealigner_2eproto), true);
namespace learning {
namespace genomics {
namespace deepvariant {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WindowSelectorModel_ModelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_deepvariant_2fprotos_2frealigner_2eproto);
  return file_level_enum_descriptors_deepvariant_2fprotos_2frealigner_2eproto[0];
}
bool WindowSelectorModel_ModelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WindowSelectorModel_ModelType WindowSelectorModel::UNDEFINED;
constexpr WindowSelectorModel_ModelType WindowSelectorModel::VARIANT_READS;
constexpr WindowSelectorModel_ModelType WindowSelectorModel::ALLELE_COUNT_LINEAR;
constexpr WindowSelectorModel_ModelType WindowSelectorModel::ModelType_MIN;
constexpr WindowSelectorModel_ModelType WindowSelectorModel::ModelType_MAX;
constexpr int WindowSelectorModel::ModelType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void CandidateHaplotypes::InitAsDefaultInstance() {
  ::learning::genomics::deepvariant::_CandidateHaplotypes_default_instance_._instance.get_mutable()->span_ = const_cast< ::nucleus::genomics::v1::Range*>(
      ::nucleus::genomics::v1::Range::internal_default_instance());
}
class CandidateHaplotypes::_Internal {
 public:
  static const ::nucleus::genomics::v1::Range& span(const CandidateHaplotypes* msg);
};

const ::nucleus::genomics::v1::Range&
CandidateHaplotypes::_Internal::span(const CandidateHaplotypes* msg) {
  return *msg->span_;
}
void CandidateHaplotypes::clear_span() {
  if (GetArenaNoVirtual() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
}
CandidateHaplotypes::CandidateHaplotypes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.CandidateHaplotypes)
}
CandidateHaplotypes::CandidateHaplotypes(const CandidateHaplotypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      haplotypes_(from.haplotypes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_span()) {
    span_ = new ::nucleus::genomics::v1::Range(*from.span_);
  } else {
    span_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.CandidateHaplotypes)
}

void CandidateHaplotypes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CandidateHaplotypes_deepvariant_2fprotos_2frealigner_2eproto.base);
  span_ = nullptr;
}

CandidateHaplotypes::~CandidateHaplotypes() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.CandidateHaplotypes)
  SharedDtor();
}

void CandidateHaplotypes::SharedDtor() {
  if (this != internal_default_instance()) delete span_;
}

void CandidateHaplotypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CandidateHaplotypes& CandidateHaplotypes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CandidateHaplotypes_deepvariant_2fprotos_2frealigner_2eproto.base);
  return *internal_default_instance();
}


void CandidateHaplotypes::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.CandidateHaplotypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  haplotypes_.Clear();
  if (GetArenaNoVirtual() == nullptr && span_ != nullptr) {
    delete span_;
  }
  span_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CandidateHaplotypes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .nucleus.genomics.v1.Range span = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_span(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string haplotypes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_haplotypes(), ptr, ctx, "learning.genomics.deepvariant.CandidateHaplotypes.haplotypes");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CandidateHaplotypes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.CandidateHaplotypes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .nucleus.genomics.v1.Range span = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_span()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string haplotypes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_haplotypes()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->haplotypes(this->haplotypes_size() - 1).data(),
            static_cast<int>(this->haplotypes(this->haplotypes_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.CandidateHaplotypes.haplotypes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.CandidateHaplotypes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.CandidateHaplotypes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CandidateHaplotypes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.CandidateHaplotypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nucleus.genomics.v1.Range span = 1;
  if (this->has_span()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::span(this), output);
  }

  // repeated string haplotypes = 2;
  for (int i = 0, n = this->haplotypes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->haplotypes(i).data(), static_cast<int>(this->haplotypes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.CandidateHaplotypes.haplotypes");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->haplotypes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.CandidateHaplotypes)
}

::PROTOBUF_NAMESPACE_ID::uint8* CandidateHaplotypes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.CandidateHaplotypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .nucleus.genomics.v1.Range span = 1;
  if (this->has_span()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::span(this), target);
  }

  // repeated string haplotypes = 2;
  for (int i = 0, n = this->haplotypes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->haplotypes(i).data(), static_cast<int>(this->haplotypes(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.CandidateHaplotypes.haplotypes");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->haplotypes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.CandidateHaplotypes)
  return target;
}

size_t CandidateHaplotypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.CandidateHaplotypes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string haplotypes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->haplotypes_size());
  for (int i = 0, n = this->haplotypes_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->haplotypes(i));
  }

  // .nucleus.genomics.v1.Range span = 1;
  if (this->has_span()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *span_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CandidateHaplotypes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.CandidateHaplotypes)
  GOOGLE_DCHECK_NE(&from, this);
  const CandidateHaplotypes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CandidateHaplotypes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.CandidateHaplotypes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.CandidateHaplotypes)
    MergeFrom(*source);
  }
}

void CandidateHaplotypes::MergeFrom(const CandidateHaplotypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.CandidateHaplotypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  haplotypes_.MergeFrom(from.haplotypes_);
  if (from.has_span()) {
    mutable_span()->::nucleus::genomics::v1::Range::MergeFrom(from.span());
  }
}

void CandidateHaplotypes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.CandidateHaplotypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandidateHaplotypes::CopyFrom(const CandidateHaplotypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.CandidateHaplotypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateHaplotypes::IsInitialized() const {
  return true;
}

void CandidateHaplotypes::InternalSwap(CandidateHaplotypes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  haplotypes_.InternalSwap(CastToBase(&other->haplotypes_));
  swap(span_, other->span_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CandidateHaplotypes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WindowSelectorModel_VariantReadsThresholdModel::InitAsDefaultInstance() {
}
class WindowSelectorModel_VariantReadsThresholdModel::_Internal {
 public:
};

WindowSelectorModel_VariantReadsThresholdModel::WindowSelectorModel_VariantReadsThresholdModel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
}
WindowSelectorModel_VariantReadsThresholdModel::WindowSelectorModel_VariantReadsThresholdModel(const WindowSelectorModel_VariantReadsThresholdModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_num_supporting_reads_, &from.min_num_supporting_reads_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_num_supporting_reads_) -
    reinterpret_cast<char*>(&min_num_supporting_reads_)) + sizeof(max_num_supporting_reads_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
}

void WindowSelectorModel_VariantReadsThresholdModel::SharedCtor() {
  ::memset(&min_num_supporting_reads_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_num_supporting_reads_) -
      reinterpret_cast<char*>(&min_num_supporting_reads_)) + sizeof(max_num_supporting_reads_));
}

WindowSelectorModel_VariantReadsThresholdModel::~WindowSelectorModel_VariantReadsThresholdModel() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
  SharedDtor();
}

void WindowSelectorModel_VariantReadsThresholdModel::SharedDtor() {
}

void WindowSelectorModel_VariantReadsThresholdModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WindowSelectorModel_VariantReadsThresholdModel& WindowSelectorModel_VariantReadsThresholdModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WindowSelectorModel_VariantReadsThresholdModel_deepvariant_2fprotos_2frealigner_2eproto.base);
  return *internal_default_instance();
}


void WindowSelectorModel_VariantReadsThresholdModel::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_num_supporting_reads_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_num_supporting_reads_) -
      reinterpret_cast<char*>(&min_num_supporting_reads_)) + sizeof(max_num_supporting_reads_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WindowSelectorModel_VariantReadsThresholdModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 min_num_supporting_reads = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          min_num_supporting_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_num_supporting_reads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_num_supporting_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WindowSelectorModel_VariantReadsThresholdModel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 min_num_supporting_reads = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_num_supporting_reads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_num_supporting_reads = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_supporting_reads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WindowSelectorModel_VariantReadsThresholdModel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 min_num_supporting_reads = 1;
  if (this->min_num_supporting_reads() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->min_num_supporting_reads(), output);
  }

  // int32 max_num_supporting_reads = 2;
  if (this->max_num_supporting_reads() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->max_num_supporting_reads(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
}

::PROTOBUF_NAMESPACE_ID::uint8* WindowSelectorModel_VariantReadsThresholdModel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 min_num_supporting_reads = 1;
  if (this->min_num_supporting_reads() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->min_num_supporting_reads(), target);
  }

  // int32 max_num_supporting_reads = 2;
  if (this->max_num_supporting_reads() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->max_num_supporting_reads(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
  return target;
}

size_t WindowSelectorModel_VariantReadsThresholdModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 min_num_supporting_reads = 1;
  if (this->min_num_supporting_reads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_num_supporting_reads());
  }

  // int32 max_num_supporting_reads = 2;
  if (this->max_num_supporting_reads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_num_supporting_reads());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WindowSelectorModel_VariantReadsThresholdModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
  GOOGLE_DCHECK_NE(&from, this);
  const WindowSelectorModel_VariantReadsThresholdModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WindowSelectorModel_VariantReadsThresholdModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
    MergeFrom(*source);
  }
}

void WindowSelectorModel_VariantReadsThresholdModel::MergeFrom(const WindowSelectorModel_VariantReadsThresholdModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_num_supporting_reads() != 0) {
    set_min_num_supporting_reads(from.min_num_supporting_reads());
  }
  if (from.max_num_supporting_reads() != 0) {
    set_max_num_supporting_reads(from.max_num_supporting_reads());
  }
}

void WindowSelectorModel_VariantReadsThresholdModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowSelectorModel_VariantReadsThresholdModel::CopyFrom(const WindowSelectorModel_VariantReadsThresholdModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowSelectorModel_VariantReadsThresholdModel::IsInitialized() const {
  return true;
}

void WindowSelectorModel_VariantReadsThresholdModel::InternalSwap(WindowSelectorModel_VariantReadsThresholdModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(min_num_supporting_reads_, other->min_num_supporting_reads_);
  swap(max_num_supporting_reads_, other->max_num_supporting_reads_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WindowSelectorModel_VariantReadsThresholdModel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WindowSelectorModel_AlleleCountLinearModel::InitAsDefaultInstance() {
}
class WindowSelectorModel_AlleleCountLinearModel::_Internal {
 public:
};

WindowSelectorModel_AlleleCountLinearModel::WindowSelectorModel_AlleleCountLinearModel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
}
WindowSelectorModel_AlleleCountLinearModel::WindowSelectorModel_AlleleCountLinearModel(const WindowSelectorModel_AlleleCountLinearModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bias_, &from.bias_,
    static_cast<size_t>(reinterpret_cast<char*>(&decision_boundary_) -
    reinterpret_cast<char*>(&bias_)) + sizeof(decision_boundary_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
}

void WindowSelectorModel_AlleleCountLinearModel::SharedCtor() {
  ::memset(&bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&decision_boundary_) -
      reinterpret_cast<char*>(&bias_)) + sizeof(decision_boundary_));
}

WindowSelectorModel_AlleleCountLinearModel::~WindowSelectorModel_AlleleCountLinearModel() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
  SharedDtor();
}

void WindowSelectorModel_AlleleCountLinearModel::SharedDtor() {
}

void WindowSelectorModel_AlleleCountLinearModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WindowSelectorModel_AlleleCountLinearModel& WindowSelectorModel_AlleleCountLinearModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WindowSelectorModel_AlleleCountLinearModel_deepvariant_2fprotos_2frealigner_2eproto.base);
  return *internal_default_instance();
}


void WindowSelectorModel_AlleleCountLinearModel::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&decision_boundary_) -
      reinterpret_cast<char*>(&bias_)) + sizeof(decision_boundary_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WindowSelectorModel_AlleleCountLinearModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float bias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float coeff_soft_clip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          coeff_soft_clip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float coeff_substitution = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          coeff_substitution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float coeff_insertion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          coeff_insertion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float coeff_deletion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          coeff_deletion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float coeff_reference = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          coeff_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float decision_boundary = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          decision_boundary_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WindowSelectorModel_AlleleCountLinearModel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float bias = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float coeff_soft_clip = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coeff_soft_clip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float coeff_substitution = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coeff_substitution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float coeff_insertion = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coeff_insertion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float coeff_deletion = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coeff_deletion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float coeff_reference = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &coeff_reference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float decision_boundary = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decision_boundary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WindowSelectorModel_AlleleCountLinearModel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float bias = 1;
  if (!(this->bias() <= 0 && this->bias() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->bias(), output);
  }

  // float coeff_soft_clip = 2;
  if (!(this->coeff_soft_clip() <= 0 && this->coeff_soft_clip() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->coeff_soft_clip(), output);
  }

  // float coeff_substitution = 3;
  if (!(this->coeff_substitution() <= 0 && this->coeff_substitution() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->coeff_substitution(), output);
  }

  // float coeff_insertion = 4;
  if (!(this->coeff_insertion() <= 0 && this->coeff_insertion() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->coeff_insertion(), output);
  }

  // float coeff_deletion = 5;
  if (!(this->coeff_deletion() <= 0 && this->coeff_deletion() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->coeff_deletion(), output);
  }

  // float coeff_reference = 6;
  if (!(this->coeff_reference() <= 0 && this->coeff_reference() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->coeff_reference(), output);
  }

  // float decision_boundary = 7;
  if (!(this->decision_boundary() <= 0 && this->decision_boundary() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->decision_boundary(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
}

::PROTOBUF_NAMESPACE_ID::uint8* WindowSelectorModel_AlleleCountLinearModel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float bias = 1;
  if (!(this->bias() <= 0 && this->bias() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->bias(), target);
  }

  // float coeff_soft_clip = 2;
  if (!(this->coeff_soft_clip() <= 0 && this->coeff_soft_clip() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->coeff_soft_clip(), target);
  }

  // float coeff_substitution = 3;
  if (!(this->coeff_substitution() <= 0 && this->coeff_substitution() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->coeff_substitution(), target);
  }

  // float coeff_insertion = 4;
  if (!(this->coeff_insertion() <= 0 && this->coeff_insertion() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->coeff_insertion(), target);
  }

  // float coeff_deletion = 5;
  if (!(this->coeff_deletion() <= 0 && this->coeff_deletion() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->coeff_deletion(), target);
  }

  // float coeff_reference = 6;
  if (!(this->coeff_reference() <= 0 && this->coeff_reference() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->coeff_reference(), target);
  }

  // float decision_boundary = 7;
  if (!(this->decision_boundary() <= 0 && this->decision_boundary() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->decision_boundary(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
  return target;
}

size_t WindowSelectorModel_AlleleCountLinearModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float bias = 1;
  if (!(this->bias() <= 0 && this->bias() >= 0)) {
    total_size += 1 + 4;
  }

  // float coeff_soft_clip = 2;
  if (!(this->coeff_soft_clip() <= 0 && this->coeff_soft_clip() >= 0)) {
    total_size += 1 + 4;
  }

  // float coeff_substitution = 3;
  if (!(this->coeff_substitution() <= 0 && this->coeff_substitution() >= 0)) {
    total_size += 1 + 4;
  }

  // float coeff_insertion = 4;
  if (!(this->coeff_insertion() <= 0 && this->coeff_insertion() >= 0)) {
    total_size += 1 + 4;
  }

  // float coeff_deletion = 5;
  if (!(this->coeff_deletion() <= 0 && this->coeff_deletion() >= 0)) {
    total_size += 1 + 4;
  }

  // float coeff_reference = 6;
  if (!(this->coeff_reference() <= 0 && this->coeff_reference() >= 0)) {
    total_size += 1 + 4;
  }

  // float decision_boundary = 7;
  if (!(this->decision_boundary() <= 0 && this->decision_boundary() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WindowSelectorModel_AlleleCountLinearModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
  GOOGLE_DCHECK_NE(&from, this);
  const WindowSelectorModel_AlleleCountLinearModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WindowSelectorModel_AlleleCountLinearModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
    MergeFrom(*source);
  }
}

void WindowSelectorModel_AlleleCountLinearModel::MergeFrom(const WindowSelectorModel_AlleleCountLinearModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.bias() <= 0 && from.bias() >= 0)) {
    set_bias(from.bias());
  }
  if (!(from.coeff_soft_clip() <= 0 && from.coeff_soft_clip() >= 0)) {
    set_coeff_soft_clip(from.coeff_soft_clip());
  }
  if (!(from.coeff_substitution() <= 0 && from.coeff_substitution() >= 0)) {
    set_coeff_substitution(from.coeff_substitution());
  }
  if (!(from.coeff_insertion() <= 0 && from.coeff_insertion() >= 0)) {
    set_coeff_insertion(from.coeff_insertion());
  }
  if (!(from.coeff_deletion() <= 0 && from.coeff_deletion() >= 0)) {
    set_coeff_deletion(from.coeff_deletion());
  }
  if (!(from.coeff_reference() <= 0 && from.coeff_reference() >= 0)) {
    set_coeff_reference(from.coeff_reference());
  }
  if (!(from.decision_boundary() <= 0 && from.decision_boundary() >= 0)) {
    set_decision_boundary(from.decision_boundary());
  }
}

void WindowSelectorModel_AlleleCountLinearModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowSelectorModel_AlleleCountLinearModel::CopyFrom(const WindowSelectorModel_AlleleCountLinearModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowSelectorModel_AlleleCountLinearModel::IsInitialized() const {
  return true;
}

void WindowSelectorModel_AlleleCountLinearModel::InternalSwap(WindowSelectorModel_AlleleCountLinearModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(bias_, other->bias_);
  swap(coeff_soft_clip_, other->coeff_soft_clip_);
  swap(coeff_substitution_, other->coeff_substitution_);
  swap(coeff_insertion_, other->coeff_insertion_);
  swap(coeff_deletion_, other->coeff_deletion_);
  swap(coeff_reference_, other->coeff_reference_);
  swap(decision_boundary_, other->decision_boundary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WindowSelectorModel_AlleleCountLinearModel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WindowSelectorModel::InitAsDefaultInstance() {
  ::learning::genomics::deepvariant::_WindowSelectorModel_default_instance_.variant_reads_model_ = const_cast< ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel*>(
      ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel::internal_default_instance());
  ::learning::genomics::deepvariant::_WindowSelectorModel_default_instance_.allele_count_linear_model_ = const_cast< ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel*>(
      ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel::internal_default_instance());
}
class WindowSelectorModel::_Internal {
 public:
  static const ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel& variant_reads_model(const WindowSelectorModel* msg);
  static const ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel& allele_count_linear_model(const WindowSelectorModel* msg);
};

const ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel&
WindowSelectorModel::_Internal::variant_reads_model(const WindowSelectorModel* msg) {
  return *msg->model_.variant_reads_model_;
}
const ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel&
WindowSelectorModel::_Internal::allele_count_linear_model(const WindowSelectorModel* msg) {
  return *msg->model_.allele_count_linear_model_;
}
void WindowSelectorModel::set_allocated_variant_reads_model(::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel* variant_reads_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_model();
  if (variant_reads_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      variant_reads_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variant_reads_model, submessage_arena);
    }
    set_has_variant_reads_model();
    model_.variant_reads_model_ = variant_reads_model;
  }
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.WindowSelectorModel.variant_reads_model)
}
void WindowSelectorModel::set_allocated_allele_count_linear_model(::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel* allele_count_linear_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_model();
  if (allele_count_linear_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      allele_count_linear_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allele_count_linear_model, submessage_arena);
    }
    set_has_allele_count_linear_model();
    model_.allele_count_linear_model_ = allele_count_linear_model;
  }
  // @@protoc_insertion_point(field_set_allocated:learning.genomics.deepvariant.WindowSelectorModel.allele_count_linear_model)
}
WindowSelectorModel::WindowSelectorModel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.WindowSelectorModel)
}
WindowSelectorModel::WindowSelectorModel(const WindowSelectorModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_type_ = from.model_type_;
  clear_has_model();
  switch (from.model_case()) {
    case kVariantReadsModel: {
      mutable_variant_reads_model()->::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel::MergeFrom(from.variant_reads_model());
      break;
    }
    case kAlleleCountLinearModel: {
      mutable_allele_count_linear_model()->::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel::MergeFrom(from.allele_count_linear_model());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.WindowSelectorModel)
}

void WindowSelectorModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WindowSelectorModel_deepvariant_2fprotos_2frealigner_2eproto.base);
  model_type_ = 0;
  clear_has_model();
}

WindowSelectorModel::~WindowSelectorModel() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.WindowSelectorModel)
  SharedDtor();
}

void WindowSelectorModel::SharedDtor() {
  if (has_model()) {
    clear_model();
  }
}

void WindowSelectorModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WindowSelectorModel& WindowSelectorModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WindowSelectorModel_deepvariant_2fprotos_2frealigner_2eproto.base);
  return *internal_default_instance();
}


void WindowSelectorModel::clear_model() {
// @@protoc_insertion_point(one_of_clear_start:learning.genomics.deepvariant.WindowSelectorModel)
  switch (model_case()) {
    case kVariantReadsModel: {
      delete model_.variant_reads_model_;
      break;
    }
    case kAlleleCountLinearModel: {
      delete model_.allele_count_linear_model_;
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MODEL_NOT_SET;
}


void WindowSelectorModel::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.WindowSelectorModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_type_ = 0;
  clear_model();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WindowSelectorModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .learning.genomics.deepvariant.WindowSelectorModel.ModelType model_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_model_type(static_cast<::learning::genomics::deepvariant::WindowSelectorModel_ModelType>(val));
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel variant_reads_model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_variant_reads_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel allele_count_linear_model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_allele_count_linear_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WindowSelectorModel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.WindowSelectorModel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .learning.genomics.deepvariant.WindowSelectorModel.ModelType model_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_model_type(static_cast< ::learning::genomics::deepvariant::WindowSelectorModel_ModelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel variant_reads_model = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_variant_reads_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel allele_count_linear_model = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allele_count_linear_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.WindowSelectorModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.WindowSelectorModel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WindowSelectorModel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.WindowSelectorModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .learning.genomics.deepvariant.WindowSelectorModel.ModelType model_type = 1;
  if (this->model_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->model_type(), output);
  }

  // .learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel variant_reads_model = 2;
  if (has_variant_reads_model()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::variant_reads_model(this), output);
  }

  // .learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel allele_count_linear_model = 3;
  if (has_allele_count_linear_model()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::allele_count_linear_model(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.WindowSelectorModel)
}

::PROTOBUF_NAMESPACE_ID::uint8* WindowSelectorModel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.WindowSelectorModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .learning.genomics.deepvariant.WindowSelectorModel.ModelType model_type = 1;
  if (this->model_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->model_type(), target);
  }

  // .learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel variant_reads_model = 2;
  if (has_variant_reads_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::variant_reads_model(this), target);
  }

  // .learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel allele_count_linear_model = 3;
  if (has_allele_count_linear_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::allele_count_linear_model(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.WindowSelectorModel)
  return target;
}

size_t WindowSelectorModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.WindowSelectorModel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .learning.genomics.deepvariant.WindowSelectorModel.ModelType model_type = 1;
  if (this->model_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->model_type());
  }

  switch (model_case()) {
    // .learning.genomics.deepvariant.WindowSelectorModel.VariantReadsThresholdModel variant_reads_model = 2;
    case kVariantReadsModel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_.variant_reads_model_);
      break;
    }
    // .learning.genomics.deepvariant.WindowSelectorModel.AlleleCountLinearModel allele_count_linear_model = 3;
    case kAlleleCountLinearModel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_.allele_count_linear_model_);
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WindowSelectorModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.WindowSelectorModel)
  GOOGLE_DCHECK_NE(&from, this);
  const WindowSelectorModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WindowSelectorModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.WindowSelectorModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.WindowSelectorModel)
    MergeFrom(*source);
  }
}

void WindowSelectorModel::MergeFrom(const WindowSelectorModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.WindowSelectorModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_type() != 0) {
    set_model_type(from.model_type());
  }
  switch (from.model_case()) {
    case kVariantReadsModel: {
      mutable_variant_reads_model()->::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel::MergeFrom(from.variant_reads_model());
      break;
    }
    case kAlleleCountLinearModel: {
      mutable_allele_count_linear_model()->::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel::MergeFrom(from.allele_count_linear_model());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
}

void WindowSelectorModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.WindowSelectorModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowSelectorModel::CopyFrom(const WindowSelectorModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.WindowSelectorModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowSelectorModel::IsInitialized() const {
  return true;
}

void WindowSelectorModel::InternalSwap(WindowSelectorModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(model_type_, other->model_type_);
  swap(model_, other->model_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WindowSelectorModel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WindowSelectorOptions::InitAsDefaultInstance() {
  ::learning::genomics::deepvariant::_WindowSelectorOptions_default_instance_._instance.get_mutable()->window_selector_model_ = const_cast< ::learning::genomics::deepvariant::WindowSelectorModel*>(
      ::learning::genomics::deepvariant::WindowSelectorModel::internal_default_instance());
}
class WindowSelectorOptions::_Internal {
 public:
  static const ::learning::genomics::deepvariant::WindowSelectorModel& window_selector_model(const WindowSelectorOptions* msg);
};

const ::learning::genomics::deepvariant::WindowSelectorModel&
WindowSelectorOptions::_Internal::window_selector_model(const WindowSelectorOptions* msg) {
  return *msg->window_selector_model_;
}
WindowSelectorOptions::WindowSelectorOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.WindowSelectorOptions)
}
WindowSelectorOptions::WindowSelectorOptions(const WindowSelectorOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_window_selector_model()) {
    window_selector_model_ = new ::learning::genomics::deepvariant::WindowSelectorModel(*from.window_selector_model_);
  } else {
    window_selector_model_ = nullptr;
  }
  ::memcpy(&min_num_supporting_reads_, &from.min_num_supporting_reads_,
    static_cast<size_t>(reinterpret_cast<char*>(&keep_legacy_behavior_) -
    reinterpret_cast<char*>(&min_num_supporting_reads_)) + sizeof(keep_legacy_behavior_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.WindowSelectorOptions)
}

void WindowSelectorOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WindowSelectorOptions_deepvariant_2fprotos_2frealigner_2eproto.base);
  ::memset(&window_selector_model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keep_legacy_behavior_) -
      reinterpret_cast<char*>(&window_selector_model_)) + sizeof(keep_legacy_behavior_));
}

WindowSelectorOptions::~WindowSelectorOptions() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.WindowSelectorOptions)
  SharedDtor();
}

void WindowSelectorOptions::SharedDtor() {
  if (this != internal_default_instance()) delete window_selector_model_;
}

void WindowSelectorOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WindowSelectorOptions& WindowSelectorOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WindowSelectorOptions_deepvariant_2fprotos_2frealigner_2eproto.base);
  return *internal_default_instance();
}


void WindowSelectorOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.WindowSelectorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && window_selector_model_ != nullptr) {
    delete window_selector_model_;
  }
  window_selector_model_ = nullptr;
  ::memset(&min_num_supporting_reads_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keep_legacy_behavior_) -
      reinterpret_cast<char*>(&min_num_supporting_reads_)) + sizeof(keep_legacy_behavior_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WindowSelectorOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 min_num_supporting_reads = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          min_num_supporting_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_num_supporting_reads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_num_supporting_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_mapq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          min_mapq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_base_quality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          min_base_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_windows_distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          min_windows_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_window_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 region_expansion_in_bp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          region_expansion_in_bp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.WindowSelectorModel window_selector_model = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_window_selector_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool keep_legacy_behavior = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          keep_legacy_behavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WindowSelectorOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.WindowSelectorOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 min_num_supporting_reads = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_num_supporting_reads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_num_supporting_reads = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_supporting_reads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_mapq = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_mapq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_base_quality = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_base_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_windows_distance = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_windows_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_window_size = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_window_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 region_expansion_in_bp = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &region_expansion_in_bp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.WindowSelectorModel window_selector_model = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_window_selector_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool keep_legacy_behavior = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keep_legacy_behavior_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.WindowSelectorOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.WindowSelectorOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WindowSelectorOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.WindowSelectorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 min_num_supporting_reads = 1;
  if (this->min_num_supporting_reads() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->min_num_supporting_reads(), output);
  }

  // int32 max_num_supporting_reads = 2;
  if (this->max_num_supporting_reads() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->max_num_supporting_reads(), output);
  }

  // int32 min_mapq = 3;
  if (this->min_mapq() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->min_mapq(), output);
  }

  // int32 min_base_quality = 4;
  if (this->min_base_quality() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->min_base_quality(), output);
  }

  // int32 min_windows_distance = 5;
  if (this->min_windows_distance() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->min_windows_distance(), output);
  }

  // int32 max_window_size = 6;
  if (this->max_window_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->max_window_size(), output);
  }

  // int32 region_expansion_in_bp = 7;
  if (this->region_expansion_in_bp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->region_expansion_in_bp(), output);
  }

  // .learning.genomics.deepvariant.WindowSelectorModel window_selector_model = 8;
  if (this->has_window_selector_model()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::window_selector_model(this), output);
  }

  // bool keep_legacy_behavior = 9;
  if (this->keep_legacy_behavior() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->keep_legacy_behavior(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.WindowSelectorOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* WindowSelectorOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.WindowSelectorOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 min_num_supporting_reads = 1;
  if (this->min_num_supporting_reads() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->min_num_supporting_reads(), target);
  }

  // int32 max_num_supporting_reads = 2;
  if (this->max_num_supporting_reads() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->max_num_supporting_reads(), target);
  }

  // int32 min_mapq = 3;
  if (this->min_mapq() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->min_mapq(), target);
  }

  // int32 min_base_quality = 4;
  if (this->min_base_quality() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->min_base_quality(), target);
  }

  // int32 min_windows_distance = 5;
  if (this->min_windows_distance() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->min_windows_distance(), target);
  }

  // int32 max_window_size = 6;
  if (this->max_window_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->max_window_size(), target);
  }

  // int32 region_expansion_in_bp = 7;
  if (this->region_expansion_in_bp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->region_expansion_in_bp(), target);
  }

  // .learning.genomics.deepvariant.WindowSelectorModel window_selector_model = 8;
  if (this->has_window_selector_model()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::window_selector_model(this), target);
  }

  // bool keep_legacy_behavior = 9;
  if (this->keep_legacy_behavior() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->keep_legacy_behavior(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.WindowSelectorOptions)
  return target;
}

size_t WindowSelectorOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.WindowSelectorOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .learning.genomics.deepvariant.WindowSelectorModel window_selector_model = 8;
  if (this->has_window_selector_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *window_selector_model_);
  }

  // int32 min_num_supporting_reads = 1;
  if (this->min_num_supporting_reads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_num_supporting_reads());
  }

  // int32 max_num_supporting_reads = 2;
  if (this->max_num_supporting_reads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_num_supporting_reads());
  }

  // int32 min_mapq = 3;
  if (this->min_mapq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_mapq());
  }

  // int32 min_base_quality = 4;
  if (this->min_base_quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_base_quality());
  }

  // int32 min_windows_distance = 5;
  if (this->min_windows_distance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_windows_distance());
  }

  // int32 max_window_size = 6;
  if (this->max_window_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_window_size());
  }

  // int32 region_expansion_in_bp = 7;
  if (this->region_expansion_in_bp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->region_expansion_in_bp());
  }

  // bool keep_legacy_behavior = 9;
  if (this->keep_legacy_behavior() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WindowSelectorOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.WindowSelectorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const WindowSelectorOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WindowSelectorOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.WindowSelectorOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.WindowSelectorOptions)
    MergeFrom(*source);
  }
}

void WindowSelectorOptions::MergeFrom(const WindowSelectorOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.WindowSelectorOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_window_selector_model()) {
    mutable_window_selector_model()->::learning::genomics::deepvariant::WindowSelectorModel::MergeFrom(from.window_selector_model());
  }
  if (from.min_num_supporting_reads() != 0) {
    set_min_num_supporting_reads(from.min_num_supporting_reads());
  }
  if (from.max_num_supporting_reads() != 0) {
    set_max_num_supporting_reads(from.max_num_supporting_reads());
  }
  if (from.min_mapq() != 0) {
    set_min_mapq(from.min_mapq());
  }
  if (from.min_base_quality() != 0) {
    set_min_base_quality(from.min_base_quality());
  }
  if (from.min_windows_distance() != 0) {
    set_min_windows_distance(from.min_windows_distance());
  }
  if (from.max_window_size() != 0) {
    set_max_window_size(from.max_window_size());
  }
  if (from.region_expansion_in_bp() != 0) {
    set_region_expansion_in_bp(from.region_expansion_in_bp());
  }
  if (from.keep_legacy_behavior() != 0) {
    set_keep_legacy_behavior(from.keep_legacy_behavior());
  }
}

void WindowSelectorOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.WindowSelectorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindowSelectorOptions::CopyFrom(const WindowSelectorOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.WindowSelectorOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowSelectorOptions::IsInitialized() const {
  return true;
}

void WindowSelectorOptions::InternalSwap(WindowSelectorOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(window_selector_model_, other->window_selector_model_);
  swap(min_num_supporting_reads_, other->min_num_supporting_reads_);
  swap(max_num_supporting_reads_, other->max_num_supporting_reads_);
  swap(min_mapq_, other->min_mapq_);
  swap(min_base_quality_, other->min_base_quality_);
  swap(min_windows_distance_, other->min_windows_distance_);
  swap(max_window_size_, other->max_window_size_);
  swap(region_expansion_in_bp_, other->region_expansion_in_bp_);
  swap(keep_legacy_behavior_, other->keep_legacy_behavior_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WindowSelectorOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeBruijnGraphOptions::InitAsDefaultInstance() {
}
class DeBruijnGraphOptions::_Internal {
 public:
};

DeBruijnGraphOptions::DeBruijnGraphOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.DeBruijnGraphOptions)
}
DeBruijnGraphOptions::DeBruijnGraphOptions(const DeBruijnGraphOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_k_, &from.min_k_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_num_paths_) -
    reinterpret_cast<char*>(&min_k_)) + sizeof(max_num_paths_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.DeBruijnGraphOptions)
}

void DeBruijnGraphOptions::SharedCtor() {
  ::memset(&min_k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_num_paths_) -
      reinterpret_cast<char*>(&min_k_)) + sizeof(max_num_paths_));
}

DeBruijnGraphOptions::~DeBruijnGraphOptions() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.DeBruijnGraphOptions)
  SharedDtor();
}

void DeBruijnGraphOptions::SharedDtor() {
}

void DeBruijnGraphOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeBruijnGraphOptions& DeBruijnGraphOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeBruijnGraphOptions_deepvariant_2fprotos_2frealigner_2eproto.base);
  return *internal_default_instance();
}


void DeBruijnGraphOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.DeBruijnGraphOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_num_paths_) -
      reinterpret_cast<char*>(&min_k_)) + sizeof(max_num_paths_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeBruijnGraphOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 min_k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          min_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_k = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 step_k = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          step_k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_mapq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          min_mapq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_base_quality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          min_base_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_edge_weight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          min_edge_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_num_paths = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_num_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeBruijnGraphOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.DeBruijnGraphOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 min_k = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_k = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 step_k = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_mapq = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_mapq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_base_quality = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_base_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 min_edge_weight = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_edge_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_num_paths = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_paths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.DeBruijnGraphOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.DeBruijnGraphOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeBruijnGraphOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.DeBruijnGraphOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 min_k = 1;
  if (this->min_k() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->min_k(), output);
  }

  // int32 max_k = 2;
  if (this->max_k() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->max_k(), output);
  }

  // int32 step_k = 3;
  if (this->step_k() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->step_k(), output);
  }

  // int32 min_mapq = 4;
  if (this->min_mapq() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->min_mapq(), output);
  }

  // int32 min_base_quality = 5;
  if (this->min_base_quality() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->min_base_quality(), output);
  }

  // int32 min_edge_weight = 6;
  if (this->min_edge_weight() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->min_edge_weight(), output);
  }

  // int32 max_num_paths = 7;
  if (this->max_num_paths() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->max_num_paths(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.DeBruijnGraphOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* DeBruijnGraphOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.DeBruijnGraphOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 min_k = 1;
  if (this->min_k() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->min_k(), target);
  }

  // int32 max_k = 2;
  if (this->max_k() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->max_k(), target);
  }

  // int32 step_k = 3;
  if (this->step_k() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->step_k(), target);
  }

  // int32 min_mapq = 4;
  if (this->min_mapq() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->min_mapq(), target);
  }

  // int32 min_base_quality = 5;
  if (this->min_base_quality() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->min_base_quality(), target);
  }

  // int32 min_edge_weight = 6;
  if (this->min_edge_weight() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->min_edge_weight(), target);
  }

  // int32 max_num_paths = 7;
  if (this->max_num_paths() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->max_num_paths(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.DeBruijnGraphOptions)
  return target;
}

size_t DeBruijnGraphOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.DeBruijnGraphOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 min_k = 1;
  if (this->min_k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_k());
  }

  // int32 max_k = 2;
  if (this->max_k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_k());
  }

  // int32 step_k = 3;
  if (this->step_k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->step_k());
  }

  // int32 min_mapq = 4;
  if (this->min_mapq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_mapq());
  }

  // int32 min_base_quality = 5;
  if (this->min_base_quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_base_quality());
  }

  // int32 min_edge_weight = 6;
  if (this->min_edge_weight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->min_edge_weight());
  }

  // int32 max_num_paths = 7;
  if (this->max_num_paths() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_num_paths());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeBruijnGraphOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.DeBruijnGraphOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const DeBruijnGraphOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeBruijnGraphOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.DeBruijnGraphOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.DeBruijnGraphOptions)
    MergeFrom(*source);
  }
}

void DeBruijnGraphOptions::MergeFrom(const DeBruijnGraphOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.DeBruijnGraphOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_k() != 0) {
    set_min_k(from.min_k());
  }
  if (from.max_k() != 0) {
    set_max_k(from.max_k());
  }
  if (from.step_k() != 0) {
    set_step_k(from.step_k());
  }
  if (from.min_mapq() != 0) {
    set_min_mapq(from.min_mapq());
  }
  if (from.min_base_quality() != 0) {
    set_min_base_quality(from.min_base_quality());
  }
  if (from.min_edge_weight() != 0) {
    set_min_edge_weight(from.min_edge_weight());
  }
  if (from.max_num_paths() != 0) {
    set_max_num_paths(from.max_num_paths());
  }
}

void DeBruijnGraphOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.DeBruijnGraphOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeBruijnGraphOptions::CopyFrom(const DeBruijnGraphOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.DeBruijnGraphOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeBruijnGraphOptions::IsInitialized() const {
  return true;
}

void DeBruijnGraphOptions::InternalSwap(DeBruijnGraphOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(min_k_, other->min_k_);
  swap(max_k_, other->max_k_);
  swap(step_k_, other->step_k_);
  swap(min_mapq_, other->min_mapq_);
  swap(min_base_quality_, other->min_base_quality_);
  swap(min_edge_weight_, other->min_edge_weight_);
  swap(max_num_paths_, other->max_num_paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeBruijnGraphOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlignerOptions::InitAsDefaultInstance() {
}
class AlignerOptions::_Internal {
 public:
};

AlignerOptions::AlignerOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.AlignerOptions)
}
AlignerOptions::AlignerOptions(const AlignerOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_, &from.match_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_alignment_) -
    reinterpret_cast<char*>(&match_)) + sizeof(force_alignment_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.AlignerOptions)
}

void AlignerOptions::SharedCtor() {
  ::memset(&match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_alignment_) -
      reinterpret_cast<char*>(&match_)) + sizeof(force_alignment_));
}

AlignerOptions::~AlignerOptions() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.AlignerOptions)
  SharedDtor();
}

void AlignerOptions::SharedDtor() {
}

void AlignerOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlignerOptions& AlignerOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlignerOptions_deepvariant_2fprotos_2frealigner_2eproto.base);
  return *internal_default_instance();
}


void AlignerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.AlignerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_alignment_) -
      reinterpret_cast<char*>(&match_)) + sizeof(force_alignment_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AlignerOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mismatch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          mismatch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gap_open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gap_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gap_extend = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gap_extend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 k = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float error_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 read_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          read_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 kmer_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          kmer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_num_of_mismatches = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          max_num_of_mismatches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double realignment_similarity_threshold = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          realignment_similarity_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool force_alignment = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          force_alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AlignerOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.AlignerOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 match = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mismatch = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mismatch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gap_open = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &gap_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gap_extend = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &gap_extend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 k = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &k_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float error_rate = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &error_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 read_size = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &read_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 kmer_size = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &kmer_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_num_of_mismatches = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_num_of_mismatches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double realignment_similarity_threshold = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &realignment_similarity_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool force_alignment = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_alignment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.AlignerOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.AlignerOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AlignerOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.AlignerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 match = 1;
  if (this->match() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->match(), output);
  }

  // int32 mismatch = 2;
  if (this->mismatch() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->mismatch(), output);
  }

  // int32 gap_open = 3;
  if (this->gap_open() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->gap_open(), output);
  }

  // int32 gap_extend = 4;
  if (this->gap_extend() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->gap_extend(), output);
  }

  // int32 k = 5;
  if (this->k() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->k(), output);
  }

  // float error_rate = 6;
  if (!(this->error_rate() <= 0 && this->error_rate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->error_rate(), output);
  }

  // int32 read_size = 8;
  if (this->read_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->read_size(), output);
  }

  // int32 kmer_size = 9;
  if (this->kmer_size() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->kmer_size(), output);
  }

  // int32 max_num_of_mismatches = 10;
  if (this->max_num_of_mismatches() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->max_num_of_mismatches(), output);
  }

  // double realignment_similarity_threshold = 11;
  if (!(this->realignment_similarity_threshold() <= 0 && this->realignment_similarity_threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->realignment_similarity_threshold(), output);
  }

  // bool force_alignment = 12;
  if (this->force_alignment() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->force_alignment(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.AlignerOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* AlignerOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.AlignerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 match = 1;
  if (this->match() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->match(), target);
  }

  // int32 mismatch = 2;
  if (this->mismatch() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->mismatch(), target);
  }

  // int32 gap_open = 3;
  if (this->gap_open() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->gap_open(), target);
  }

  // int32 gap_extend = 4;
  if (this->gap_extend() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->gap_extend(), target);
  }

  // int32 k = 5;
  if (this->k() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->k(), target);
  }

  // float error_rate = 6;
  if (!(this->error_rate() <= 0 && this->error_rate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->error_rate(), target);
  }

  // int32 read_size = 8;
  if (this->read_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->read_size(), target);
  }

  // int32 kmer_size = 9;
  if (this->kmer_size() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->kmer_size(), target);
  }

  // int32 max_num_of_mismatches = 10;
  if (this->max_num_of_mismatches() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->max_num_of_mismatches(), target);
  }

  // double realignment_similarity_threshold = 11;
  if (!(this->realignment_similarity_threshold() <= 0 && this->realignment_similarity_threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->realignment_similarity_threshold(), target);
  }

  // bool force_alignment = 12;
  if (this->force_alignment() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->force_alignment(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.AlignerOptions)
  return target;
}

size_t AlignerOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.AlignerOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 match = 1;
  if (this->match() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->match());
  }

  // int32 mismatch = 2;
  if (this->mismatch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mismatch());
  }

  // int32 gap_open = 3;
  if (this->gap_open() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->gap_open());
  }

  // int32 gap_extend = 4;
  if (this->gap_extend() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->gap_extend());
  }

  // int32 k = 5;
  if (this->k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->k());
  }

  // float error_rate = 6;
  if (!(this->error_rate() <= 0 && this->error_rate() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 read_size = 8;
  if (this->read_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->read_size());
  }

  // int32 kmer_size = 9;
  if (this->kmer_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->kmer_size());
  }

  // double realignment_similarity_threshold = 11;
  if (!(this->realignment_similarity_threshold() <= 0 && this->realignment_similarity_threshold() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 max_num_of_mismatches = 10;
  if (this->max_num_of_mismatches() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->max_num_of_mismatches());
  }

  // bool force_alignment = 12;
  if (this->force_alignment() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlignerOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.AlignerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const AlignerOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlignerOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.AlignerOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.AlignerOptions)
    MergeFrom(*source);
  }
}

void AlignerOptions::MergeFrom(const AlignerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.AlignerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.match() != 0) {
    set_match(from.match());
  }
  if (from.mismatch() != 0) {
    set_mismatch(from.mismatch());
  }
  if (from.gap_open() != 0) {
    set_gap_open(from.gap_open());
  }
  if (from.gap_extend() != 0) {
    set_gap_extend(from.gap_extend());
  }
  if (from.k() != 0) {
    set_k(from.k());
  }
  if (!(from.error_rate() <= 0 && from.error_rate() >= 0)) {
    set_error_rate(from.error_rate());
  }
  if (from.read_size() != 0) {
    set_read_size(from.read_size());
  }
  if (from.kmer_size() != 0) {
    set_kmer_size(from.kmer_size());
  }
  if (!(from.realignment_similarity_threshold() <= 0 && from.realignment_similarity_threshold() >= 0)) {
    set_realignment_similarity_threshold(from.realignment_similarity_threshold());
  }
  if (from.max_num_of_mismatches() != 0) {
    set_max_num_of_mismatches(from.max_num_of_mismatches());
  }
  if (from.force_alignment() != 0) {
    set_force_alignment(from.force_alignment());
  }
}

void AlignerOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.AlignerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlignerOptions::CopyFrom(const AlignerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.AlignerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlignerOptions::IsInitialized() const {
  return true;
}

void AlignerOptions::InternalSwap(AlignerOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(match_, other->match_);
  swap(mismatch_, other->mismatch_);
  swap(gap_open_, other->gap_open_);
  swap(gap_extend_, other->gap_extend_);
  swap(k_, other->k_);
  swap(error_rate_, other->error_rate_);
  swap(read_size_, other->read_size_);
  swap(kmer_size_, other->kmer_size_);
  swap(realignment_similarity_threshold_, other->realignment_similarity_threshold_);
  swap(max_num_of_mismatches_, other->max_num_of_mismatches_);
  swap(force_alignment_, other->force_alignment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlignerOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Diagnostics::InitAsDefaultInstance() {
}
class Diagnostics::_Internal {
 public:
};

Diagnostics::Diagnostics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.Diagnostics)
}
Diagnostics::Diagnostics(const Diagnostics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.output_root().empty()) {
    output_root_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_root_);
  }
  ::memcpy(&enabled_, &from.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&emit_realigned_reads_) -
    reinterpret_cast<char*>(&enabled_)) + sizeof(emit_realigned_reads_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.Diagnostics)
}

void Diagnostics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Diagnostics_deepvariant_2fprotos_2frealigner_2eproto.base);
  output_root_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&emit_realigned_reads_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(emit_realigned_reads_));
}

Diagnostics::~Diagnostics() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.Diagnostics)
  SharedDtor();
}

void Diagnostics::SharedDtor() {
  output_root_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Diagnostics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Diagnostics& Diagnostics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Diagnostics_deepvariant_2fprotos_2frealigner_2eproto.base);
  return *internal_default_instance();
}


void Diagnostics::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.Diagnostics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_root_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&emit_realigned_reads_) -
      reinterpret_cast<char*>(&enabled_)) + sizeof(emit_realigned_reads_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Diagnostics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string output_root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_output_root(), ptr, ctx, "learning.genomics.deepvariant.Diagnostics.output_root");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool emit_realigned_reads = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          emit_realigned_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Diagnostics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.Diagnostics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string output_root = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_output_root()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->output_root().data(), static_cast<int>(this->output_root().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "learning.genomics.deepvariant.Diagnostics.output_root"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool emit_realigned_reads = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emit_realigned_reads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.Diagnostics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.Diagnostics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Diagnostics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.Diagnostics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }

  // string output_root = 2;
  if (this->output_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->output_root().data(), static_cast<int>(this->output_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.Diagnostics.output_root");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->output_root(), output);
  }

  // bool emit_realigned_reads = 3;
  if (this->emit_realigned_reads() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->emit_realigned_reads(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.Diagnostics)
}

::PROTOBUF_NAMESPACE_ID::uint8* Diagnostics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.Diagnostics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }

  // string output_root = 2;
  if (this->output_root().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->output_root().data(), static_cast<int>(this->output_root().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "learning.genomics.deepvariant.Diagnostics.output_root");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->output_root(), target);
  }

  // bool emit_realigned_reads = 3;
  if (this->emit_realigned_reads() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->emit_realigned_reads(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.Diagnostics)
  return target;
}

size_t Diagnostics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.Diagnostics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string output_root = 2;
  if (this->output_root().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->output_root());
  }

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool emit_realigned_reads = 3;
  if (this->emit_realigned_reads() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Diagnostics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.Diagnostics)
  GOOGLE_DCHECK_NE(&from, this);
  const Diagnostics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Diagnostics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.Diagnostics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.Diagnostics)
    MergeFrom(*source);
  }
}

void Diagnostics::MergeFrom(const Diagnostics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.Diagnostics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.output_root().size() > 0) {

    output_root_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_root_);
  }
  if (from.enabled() != 0) {
    set_enabled(from.enabled());
  }
  if (from.emit_realigned_reads() != 0) {
    set_emit_realigned_reads(from.emit_realigned_reads());
  }
}

void Diagnostics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.Diagnostics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diagnostics::CopyFrom(const Diagnostics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.Diagnostics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnostics::IsInitialized() const {
  return true;
}

void Diagnostics::InternalSwap(Diagnostics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  output_root_.Swap(&other->output_root_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(enabled_, other->enabled_);
  swap(emit_realigned_reads_, other->emit_realigned_reads_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Diagnostics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RealignerOptions::InitAsDefaultInstance() {
  ::learning::genomics::deepvariant::_RealignerOptions_default_instance_._instance.get_mutable()->ws_config_ = const_cast< ::learning::genomics::deepvariant::WindowSelectorOptions*>(
      ::learning::genomics::deepvariant::WindowSelectorOptions::internal_default_instance());
  ::learning::genomics::deepvariant::_RealignerOptions_default_instance_._instance.get_mutable()->dbg_config_ = const_cast< ::learning::genomics::deepvariant::DeBruijnGraphOptions*>(
      ::learning::genomics::deepvariant::DeBruijnGraphOptions::internal_default_instance());
  ::learning::genomics::deepvariant::_RealignerOptions_default_instance_._instance.get_mutable()->aln_config_ = const_cast< ::learning::genomics::deepvariant::AlignerOptions*>(
      ::learning::genomics::deepvariant::AlignerOptions::internal_default_instance());
  ::learning::genomics::deepvariant::_RealignerOptions_default_instance_._instance.get_mutable()->diagnostics_ = const_cast< ::learning::genomics::deepvariant::Diagnostics*>(
      ::learning::genomics::deepvariant::Diagnostics::internal_default_instance());
}
class RealignerOptions::_Internal {
 public:
  static const ::learning::genomics::deepvariant::WindowSelectorOptions& ws_config(const RealignerOptions* msg);
  static const ::learning::genomics::deepvariant::DeBruijnGraphOptions& dbg_config(const RealignerOptions* msg);
  static const ::learning::genomics::deepvariant::AlignerOptions& aln_config(const RealignerOptions* msg);
  static const ::learning::genomics::deepvariant::Diagnostics& diagnostics(const RealignerOptions* msg);
};

const ::learning::genomics::deepvariant::WindowSelectorOptions&
RealignerOptions::_Internal::ws_config(const RealignerOptions* msg) {
  return *msg->ws_config_;
}
const ::learning::genomics::deepvariant::DeBruijnGraphOptions&
RealignerOptions::_Internal::dbg_config(const RealignerOptions* msg) {
  return *msg->dbg_config_;
}
const ::learning::genomics::deepvariant::AlignerOptions&
RealignerOptions::_Internal::aln_config(const RealignerOptions* msg) {
  return *msg->aln_config_;
}
const ::learning::genomics::deepvariant::Diagnostics&
RealignerOptions::_Internal::diagnostics(const RealignerOptions* msg) {
  return *msg->diagnostics_;
}
RealignerOptions::RealignerOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:learning.genomics.deepvariant.RealignerOptions)
}
RealignerOptions::RealignerOptions(const RealignerOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ws_config()) {
    ws_config_ = new ::learning::genomics::deepvariant::WindowSelectorOptions(*from.ws_config_);
  } else {
    ws_config_ = nullptr;
  }
  if (from.has_dbg_config()) {
    dbg_config_ = new ::learning::genomics::deepvariant::DeBruijnGraphOptions(*from.dbg_config_);
  } else {
    dbg_config_ = nullptr;
  }
  if (from.has_aln_config()) {
    aln_config_ = new ::learning::genomics::deepvariant::AlignerOptions(*from.aln_config_);
  } else {
    aln_config_ = nullptr;
  }
  if (from.has_diagnostics()) {
    diagnostics_ = new ::learning::genomics::deepvariant::Diagnostics(*from.diagnostics_);
  } else {
    diagnostics_ = nullptr;
  }
  ::memcpy(&split_skip_reads_, &from.split_skip_reads_,
    static_cast<size_t>(reinterpret_cast<char*>(&normalize_reads_) -
    reinterpret_cast<char*>(&split_skip_reads_)) + sizeof(normalize_reads_));
  // @@protoc_insertion_point(copy_constructor:learning.genomics.deepvariant.RealignerOptions)
}

void RealignerOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RealignerOptions_deepvariant_2fprotos_2frealigner_2eproto.base);
  ::memset(&ws_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&normalize_reads_) -
      reinterpret_cast<char*>(&ws_config_)) + sizeof(normalize_reads_));
}

RealignerOptions::~RealignerOptions() {
  // @@protoc_insertion_point(destructor:learning.genomics.deepvariant.RealignerOptions)
  SharedDtor();
}

void RealignerOptions::SharedDtor() {
  if (this != internal_default_instance()) delete ws_config_;
  if (this != internal_default_instance()) delete dbg_config_;
  if (this != internal_default_instance()) delete aln_config_;
  if (this != internal_default_instance()) delete diagnostics_;
}

void RealignerOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RealignerOptions& RealignerOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RealignerOptions_deepvariant_2fprotos_2frealigner_2eproto.base);
  return *internal_default_instance();
}


void RealignerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:learning.genomics.deepvariant.RealignerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ws_config_ != nullptr) {
    delete ws_config_;
  }
  ws_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dbg_config_ != nullptr) {
    delete dbg_config_;
  }
  dbg_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && aln_config_ != nullptr) {
    delete aln_config_;
  }
  aln_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && diagnostics_ != nullptr) {
    delete diagnostics_;
  }
  diagnostics_ = nullptr;
  ::memset(&split_skip_reads_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&normalize_reads_) -
      reinterpret_cast<char*>(&split_skip_reads_)) + sizeof(normalize_reads_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RealignerOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .learning.genomics.deepvariant.WindowSelectorOptions ws_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ws_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.DeBruijnGraphOptions dbg_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_dbg_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.AlignerOptions aln_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_aln_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .learning.genomics.deepvariant.Diagnostics diagnostics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_diagnostics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool split_skip_reads = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          split_skip_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool normalize_reads = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          normalize_reads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RealignerOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:learning.genomics.deepvariant.RealignerOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .learning.genomics.deepvariant.WindowSelectorOptions ws_config = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ws_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.DeBruijnGraphOptions dbg_config = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dbg_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.AlignerOptions aln_config = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_aln_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .learning.genomics.deepvariant.Diagnostics diagnostics = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_diagnostics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool split_skip_reads = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &split_skip_reads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool normalize_reads = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_reads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:learning.genomics.deepvariant.RealignerOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:learning.genomics.deepvariant.RealignerOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RealignerOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:learning.genomics.deepvariant.RealignerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .learning.genomics.deepvariant.WindowSelectorOptions ws_config = 1;
  if (this->has_ws_config()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::ws_config(this), output);
  }

  // .learning.genomics.deepvariant.DeBruijnGraphOptions dbg_config = 2;
  if (this->has_dbg_config()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::dbg_config(this), output);
  }

  // .learning.genomics.deepvariant.AlignerOptions aln_config = 3;
  if (this->has_aln_config()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::aln_config(this), output);
  }

  // .learning.genomics.deepvariant.Diagnostics diagnostics = 4;
  if (this->has_diagnostics()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::diagnostics(this), output);
  }

  // bool split_skip_reads = 5;
  if (this->split_skip_reads() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->split_skip_reads(), output);
  }

  // bool normalize_reads = 6;
  if (this->normalize_reads() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->normalize_reads(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:learning.genomics.deepvariant.RealignerOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* RealignerOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:learning.genomics.deepvariant.RealignerOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .learning.genomics.deepvariant.WindowSelectorOptions ws_config = 1;
  if (this->has_ws_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::ws_config(this), target);
  }

  // .learning.genomics.deepvariant.DeBruijnGraphOptions dbg_config = 2;
  if (this->has_dbg_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::dbg_config(this), target);
  }

  // .learning.genomics.deepvariant.AlignerOptions aln_config = 3;
  if (this->has_aln_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::aln_config(this), target);
  }

  // .learning.genomics.deepvariant.Diagnostics diagnostics = 4;
  if (this->has_diagnostics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::diagnostics(this), target);
  }

  // bool split_skip_reads = 5;
  if (this->split_skip_reads() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->split_skip_reads(), target);
  }

  // bool normalize_reads = 6;
  if (this->normalize_reads() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->normalize_reads(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:learning.genomics.deepvariant.RealignerOptions)
  return target;
}

size_t RealignerOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:learning.genomics.deepvariant.RealignerOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .learning.genomics.deepvariant.WindowSelectorOptions ws_config = 1;
  if (this->has_ws_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ws_config_);
  }

  // .learning.genomics.deepvariant.DeBruijnGraphOptions dbg_config = 2;
  if (this->has_dbg_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dbg_config_);
  }

  // .learning.genomics.deepvariant.AlignerOptions aln_config = 3;
  if (this->has_aln_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *aln_config_);
  }

  // .learning.genomics.deepvariant.Diagnostics diagnostics = 4;
  if (this->has_diagnostics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diagnostics_);
  }

  // bool split_skip_reads = 5;
  if (this->split_skip_reads() != 0) {
    total_size += 1 + 1;
  }

  // bool normalize_reads = 6;
  if (this->normalize_reads() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RealignerOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:learning.genomics.deepvariant.RealignerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const RealignerOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RealignerOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:learning.genomics.deepvariant.RealignerOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:learning.genomics.deepvariant.RealignerOptions)
    MergeFrom(*source);
  }
}

void RealignerOptions::MergeFrom(const RealignerOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:learning.genomics.deepvariant.RealignerOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ws_config()) {
    mutable_ws_config()->::learning::genomics::deepvariant::WindowSelectorOptions::MergeFrom(from.ws_config());
  }
  if (from.has_dbg_config()) {
    mutable_dbg_config()->::learning::genomics::deepvariant::DeBruijnGraphOptions::MergeFrom(from.dbg_config());
  }
  if (from.has_aln_config()) {
    mutable_aln_config()->::learning::genomics::deepvariant::AlignerOptions::MergeFrom(from.aln_config());
  }
  if (from.has_diagnostics()) {
    mutable_diagnostics()->::learning::genomics::deepvariant::Diagnostics::MergeFrom(from.diagnostics());
  }
  if (from.split_skip_reads() != 0) {
    set_split_skip_reads(from.split_skip_reads());
  }
  if (from.normalize_reads() != 0) {
    set_normalize_reads(from.normalize_reads());
  }
}

void RealignerOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:learning.genomics.deepvariant.RealignerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealignerOptions::CopyFrom(const RealignerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:learning.genomics.deepvariant.RealignerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealignerOptions::IsInitialized() const {
  return true;
}

void RealignerOptions::InternalSwap(RealignerOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ws_config_, other->ws_config_);
  swap(dbg_config_, other->dbg_config_);
  swap(aln_config_, other->aln_config_);
  swap(diagnostics_, other->diagnostics_);
  swap(split_skip_reads_, other->split_skip_reads_);
  swap(normalize_reads_, other->normalize_reads_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RealignerOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace deepvariant
}  // namespace genomics
}  // namespace learning
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::CandidateHaplotypes* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::CandidateHaplotypes >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::CandidateHaplotypes >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::WindowSelectorModel_VariantReadsThresholdModel >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::WindowSelectorModel_AlleleCountLinearModel >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::WindowSelectorModel* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::WindowSelectorModel >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::WindowSelectorModel >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::WindowSelectorOptions* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::WindowSelectorOptions >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::WindowSelectorOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::DeBruijnGraphOptions* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::DeBruijnGraphOptions >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::DeBruijnGraphOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::AlignerOptions* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::AlignerOptions >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::AlignerOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::Diagnostics* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::Diagnostics >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::Diagnostics >(arena);
}
template<> PROTOBUF_NOINLINE ::learning::genomics::deepvariant::RealignerOptions* Arena::CreateMaybeMessage< ::learning::genomics::deepvariant::RealignerOptions >(Arena* arena) {
  return Arena::CreateInternal< ::learning::genomics::deepvariant::RealignerOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
